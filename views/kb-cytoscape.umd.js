(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('jquery')) :
  typeof define === 'function' && define.amd ? define(['jquery'], factory) :
  (global = global || self, global.initKbCytoscape = factory(global.$));
}(this, (function ($) { 'use strict';

  $ = $ && Object.prototype.hasOwnProperty.call($, 'default') ? $['default'] : $;

  let array8 = arrayUntyped,
      array16 = arrayUntyped,
      array32 = arrayUntyped,
      arrayLengthen = arrayLengthenUntyped,
      arrayWiden = arrayWidenUntyped;
  if (typeof Uint8Array !== "undefined") {
    array8 = function(n) { return new Uint8Array(n); };
    array16 = function(n) { return new Uint16Array(n); };
    array32 = function(n) { return new Uint32Array(n); };

    arrayLengthen = function(array, length) {
      if (array.length >= length) return array;
      var copy = new array.constructor(length);
      copy.set(array);
      return copy;
    };

    arrayWiden = function(array, width) {
      var copy;
      switch (width) {
        case 16: copy = array16(array.length); break;
        case 32: copy = array32(array.length); break;
        default: throw new Error("invalid array width!");
      }
      copy.set(array);
      return copy;
    };
  }

  function arrayUntyped(n) {
    var array = new Array(n), i = -1;
    while (++i < n) array[i] = 0;
    return array;
  }

  function arrayLengthenUntyped(array, length) {
    var n = array.length;
    while (n < length) array[n++] = 0;
    return array;
  }

  function arrayWidenUntyped(array, width) {
    if (width > 32) throw new Error("invalid array width!");
    return array;
  }

  // An arbitrarily-wide array of bitmasks
  function bitarray(n) {
    this.length = n;
    this.subarrays = 1;
    this.width = 8;
    this.masks = {
      0: 0
    };

    this[0] = array8(n);
  }

  bitarray.prototype.lengthen = function(n) {
    var i, len;
    for (i = 0, len = this.subarrays; i < len; ++i) {
      this[i] = arrayLengthen(this[i], n);
    }
    this.length = n;
  };

  // Reserve a new bit index in the array, returns {offset, one}
  bitarray.prototype.add = function() {
    var m, w, one, i, len;

    for (i = 0, len = this.subarrays; i < len; ++i) {
      m = this.masks[i];
      w = this.width - (32 * i);
      // isolate the rightmost zero bit and return it as an unsigned int of 32 bits, if NaN or -1, return a 0 
      one = (~m & (m + 1)) >>> 0;

      if (w >= 32 && !one) {
        continue;
      }

      if (w < 32 && (one & (1 << w))) {
        // widen this subarray
        this[i] = arrayWiden(this[i], w <<= 1);
        this.width = 32 * i + w;
      }

      this.masks[i] |= one;

      return {
        offset: i,
        one: one
      };
    }

    // add a new subarray
    this[this.subarrays] = array8(this.length);
    this.masks[this.subarrays] = 1;
    this.width += 8;
    return {
      offset: this.subarrays++,
      one: 1
    };
  };

  // Copy record from index src to index dest
  bitarray.prototype.copy = function(dest, src) {
    var i, len;
    for (i = 0, len = this.subarrays; i < len; ++i) {
      this[i][dest] = this[i][src];
    }
  };

  // Truncate the array to the given length
  bitarray.prototype.truncate = function(n) {
    var i, len;
    for (i = 0, len = this.subarrays; i < len; ++i) {
      for (var j = this.length - 1; j >= n; j--) {
        this[i][j] = 0;
      }
    }
    this.length = n;
  };

  // Checks that all bits for the given index are 0
  bitarray.prototype.zero = function(n) {
    var i, len;
    for (i = 0, len = this.subarrays; i < len; ++i) {
      if (this[i][n]) {
        return false;
      }
    }
    return true;
  };

  // Checks that all bits for the given index are 0 except for possibly one
  bitarray.prototype.zeroExcept = function(n, offset, zero) {
    var i, len;
    for (i = 0, len = this.subarrays; i < len; ++i) {
      if (i === offset ? this[i][n] & zero : this[i][n]) {
        return false;
      }
    }
    return true;
  };

  // Checks that all bits for the given index are 0 except for the specified mask.
  // The mask should be an array of the same size as the filter subarrays width.
  bitarray.prototype.zeroExceptMask = function(n, mask) {
    var i, len;
    for (i = 0, len = this.subarrays; i < len; ++i) {
      if (this[i][n] & mask[i]) {
        return false;
      }
    }
    return true;
  };

  // Checks that only the specified bit is set for the given index
  bitarray.prototype.only = function(n, offset, one) {
    var i, len;
    for (i = 0, len = this.subarrays; i < len; ++i) {
      if (this[i][n] != (i === offset ? one : 0)) {
        return false;
      }
    }
    return true;
  };

  // Checks that only the specified bit is set for the given index except for possibly one other
  bitarray.prototype.onlyExcept = function(n, offset, zero, onlyOffset, onlyOne) {
    var mask;
    var i, len;
    for (i = 0, len = this.subarrays; i < len; ++i) {
      mask = this[i][n];
      if (i === offset)
        mask &= zero;
      if (mask != (i === onlyOffset ? onlyOne : 0)) {
        return false;
      }
    }
    return true;
  };

  var xfilterArray = {
    array8: arrayUntyped,
    array16: arrayUntyped,
    array32: arrayUntyped,
    arrayLengthen: arrayLengthenUntyped,
    arrayWiden: arrayWidenUntyped,
    bitarray: bitarray
  };

  const filterExact = (bisect, value) => {
    return function(values) {
      var n = values.length;
      return [bisect.left(values, value, 0, n), bisect.right(values, value, 0, n)];
    };
  };

  const filterRange = (bisect, range) => {
    var min = range[0],
        max = range[1];
    return function(values) {
      var n = values.length;
      return [bisect.left(values, min, 0, n), bisect.left(values, max, 0, n)];
    };
  };

  const filterAll = values => {
    return [0, values.length];
  };

  var xfilterFilter = {
    filterExact,
    filterRange,
    filterAll
  };

  var cr_identity = d => {
    return d;
  };

  var cr_null = () =>  {
    return null;
  };

  var cr_zero = () => {
    return 0;
  };

  function heap_by(f) {

    // Builds a binary heap within the specified array a[lo:hi]. The heap has the
    // property such that the parent a[lo+i] is always less than or equal to its
    // two children: a[lo+2*i+1] and a[lo+2*i+2].
    function heap(a, lo, hi) {
      var n = hi - lo,
          i = (n >>> 1) + 1;
      while (--i > 0) sift(a, i, n, lo);
      return a;
    }

    // Sorts the specified array a[lo:hi] in descending order, assuming it is
    // already a heap.
    function sort(a, lo, hi) {
      var n = hi - lo,
          t;
      while (--n > 0) t = a[lo], a[lo] = a[lo + n], a[lo + n] = t, sift(a, 1, n, lo);
      return a;
    }

    // Sifts the element a[lo+i-1] down the heap, where the heap is the contiguous
    // slice of array a[lo:lo+n]. This method can also be used to update the heap
    // incrementally, without incurring the full cost of reconstructing the heap.
    function sift(a, i, n, lo) {
      var d = a[--lo + i],
          x = f(d),
          child;
      while ((child = i << 1) <= n) {
        if (child < n && f(a[lo + child]) > f(a[lo + child + 1])) child++;
        if (x <= f(a[lo + child])) break;
        a[lo + i] = a[lo + child];
        i = child;
      }
      a[lo + i] = d;
    }

    heap.sort = sort;
    return heap;
  }

  const h = heap_by(cr_identity);
  h.by = heap_by;

  function heapselect_by(f) {
    var heap = h.by(f);

    // Returns a new array containing the top k elements in the array a[lo:hi].
    // The returned array is not sorted, but maintains the heap property. If k is
    // greater than hi - lo, then fewer than k elements will be returned. The
    // order of elements in a is unchanged by this operation.
    function heapselect(a, lo, hi, k) {
      var queue = new Array(k = Math.min(hi - lo, k)),
          min,
          i,
          d;

      for (i = 0; i < k; ++i) queue[i] = a[lo++];
      heap(queue, 0, k);

      if (lo < hi) {
        min = f(queue[0]);
        do {
          if (f(d = a[lo]) > min) {
            queue[0] = d;
            min = f(heap(queue, 0, k)[0]);
          }
        } while (++lo < hi);
      }

      return queue;
    }

    return heapselect;
  }


  const h$1 = heapselect_by(cr_identity);
  h$1.by = heapselect_by; // assign the raw function to the export as well

  function bisect_by(f) {

    // Locate the insertion point for x in a to maintain sorted order. The
    // arguments lo and hi may be used to specify a subset of the array which
    // should be considered; by default the entire array is used. If x is already
    // present in a, the insertion point will be before (to the left of) any
    // existing entries. The return value is suitable for use as the first
    // argument to `array.splice` assuming that a is already sorted.
    //
    // The returned insertion point i partitions the array a into two halves so
    // that all v < x for v in a[lo:i] for the left side and all v >= x for v in
    // a[i:hi] for the right side.
    function bisectLeft(a, x, lo, hi) {
      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (f(a[mid]) < x) lo = mid + 1;
        else hi = mid;
      }
      return lo;
    }

    // Similar to bisectLeft, but returns an insertion point which comes after (to
    // the right of) any existing entries of x in a.
    //
    // The returned insertion point i partitions the array into two halves so that
    // all v <= x for v in a[lo:i] for the left side and all v > x for v in
    // a[i:hi] for the right side.
    function bisectRight(a, x, lo, hi) {
      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (x < f(a[mid])) hi = mid;
        else lo = mid + 1;
      }
      return lo;
    }

    bisectRight.right = bisectRight;
    bisectRight.left = bisectLeft;
    return bisectRight;
  }

  const bisect = bisect_by(cr_identity);
  bisect.by = bisect_by; // assign the raw function to the export as well

  var permute = (array, index, deep) => {
    for (var i = 0, n = index.length, copy = deep ? JSON.parse(JSON.stringify(array)) : new Array(n); i < n; ++i) {
      copy[i] = array[index[i]];
    }
    return copy;
  };

  const reduceIncrement = p => {
    return p + 1;
  };

  const reduceDecrement = p => {
    return p - 1;
  };

  const reduceAdd = f => {
    return function(p, v) {
      return p + +f(v);
    };
  };

  const reduceSubtract = f => {
    return function(p, v) {
      return p - f(v);
    };
  };

  var xfilterReduce = {
    reduceIncrement,
    reduceDecrement,
    reduceAdd,
    reduceSubtract
  };

  function deep(t,e,i,n,r){for(r in n=(i=i.split(".")).splice(-1,1),i)e=e[i[r]]=e[i[r]]||{};return t(e,n)}//# sourceMappingURL=deepobj.m.js.map

  // Note(cg): result was previsouly using lodash.result, not ESM compatible.
   
  const get = (obj, prop) => {
    const value = obj[prop];
    return (typeof value === 'function') ? value.call(obj) : value;
  };

  /**
   * get value of object at a deep path.
   * if the resolved value is a function,
   * it's invoked with the `this` binding of 
   * its parent object and its result is returned. 
   *  
   * @param  {Object} obj  the object (e.g. { 'a': [{ 'b': { 'c1': 3, 'c2': 4} }], 'd': {e:1} }; )
   * @param  {String} path deep path (e.g. `d.e`` or `a[0].b.c1`. Dot notation (a.0.b)is also supported)
   * @return {Any}      the resolved value
   */
  const reg = /\[([\w\d]+)\]/g;
  var result = (obj, path) => {
    return deep(get, obj, path.replace(reg, '.$1'))
  };

  // constants
  var REMOVED_INDEX = -1;

  crossfilter.heap = h;
  crossfilter.heapselect = h$1;
  crossfilter.bisect = bisect;
  crossfilter.permute = permute;

  function crossfilter() {
    var crossfilter = {
      add: add,
      remove: removeData,
      dimension: dimension,
      groupAll: groupAll,
      size: size,
      all: all,
      allFiltered: allFiltered,
      onChange: onChange,
      isElementFiltered: isElementFiltered
    };

    var data = [], // the records
        n = 0, // the number of records; data.length
        filters, // 1 is filtered out
        filterListeners = [], // when the filters change
        dataListeners = [], // when data is added
        removeDataListeners = [], // when data is removed
        callbacks = [];

    filters = new xfilterArray.bitarray(0);

    // Adds the specified new records to this crossfilter.
    function add(newData) {
      var n0 = n,
          n1 = newData.length;

      // If there's actually new data to add…
      // Merge the new data into the existing data.
      // Lengthen the filter bitset to handle the new records.
      // Notify listeners (dimensions and groups) that new data is available.
      if (n1) {
        data = data.concat(newData);
        filters.lengthen(n += n1);
        dataListeners.forEach(function(l) { l(newData, n0, n1); });
        triggerOnChange('dataAdded');
      }

      return crossfilter;
    }

    // Removes all records that match the current filters, or if a predicate function is passed,
    // removes all records matching the predicate (ignoring filters).
    function removeData(predicate) {
      var // Mapping from old record indexes to new indexes (after records removed)
          newIndex = new Array(n),
          removed = [],
          usePred = typeof predicate === 'function',
          shouldRemove = function (i) {
            return usePred ? predicate(data[i], i) : filters.zero(i)
          };

      for (var index1 = 0, index2 = 0; index1 < n; ++index1) {
        if ( shouldRemove(index1) ) {
          removed.push(index1);
          newIndex[index1] = REMOVED_INDEX;
        } else {
          newIndex[index1] = index2++;
        }
      }

      // Remove all matching records from groups.
      filterListeners.forEach(function(l) { l(-1, -1, [], removed, true); });

      // Update indexes.
      removeDataListeners.forEach(function(l) { l(newIndex); });

      // Remove old filters and data by overwriting.
      for (var index3 = 0, index4 = 0; index3 < n; ++index3) {
        if ( newIndex[index3] !== REMOVED_INDEX ) {
          if (index3 !== index4) filters.copy(index4, index3), data[index4] = data[index3];
          ++index4;
        }
      }

      data.length = n = index4;
      filters.truncate(index4);
      triggerOnChange('dataRemoved');
    }

    function maskForDimensions(dimensions) {
      var n,
          d,
          len,
          id,
          mask = Array(filters.subarrays);
      for (n = 0; n < filters.subarrays; n++) { mask[n] = ~0; }
      for (d = 0, len = dimensions.length; d < len; d++) {
        // The top bits of the ID are the subarray offset and the lower bits are the bit
        // offset of the "one" mask.
        id = dimensions[d].id();
        mask[id >> 7] &= ~(0x1 << (id & 0x3f));
      }
      return mask;
    }

    // Return true if the data element at index i is filtered IN.
    // Optionally, ignore the filters of any dimensions in the ignore_dimensions list.
    function isElementFiltered(i, ignore_dimensions) {
      var mask = maskForDimensions(ignore_dimensions || []);
      return filters.zeroExceptMask(i,mask);
    }

    // Adds a new dimension with the specified value accessor function.
    function dimension(value, iterable) {

      if (typeof value === 'string') {
        var accessorPath = value;
        value = function(d) { return result(d, accessorPath); };
      }

      var dimension = {
        filter: filter,
        filterExact: filterExact,
        filterRange: filterRange,
        filterFunction: filterFunction,
        filterAll: filterAll,
        currentFilter: currentFilter,
        hasCurrentFilter: hasCurrentFilter,
        top: top,
        bottom: bottom,
        group: group,
        groupAll: groupAll,
        dispose: dispose,
        remove: dispose, // for backwards-compatibility
        accessor: value,
        id: function() { return id; }
      };

      var one, // lowest unset bit as mask, e.g., 00001000
          zero, // inverted one, e.g., 11110111
          offset, // offset into the filters arrays
          id, // unique ID for this dimension (reused when dimensions are disposed)
          values, // sorted, cached array
          index, // maps sorted value index -> record index (in data)
          newValues, // temporary array storing newly-added values
          newIndex, // temporary array storing newly-added index
          iterablesIndexCount,
          iterablesIndexFilterStatus,
          iterablesEmptyRows = [],
          sortRange = function(n) {
            return cr_range(n).sort(function(A, B) {
              var a = newValues[A], b = newValues[B];
              return a < b ? -1 : a > b ? 1 : A - B;
            });
          },
          refilter = xfilterFilter.filterAll, // for recomputing filter
          refilterFunction, // the custom filter function in use
          filterValue, // the value used for filtering (value, array, function or undefined)
          filterValuePresent, // true if filterValue contains something
          indexListeners = [], // when data is added
          dimensionGroups = [],
          lo0 = 0,
          hi0 = 0,
          t = 0,
          k;

      // Updating a dimension is a two-stage process. First, we must update the
      // associated filters for the newly-added records. Once all dimensions have
      // updated their filters, the groups are notified to update.
      dataListeners.unshift(preAdd);
      dataListeners.push(postAdd);

      removeDataListeners.push(removeData);

      // Add a new dimension in the filter bitmap and store the offset and bitmask.
      var tmp = filters.add();
      offset = tmp.offset;
      one = tmp.one;
      zero = ~one;

      // Create a unique ID for the dimension
      // IDs will be re-used if dimensions are disposed.
      // For internal use the ID is the subarray offset shifted left 7 bits or'd with the
      // bit offset of the set bit in the dimension's "one" mask.
      id = (offset << 7) | (Math.log(one) / Math.log(2));

      preAdd(data, 0, n);
      postAdd(data, 0, n);

      // Incorporates the specified new records into this dimension.
      // This function is responsible for updating filters, values, and index.
      function preAdd(newData, n0, n1) {
        var newIterablesIndexCount,
            newIterablesIndexFilterStatus;

        if (iterable){
          // Count all the values
          t = 0;
          j = 0;
          k = [];

          for (var i0 = 0; i0 < newData.length; i0++) {
            for(j = 0, k = value(newData[i0]); j < k.length; j++) {
              t++;
            }
          }

          newValues = [];
          newIterablesIndexCount = cr_range(newData.length);
          newIterablesIndexFilterStatus = cr_index(t,1);
          var unsortedIndex = cr_range(t);

          for (var l = 0, index1 = 0; index1 < newData.length; index1++) {
            k = value(newData[index1]);
            //
            if(!k.length){
              newIterablesIndexCount[index1] = 0;
              iterablesEmptyRows.push(index1 + n0);
              continue;
            }
            newIterablesIndexCount[index1] = k.length;
            for (j = 0; j < k.length; j++) {
              newValues.push(k[j]);
              unsortedIndex[l] = index1;
              l++;
            }
          }

          // Create the Sort map used to sort both the values and the valueToData indices
          var sortMap = sortRange(t);

          // Use the sortMap to sort the newValues
          newValues = permute(newValues, sortMap);


          // Use the sortMap to sort the unsortedIndex map
          // newIndex should be a map of sortedValue -> crossfilterData
          newIndex = permute(unsortedIndex, sortMap);

        } else {
          // Permute new values into natural order using a standard sorted index.
          newValues = newData.map(value);
          newIndex = sortRange(n1);
          newValues = permute(newValues, newIndex);
        }

        // Bisect newValues to determine which new records are selected.
        var bounds = refilter(newValues), lo1 = bounds[0], hi1 = bounds[1];

        var index2, index3, index4;
        if(iterable) {
          n1 = t;
          if (refilterFunction) {
            for (index2 = 0; index2 < n1; ++index2) {
              if (!refilterFunction(newValues[index2], index2)) {
                if(--newIterablesIndexCount[newIndex[index2]] === 0) {
                  filters[offset][newIndex[index2] + n0] |= one;
                }
                newIterablesIndexFilterStatus[index2] = 1;
              }
            }
          } else {
            for (index3 = 0; index3 < lo1; ++index3) {
              if(--newIterablesIndexCount[newIndex[index3]] === 0) {
                filters[offset][newIndex[index3] + n0] |= one;
              }
              newIterablesIndexFilterStatus[index3] = 1;
            }
            for (index4 = hi1; index4 < n1; ++index4) {
              if(--newIterablesIndexCount[newIndex[index4]] === 0) {
                filters[offset][newIndex[index4] + n0] |= one;
              }
              newIterablesIndexFilterStatus[index4] = 1;
            }
          }
        } else {
          if (refilterFunction) {
            for (index2 = 0; index2 < n1; ++index2) {
              if (!refilterFunction(newValues[index2], index2)) {
                filters[offset][newIndex[index2] + n0] |= one;
              }
            }
          } else {
            for (index3 = 0; index3 < lo1; ++index3) {
              filters[offset][newIndex[index3] + n0] |= one;
            }
            for (index4 = hi1; index4 < n1; ++index4) {
              filters[offset][newIndex[index4] + n0] |= one;
            }
          }
        }

        // If this dimension previously had no data, then we don't need to do the
        // more expensive merge operation; use the new values and index as-is.
        if (!n0) {
          values = newValues;
          index = newIndex;
          iterablesIndexCount = newIterablesIndexCount;
          iterablesIndexFilterStatus = newIterablesIndexFilterStatus;
          lo0 = lo1;
          hi0 = hi1;
          return;
        }



        var oldValues = values,
          oldIndex = index,
          oldIterablesIndexFilterStatus = iterablesIndexFilterStatus,
          old_n0,
          i1 = 0;

        i0 = 0;

        if(iterable){
          old_n0 = n0;
          n0 = oldValues.length;
          n1 = t;
        }

        // Otherwise, create new arrays into which to merge new and old.
        values = iterable ? new Array(n0 + n1) : new Array(n);
        index = iterable ? new Array(n0 + n1) : cr_index(n, n);
        if(iterable) iterablesIndexFilterStatus = cr_index(n0 + n1, 1);

        // Concatenate the newIterablesIndexCount onto the old one.
        if(iterable) {
          var oldiiclength = iterablesIndexCount.length;
          iterablesIndexCount = xfilterArray.arrayLengthen(iterablesIndexCount, n);
          for(var j=0; j+oldiiclength < n; j++) {
            iterablesIndexCount[j+oldiiclength] = newIterablesIndexCount[j];
          }
        }

        // Merge the old and new sorted values, and old and new index.
        var index5 = 0;
        for (; i0 < n0 && i1 < n1; ++index5) {
          if (oldValues[i0] < newValues[i1]) {
            values[index5] = oldValues[i0];
            if(iterable) iterablesIndexFilterStatus[index5] = oldIterablesIndexFilterStatus[i0];
            index[index5] = oldIndex[i0++];
          } else {
            values[index5] = newValues[i1];
            if(iterable) iterablesIndexFilterStatus[index5] = newIterablesIndexFilterStatus[i1];
            index[index5] = newIndex[i1++] + (iterable ? old_n0 : n0);
          }
        }

        // Add any remaining old values.
        for (; i0 < n0; ++i0, ++index5) {
          values[index5] = oldValues[i0];
          if(iterable) iterablesIndexFilterStatus[index5] = oldIterablesIndexFilterStatus[i0];
          index[index5] = oldIndex[i0];
        }

        // Add any remaining new values.
        for (; i1 < n1; ++i1, ++index5) {
          values[index5] = newValues[i1];
          if(iterable) iterablesIndexFilterStatus[index5] = newIterablesIndexFilterStatus[i1];
          index[index5] = newIndex[i1] + (iterable ? old_n0 : n0);
        }

        // Bisect again to recompute lo0 and hi0.
        bounds = refilter(values), lo0 = bounds[0], hi0 = bounds[1];
      }

      // When all filters have updated, notify index listeners of the new values.
      function postAdd(newData, n0, n1) {
        indexListeners.forEach(function(l) { l(newValues, newIndex, n0, n1); });
        newValues = newIndex = null;
      }

      function removeData(reIndex) {
        if (iterable) {
          for (var i0 = 0, i1 = 0; i0 < iterablesEmptyRows.length; i0++) {
            if (reIndex[iterablesEmptyRows[i0]] !== REMOVED_INDEX) {
              iterablesEmptyRows[i1] = reIndex[iterablesEmptyRows[i0]];
              i1++;
            }
          }
          iterablesEmptyRows.length = i1;
          for (i0 = 0, i1 = 0; i0 < n; i0++) {
            if (reIndex[i0] !== REMOVED_INDEX) {
              if (i1 !== i0) iterablesIndexCount[i1] = iterablesIndexCount[i0];
              i1++;
            }
          }
          iterablesIndexCount = iterablesIndexCount.slice(0, i1);
        }
        // Rewrite our index, overwriting removed values
        var n0 = values.length;
        for (var i = 0, j = 0, oldDataIndex; i < n0; ++i) {
          oldDataIndex = index[i];
          if (reIndex[oldDataIndex] !== REMOVED_INDEX) {
            if (i !== j) values[j] = values[i];
            index[j] = reIndex[oldDataIndex];
            if (iterable) {
              iterablesIndexFilterStatus[j] = iterablesIndexFilterStatus[i];
            }
            ++j;
          }
        }
        values.length = j;
        if (iterable) iterablesIndexFilterStatus = iterablesIndexFilterStatus.slice(0, j);
        while (j < n0) index[j++] = 0;

        // Bisect again to recompute lo0 and hi0.
        var bounds = refilter(values);
        lo0 = bounds[0], hi0 = bounds[1];
      }

      // Updates the selected values based on the specified bounds [lo, hi].
      // This implementation is used by all the public filter methods.
      function filterIndexBounds(bounds) {

        var lo1 = bounds[0],
            hi1 = bounds[1];

        if (refilterFunction) {
          refilterFunction = null;
          filterIndexFunction(function(d, i) { return lo1 <= i && i < hi1; }, bounds[0] === 0 && bounds[1] === values.length);
          lo0 = lo1;
          hi0 = hi1;
          return dimension;
        }

        var i,
            j,
            k,
            added = [],
            removed = [],
            valueIndexAdded = [],
            valueIndexRemoved = [];


        // Fast incremental update based on previous lo index.
        if (lo1 < lo0) {
          for (i = lo1, j = Math.min(lo0, hi1); i < j; ++i) {
            added.push(index[i]);
            valueIndexAdded.push(i);
          }
        } else if (lo1 > lo0) {
          for (i = lo0, j = Math.min(lo1, hi0); i < j; ++i) {
            removed.push(index[i]);
            valueIndexRemoved.push(i);
          }
        }

        // Fast incremental update based on previous hi index.
        if (hi1 > hi0) {
          for (i = Math.max(lo1, hi0), j = hi1; i < j; ++i) {
            added.push(index[i]);
            valueIndexAdded.push(i);
          }
        } else if (hi1 < hi0) {
          for (i = Math.max(lo0, hi1), j = hi0; i < j; ++i) {
            removed.push(index[i]);
            valueIndexRemoved.push(i);
          }
        }

        if(!iterable) {
          // Flip filters normally.

          for(i=0; i<added.length; i++) {
            filters[offset][added[i]] ^= one;
          }

          for(i=0; i<removed.length; i++) {
            filters[offset][removed[i]] ^= one;
          }

        } else {
          // For iterables, we need to figure out if the row has been completely removed vs partially included
          // Only count a row as added if it is not already being aggregated. Only count a row
          // as removed if the last element being aggregated is removed.

          var newAdded = [];
          var newRemoved = [];
          for (i = 0; i < added.length; i++) {
            iterablesIndexCount[added[i]]++;
            iterablesIndexFilterStatus[valueIndexAdded[i]] = 0;
            if(iterablesIndexCount[added[i]] === 1) {
              filters[offset][added[i]] ^= one;
              newAdded.push(added[i]);
            }
          }
          for (i = 0; i < removed.length; i++) {
            iterablesIndexCount[removed[i]]--;
            iterablesIndexFilterStatus[valueIndexRemoved[i]] = 1;
            if(iterablesIndexCount[removed[i]] === 0) {
              filters[offset][removed[i]] ^= one;
              newRemoved.push(removed[i]);
            }
          }

          added = newAdded;
          removed = newRemoved;

          // Now handle empty rows.
          if(refilter === xfilterFilter.filterAll) {
            for(i = 0; i < iterablesEmptyRows.length; i++) {
              if((filters[offset][k = iterablesEmptyRows[i]] & one)) {
                // Was not in the filter, so set the filter and add
                filters[offset][k] ^= one;
                added.push(k);
              }
            }
          } else {
            // filter in place - remove empty rows if necessary
            for(i = 0; i < iterablesEmptyRows.length; i++) {
              if(!(filters[offset][k = iterablesEmptyRows[i]] & one)) {
                // Was in the filter, so set the filter and remove
                filters[offset][k] ^= one;
                removed.push(k);
              }
            }
          }
        }

        lo0 = lo1;
        hi0 = hi1;
        filterListeners.forEach(function(l) { l(one, offset, added, removed); });
        triggerOnChange('filtered');
        return dimension;
      }

      // Filters this dimension using the specified range, value, or null.
      // If the range is null, this is equivalent to filterAll.
      // If the range is an array, this is equivalent to filterRange.
      // Otherwise, this is equivalent to filterExact.
      function filter(range) {
        return range == null
            ? filterAll() : Array.isArray(range)
            ? filterRange(range) : typeof range === "function"
            ? filterFunction(range)
            : filterExact(range);
      }

      // Filters this dimension to select the exact value.
      function filterExact(value) {
        filterValue = value;
        filterValuePresent = true;
        return filterIndexBounds((refilter = xfilterFilter.filterExact(bisect, value))(values));
      }

      // Filters this dimension to select the specified range [lo, hi].
      // The lower bound is inclusive, and the upper bound is exclusive.
      function filterRange(range) {
        filterValue = range;
        filterValuePresent = true;
        return filterIndexBounds((refilter = xfilterFilter.filterRange(bisect, range))(values));
      }

      // Clears any filters on this dimension.
      function filterAll() {
        filterValue = undefined;
        filterValuePresent = false;
        return filterIndexBounds((refilter = xfilterFilter.filterAll)(values));
      }

      // Filters this dimension using an arbitrary function.
      function filterFunction(f) {
        filterValue = f;
        filterValuePresent = true;
        
        refilterFunction = f;
        refilter = xfilterFilter.filterAll;

        filterIndexFunction(f, false);

        var bounds = refilter(values);
        lo0 = bounds[0], hi0 = bounds[1];

        return dimension;
      }

      function filterIndexFunction(f, filterAll) {
        var i,
            k,
            x,
            added = [],
            removed = [],
            valueIndexAdded = [],
            valueIndexRemoved = [],
            indexLength = values.length;

        if(!iterable) {
          for (i = 0; i < indexLength; ++i) {
            if (!(filters[offset][k = index[i]] & one) ^ !!(x = f(values[i], i))) {
              if (x) added.push(k);
              else removed.push(k);
            }
          }
        }

        if(iterable) {
          for(i=0; i < indexLength; ++i) {
            if(f(values[i], i)) {
              added.push(index[i]);
              valueIndexAdded.push(i);
            } else {
              removed.push(index[i]);
              valueIndexRemoved.push(i);
            }
          }
        }

        if(!iterable) {
          for(i=0; i<added.length; i++) {
            if(filters[offset][added[i]] & one) filters[offset][added[i]] &= zero;
          }

          for(i=0; i<removed.length; i++) {
            if(!(filters[offset][removed[i]] & one)) filters[offset][removed[i]] |= one;
          }
        } else {

          var newAdded = [];
          var newRemoved = [];
          for (i = 0; i < added.length; i++) {
            // First check this particular value needs to be added
            if(iterablesIndexFilterStatus[valueIndexAdded[i]] === 1) {
              iterablesIndexCount[added[i]]++;
              iterablesIndexFilterStatus[valueIndexAdded[i]] = 0;
              if(iterablesIndexCount[added[i]] === 1) {
                filters[offset][added[i]] ^= one;
                newAdded.push(added[i]);
              }
            }
          }
          for (i = 0; i < removed.length; i++) {
            // First check this particular value needs to be removed
            if(iterablesIndexFilterStatus[valueIndexRemoved[i]] === 0) {
              iterablesIndexCount[removed[i]]--;
              iterablesIndexFilterStatus[valueIndexRemoved[i]] = 1;
              if(iterablesIndexCount[removed[i]] === 0) {
                filters[offset][removed[i]] ^= one;
                newRemoved.push(removed[i]);
              }
            }
          }

          added = newAdded;
          removed = newRemoved;

          // Now handle empty rows.
          if(filterAll) {
            for(i = 0; i < iterablesEmptyRows.length; i++) {
              if((filters[offset][k = iterablesEmptyRows[i]] & one)) {
                // Was not in the filter, so set the filter and add
                filters[offset][k] ^= one;
                added.push(k);
              }
            }
          } else {
            // filter in place - remove empty rows if necessary
            for(i = 0; i < iterablesEmptyRows.length; i++) {
              if(!(filters[offset][k = iterablesEmptyRows[i]] & one)) {
                // Was in the filter, so set the filter and remove
                filters[offset][k] ^= one;
                removed.push(k);
              }
            }
          }
        }

        filterListeners.forEach(function(l) { l(one, offset, added, removed); });
        triggerOnChange('filtered');
      }
      
      function currentFilter() {
        return filterValue;
      }
      
      function hasCurrentFilter() {
        return filterValuePresent;
      }

      // Returns the top K selected records based on this dimension's order.
      // Note: observes this dimension's filter, unlike group and groupAll.
      function top(k, top_offset) {
        var array = [],
            i = hi0,
            j,
            toSkip = 0;

        if(top_offset && top_offset > 0) toSkip = top_offset;

        while (--i >= lo0 && k > 0) {
          if (filters.zero(j = index[i])) {
            if(toSkip > 0) {
              //skip matching row
              --toSkip;
            } else {
              array.push(data[j]);
              --k;
            }
          }
        }

        if(iterable){
          for(i = 0; i < iterablesEmptyRows.length && k > 0; i++) {
            // Add row with empty iterable column at the end
            if(filters.zero(j = iterablesEmptyRows[i])) {
              if(toSkip > 0) {
                //skip matching row
                --toSkip;
              } else {
                array.push(data[j]);
                --k;
              }
            }
          }
        }

        return array;
      }

      // Returns the bottom K selected records based on this dimension's order.
      // Note: observes this dimension's filter, unlike group and groupAll.
      function bottom(k, bottom_offset) {
        var array = [],
            i,
            j,
            toSkip = 0;

        if(bottom_offset && bottom_offset > 0) toSkip = bottom_offset;

        if(iterable) {
          // Add row with empty iterable column at the top
          for(i = 0; i < iterablesEmptyRows.length && k > 0; i++) {
            if(filters.zero(j = iterablesEmptyRows[i])) {
              if(toSkip > 0) {
                //skip matching row
                --toSkip;
              } else {
                array.push(data[j]);
                --k;
              }
            }
          }
        }

        i = lo0;

        while (i < hi0 && k > 0) {
          if (filters.zero(j = index[i])) {
            if(toSkip > 0) {
              //skip matching row
              --toSkip;
            } else {
              array.push(data[j]);
              --k;
            }
          }
          i++;
        }

        return array;
      }

      // Adds a new group to this dimension, using the specified key function.
      function group(key) {
        var group = {
          top: top,
          all: all,
          reduce: reduce,
          reduceCount: reduceCount,
          reduceSum: reduceSum,
          order: order,
          orderNatural: orderNatural,
          size: size,
          dispose: dispose,
          remove: dispose // for backwards-compatibility
        };

        // Ensure that this group will be removed when the dimension is removed.
        dimensionGroups.push(group);

        var groups, // array of {key, value}
            groupIndex, // object id ↦ group id
            groupWidth = 8,
            groupCapacity = capacity(groupWidth),
            k = 0, // cardinality
            select,
            heap,
            reduceAdd,
            reduceRemove,
            reduceInitial,
            update = cr_null,
            reset = cr_null,
            resetNeeded = true,
            groupAll = key === cr_null,
            n0old;

        if (arguments.length < 1) key = cr_identity;

        // The group listens to the crossfilter for when any dimension changes, so
        // that it can update the associated reduce values. It must also listen to
        // the parent dimension for when data is added, and compute new keys.
        filterListeners.push(update);
        indexListeners.push(add);
        removeDataListeners.push(removeData);

        // Incorporate any existing data into the grouping.
        add(values, index, 0, n);

        // Incorporates the specified new values into this group.
        // This function is responsible for updating groups and groupIndex.
        function add(newValues, newIndex, n0, n1) {

          if(iterable) {
            n0old = n0;
            n0 = values.length - newValues.length;
            n1 = newValues.length;
          }

          var oldGroups = groups,
              reIndex = iterable ? [] : cr_index(k, groupCapacity),
              add = reduceAdd,
              remove = reduceRemove,
              initial = reduceInitial,
              k0 = k, // old cardinality
              i0 = 0, // index of old group
              i1 = 0, // index of new record
              j, // object id
              g0, // old group
              x0, // old key
              x1, // new key
              g, // group to add
              x; // key of group to add

          // If a reset is needed, we don't need to update the reduce values.
          if (resetNeeded) add = initial = cr_null;
          if (resetNeeded) remove = initial = cr_null;

          // Reset the new groups (k is a lower bound).
          // Also, make sure that groupIndex exists and is long enough.
          groups = new Array(k), k = 0;
          if(iterable){
            groupIndex = k0 ? groupIndex : [];
          }
          else {
            groupIndex = k0 > 1 ? xfilterArray.arrayLengthen(groupIndex, n) : cr_index(n, groupCapacity);
          }


          // Get the first old key (x0 of g0), if it exists.
          if (k0) x0 = (g0 = oldGroups[0]).key;

          // Find the first new key (x1), skipping NaN keys.
          while (i1 < n1 && !((x1 = key(newValues[i1])) >= x1)) ++i1;

          // While new keys remain…
          while (i1 < n1) {

            // Determine the lesser of the two current keys; new and old.
            // If there are no old keys remaining, then always add the new key.
            if (g0 && x0 <= x1) {
              g = g0, x = x0;

              // Record the new index of the old group.
              reIndex[i0] = k;

              // Retrieve the next old key.
              g0 = oldGroups[++i0];
              if (g0) x0 = g0.key;
            } else {
              g = {key: x1, value: initial()}, x = x1;
            }

            // Add the lesser group.
            groups[k] = g;

            // Add any selected records belonging to the added group, while
            // advancing the new key and populating the associated group index.

            while (x1 <= x) {
              j = newIndex[i1] + (iterable ? n0old : n0);


              if(iterable){
                if(groupIndex[j]){
                  groupIndex[j].push(k);
                }
                else {
                  groupIndex[j] = [k];
                }
              }
              else {
                groupIndex[j] = k;
              }

              // Always add new values to groups. Only remove when not in filter.
              // This gives groups full information on data life-cycle.
              g.value = add(g.value, data[j], true);
              if (!filters.zeroExcept(j, offset, zero)) g.value = remove(g.value, data[j], false);
              if (++i1 >= n1) break;
              x1 = key(newValues[i1]);
            }

            groupIncrement();
          }

          // Add any remaining old groups that were greater th1an all new keys.
          // No incremental reduce is needed; these groups have no new records.
          // Also record the new index of the old group.
          while (i0 < k0) {
            groups[reIndex[i0] = k] = oldGroups[i0++];
            groupIncrement();
          }


          // Fill in gaps with empty arrays where there may have been rows with empty iterables
          if(iterable){
            for (var index1 = 0; index1 < n; index1++) {
              if(!groupIndex[index1]){
                groupIndex[index1] = [];
              }
            }
          }

          // If we added any new groups before any old groups,
          // update the group index of all the old records.
          if(k > i0){
            if(iterable){
              for (i0 = 0; i0 < n0old; ++i0) {
                for (index1 = 0; index1 < groupIndex[i0].length; index1++) {
                  groupIndex[i0][index1] = reIndex[groupIndex[i0][index1]];
                }
              }
            }
            else {
              for (i0 = 0; i0 < n0; ++i0) {
                groupIndex[i0] = reIndex[groupIndex[i0]];
              }
            }
          }

          // Modify the update and reset behavior based on the cardinality.
          // If the cardinality is less than or equal to one, then the groupIndex
          // is not needed. If the cardinality is zero, then there are no records
          // and therefore no groups to update or reset. Note that we also must
          // change the registered listener to point to the new method.
          j = filterListeners.indexOf(update);
          if (k > 1 || iterable) {
            update = updateMany;
            reset = resetMany;
          } else {
            if (!k && groupAll) {
              k = 1;
              groups = [{key: null, value: initial()}];
            }
            if (k === 1) {
              update = updateOne;
              reset = resetOne;
            } else {
              update = cr_null;
              reset = cr_null;
            }
            groupIndex = null;
          }
          filterListeners[j] = update;

          // Count the number of added groups,
          // and widen the group index as needed.
          function groupIncrement() {
            if(iterable){
              k++;
              return
            }
            if (++k === groupCapacity) {
              reIndex = xfilterArray.arrayWiden(reIndex, groupWidth <<= 1);
              groupIndex = xfilterArray.arrayWiden(groupIndex, groupWidth);
              groupCapacity = capacity(groupWidth);
            }
          }
        }

        function removeData(reIndex) {
          if (k > 1 || iterable) {
            var oldK = k,
                oldGroups = groups,
                seenGroups = cr_index(oldK, oldK),
                i,
                i0,
                j;

            // Filter out non-matches by copying matching group index entries to
            // the beginning of the array.
            if (!iterable) {
              for (i = 0, j = 0; i < n; ++i) {
                if (reIndex[i] !== REMOVED_INDEX) {
                  seenGroups[groupIndex[j] = groupIndex[i]] = 1;
                  ++j;
                }
              }
            } else {
              for (i = 0, j = 0; i < n; ++i) {
                if (reIndex[i] !== REMOVED_INDEX) {
                  groupIndex[j] = groupIndex[i];
                  for (i0 = 0; i0 < groupIndex[j].length; i0++) {
                    seenGroups[groupIndex[j][i0]] = 1;
                  }
                  ++j;
                }
              }
            }

            // Reassemble groups including only those groups that were referred
            // to by matching group index entries.  Note the new group index in
            // seenGroups.
            groups = [], k = 0;
            for (i = 0; i < oldK; ++i) {
              if (seenGroups[i]) {
                seenGroups[i] = k++;
                groups.push(oldGroups[i]);
              }
            }

            if (k > 1 || iterable) {
              // Reindex the group index using seenGroups to find the new index.
              if (!iterable) {
                for (i = 0; i < j; ++i) groupIndex[i] = seenGroups[groupIndex[i]];
              } else {
                for (i = 0; i < j; ++i) {
                  for (i0 = 0; i0 < groupIndex[i].length; ++i0) {
                    groupIndex[i][i0] = seenGroups[groupIndex[i][i0]];
                  }
                }
              }
            } else {
              groupIndex = null;
            }
            filterListeners[filterListeners.indexOf(update)] = k > 1 || iterable
                ? (reset = resetMany, update = updateMany)
                : k === 1 ? (reset = resetOne, update = updateOne)
                : reset = update = cr_null;
          } else if (k === 1) {
            if (groupAll) return;
            for (var index3 = 0; index3 < n; ++index3) if (reIndex[index3] !== REMOVED_INDEX) return;
            groups = [], k = 0;
            filterListeners[filterListeners.indexOf(update)] =
            update = reset = cr_null;
          }
        }

        // Reduces the specified selected or deselected records.
        // This function is only used when the cardinality is greater than 1.
        // notFilter indicates a crossfilter.add/remove operation.
        function updateMany(filterOne, filterOffset, added, removed, notFilter) {

          if ((filterOne === one && filterOffset === offset) || resetNeeded) return;

          var i,
              j,
              k,
              n,
              g;

          if(iterable){
            // Add the added values.
            for (i = 0, n = added.length; i < n; ++i) {
              if (filters.zeroExcept(k = added[i], offset, zero)) {
                for (j = 0; j < groupIndex[k].length; j++) {
                  g = groups[groupIndex[k][j]];
                  g.value = reduceAdd(g.value, data[k], false, j);
                }
              }
            }

            // Remove the removed values.
            for (i = 0, n = removed.length; i < n; ++i) {
              if (filters.onlyExcept(k = removed[i], offset, zero, filterOffset, filterOne)) {
                for (j = 0; j < groupIndex[k].length; j++) {
                  g = groups[groupIndex[k][j]];
                  g.value = reduceRemove(g.value, data[k], notFilter, j);
                }
              }
            }
            return;
          }

          // Add the added values.
          for (i = 0, n = added.length; i < n; ++i) {
            if (filters.zeroExcept(k = added[i], offset, zero)) {
              g = groups[groupIndex[k]];
              g.value = reduceAdd(g.value, data[k], false);
            }
          }

          // Remove the removed values.
          for (i = 0, n = removed.length; i < n; ++i) {
            if (filters.onlyExcept(k = removed[i], offset, zero, filterOffset, filterOne)) {
              g = groups[groupIndex[k]];
              g.value = reduceRemove(g.value, data[k], notFilter);
            }
          }
        }

        // Reduces the specified selected or deselected records.
        // This function is only used when the cardinality is 1.
        // notFilter indicates a crossfilter.add/remove operation.
        function updateOne(filterOne, filterOffset, added, removed, notFilter) {
          if ((filterOne === one && filterOffset === offset) || resetNeeded) return;

          var i,
              k,
              n,
              g = groups[0];

          // Add the added values.
          for (i = 0, n = added.length; i < n; ++i) {
            if (filters.zeroExcept(k = added[i], offset, zero)) {
              g.value = reduceAdd(g.value, data[k], false);
            }
          }

          // Remove the removed values.
          for (i = 0, n = removed.length; i < n; ++i) {
            if (filters.onlyExcept(k = removed[i], offset, zero, filterOffset, filterOne)) {
              g.value = reduceRemove(g.value, data[k], notFilter);
            }
          }
        }

        // Recomputes the group reduce values from scratch.
        // This function is only used when the cardinality is greater than 1.
        function resetMany() {
          var i,
              j,
              g;

          // Reset all group values.
          for (i = 0; i < k; ++i) {
            groups[i].value = reduceInitial();
          }

          // We add all records and then remove filtered records so that reducers
          // can build an 'unfiltered' view even if there are already filters in
          // place on other dimensions.
          if(iterable){
            for (i = 0; i < n; ++i) {
              for (j = 0; j < groupIndex[i].length; j++) {
                g = groups[groupIndex[i][j]];
                g.value = reduceAdd(g.value, data[i], true, j);
              }
            }
            for (i = 0; i < n; ++i) {
              if (!filters.zeroExcept(i, offset, zero)) {
                for (j = 0; j < groupIndex[i].length; j++) {
                  g = groups[groupIndex[i][j]];
                  g.value = reduceRemove(g.value, data[i], false, j);
                }
              }
            }
            return;
          }

          for (i = 0; i < n; ++i) {
            g = groups[groupIndex[i]];
            g.value = reduceAdd(g.value, data[i], true);
          }
          for (i = 0; i < n; ++i) {
            if (!filters.zeroExcept(i, offset, zero)) {
              g = groups[groupIndex[i]];
              g.value = reduceRemove(g.value, data[i], false);
            }
          }
        }

        // Recomputes the group reduce values from scratch.
        // This function is only used when the cardinality is 1.
        function resetOne() {
          var i,
              g = groups[0];

          // Reset the singleton group values.
          g.value = reduceInitial();

          // We add all records and then remove filtered records so that reducers
          // can build an 'unfiltered' view even if there are already filters in
          // place on other dimensions.
          for (i = 0; i < n; ++i) {
            g.value = reduceAdd(g.value, data[i], true);
          }

          for (i = 0; i < n; ++i) {
            if (!filters.zeroExcept(i, offset, zero)) {
              g.value = reduceRemove(g.value, data[i], false);
            }
          }
        }

        // Returns the array of group values, in the dimension's natural order.
        function all() {
          if (resetNeeded) reset(), resetNeeded = false;
          return groups;
        }

        // Returns a new array containing the top K group values, in reduce order.
        function top(k) {
          var top = select(all(), 0, groups.length, k);
          return heap.sort(top, 0, top.length);
        }

        // Sets the reduce behavior for this group to use the specified functions.
        // This method lazily recomputes the reduce values, waiting until needed.
        function reduce(add, remove, initial) {
          reduceAdd = add;
          reduceRemove = remove;
          reduceInitial = initial;
          resetNeeded = true;
          return group;
        }

        // A convenience method for reducing by count.
        function reduceCount() {
          return reduce(xfilterReduce.reduceIncrement, xfilterReduce.reduceDecrement, cr_zero);
        }

        // A convenience method for reducing by sum(value).
        function reduceSum(value) {
          return reduce(xfilterReduce.reduceAdd(value), xfilterReduce.reduceSubtract(value), cr_zero);
        }

        // Sets the reduce order, using the specified accessor.
        function order(value) {
          select = h$1.by(valueOf);
          heap = h.by(valueOf);
          function valueOf(d) { return value(d.value); }
          return group;
        }

        // A convenience method for natural ordering by reduce value.
        function orderNatural() {
          return order(cr_identity);
        }

        // Returns the cardinality of this group, irrespective of any filters.
        function size() {
          return k;
        }

        // Removes this group and associated event listeners.
        function dispose() {
          var i = filterListeners.indexOf(update);
          if (i >= 0) filterListeners.splice(i, 1);
          i = indexListeners.indexOf(add);
          if (i >= 0) indexListeners.splice(i, 1);
          i = removeDataListeners.indexOf(removeData);
          if (i >= 0) removeDataListeners.splice(i, 1);
          i = dimensionGroups.indexOf(group);
          if (i >= 0) dimensionGroups.splice(i, 1);
          return group;
        }

        return reduceCount().orderNatural();
      }

      // A convenience function for generating a singleton group.
      function groupAll() {
        var g = group(cr_null), all = g.all;
        delete g.all;
        delete g.top;
        delete g.order;
        delete g.orderNatural;
        delete g.size;
        g.value = function() { return all()[0].value; };
        return g;
      }

      // Removes this dimension and associated groups and event listeners.
      function dispose() {
        dimensionGroups.forEach(function(group) { group.dispose(); });
        var i = dataListeners.indexOf(preAdd);
        if (i >= 0) dataListeners.splice(i, 1);
        i = dataListeners.indexOf(postAdd);
        if (i >= 0) dataListeners.splice(i, 1);
        i = removeDataListeners.indexOf(removeData);
        if (i >= 0) removeDataListeners.splice(i, 1);
        filters.masks[offset] &= zero;
        return filterAll();
      }

      return dimension;
    }

    // A convenience method for groupAll on a dummy dimension.
    // This implementation can be optimized since it always has cardinality 1.
    function groupAll() {
      var group = {
        reduce: reduce,
        reduceCount: reduceCount,
        reduceSum: reduceSum,
        value: value,
        dispose: dispose,
        remove: dispose // for backwards-compatibility
      };

      var reduceValue,
          reduceAdd,
          reduceRemove,
          reduceInitial,
          resetNeeded = true;

      // The group listens to the crossfilter for when any dimension changes, so
      // that it can update the reduce value. It must also listen to the parent
      // dimension for when data is added.
      filterListeners.push(update);
      dataListeners.push(add);

      // For consistency; actually a no-op since resetNeeded is true.
      add(data, 0);

      // Incorporates the specified new values into this group.
      function add(newData, n0) {
        var i;

        if (resetNeeded) return;

        // Cycle through all the values.
        for (i = n0; i < n; ++i) {

          // Add all values all the time.
          reduceValue = reduceAdd(reduceValue, data[i], true);

          // Remove the value if filtered.
          if (!filters.zero(i)) {
            reduceValue = reduceRemove(reduceValue, data[i], false);
          }
        }
      }

      // Reduces the specified selected or deselected records.
      function update(filterOne, filterOffset, added, removed, notFilter) {
        var i,
            k,
            n;

        if (resetNeeded) return;

        // Add the added values.
        for (i = 0, n = added.length; i < n; ++i) {
          if (filters.zero(k = added[i])) {
            reduceValue = reduceAdd(reduceValue, data[k], notFilter);
          }
        }

        // Remove the removed values.
        for (i = 0, n = removed.length; i < n; ++i) {
          if (filters.only(k = removed[i], filterOffset, filterOne)) {
            reduceValue = reduceRemove(reduceValue, data[k], notFilter);
          }
        }
      }

      // Recomputes the group reduce value from scratch.
      function reset() {
        var i;

        reduceValue = reduceInitial();

        // Cycle through all the values.
        for (i = 0; i < n; ++i) {

          // Add all values all the time.
          reduceValue = reduceAdd(reduceValue, data[i], true);

          // Remove the value if it is filtered.
          if (!filters.zero(i)) {
            reduceValue = reduceRemove(reduceValue, data[i], false);
          }
        }
      }

      // Sets the reduce behavior for this group to use the specified functions.
      // This method lazily recomputes the reduce value, waiting until needed.
      function reduce(add, remove, initial) {
        reduceAdd = add;
        reduceRemove = remove;
        reduceInitial = initial;
        resetNeeded = true;
        return group;
      }

      // A convenience method for reducing by count.
      function reduceCount() {
        return reduce(xfilterReduce.reduceIncrement, xfilterReduce.reduceDecrement, cr_zero);
      }

      // A convenience method for reducing by sum(value).
      function reduceSum(value) {
        return reduce(xfilterReduce.reduceAdd(value), xfilterReduce.reduceSubtract(value), cr_zero);
      }

      // Returns the computed reduce value.
      function value() {
        if (resetNeeded) reset(), resetNeeded = false;
        return reduceValue;
      }

      // Removes this group and associated event listeners.
      function dispose() {
        var i = filterListeners.indexOf(update);
        if (i >= 0) filterListeners.splice(i, 1);
        i = dataListeners.indexOf(add);
        if (i >= 0) dataListeners.splice(i, 1);
        return group;
      }

      return reduceCount();
    }

    // Returns the number of records in this crossfilter, irrespective of any filters.
    function size() {
      return n;
    }

    // Returns the raw row data contained in this crossfilter
    function all(){
      return data;
    }

    // Returns row data with all dimension filters applied, except for filters in ignore_dimensions
    function allFiltered(ignore_dimensions) {
      var array = [],
          i = 0,
          mask = maskForDimensions(ignore_dimensions || []);

        for (i = 0; i < n; i++) {
          if (filters.zeroExceptMask(i, mask)) {
            array.push(data[i]);
          }
        }

        return array;
    }

    function onChange(cb){
      if(typeof cb !== 'function'){
        /* eslint no-console: 0 */
        console.warn('onChange callback parameter must be a function!');
        return;
      }
      callbacks.push(cb);
      return function(){
        callbacks.splice(callbacks.indexOf(cb), 1);
      };
    }

    function triggerOnChange(eventName){
      for (var i = 0; i < callbacks.length; i++) {
        callbacks[i](eventName);
      }
    }

    return arguments.length
        ? add(arguments[0])
        : crossfilter;
  }

  // Returns an array of size n, big enough to store ids up to m.
  function cr_index(n, m) {
    return (m < 0x101
        ? xfilterArray.array8 : m < 0x10001
        ? xfilterArray.array16
        : xfilterArray.array32)(n);
  }

  // Constructs a new array of size n, with sequential values from 0 to n - 1.
  function cr_range(n) {
    var range = cr_index(n, n);
    for (var i = -1; ++i < n;) range[i] = i;
    return range;
  }

  function capacity(w) {
    return w === 8
        ? 0x100 : w === 16
        ? 0x10000
        : 0x100000000;
  }

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var jquery_dataTables = createCommonjsModule(function (module, exports) {
  /*! DataTables 1.10.21
   * ©2008-2020 SpryMedia Ltd - datatables.net/license
   */

  /**
   * @summary     DataTables
   * @description Paginate, search and order HTML tables
   * @version     1.10.21
   * @file        jquery.dataTables.js
   * @author      SpryMedia Ltd
   * @contact     www.datatables.net
   * @copyright   Copyright 2008-2020 SpryMedia Ltd.
   *
   * This source file is free software, available under the following license:
   *   MIT license - http://datatables.net/license
   *
   * This source file is distributed in the hope that it will be useful, but
   * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
   * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.
   *
   * For details please refer to: http://www.datatables.net
   */

  /*jslint evil: true, undef: true, browser: true */
  /*globals $,require,jQuery,define,_selector_run,_selector_opts,_selector_first,_selector_row_indexes,_ext,_Api,_api_register,_api_registerPlural,_re_new_lines,_re_html,_re_formatted_numeric,_re_escape_regex,_empty,_intVal,_numToDecimal,_isNumber,_isHtml,_htmlNumeric,_pluck,_pluck_order,_range,_stripHtml,_unique,_fnBuildAjax,_fnAjaxUpdate,_fnAjaxParameters,_fnAjaxUpdateDraw,_fnAjaxDataSrc,_fnAddColumn,_fnColumnOptions,_fnAdjustColumnSizing,_fnVisibleToColumnIndex,_fnColumnIndexToVisible,_fnVisbleColumns,_fnGetColumns,_fnColumnTypes,_fnApplyColumnDefs,_fnHungarianMap,_fnCamelToHungarian,_fnLanguageCompat,_fnBrowserDetect,_fnAddData,_fnAddTr,_fnNodeToDataIndex,_fnNodeToColumnIndex,_fnGetCellData,_fnSetCellData,_fnSplitObjNotation,_fnGetObjectDataFn,_fnSetObjectDataFn,_fnGetDataMaster,_fnClearTable,_fnDeleteIndex,_fnInvalidate,_fnGetRowElements,_fnCreateTr,_fnBuildHead,_fnDrawHead,_fnDraw,_fnReDraw,_fnAddOptionsHtml,_fnDetectHeader,_fnGetUniqueThs,_fnFeatureHtmlFilter,_fnFilterComplete,_fnFilterCustom,_fnFilterColumn,_fnFilter,_fnFilterCreateSearch,_fnEscapeRegex,_fnFilterData,_fnFeatureHtmlInfo,_fnUpdateInfo,_fnInfoMacros,_fnInitialise,_fnInitComplete,_fnLengthChange,_fnFeatureHtmlLength,_fnFeatureHtmlPaginate,_fnPageChange,_fnFeatureHtmlProcessing,_fnProcessingDisplay,_fnFeatureHtmlTable,_fnScrollDraw,_fnApplyToChildren,_fnCalculateColumnWidths,_fnThrottle,_fnConvertToWidth,_fnGetWidestNode,_fnGetMaxLenString,_fnStringToCss,_fnSortFlatten,_fnSort,_fnSortAria,_fnSortListener,_fnSortAttachListener,_fnSortingClasses,_fnSortData,_fnSaveState,_fnLoadState,_fnSettingsFromNode,_fnLog,_fnMap,_fnBindAction,_fnCallbackReg,_fnCallbackFire,_fnLengthOverflow,_fnRenderer,_fnDataSource,_fnRowAttributes*/

  (function( factory ) {

  	{
  		// CommonJS
  		module.exports = function (root, $$1) {
  			if ( ! root ) {
  				// CommonJS environments without a window global must pass a
  				// root. This will give an error otherwise
  				root = window;
  			}

  			if ( ! $$1 ) {
  				$$1 = typeof window !== 'undefined' ? // jQuery's factory checks for a global window
  					$ :
  					$( root );
  			}

  			return factory( $$1, root, root.document );
  		};
  	}
  }
  (function( $, window, document, undefined$1 ) {

  	/**
  	 * DataTables is a plug-in for the jQuery Javascript library. It is a highly
  	 * flexible tool, based upon the foundations of progressive enhancement,
  	 * which will add advanced interaction controls to any HTML table. For a
  	 * full list of features please refer to
  	 * [DataTables.net](href="http://datatables.net).
  	 *
  	 * Note that the `DataTable` object is not a global variable but is aliased
  	 * to `jQuery.fn.DataTable` and `jQuery.fn.dataTable` through which it may
  	 * be  accessed.
  	 *
  	 *  @class
  	 *  @param {object} [init={}] Configuration object for DataTables. Options
  	 *    are defined by {@link DataTable.defaults}
  	 *  @requires jQuery 1.7+
  	 *
  	 *  @example
  	 *    // Basic initialisation
  	 *    $(document).ready( function {
  	 *      $('#example').dataTable();
  	 *    } );
  	 *
  	 *  @example
  	 *    // Initialisation with configuration options - in this case, disable
  	 *    // pagination and sorting.
  	 *    $(document).ready( function {
  	 *      $('#example').dataTable( {
  	 *        "paginate": false,
  	 *        "sort": false
  	 *      } );
  	 *    } );
  	 */
  	var DataTable = function ( options )
  	{
  		/**
  		 * Perform a jQuery selector action on the table's TR elements (from the tbody) and
  		 * return the resulting jQuery object.
  		 *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on
  		 *  @param {object} [oOpts] Optional parameters for modifying the rows to be included
  		 *  @param {string} [oOpts.filter=none] Select TR elements that meet the current filter
  		 *    criterion ("applied") or all TR elements (i.e. no filter).
  		 *  @param {string} [oOpts.order=current] Order of the TR elements in the processed array.
  		 *    Can be either 'current', whereby the current sorting of the table is used, or
  		 *    'original' whereby the original order the data was read into the table is used.
  		 *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page
  		 *    ("current") or not ("all"). If 'current' is given, then order is assumed to be
  		 *    'current' and filter is 'applied', regardless of what they might be given as.
  		 *  @returns {object} jQuery object, filtered by the given selector.
  		 *  @dtopt API
  		 *  @deprecated Since v1.10
  		 *
  		 *  @example
  		 *    $(document).ready(function() {
  		 *      var oTable = $('#example').dataTable();
  		 *
  		 *      // Highlight every second row
  		 *      oTable.$('tr:odd').css('backgroundColor', 'blue');
  		 *    } );
  		 *
  		 *  @example
  		 *    $(document).ready(function() {
  		 *      var oTable = $('#example').dataTable();
  		 *
  		 *      // Filter to rows with 'Webkit' in them, add a background colour and then
  		 *      // remove the filter, thus highlighting the 'Webkit' rows only.
  		 *      oTable.fnFilter('Webkit');
  		 *      oTable.$('tr', {"search": "applied"}).css('backgroundColor', 'blue');
  		 *      oTable.fnFilter('');
  		 *    } );
  		 */
  		this.$ = function ( sSelector, oOpts )
  		{
  			return this.api(true).$( sSelector, oOpts );
  		};
  		
  		
  		/**
  		 * Almost identical to $ in operation, but in this case returns the data for the matched
  		 * rows - as such, the jQuery selector used should match TR row nodes or TD/TH cell nodes
  		 * rather than any descendants, so the data can be obtained for the row/cell. If matching
  		 * rows are found, the data returned is the original data array/object that was used to
  		 * create the row (or a generated array if from a DOM source).
  		 *
  		 * This method is often useful in-combination with $ where both functions are given the
  		 * same parameters and the array indexes will match identically.
  		 *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on
  		 *  @param {object} [oOpts] Optional parameters for modifying the rows to be included
  		 *  @param {string} [oOpts.filter=none] Select elements that meet the current filter
  		 *    criterion ("applied") or all elements (i.e. no filter).
  		 *  @param {string} [oOpts.order=current] Order of the data in the processed array.
  		 *    Can be either 'current', whereby the current sorting of the table is used, or
  		 *    'original' whereby the original order the data was read into the table is used.
  		 *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page
  		 *    ("current") or not ("all"). If 'current' is given, then order is assumed to be
  		 *    'current' and filter is 'applied', regardless of what they might be given as.
  		 *  @returns {array} Data for the matched elements. If any elements, as a result of the
  		 *    selector, were not TR, TD or TH elements in the DataTable, they will have a null
  		 *    entry in the array.
  		 *  @dtopt API
  		 *  @deprecated Since v1.10
  		 *
  		 *  @example
  		 *    $(document).ready(function() {
  		 *      var oTable = $('#example').dataTable();
  		 *
  		 *      // Get the data from the first row in the table
  		 *      var data = oTable._('tr:first');
  		 *
  		 *      // Do something useful with the data
  		 *      alert( "First cell is: "+data[0] );
  		 *    } );
  		 *
  		 *  @example
  		 *    $(document).ready(function() {
  		 *      var oTable = $('#example').dataTable();
  		 *
  		 *      // Filter to 'Webkit' and get all data for
  		 *      oTable.fnFilter('Webkit');
  		 *      var data = oTable._('tr', {"search": "applied"});
  		 *
  		 *      // Do something with the data
  		 *      alert( data.length+" rows matched the search" );
  		 *    } );
  		 */
  		this._ = function ( sSelector, oOpts )
  		{
  			return this.api(true).rows( sSelector, oOpts ).data();
  		};
  		
  		
  		/**
  		 * Create a DataTables Api instance, with the currently selected tables for
  		 * the Api's context.
  		 * @param {boolean} [traditional=false] Set the API instance's context to be
  		 *   only the table referred to by the `DataTable.ext.iApiIndex` option, as was
  		 *   used in the API presented by DataTables 1.9- (i.e. the traditional mode),
  		 *   or if all tables captured in the jQuery object should be used.
  		 * @return {DataTables.Api}
  		 */
  		this.api = function ( traditional )
  		{
  			return traditional ?
  				new _Api(
  					_fnSettingsFromNode( this[ _ext.iApiIndex ] )
  				) :
  				new _Api( this );
  		};
  		
  		
  		/**
  		 * Add a single new row or multiple rows of data to the table. Please note
  		 * that this is suitable for client-side processing only - if you are using
  		 * server-side processing (i.e. "bServerSide": true), then to add data, you
  		 * must add it to the data source, i.e. the server-side, through an Ajax call.
  		 *  @param {array|object} data The data to be added to the table. This can be:
  		 *    <ul>
  		 *      <li>1D array of data - add a single row with the data provided</li>
  		 *      <li>2D array of arrays - add multiple rows in a single call</li>
  		 *      <li>object - data object when using <i>mData</i></li>
  		 *      <li>array of objects - multiple data objects when using <i>mData</i></li>
  		 *    </ul>
  		 *  @param {bool} [redraw=true] redraw the table or not
  		 *  @returns {array} An array of integers, representing the list of indexes in
  		 *    <i>aoData</i> ({@link DataTable.models.oSettings}) that have been added to
  		 *    the table.
  		 *  @dtopt API
  		 *  @deprecated Since v1.10
  		 *
  		 *  @example
  		 *    // Global var for counter
  		 *    var giCount = 2;
  		 *
  		 *    $(document).ready(function() {
  		 *      $('#example').dataTable();
  		 *    } );
  		 *
  		 *    function fnClickAddRow() {
  		 *      $('#example').dataTable().fnAddData( [
  		 *        giCount+".1",
  		 *        giCount+".2",
  		 *        giCount+".3",
  		 *        giCount+".4" ]
  		 *      );
  		 *
  		 *      giCount++;
  		 *    }
  		 */
  		this.fnAddData = function( data, redraw )
  		{
  			var api = this.api( true );
  		
  			/* Check if we want to add multiple rows or not */
  			var rows = $.isArray(data) && ( $.isArray(data[0]) || $.isPlainObject(data[0]) ) ?
  				api.rows.add( data ) :
  				api.row.add( data );
  		
  			if ( redraw === undefined$1 || redraw ) {
  				api.draw();
  			}
  		
  			return rows.flatten().toArray();
  		};
  		
  		
  		/**
  		 * This function will make DataTables recalculate the column sizes, based on the data
  		 * contained in the table and the sizes applied to the columns (in the DOM, CSS or
  		 * through the sWidth parameter). This can be useful when the width of the table's
  		 * parent element changes (for example a window resize).
  		 *  @param {boolean} [bRedraw=true] Redraw the table or not, you will typically want to
  		 *  @dtopt API
  		 *  @deprecated Since v1.10
  		 *
  		 *  @example
  		 *    $(document).ready(function() {
  		 *      var oTable = $('#example').dataTable( {
  		 *        "sScrollY": "200px",
  		 *        "bPaginate": false
  		 *      } );
  		 *
  		 *      $(window).on('resize', function () {
  		 *        oTable.fnAdjustColumnSizing();
  		 *      } );
  		 *    } );
  		 */
  		this.fnAdjustColumnSizing = function ( bRedraw )
  		{
  			var api = this.api( true ).columns.adjust();
  			var settings = api.settings()[0];
  			var scroll = settings.oScroll;
  		
  			if ( bRedraw === undefined$1 || bRedraw ) {
  				api.draw( false );
  			}
  			else if ( scroll.sX !== "" || scroll.sY !== "" ) {
  				/* If not redrawing, but scrolling, we want to apply the new column sizes anyway */
  				_fnScrollDraw( settings );
  			}
  		};
  		
  		
  		/**
  		 * Quickly and simply clear a table
  		 *  @param {bool} [bRedraw=true] redraw the table or not
  		 *  @dtopt API
  		 *  @deprecated Since v1.10
  		 *
  		 *  @example
  		 *    $(document).ready(function() {
  		 *      var oTable = $('#example').dataTable();
  		 *
  		 *      // Immediately 'nuke' the current rows (perhaps waiting for an Ajax callback...)
  		 *      oTable.fnClearTable();
  		 *    } );
  		 */
  		this.fnClearTable = function( bRedraw )
  		{
  			var api = this.api( true ).clear();
  		
  			if ( bRedraw === undefined$1 || bRedraw ) {
  				api.draw();
  			}
  		};
  		
  		
  		/**
  		 * The exact opposite of 'opening' a row, this function will close any rows which
  		 * are currently 'open'.
  		 *  @param {node} nTr the table row to 'close'
  		 *  @returns {int} 0 on success, or 1 if failed (can't find the row)
  		 *  @dtopt API
  		 *  @deprecated Since v1.10
  		 *
  		 *  @example
  		 *    $(document).ready(function() {
  		 *      var oTable;
  		 *
  		 *      // 'open' an information row when a row is clicked on
  		 *      $('#example tbody tr').click( function () {
  		 *        if ( oTable.fnIsOpen(this) ) {
  		 *          oTable.fnClose( this );
  		 *        } else {
  		 *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
  		 *        }
  		 *      } );
  		 *
  		 *      oTable = $('#example').dataTable();
  		 *    } );
  		 */
  		this.fnClose = function( nTr )
  		{
  			this.api( true ).row( nTr ).child.hide();
  		};
  		
  		
  		/**
  		 * Remove a row for the table
  		 *  @param {mixed} target The index of the row from aoData to be deleted, or
  		 *    the TR element you want to delete
  		 *  @param {function|null} [callBack] Callback function
  		 *  @param {bool} [redraw=true] Redraw the table or not
  		 *  @returns {array} The row that was deleted
  		 *  @dtopt API
  		 *  @deprecated Since v1.10
  		 *
  		 *  @example
  		 *    $(document).ready(function() {
  		 *      var oTable = $('#example').dataTable();
  		 *
  		 *      // Immediately remove the first row
  		 *      oTable.fnDeleteRow( 0 );
  		 *    } );
  		 */
  		this.fnDeleteRow = function( target, callback, redraw )
  		{
  			var api = this.api( true );
  			var rows = api.rows( target );
  			var settings = rows.settings()[0];
  			var data = settings.aoData[ rows[0][0] ];
  		
  			rows.remove();
  		
  			if ( callback ) {
  				callback.call( this, settings, data );
  			}
  		
  			if ( redraw === undefined$1 || redraw ) {
  				api.draw();
  			}
  		
  			return data;
  		};
  		
  		
  		/**
  		 * Restore the table to it's original state in the DOM by removing all of DataTables
  		 * enhancements, alterations to the DOM structure of the table and event listeners.
  		 *  @param {boolean} [remove=false] Completely remove the table from the DOM
  		 *  @dtopt API
  		 *  @deprecated Since v1.10
  		 *
  		 *  @example
  		 *    $(document).ready(function() {
  		 *      // This example is fairly pointless in reality, but shows how fnDestroy can be used
  		 *      var oTable = $('#example').dataTable();
  		 *      oTable.fnDestroy();
  		 *    } );
  		 */
  		this.fnDestroy = function ( remove )
  		{
  			this.api( true ).destroy( remove );
  		};
  		
  		
  		/**
  		 * Redraw the table
  		 *  @param {bool} [complete=true] Re-filter and resort (if enabled) the table before the draw.
  		 *  @dtopt API
  		 *  @deprecated Since v1.10
  		 *
  		 *  @example
  		 *    $(document).ready(function() {
  		 *      var oTable = $('#example').dataTable();
  		 *
  		 *      // Re-draw the table - you wouldn't want to do it here, but it's an example :-)
  		 *      oTable.fnDraw();
  		 *    } );
  		 */
  		this.fnDraw = function( complete )
  		{
  			// Note that this isn't an exact match to the old call to _fnDraw - it takes
  			// into account the new data, but can hold position.
  			this.api( true ).draw( complete );
  		};
  		
  		
  		/**
  		 * Filter the input based on data
  		 *  @param {string} sInput String to filter the table on
  		 *  @param {int|null} [iColumn] Column to limit filtering to
  		 *  @param {bool} [bRegex=false] Treat as regular expression or not
  		 *  @param {bool} [bSmart=true] Perform smart filtering or not
  		 *  @param {bool} [bShowGlobal=true] Show the input global filter in it's input box(es)
  		 *  @param {bool} [bCaseInsensitive=true] Do case-insensitive matching (true) or not (false)
  		 *  @dtopt API
  		 *  @deprecated Since v1.10
  		 *
  		 *  @example
  		 *    $(document).ready(function() {
  		 *      var oTable = $('#example').dataTable();
  		 *
  		 *      // Sometime later - filter...
  		 *      oTable.fnFilter( 'test string' );
  		 *    } );
  		 */
  		this.fnFilter = function( sInput, iColumn, bRegex, bSmart, bShowGlobal, bCaseInsensitive )
  		{
  			var api = this.api( true );
  		
  			if ( iColumn === null || iColumn === undefined$1 ) {
  				api.search( sInput, bRegex, bSmart, bCaseInsensitive );
  			}
  			else {
  				api.column( iColumn ).search( sInput, bRegex, bSmart, bCaseInsensitive );
  			}
  		
  			api.draw();
  		};
  		
  		
  		/**
  		 * Get the data for the whole table, an individual row or an individual cell based on the
  		 * provided parameters.
  		 *  @param {int|node} [src] A TR row node, TD/TH cell node or an integer. If given as
  		 *    a TR node then the data source for the whole row will be returned. If given as a
  		 *    TD/TH cell node then iCol will be automatically calculated and the data for the
  		 *    cell returned. If given as an integer, then this is treated as the aoData internal
  		 *    data index for the row (see fnGetPosition) and the data for that row used.
  		 *  @param {int} [col] Optional column index that you want the data of.
  		 *  @returns {array|object|string} If mRow is undefined, then the data for all rows is
  		 *    returned. If mRow is defined, just data for that row, and is iCol is
  		 *    defined, only data for the designated cell is returned.
  		 *  @dtopt API
  		 *  @deprecated Since v1.10
  		 *
  		 *  @example
  		 *    // Row data
  		 *    $(document).ready(function() {
  		 *      oTable = $('#example').dataTable();
  		 *
  		 *      oTable.$('tr').click( function () {
  		 *        var data = oTable.fnGetData( this );
  		 *        // ... do something with the array / object of data for the row
  		 *      } );
  		 *    } );
  		 *
  		 *  @example
  		 *    // Individual cell data
  		 *    $(document).ready(function() {
  		 *      oTable = $('#example').dataTable();
  		 *
  		 *      oTable.$('td').click( function () {
  		 *        var sData = oTable.fnGetData( this );
  		 *        alert( 'The cell clicked on had the value of '+sData );
  		 *      } );
  		 *    } );
  		 */
  		this.fnGetData = function( src, col )
  		{
  			var api = this.api( true );
  		
  			if ( src !== undefined$1 ) {
  				var type = src.nodeName ? src.nodeName.toLowerCase() : '';
  		
  				return col !== undefined$1 || type == 'td' || type == 'th' ?
  					api.cell( src, col ).data() :
  					api.row( src ).data() || null;
  			}
  		
  			return api.data().toArray();
  		};
  		
  		
  		/**
  		 * Get an array of the TR nodes that are used in the table's body. Note that you will
  		 * typically want to use the '$' API method in preference to this as it is more
  		 * flexible.
  		 *  @param {int} [iRow] Optional row index for the TR element you want
  		 *  @returns {array|node} If iRow is undefined, returns an array of all TR elements
  		 *    in the table's body, or iRow is defined, just the TR element requested.
  		 *  @dtopt API
  		 *  @deprecated Since v1.10
  		 *
  		 *  @example
  		 *    $(document).ready(function() {
  		 *      var oTable = $('#example').dataTable();
  		 *
  		 *      // Get the nodes from the table
  		 *      var nNodes = oTable.fnGetNodes( );
  		 *    } );
  		 */
  		this.fnGetNodes = function( iRow )
  		{
  			var api = this.api( true );
  		
  			return iRow !== undefined$1 ?
  				api.row( iRow ).node() :
  				api.rows().nodes().flatten().toArray();
  		};
  		
  		
  		/**
  		 * Get the array indexes of a particular cell from it's DOM element
  		 * and column index including hidden columns
  		 *  @param {node} node this can either be a TR, TD or TH in the table's body
  		 *  @returns {int} If nNode is given as a TR, then a single index is returned, or
  		 *    if given as a cell, an array of [row index, column index (visible),
  		 *    column index (all)] is given.
  		 *  @dtopt API
  		 *  @deprecated Since v1.10
  		 *
  		 *  @example
  		 *    $(document).ready(function() {
  		 *      $('#example tbody td').click( function () {
  		 *        // Get the position of the current data from the node
  		 *        var aPos = oTable.fnGetPosition( this );
  		 *
  		 *        // Get the data array for this row
  		 *        var aData = oTable.fnGetData( aPos[0] );
  		 *
  		 *        // Update the data array and return the value
  		 *        aData[ aPos[1] ] = 'clicked';
  		 *        this.innerHTML = 'clicked';
  		 *      } );
  		 *
  		 *      // Init DataTables
  		 *      oTable = $('#example').dataTable();
  		 *    } );
  		 */
  		this.fnGetPosition = function( node )
  		{
  			var api = this.api( true );
  			var nodeName = node.nodeName.toUpperCase();
  		
  			if ( nodeName == 'TR' ) {
  				return api.row( node ).index();
  			}
  			else if ( nodeName == 'TD' || nodeName == 'TH' ) {
  				var cell = api.cell( node ).index();
  		
  				return [
  					cell.row,
  					cell.columnVisible,
  					cell.column
  				];
  			}
  			return null;
  		};
  		
  		
  		/**
  		 * Check to see if a row is 'open' or not.
  		 *  @param {node} nTr the table row to check
  		 *  @returns {boolean} true if the row is currently open, false otherwise
  		 *  @dtopt API
  		 *  @deprecated Since v1.10
  		 *
  		 *  @example
  		 *    $(document).ready(function() {
  		 *      var oTable;
  		 *
  		 *      // 'open' an information row when a row is clicked on
  		 *      $('#example tbody tr').click( function () {
  		 *        if ( oTable.fnIsOpen(this) ) {
  		 *          oTable.fnClose( this );
  		 *        } else {
  		 *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
  		 *        }
  		 *      } );
  		 *
  		 *      oTable = $('#example').dataTable();
  		 *    } );
  		 */
  		this.fnIsOpen = function( nTr )
  		{
  			return this.api( true ).row( nTr ).child.isShown();
  		};
  		
  		
  		/**
  		 * This function will place a new row directly after a row which is currently
  		 * on display on the page, with the HTML contents that is passed into the
  		 * function. This can be used, for example, to ask for confirmation that a
  		 * particular record should be deleted.
  		 *  @param {node} nTr The table row to 'open'
  		 *  @param {string|node|jQuery} mHtml The HTML to put into the row
  		 *  @param {string} sClass Class to give the new TD cell
  		 *  @returns {node} The row opened. Note that if the table row passed in as the
  		 *    first parameter, is not found in the table, this method will silently
  		 *    return.
  		 *  @dtopt API
  		 *  @deprecated Since v1.10
  		 *
  		 *  @example
  		 *    $(document).ready(function() {
  		 *      var oTable;
  		 *
  		 *      // 'open' an information row when a row is clicked on
  		 *      $('#example tbody tr').click( function () {
  		 *        if ( oTable.fnIsOpen(this) ) {
  		 *          oTable.fnClose( this );
  		 *        } else {
  		 *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
  		 *        }
  		 *      } );
  		 *
  		 *      oTable = $('#example').dataTable();
  		 *    } );
  		 */
  		this.fnOpen = function( nTr, mHtml, sClass )
  		{
  			return this.api( true )
  				.row( nTr )
  				.child( mHtml, sClass )
  				.show()
  				.child()[0];
  		};
  		
  		
  		/**
  		 * Change the pagination - provides the internal logic for pagination in a simple API
  		 * function. With this function you can have a DataTables table go to the next,
  		 * previous, first or last pages.
  		 *  @param {string|int} mAction Paging action to take: "first", "previous", "next" or "last"
  		 *    or page number to jump to (integer), note that page 0 is the first page.
  		 *  @param {bool} [bRedraw=true] Redraw the table or not
  		 *  @dtopt API
  		 *  @deprecated Since v1.10
  		 *
  		 *  @example
  		 *    $(document).ready(function() {
  		 *      var oTable = $('#example').dataTable();
  		 *      oTable.fnPageChange( 'next' );
  		 *    } );
  		 */
  		this.fnPageChange = function ( mAction, bRedraw )
  		{
  			var api = this.api( true ).page( mAction );
  		
  			if ( bRedraw === undefined$1 || bRedraw ) {
  				api.draw(false);
  			}
  		};
  		
  		
  		/**
  		 * Show a particular column
  		 *  @param {int} iCol The column whose display should be changed
  		 *  @param {bool} bShow Show (true) or hide (false) the column
  		 *  @param {bool} [bRedraw=true] Redraw the table or not
  		 *  @dtopt API
  		 *  @deprecated Since v1.10
  		 *
  		 *  @example
  		 *    $(document).ready(function() {
  		 *      var oTable = $('#example').dataTable();
  		 *
  		 *      // Hide the second column after initialisation
  		 *      oTable.fnSetColumnVis( 1, false );
  		 *    } );
  		 */
  		this.fnSetColumnVis = function ( iCol, bShow, bRedraw )
  		{
  			var api = this.api( true ).column( iCol ).visible( bShow );
  		
  			if ( bRedraw === undefined$1 || bRedraw ) {
  				api.columns.adjust().draw();
  			}
  		};
  		
  		
  		/**
  		 * Get the settings for a particular table for external manipulation
  		 *  @returns {object} DataTables settings object. See
  		 *    {@link DataTable.models.oSettings}
  		 *  @dtopt API
  		 *  @deprecated Since v1.10
  		 *
  		 *  @example
  		 *    $(document).ready(function() {
  		 *      var oTable = $('#example').dataTable();
  		 *      var oSettings = oTable.fnSettings();
  		 *
  		 *      // Show an example parameter from the settings
  		 *      alert( oSettings._iDisplayStart );
  		 *    } );
  		 */
  		this.fnSettings = function()
  		{
  			return _fnSettingsFromNode( this[_ext.iApiIndex] );
  		};
  		
  		
  		/**
  		 * Sort the table by a particular column
  		 *  @param {int} iCol the data index to sort on. Note that this will not match the
  		 *    'display index' if you have hidden data entries
  		 *  @dtopt API
  		 *  @deprecated Since v1.10
  		 *
  		 *  @example
  		 *    $(document).ready(function() {
  		 *      var oTable = $('#example').dataTable();
  		 *
  		 *      // Sort immediately with columns 0 and 1
  		 *      oTable.fnSort( [ [0,'asc'], [1,'asc'] ] );
  		 *    } );
  		 */
  		this.fnSort = function( aaSort )
  		{
  			this.api( true ).order( aaSort ).draw();
  		};
  		
  		
  		/**
  		 * Attach a sort listener to an element for a given column
  		 *  @param {node} nNode the element to attach the sort listener to
  		 *  @param {int} iColumn the column that a click on this node will sort on
  		 *  @param {function} [fnCallback] callback function when sort is run
  		 *  @dtopt API
  		 *  @deprecated Since v1.10
  		 *
  		 *  @example
  		 *    $(document).ready(function() {
  		 *      var oTable = $('#example').dataTable();
  		 *
  		 *      // Sort on column 1, when 'sorter' is clicked on
  		 *      oTable.fnSortListener( document.getElementById('sorter'), 1 );
  		 *    } );
  		 */
  		this.fnSortListener = function( nNode, iColumn, fnCallback )
  		{
  			this.api( true ).order.listener( nNode, iColumn, fnCallback );
  		};
  		
  		
  		/**
  		 * Update a table cell or row - this method will accept either a single value to
  		 * update the cell with, an array of values with one element for each column or
  		 * an object in the same format as the original data source. The function is
  		 * self-referencing in order to make the multi column updates easier.
  		 *  @param {object|array|string} mData Data to update the cell/row with
  		 *  @param {node|int} mRow TR element you want to update or the aoData index
  		 *  @param {int} [iColumn] The column to update, give as null or undefined to
  		 *    update a whole row.
  		 *  @param {bool} [bRedraw=true] Redraw the table or not
  		 *  @param {bool} [bAction=true] Perform pre-draw actions or not
  		 *  @returns {int} 0 on success, 1 on error
  		 *  @dtopt API
  		 *  @deprecated Since v1.10
  		 *
  		 *  @example
  		 *    $(document).ready(function() {
  		 *      var oTable = $('#example').dataTable();
  		 *      oTable.fnUpdate( 'Example update', 0, 0 ); // Single cell
  		 *      oTable.fnUpdate( ['a', 'b', 'c', 'd', 'e'], $('tbody tr')[0] ); // Row
  		 *    } );
  		 */
  		this.fnUpdate = function( mData, mRow, iColumn, bRedraw, bAction )
  		{
  			var api = this.api( true );
  		
  			if ( iColumn === undefined$1 || iColumn === null ) {
  				api.row( mRow ).data( mData );
  			}
  			else {
  				api.cell( mRow, iColumn ).data( mData );
  			}
  		
  			if ( bAction === undefined$1 || bAction ) {
  				api.columns.adjust();
  			}
  		
  			if ( bRedraw === undefined$1 || bRedraw ) {
  				api.draw();
  			}
  			return 0;
  		};
  		
  		
  		/**
  		 * Provide a common method for plug-ins to check the version of DataTables being used, in order
  		 * to ensure compatibility.
  		 *  @param {string} sVersion Version string to check for, in the format "X.Y.Z". Note that the
  		 *    formats "X" and "X.Y" are also acceptable.
  		 *  @returns {boolean} true if this version of DataTables is greater or equal to the required
  		 *    version, or false if this version of DataTales is not suitable
  		 *  @method
  		 *  @dtopt API
  		 *  @deprecated Since v1.10
  		 *
  		 *  @example
  		 *    $(document).ready(function() {
  		 *      var oTable = $('#example').dataTable();
  		 *      alert( oTable.fnVersionCheck( '1.9.0' ) );
  		 *    } );
  		 */
  		this.fnVersionCheck = _ext.fnVersionCheck;
  		

  		var _that = this;
  		var emptyInit = options === undefined$1;
  		var len = this.length;

  		if ( emptyInit ) {
  			options = {};
  		}

  		this.oApi = this.internal = _ext.internal;

  		// Extend with old style plug-in API methods
  		for ( var fn in DataTable.ext.internal ) {
  			if ( fn ) {
  				this[fn] = _fnExternApiFunc(fn);
  			}
  		}

  		this.each(function() {
  			// For each initialisation we want to give it a clean initialisation
  			// object that can be bashed around
  			var o = {};
  			var oInit = len > 1 ? // optimisation for single table case
  				_fnExtend( o, options, true ) :
  				options;

  			/*global oInit,_that,emptyInit*/
  			var i=0, iLen;
  			var sId = this.getAttribute( 'id' );
  			var bInitHandedOff = false;
  			var defaults = DataTable.defaults;
  			var $this = $(this);
  			
  			
  			/* Sanity check */
  			if ( this.nodeName.toLowerCase() != 'table' )
  			{
  				_fnLog( null, 0, 'Non-table node initialisation ('+this.nodeName+')', 2 );
  				return;
  			}
  			
  			/* Backwards compatibility for the defaults */
  			_fnCompatOpts( defaults );
  			_fnCompatCols( defaults.column );
  			
  			/* Convert the camel-case defaults to Hungarian */
  			_fnCamelToHungarian( defaults, defaults, true );
  			_fnCamelToHungarian( defaults.column, defaults.column, true );
  			
  			/* Setting up the initialisation object */
  			_fnCamelToHungarian( defaults, $.extend( oInit, $this.data() ), true );
  			
  			
  			
  			/* Check to see if we are re-initialising a table */
  			var allSettings = DataTable.settings;
  			for ( i=0, iLen=allSettings.length ; i<iLen ; i++ )
  			{
  				var s = allSettings[i];
  			
  				/* Base check on table node */
  				if (
  					s.nTable == this ||
  					(s.nTHead && s.nTHead.parentNode == this) ||
  					(s.nTFoot && s.nTFoot.parentNode == this)
  				) {
  					var bRetrieve = oInit.bRetrieve !== undefined$1 ? oInit.bRetrieve : defaults.bRetrieve;
  					var bDestroy = oInit.bDestroy !== undefined$1 ? oInit.bDestroy : defaults.bDestroy;
  			
  					if ( emptyInit || bRetrieve )
  					{
  						return s.oInstance;
  					}
  					else if ( bDestroy )
  					{
  						s.oInstance.fnDestroy();
  						break;
  					}
  					else
  					{
  						_fnLog( s, 0, 'Cannot reinitialise DataTable', 3 );
  						return;
  					}
  				}
  			
  				/* If the element we are initialising has the same ID as a table which was previously
  				 * initialised, but the table nodes don't match (from before) then we destroy the old
  				 * instance by simply deleting it. This is under the assumption that the table has been
  				 * destroyed by other methods. Anyone using non-id selectors will need to do this manually
  				 */
  				if ( s.sTableId == this.id )
  				{
  					allSettings.splice( i, 1 );
  					break;
  				}
  			}
  			
  			/* Ensure the table has an ID - required for accessibility */
  			if ( sId === null || sId === "" )
  			{
  				sId = "DataTables_Table_"+(DataTable.ext._unique++);
  				this.id = sId;
  			}
  			
  			/* Create the settings object for this table and set some of the default parameters */
  			var oSettings = $.extend( true, {}, DataTable.models.oSettings, {
  				"sDestroyWidth": $this[0].style.width,
  				"sInstance":     sId,
  				"sTableId":      sId
  			} );
  			oSettings.nTable = this;
  			oSettings.oApi   = _that.internal;
  			oSettings.oInit  = oInit;
  			
  			allSettings.push( oSettings );
  			
  			// Need to add the instance after the instance after the settings object has been added
  			// to the settings array, so we can self reference the table instance if more than one
  			oSettings.oInstance = (_that.length===1) ? _that : $this.dataTable();
  			
  			// Backwards compatibility, before we apply all the defaults
  			_fnCompatOpts( oInit );
  			_fnLanguageCompat( oInit.oLanguage );
  			
  			// If the length menu is given, but the init display length is not, use the length menu
  			if ( oInit.aLengthMenu && ! oInit.iDisplayLength )
  			{
  				oInit.iDisplayLength = $.isArray( oInit.aLengthMenu[0] ) ?
  					oInit.aLengthMenu[0][0] : oInit.aLengthMenu[0];
  			}
  			
  			// Apply the defaults and init options to make a single init object will all
  			// options defined from defaults and instance options.
  			oInit = _fnExtend( $.extend( true, {}, defaults ), oInit );
  			
  			
  			// Map the initialisation options onto the settings object
  			_fnMap( oSettings.oFeatures, oInit, [
  				"bPaginate",
  				"bLengthChange",
  				"bFilter",
  				"bSort",
  				"bSortMulti",
  				"bInfo",
  				"bProcessing",
  				"bAutoWidth",
  				"bSortClasses",
  				"bServerSide",
  				"bDeferRender"
  			] );
  			_fnMap( oSettings, oInit, [
  				"asStripeClasses",
  				"ajax",
  				"fnServerData",
  				"fnFormatNumber",
  				"sServerMethod",
  				"aaSorting",
  				"aaSortingFixed",
  				"aLengthMenu",
  				"sPaginationType",
  				"sAjaxSource",
  				"sAjaxDataProp",
  				"iStateDuration",
  				"sDom",
  				"bSortCellsTop",
  				"iTabIndex",
  				"fnStateLoadCallback",
  				"fnStateSaveCallback",
  				"renderer",
  				"searchDelay",
  				"rowId",
  				[ "iCookieDuration", "iStateDuration" ], // backwards compat
  				[ "oSearch", "oPreviousSearch" ],
  				[ "aoSearchCols", "aoPreSearchCols" ],
  				[ "iDisplayLength", "_iDisplayLength" ]
  			] );
  			_fnMap( oSettings.oScroll, oInit, [
  				[ "sScrollX", "sX" ],
  				[ "sScrollXInner", "sXInner" ],
  				[ "sScrollY", "sY" ],
  				[ "bScrollCollapse", "bCollapse" ]
  			] );
  			_fnMap( oSettings.oLanguage, oInit, "fnInfoCallback" );
  			
  			/* Callback functions which are array driven */
  			_fnCallbackReg( oSettings, 'aoDrawCallback',       oInit.fnDrawCallback,      'user' );
  			_fnCallbackReg( oSettings, 'aoServerParams',       oInit.fnServerParams,      'user' );
  			_fnCallbackReg( oSettings, 'aoStateSaveParams',    oInit.fnStateSaveParams,   'user' );
  			_fnCallbackReg( oSettings, 'aoStateLoadParams',    oInit.fnStateLoadParams,   'user' );
  			_fnCallbackReg( oSettings, 'aoStateLoaded',        oInit.fnStateLoaded,       'user' );
  			_fnCallbackReg( oSettings, 'aoRowCallback',        oInit.fnRowCallback,       'user' );
  			_fnCallbackReg( oSettings, 'aoRowCreatedCallback', oInit.fnCreatedRow,        'user' );
  			_fnCallbackReg( oSettings, 'aoHeaderCallback',     oInit.fnHeaderCallback,    'user' );
  			_fnCallbackReg( oSettings, 'aoFooterCallback',     oInit.fnFooterCallback,    'user' );
  			_fnCallbackReg( oSettings, 'aoInitComplete',       oInit.fnInitComplete,      'user' );
  			_fnCallbackReg( oSettings, 'aoPreDrawCallback',    oInit.fnPreDrawCallback,   'user' );
  			
  			oSettings.rowIdFn = _fnGetObjectDataFn( oInit.rowId );
  			
  			/* Browser support detection */
  			_fnBrowserDetect( oSettings );
  			
  			var oClasses = oSettings.oClasses;
  			
  			$.extend( oClasses, DataTable.ext.classes, oInit.oClasses );
  			$this.addClass( oClasses.sTable );
  			
  			
  			if ( oSettings.iInitDisplayStart === undefined$1 )
  			{
  				/* Display start point, taking into account the save saving */
  				oSettings.iInitDisplayStart = oInit.iDisplayStart;
  				oSettings._iDisplayStart = oInit.iDisplayStart;
  			}
  			
  			if ( oInit.iDeferLoading !== null )
  			{
  				oSettings.bDeferLoading = true;
  				var tmp = $.isArray( oInit.iDeferLoading );
  				oSettings._iRecordsDisplay = tmp ? oInit.iDeferLoading[0] : oInit.iDeferLoading;
  				oSettings._iRecordsTotal = tmp ? oInit.iDeferLoading[1] : oInit.iDeferLoading;
  			}
  			
  			/* Language definitions */
  			var oLanguage = oSettings.oLanguage;
  			$.extend( true, oLanguage, oInit.oLanguage );
  			
  			if ( oLanguage.sUrl )
  			{
  				/* Get the language definitions from a file - because this Ajax call makes the language
  				 * get async to the remainder of this function we use bInitHandedOff to indicate that
  				 * _fnInitialise will be fired by the returned Ajax handler, rather than the constructor
  				 */
  				$.ajax( {
  					dataType: 'json',
  					url: oLanguage.sUrl,
  					success: function ( json ) {
  						_fnLanguageCompat( json );
  						_fnCamelToHungarian( defaults.oLanguage, json );
  						$.extend( true, oLanguage, json );
  						_fnInitialise( oSettings );
  					},
  					error: function () {
  						// Error occurred loading language file, continue on as best we can
  						_fnInitialise( oSettings );
  					}
  				} );
  				bInitHandedOff = true;
  			}
  			
  			/*
  			 * Stripes
  			 */
  			if ( oInit.asStripeClasses === null )
  			{
  				oSettings.asStripeClasses =[
  					oClasses.sStripeOdd,
  					oClasses.sStripeEven
  				];
  			}
  			
  			/* Remove row stripe classes if they are already on the table row */
  			var stripeClasses = oSettings.asStripeClasses;
  			var rowOne = $this.children('tbody').find('tr').eq(0);
  			if ( $.inArray( true, $.map( stripeClasses, function(el, i) {
  				return rowOne.hasClass(el);
  			} ) ) !== -1 ) {
  				$('tbody tr', this).removeClass( stripeClasses.join(' ') );
  				oSettings.asDestroyStripes = stripeClasses.slice();
  			}
  			
  			/*
  			 * Columns
  			 * See if we should load columns automatically or use defined ones
  			 */
  			var anThs = [];
  			var aoColumnsInit;
  			var nThead = this.getElementsByTagName('thead');
  			if ( nThead.length !== 0 )
  			{
  				_fnDetectHeader( oSettings.aoHeader, nThead[0] );
  				anThs = _fnGetUniqueThs( oSettings );
  			}
  			
  			/* If not given a column array, generate one with nulls */
  			if ( oInit.aoColumns === null )
  			{
  				aoColumnsInit = [];
  				for ( i=0, iLen=anThs.length ; i<iLen ; i++ )
  				{
  					aoColumnsInit.push( null );
  				}
  			}
  			else
  			{
  				aoColumnsInit = oInit.aoColumns;
  			}
  			
  			/* Add the columns */
  			for ( i=0, iLen=aoColumnsInit.length ; i<iLen ; i++ )
  			{
  				_fnAddColumn( oSettings, anThs ? anThs[i] : null );
  			}
  			
  			/* Apply the column definitions */
  			_fnApplyColumnDefs( oSettings, oInit.aoColumnDefs, aoColumnsInit, function (iCol, oDef) {
  				_fnColumnOptions( oSettings, iCol, oDef );
  			} );
  			
  			/* HTML5 attribute detection - build an mData object automatically if the
  			 * attributes are found
  			 */
  			if ( rowOne.length ) {
  				var a = function ( cell, name ) {
  					return cell.getAttribute( 'data-'+name ) !== null ? name : null;
  				};
  			
  				$( rowOne[0] ).children('th, td').each( function (i, cell) {
  					var col = oSettings.aoColumns[i];
  			
  					if ( col.mData === i ) {
  						var sort = a( cell, 'sort' ) || a( cell, 'order' );
  						var filter = a( cell, 'filter' ) || a( cell, 'search' );
  			
  						if ( sort !== null || filter !== null ) {
  							col.mData = {
  								_:      i+'.display',
  								sort:   sort !== null   ? i+'.@data-'+sort   : undefined$1,
  								type:   sort !== null   ? i+'.@data-'+sort   : undefined$1,
  								filter: filter !== null ? i+'.@data-'+filter : undefined$1
  							};
  			
  							_fnColumnOptions( oSettings, i );
  						}
  					}
  				} );
  			}
  			
  			var features = oSettings.oFeatures;
  			var loadedInit = function () {
  				/*
  				 * Sorting
  				 * @todo For modularisation (1.11) this needs to do into a sort start up handler
  				 */
  			
  				// If aaSorting is not defined, then we use the first indicator in asSorting
  				// in case that has been altered, so the default sort reflects that option
  				if ( oInit.aaSorting === undefined$1 ) {
  					var sorting = oSettings.aaSorting;
  					for ( i=0, iLen=sorting.length ; i<iLen ; i++ ) {
  						sorting[i][1] = oSettings.aoColumns[ i ].asSorting[0];
  					}
  				}
  			
  				/* Do a first pass on the sorting classes (allows any size changes to be taken into
  				 * account, and also will apply sorting disabled classes if disabled
  				 */
  				_fnSortingClasses( oSettings );
  			
  				if ( features.bSort ) {
  					_fnCallbackReg( oSettings, 'aoDrawCallback', function () {
  						if ( oSettings.bSorted ) {
  							var aSort = _fnSortFlatten( oSettings );
  							var sortedColumns = {};
  			
  							$.each( aSort, function (i, val) {
  								sortedColumns[ val.src ] = val.dir;
  							} );
  			
  							_fnCallbackFire( oSettings, null, 'order', [oSettings, aSort, sortedColumns] );
  							_fnSortAria( oSettings );
  						}
  					} );
  				}
  			
  				_fnCallbackReg( oSettings, 'aoDrawCallback', function () {
  					if ( oSettings.bSorted || _fnDataSource( oSettings ) === 'ssp' || features.bDeferRender ) {
  						_fnSortingClasses( oSettings );
  					}
  				}, 'sc' );
  			
  			
  				/*
  				 * Final init
  				 * Cache the header, body and footer as required, creating them if needed
  				 */
  			
  				// Work around for Webkit bug 83867 - store the caption-side before removing from doc
  				var captions = $this.children('caption').each( function () {
  					this._captionSide = $(this).css('caption-side');
  				} );
  			
  				var thead = $this.children('thead');
  				if ( thead.length === 0 ) {
  					thead = $('<thead/>').appendTo($this);
  				}
  				oSettings.nTHead = thead[0];
  			
  				var tbody = $this.children('tbody');
  				if ( tbody.length === 0 ) {
  					tbody = $('<tbody/>').appendTo($this);
  				}
  				oSettings.nTBody = tbody[0];
  			
  				var tfoot = $this.children('tfoot');
  				if ( tfoot.length === 0 && captions.length > 0 && (oSettings.oScroll.sX !== "" || oSettings.oScroll.sY !== "") ) {
  					// If we are a scrolling table, and no footer has been given, then we need to create
  					// a tfoot element for the caption element to be appended to
  					tfoot = $('<tfoot/>').appendTo($this);
  				}
  			
  				if ( tfoot.length === 0 || tfoot.children().length === 0 ) {
  					$this.addClass( oClasses.sNoFooter );
  				}
  				else if ( tfoot.length > 0 ) {
  					oSettings.nTFoot = tfoot[0];
  					_fnDetectHeader( oSettings.aoFooter, oSettings.nTFoot );
  				}
  			
  				/* Check if there is data passing into the constructor */
  				if ( oInit.aaData ) {
  					for ( i=0 ; i<oInit.aaData.length ; i++ ) {
  						_fnAddData( oSettings, oInit.aaData[ i ] );
  					}
  				}
  				else if ( oSettings.bDeferLoading || _fnDataSource( oSettings ) == 'dom' ) {
  					/* Grab the data from the page - only do this when deferred loading or no Ajax
  					 * source since there is no point in reading the DOM data if we are then going
  					 * to replace it with Ajax data
  					 */
  					_fnAddTr( oSettings, $(oSettings.nTBody).children('tr') );
  				}
  			
  				/* Copy the data index array */
  				oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();
  			
  				/* Initialisation complete - table can be drawn */
  				oSettings.bInitialised = true;
  			
  				/* Check if we need to initialise the table (it might not have been handed off to the
  				 * language processor)
  				 */
  				if ( bInitHandedOff === false ) {
  					_fnInitialise( oSettings );
  				}
  			};
  			
  			/* Must be done after everything which can be overridden by the state saving! */
  			if ( oInit.bStateSave )
  			{
  				features.bStateSave = true;
  				_fnCallbackReg( oSettings, 'aoDrawCallback', _fnSaveState, 'state_save' );
  				_fnLoadState( oSettings, oInit, loadedInit );
  			}
  			else {
  				loadedInit();
  			}
  			
  		} );
  		_that = null;
  		return this;
  	};

  	
  	/*
  	 * It is useful to have variables which are scoped locally so only the
  	 * DataTables functions can access them and they don't leak into global space.
  	 * At the same time these functions are often useful over multiple files in the
  	 * core and API, so we list, or at least document, all variables which are used
  	 * by DataTables as private variables here. This also ensures that there is no
  	 * clashing of variable names and that they can easily referenced for reuse.
  	 */
  	
  	
  	// Defined else where
  	//  _selector_run
  	//  _selector_opts
  	//  _selector_first
  	//  _selector_row_indexes
  	
  	var _ext; // DataTable.ext
  	var _Api; // DataTable.Api
  	var _api_register; // DataTable.Api.register
  	var _api_registerPlural; // DataTable.Api.registerPlural
  	
  	var _re_dic = {};
  	var _re_new_lines = /[\r\n\u2028]/g;
  	var _re_html = /<.*?>/g;
  	
  	// This is not strict ISO8601 - Date.parse() is quite lax, although
  	// implementations differ between browsers.
  	var _re_date = /^\d{2,4}[\.\/\-]\d{1,2}[\.\/\-]\d{1,2}([T ]{1}\d{1,2}[:\.]\d{2}([\.:]\d{2})?)?$/;
  	
  	// Escape regular expression special characters
  	var _re_escape_regex = new RegExp( '(\\' + [ '/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\', '$', '^', '-' ].join('|\\') + ')', 'g' );
  	
  	// http://en.wikipedia.org/wiki/Foreign_exchange_market
  	// - \u20BD - Russian ruble.
  	// - \u20a9 - South Korean Won
  	// - \u20BA - Turkish Lira
  	// - \u20B9 - Indian Rupee
  	// - R - Brazil (R$) and South Africa
  	// - fr - Swiss Franc
  	// - kr - Swedish krona, Norwegian krone and Danish krone
  	// - \u2009 is thin space and \u202F is narrow no-break space, both used in many
  	// - Ƀ - Bitcoin
  	// - Ξ - Ethereum
  	//   standards as thousands separators.
  	var _re_formatted_numeric = /[',$£€¥%\u2009\u202F\u20BD\u20a9\u20BArfkɃΞ]/gi;
  	
  	
  	var _empty = function ( d ) {
  		return !d || d === true || d === '-' ? true : false;
  	};
  	
  	
  	var _intVal = function ( s ) {
  		var integer = parseInt( s, 10 );
  		return !isNaN(integer) && isFinite(s) ? integer : null;
  	};
  	
  	// Convert from a formatted number with characters other than `.` as the
  	// decimal place, to a Javascript number
  	var _numToDecimal = function ( num, decimalPoint ) {
  		// Cache created regular expressions for speed as this function is called often
  		if ( ! _re_dic[ decimalPoint ] ) {
  			_re_dic[ decimalPoint ] = new RegExp( _fnEscapeRegex( decimalPoint ), 'g' );
  		}
  		return typeof num === 'string' && decimalPoint !== '.' ?
  			num.replace( /\./g, '' ).replace( _re_dic[ decimalPoint ], '.' ) :
  			num;
  	};
  	
  	
  	var _isNumber = function ( d, decimalPoint, formatted ) {
  		var strType = typeof d === 'string';
  	
  		// If empty return immediately so there must be a number if it is a
  		// formatted string (this stops the string "k", or "kr", etc being detected
  		// as a formatted number for currency
  		if ( _empty( d ) ) {
  			return true;
  		}
  	
  		if ( decimalPoint && strType ) {
  			d = _numToDecimal( d, decimalPoint );
  		}
  	
  		if ( formatted && strType ) {
  			d = d.replace( _re_formatted_numeric, '' );
  		}
  	
  		return !isNaN( parseFloat(d) ) && isFinite( d );
  	};
  	
  	
  	// A string without HTML in it can be considered to be HTML still
  	var _isHtml = function ( d ) {
  		return _empty( d ) || typeof d === 'string';
  	};
  	
  	
  	var _htmlNumeric = function ( d, decimalPoint, formatted ) {
  		if ( _empty( d ) ) {
  			return true;
  		}
  	
  		var html = _isHtml( d );
  		return ! html ?
  			null :
  			_isNumber( _stripHtml( d ), decimalPoint, formatted ) ?
  				true :
  				null;
  	};
  	
  	
  	var _pluck = function ( a, prop, prop2 ) {
  		var out = [];
  		var i=0, ien=a.length;
  	
  		// Could have the test in the loop for slightly smaller code, but speed
  		// is essential here
  		if ( prop2 !== undefined$1 ) {
  			for ( ; i<ien ; i++ ) {
  				if ( a[i] && a[i][ prop ] ) {
  					out.push( a[i][ prop ][ prop2 ] );
  				}
  			}
  		}
  		else {
  			for ( ; i<ien ; i++ ) {
  				if ( a[i] ) {
  					out.push( a[i][ prop ] );
  				}
  			}
  		}
  	
  		return out;
  	};
  	
  	
  	// Basically the same as _pluck, but rather than looping over `a` we use `order`
  	// as the indexes to pick from `a`
  	var _pluck_order = function ( a, order, prop, prop2 )
  	{
  		var out = [];
  		var i=0, ien=order.length;
  	
  		// Could have the test in the loop for slightly smaller code, but speed
  		// is essential here
  		if ( prop2 !== undefined$1 ) {
  			for ( ; i<ien ; i++ ) {
  				if ( a[ order[i] ][ prop ] ) {
  					out.push( a[ order[i] ][ prop ][ prop2 ] );
  				}
  			}
  		}
  		else {
  			for ( ; i<ien ; i++ ) {
  				out.push( a[ order[i] ][ prop ] );
  			}
  		}
  	
  		return out;
  	};
  	
  	
  	var _range = function ( len, start )
  	{
  		var out = [];
  		var end;
  	
  		if ( start === undefined$1 ) {
  			start = 0;
  			end = len;
  		}
  		else {
  			end = start;
  			start = len;
  		}
  	
  		for ( var i=start ; i<end ; i++ ) {
  			out.push( i );
  		}
  	
  		return out;
  	};
  	
  	
  	var _removeEmpty = function ( a )
  	{
  		var out = [];
  	
  		for ( var i=0, ien=a.length ; i<ien ; i++ ) {
  			if ( a[i] ) { // careful - will remove all falsy values!
  				out.push( a[i] );
  			}
  		}
  	
  		return out;
  	};
  	
  	
  	var _stripHtml = function ( d ) {
  		return d.replace( _re_html, '' );
  	};
  	
  	
  	/**
  	 * Determine if all values in the array are unique. This means we can short
  	 * cut the _unique method at the cost of a single loop. A sorted array is used
  	 * to easily check the values.
  	 *
  	 * @param  {array} src Source array
  	 * @return {boolean} true if all unique, false otherwise
  	 * @ignore
  	 */
  	var _areAllUnique = function ( src ) {
  		if ( src.length < 2 ) {
  			return true;
  		}
  	
  		var sorted = src.slice().sort();
  		var last = sorted[0];
  	
  		for ( var i=1, ien=sorted.length ; i<ien ; i++ ) {
  			if ( sorted[i] === last ) {
  				return false;
  			}
  	
  			last = sorted[i];
  		}
  	
  		return true;
  	};
  	
  	
  	/**
  	 * Find the unique elements in a source array.
  	 *
  	 * @param  {array} src Source array
  	 * @return {array} Array of unique items
  	 * @ignore
  	 */
  	var _unique = function ( src )
  	{
  		if ( _areAllUnique( src ) ) {
  			return src.slice();
  		}
  	
  		// A faster unique method is to use object keys to identify used values,
  		// but this doesn't work with arrays or objects, which we must also
  		// consider. See jsperf.com/compare-array-unique-versions/4 for more
  		// information.
  		var
  			out = [],
  			val,
  			i, ien=src.length,
  			j, k=0;
  	
  		again: for ( i=0 ; i<ien ; i++ ) {
  			val = src[i];
  	
  			for ( j=0 ; j<k ; j++ ) {
  				if ( out[j] === val ) {
  					continue again;
  				}
  			}
  	
  			out.push( val );
  			k++;
  		}
  	
  		return out;
  	};
  	
  	
  	/**
  	 * DataTables utility methods
  	 * 
  	 * This namespace provides helper methods that DataTables uses internally to
  	 * create a DataTable, but which are not exclusively used only for DataTables.
  	 * These methods can be used by extension authors to save the duplication of
  	 * code.
  	 *
  	 *  @namespace
  	 */
  	DataTable.util = {
  		/**
  		 * Throttle the calls to a function. Arguments and context are maintained
  		 * for the throttled function.
  		 *
  		 * @param {function} fn Function to be called
  		 * @param {integer} freq Call frequency in mS
  		 * @return {function} Wrapped function
  		 */
  		throttle: function ( fn, freq ) {
  			var
  				frequency = freq !== undefined$1 ? freq : 200,
  				last,
  				timer;
  	
  			return function () {
  				var
  					that = this,
  					now  = +new Date(),
  					args = arguments;
  	
  				if ( last && now < last + frequency ) {
  					clearTimeout( timer );
  	
  					timer = setTimeout( function () {
  						last = undefined$1;
  						fn.apply( that, args );
  					}, frequency );
  				}
  				else {
  					last = now;
  					fn.apply( that, args );
  				}
  			};
  		},
  	
  	
  		/**
  		 * Escape a string such that it can be used in a regular expression
  		 *
  		 *  @param {string} val string to escape
  		 *  @returns {string} escaped string
  		 */
  		escapeRegex: function ( val ) {
  			return val.replace( _re_escape_regex, '\\$1' );
  		}
  	};
  	
  	
  	
  	/**
  	 * Create a mapping object that allows camel case parameters to be looked up
  	 * for their Hungarian counterparts. The mapping is stored in a private
  	 * parameter called `_hungarianMap` which can be accessed on the source object.
  	 *  @param {object} o
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnHungarianMap ( o )
  	{
  		var
  			hungarian = 'a aa ai ao as b fn i m o s ',
  			match,
  			newKey,
  			map = {};
  	
  		$.each( o, function (key, val) {
  			match = key.match(/^([^A-Z]+?)([A-Z])/);
  	
  			if ( match && hungarian.indexOf(match[1]+' ') !== -1 )
  			{
  				newKey = key.replace( match[0], match[2].toLowerCase() );
  				map[ newKey ] = key;
  	
  				if ( match[1] === 'o' )
  				{
  					_fnHungarianMap( o[key] );
  				}
  			}
  		} );
  	
  		o._hungarianMap = map;
  	}
  	
  	
  	/**
  	 * Convert from camel case parameters to Hungarian, based on a Hungarian map
  	 * created by _fnHungarianMap.
  	 *  @param {object} src The model object which holds all parameters that can be
  	 *    mapped.
  	 *  @param {object} user The object to convert from camel case to Hungarian.
  	 *  @param {boolean} force When set to `true`, properties which already have a
  	 *    Hungarian value in the `user` object will be overwritten. Otherwise they
  	 *    won't be.
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnCamelToHungarian ( src, user, force )
  	{
  		if ( ! src._hungarianMap ) {
  			_fnHungarianMap( src );
  		}
  	
  		var hungarianKey;
  	
  		$.each( user, function (key, val) {
  			hungarianKey = src._hungarianMap[ key ];
  	
  			if ( hungarianKey !== undefined$1 && (force || user[hungarianKey] === undefined$1) )
  			{
  				// For objects, we need to buzz down into the object to copy parameters
  				if ( hungarianKey.charAt(0) === 'o' )
  				{
  					// Copy the camelCase options over to the hungarian
  					if ( ! user[ hungarianKey ] ) {
  						user[ hungarianKey ] = {};
  					}
  					$.extend( true, user[hungarianKey], user[key] );
  	
  					_fnCamelToHungarian( src[hungarianKey], user[hungarianKey], force );
  				}
  				else {
  					user[hungarianKey] = user[ key ];
  				}
  			}
  		} );
  	}
  	
  	
  	/**
  	 * Language compatibility - when certain options are given, and others aren't, we
  	 * need to duplicate the values over, in order to provide backwards compatibility
  	 * with older language files.
  	 *  @param {object} oSettings dataTables settings object
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnLanguageCompat( lang )
  	{
  		// Note the use of the Hungarian notation for the parameters in this method as
  		// this is called after the mapping of camelCase to Hungarian
  		var defaults = DataTable.defaults.oLanguage;
  	
  		// Default mapping
  		var defaultDecimal = defaults.sDecimal;
  		if ( defaultDecimal ) {
  			_addNumericSort( defaultDecimal );
  		}
  	
  		if ( lang ) {
  			var zeroRecords = lang.sZeroRecords;
  	
  			// Backwards compatibility - if there is no sEmptyTable given, then use the same as
  			// sZeroRecords - assuming that is given.
  			if ( ! lang.sEmptyTable && zeroRecords &&
  				defaults.sEmptyTable === "No data available in table" )
  			{
  				_fnMap( lang, lang, 'sZeroRecords', 'sEmptyTable' );
  			}
  	
  			// Likewise with loading records
  			if ( ! lang.sLoadingRecords && zeroRecords &&
  				defaults.sLoadingRecords === "Loading..." )
  			{
  				_fnMap( lang, lang, 'sZeroRecords', 'sLoadingRecords' );
  			}
  	
  			// Old parameter name of the thousands separator mapped onto the new
  			if ( lang.sInfoThousands ) {
  				lang.sThousands = lang.sInfoThousands;
  			}
  	
  			var decimal = lang.sDecimal;
  			if ( decimal && defaultDecimal !== decimal ) {
  				_addNumericSort( decimal );
  			}
  		}
  	}
  	
  	
  	/**
  	 * Map one parameter onto another
  	 *  @param {object} o Object to map
  	 *  @param {*} knew The new parameter name
  	 *  @param {*} old The old parameter name
  	 */
  	var _fnCompatMap = function ( o, knew, old ) {
  		if ( o[ knew ] !== undefined$1 ) {
  			o[ old ] = o[ knew ];
  		}
  	};
  	
  	
  	/**
  	 * Provide backwards compatibility for the main DT options. Note that the new
  	 * options are mapped onto the old parameters, so this is an external interface
  	 * change only.
  	 *  @param {object} init Object to map
  	 */
  	function _fnCompatOpts ( init )
  	{
  		_fnCompatMap( init, 'ordering',      'bSort' );
  		_fnCompatMap( init, 'orderMulti',    'bSortMulti' );
  		_fnCompatMap( init, 'orderClasses',  'bSortClasses' );
  		_fnCompatMap( init, 'orderCellsTop', 'bSortCellsTop' );
  		_fnCompatMap( init, 'order',         'aaSorting' );
  		_fnCompatMap( init, 'orderFixed',    'aaSortingFixed' );
  		_fnCompatMap( init, 'paging',        'bPaginate' );
  		_fnCompatMap( init, 'pagingType',    'sPaginationType' );
  		_fnCompatMap( init, 'pageLength',    'iDisplayLength' );
  		_fnCompatMap( init, 'searching',     'bFilter' );
  	
  		// Boolean initialisation of x-scrolling
  		if ( typeof init.sScrollX === 'boolean' ) {
  			init.sScrollX = init.sScrollX ? '100%' : '';
  		}
  		if ( typeof init.scrollX === 'boolean' ) {
  			init.scrollX = init.scrollX ? '100%' : '';
  		}
  	
  		// Column search objects are in an array, so it needs to be converted
  		// element by element
  		var searchCols = init.aoSearchCols;
  	
  		if ( searchCols ) {
  			for ( var i=0, ien=searchCols.length ; i<ien ; i++ ) {
  				if ( searchCols[i] ) {
  					_fnCamelToHungarian( DataTable.models.oSearch, searchCols[i] );
  				}
  			}
  		}
  	}
  	
  	
  	/**
  	 * Provide backwards compatibility for column options. Note that the new options
  	 * are mapped onto the old parameters, so this is an external interface change
  	 * only.
  	 *  @param {object} init Object to map
  	 */
  	function _fnCompatCols ( init )
  	{
  		_fnCompatMap( init, 'orderable',     'bSortable' );
  		_fnCompatMap( init, 'orderData',     'aDataSort' );
  		_fnCompatMap( init, 'orderSequence', 'asSorting' );
  		_fnCompatMap( init, 'orderDataType', 'sortDataType' );
  	
  		// orderData can be given as an integer
  		var dataSort = init.aDataSort;
  		if ( typeof dataSort === 'number' && ! $.isArray( dataSort ) ) {
  			init.aDataSort = [ dataSort ];
  		}
  	}
  	
  	
  	/**
  	 * Browser feature detection for capabilities, quirks
  	 *  @param {object} settings dataTables settings object
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnBrowserDetect( settings )
  	{
  		// We don't need to do this every time DataTables is constructed, the values
  		// calculated are specific to the browser and OS configuration which we
  		// don't expect to change between initialisations
  		if ( ! DataTable.__browser ) {
  			var browser = {};
  			DataTable.__browser = browser;
  	
  			// Scrolling feature / quirks detection
  			var n = $('<div/>')
  				.css( {
  					position: 'fixed',
  					top: 0,
  					left: $(window).scrollLeft()*-1, // allow for scrolling
  					height: 1,
  					width: 1,
  					overflow: 'hidden'
  				} )
  				.append(
  					$('<div/>')
  						.css( {
  							position: 'absolute',
  							top: 1,
  							left: 1,
  							width: 100,
  							overflow: 'scroll'
  						} )
  						.append(
  							$('<div/>')
  								.css( {
  									width: '100%',
  									height: 10
  								} )
  						)
  				)
  				.appendTo( 'body' );
  	
  			var outer = n.children();
  			var inner = outer.children();
  	
  			// Numbers below, in order, are:
  			// inner.offsetWidth, inner.clientWidth, outer.offsetWidth, outer.clientWidth
  			//
  			// IE6 XP:                           100 100 100  83
  			// IE7 Vista:                        100 100 100  83
  			// IE 8+ Windows:                     83  83 100  83
  			// Evergreen Windows:                 83  83 100  83
  			// Evergreen Mac with scrollbars:     85  85 100  85
  			// Evergreen Mac without scrollbars: 100 100 100 100
  	
  			// Get scrollbar width
  			browser.barWidth = outer[0].offsetWidth - outer[0].clientWidth;
  	
  			// IE6/7 will oversize a width 100% element inside a scrolling element, to
  			// include the width of the scrollbar, while other browsers ensure the inner
  			// element is contained without forcing scrolling
  			browser.bScrollOversize = inner[0].offsetWidth === 100 && outer[0].clientWidth !== 100;
  	
  			// In rtl text layout, some browsers (most, but not all) will place the
  			// scrollbar on the left, rather than the right.
  			browser.bScrollbarLeft = Math.round( inner.offset().left ) !== 1;
  	
  			// IE8- don't provide height and width for getBoundingClientRect
  			browser.bBounding = n[0].getBoundingClientRect().width ? true : false;
  	
  			n.remove();
  		}
  	
  		$.extend( settings.oBrowser, DataTable.__browser );
  		settings.oScroll.iBarWidth = DataTable.__browser.barWidth;
  	}
  	
  	
  	/**
  	 * Array.prototype reduce[Right] method, used for browsers which don't support
  	 * JS 1.6. Done this way to reduce code size, since we iterate either way
  	 *  @param {object} settings dataTables settings object
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnReduce ( that, fn, init, start, end, inc )
  	{
  		var
  			i = start,
  			value,
  			isSet = false;
  	
  		if ( init !== undefined$1 ) {
  			value = init;
  			isSet = true;
  		}
  	
  		while ( i !== end ) {
  			if ( ! that.hasOwnProperty(i) ) {
  				continue;
  			}
  	
  			value = isSet ?
  				fn( value, that[i], i, that ) :
  				that[i];
  	
  			isSet = true;
  			i += inc;
  		}
  	
  		return value;
  	}
  	
  	/**
  	 * Add a column to the list used for the table with default values
  	 *  @param {object} oSettings dataTables settings object
  	 *  @param {node} nTh The th element for this column
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnAddColumn( oSettings, nTh )
  	{
  		// Add column to aoColumns array
  		var oDefaults = DataTable.defaults.column;
  		var iCol = oSettings.aoColumns.length;
  		var oCol = $.extend( {}, DataTable.models.oColumn, oDefaults, {
  			"nTh": nTh ? nTh : document.createElement('th'),
  			"sTitle":    oDefaults.sTitle    ? oDefaults.sTitle    : nTh ? nTh.innerHTML : '',
  			"aDataSort": oDefaults.aDataSort ? oDefaults.aDataSort : [iCol],
  			"mData": oDefaults.mData ? oDefaults.mData : iCol,
  			idx: iCol
  		} );
  		oSettings.aoColumns.push( oCol );
  	
  		// Add search object for column specific search. Note that the `searchCols[ iCol ]`
  		// passed into extend can be undefined. This allows the user to give a default
  		// with only some of the parameters defined, and also not give a default
  		var searchCols = oSettings.aoPreSearchCols;
  		searchCols[ iCol ] = $.extend( {}, DataTable.models.oSearch, searchCols[ iCol ] );
  	
  		// Use the default column options function to initialise classes etc
  		_fnColumnOptions( oSettings, iCol, $(nTh).data() );
  	}
  	
  	
  	/**
  	 * Apply options for a column
  	 *  @param {object} oSettings dataTables settings object
  	 *  @param {int} iCol column index to consider
  	 *  @param {object} oOptions object with sType, bVisible and bSearchable etc
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnColumnOptions( oSettings, iCol, oOptions )
  	{
  		var oCol = oSettings.aoColumns[ iCol ];
  		var oClasses = oSettings.oClasses;
  		var th = $(oCol.nTh);
  	
  		// Try to get width information from the DOM. We can't get it from CSS
  		// as we'd need to parse the CSS stylesheet. `width` option can override
  		if ( ! oCol.sWidthOrig ) {
  			// Width attribute
  			oCol.sWidthOrig = th.attr('width') || null;
  	
  			// Style attribute
  			var t = (th.attr('style') || '').match(/width:\s*(\d+[pxem%]+)/);
  			if ( t ) {
  				oCol.sWidthOrig = t[1];
  			}
  		}
  	
  		/* User specified column options */
  		if ( oOptions !== undefined$1 && oOptions !== null )
  		{
  			// Backwards compatibility
  			_fnCompatCols( oOptions );
  	
  			// Map camel case parameters to their Hungarian counterparts
  			_fnCamelToHungarian( DataTable.defaults.column, oOptions, true );
  	
  			/* Backwards compatibility for mDataProp */
  			if ( oOptions.mDataProp !== undefined$1 && !oOptions.mData )
  			{
  				oOptions.mData = oOptions.mDataProp;
  			}
  	
  			if ( oOptions.sType )
  			{
  				oCol._sManualType = oOptions.sType;
  			}
  	
  			// `class` is a reserved word in Javascript, so we need to provide
  			// the ability to use a valid name for the camel case input
  			if ( oOptions.className && ! oOptions.sClass )
  			{
  				oOptions.sClass = oOptions.className;
  			}
  			if ( oOptions.sClass ) {
  				th.addClass( oOptions.sClass );
  			}
  	
  			$.extend( oCol, oOptions );
  			_fnMap( oCol, oOptions, "sWidth", "sWidthOrig" );
  	
  			/* iDataSort to be applied (backwards compatibility), but aDataSort will take
  			 * priority if defined
  			 */
  			if ( oOptions.iDataSort !== undefined$1 )
  			{
  				oCol.aDataSort = [ oOptions.iDataSort ];
  			}
  			_fnMap( oCol, oOptions, "aDataSort" );
  		}
  	
  		/* Cache the data get and set functions for speed */
  		var mDataSrc = oCol.mData;
  		var mData = _fnGetObjectDataFn( mDataSrc );
  		var mRender = oCol.mRender ? _fnGetObjectDataFn( oCol.mRender ) : null;
  	
  		var attrTest = function( src ) {
  			return typeof src === 'string' && src.indexOf('@') !== -1;
  		};
  		oCol._bAttrSrc = $.isPlainObject( mDataSrc ) && (
  			attrTest(mDataSrc.sort) || attrTest(mDataSrc.type) || attrTest(mDataSrc.filter)
  		);
  		oCol._setter = null;
  	
  		oCol.fnGetData = function (rowData, type, meta) {
  			var innerData = mData( rowData, type, undefined$1, meta );
  	
  			return mRender && type ?
  				mRender( innerData, type, rowData, meta ) :
  				innerData;
  		};
  		oCol.fnSetData = function ( rowData, val, meta ) {
  			return _fnSetObjectDataFn( mDataSrc )( rowData, val, meta );
  		};
  	
  		// Indicate if DataTables should read DOM data as an object or array
  		// Used in _fnGetRowElements
  		if ( typeof mDataSrc !== 'number' ) {
  			oSettings._rowReadObject = true;
  		}
  	
  		/* Feature sorting overrides column specific when off */
  		if ( !oSettings.oFeatures.bSort )
  		{
  			oCol.bSortable = false;
  			th.addClass( oClasses.sSortableNone ); // Have to add class here as order event isn't called
  		}
  	
  		/* Check that the class assignment is correct for sorting */
  		var bAsc = $.inArray('asc', oCol.asSorting) !== -1;
  		var bDesc = $.inArray('desc', oCol.asSorting) !== -1;
  		if ( !oCol.bSortable || (!bAsc && !bDesc) )
  		{
  			oCol.sSortingClass = oClasses.sSortableNone;
  			oCol.sSortingClassJUI = "";
  		}
  		else if ( bAsc && !bDesc )
  		{
  			oCol.sSortingClass = oClasses.sSortableAsc;
  			oCol.sSortingClassJUI = oClasses.sSortJUIAscAllowed;
  		}
  		else if ( !bAsc && bDesc )
  		{
  			oCol.sSortingClass = oClasses.sSortableDesc;
  			oCol.sSortingClassJUI = oClasses.sSortJUIDescAllowed;
  		}
  		else
  		{
  			oCol.sSortingClass = oClasses.sSortable;
  			oCol.sSortingClassJUI = oClasses.sSortJUI;
  		}
  	}
  	
  	
  	/**
  	 * Adjust the table column widths for new data. Note: you would probably want to
  	 * do a redraw after calling this function!
  	 *  @param {object} settings dataTables settings object
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnAdjustColumnSizing ( settings )
  	{
  		/* Not interested in doing column width calculation if auto-width is disabled */
  		if ( settings.oFeatures.bAutoWidth !== false )
  		{
  			var columns = settings.aoColumns;
  	
  			_fnCalculateColumnWidths( settings );
  			for ( var i=0 , iLen=columns.length ; i<iLen ; i++ )
  			{
  				columns[i].nTh.style.width = columns[i].sWidth;
  			}
  		}
  	
  		var scroll = settings.oScroll;
  		if ( scroll.sY !== '' || scroll.sX !== '')
  		{
  			_fnScrollDraw( settings );
  		}
  	
  		_fnCallbackFire( settings, null, 'column-sizing', [settings] );
  	}
  	
  	
  	/**
  	 * Covert the index of a visible column to the index in the data array (take account
  	 * of hidden columns)
  	 *  @param {object} oSettings dataTables settings object
  	 *  @param {int} iMatch Visible column index to lookup
  	 *  @returns {int} i the data index
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnVisibleToColumnIndex( oSettings, iMatch )
  	{
  		var aiVis = _fnGetColumns( oSettings, 'bVisible' );
  	
  		return typeof aiVis[iMatch] === 'number' ?
  			aiVis[iMatch] :
  			null;
  	}
  	
  	
  	/**
  	 * Covert the index of an index in the data array and convert it to the visible
  	 *   column index (take account of hidden columns)
  	 *  @param {int} iMatch Column index to lookup
  	 *  @param {object} oSettings dataTables settings object
  	 *  @returns {int} i the data index
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnColumnIndexToVisible( oSettings, iMatch )
  	{
  		var aiVis = _fnGetColumns( oSettings, 'bVisible' );
  		var iPos = $.inArray( iMatch, aiVis );
  	
  		return iPos !== -1 ? iPos : null;
  	}
  	
  	
  	/**
  	 * Get the number of visible columns
  	 *  @param {object} oSettings dataTables settings object
  	 *  @returns {int} i the number of visible columns
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnVisbleColumns( oSettings )
  	{
  		var vis = 0;
  	
  		// No reduce in IE8, use a loop for now
  		$.each( oSettings.aoColumns, function ( i, col ) {
  			if ( col.bVisible && $(col.nTh).css('display') !== 'none' ) {
  				vis++;
  			}
  		} );
  	
  		return vis;
  	}
  	
  	
  	/**
  	 * Get an array of column indexes that match a given property
  	 *  @param {object} oSettings dataTables settings object
  	 *  @param {string} sParam Parameter in aoColumns to look for - typically
  	 *    bVisible or bSearchable
  	 *  @returns {array} Array of indexes with matched properties
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnGetColumns( oSettings, sParam )
  	{
  		var a = [];
  	
  		$.map( oSettings.aoColumns, function(val, i) {
  			if ( val[sParam] ) {
  				a.push( i );
  			}
  		} );
  	
  		return a;
  	}
  	
  	
  	/**
  	 * Calculate the 'type' of a column
  	 *  @param {object} settings dataTables settings object
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnColumnTypes ( settings )
  	{
  		var columns = settings.aoColumns;
  		var data = settings.aoData;
  		var types = DataTable.ext.type.detect;
  		var i, ien, j, jen, k, ken;
  		var col, detectedType, cache;
  	
  		// For each column, spin over the 
  		for ( i=0, ien=columns.length ; i<ien ; i++ ) {
  			col = columns[i];
  			cache = [];
  	
  			if ( ! col.sType && col._sManualType ) {
  				col.sType = col._sManualType;
  			}
  			else if ( ! col.sType ) {
  				for ( j=0, jen=types.length ; j<jen ; j++ ) {
  					for ( k=0, ken=data.length ; k<ken ; k++ ) {
  						// Use a cache array so we only need to get the type data
  						// from the formatter once (when using multiple detectors)
  						if ( cache[k] === undefined$1 ) {
  							cache[k] = _fnGetCellData( settings, k, i, 'type' );
  						}
  	
  						detectedType = types[j]( cache[k], settings );
  	
  						// If null, then this type can't apply to this column, so
  						// rather than testing all cells, break out. There is an
  						// exception for the last type which is `html`. We need to
  						// scan all rows since it is possible to mix string and HTML
  						// types
  						if ( ! detectedType && j !== types.length-1 ) {
  							break;
  						}
  	
  						// Only a single match is needed for html type since it is
  						// bottom of the pile and very similar to string
  						if ( detectedType === 'html' ) {
  							break;
  						}
  					}
  	
  					// Type is valid for all data points in the column - use this
  					// type
  					if ( detectedType ) {
  						col.sType = detectedType;
  						break;
  					}
  				}
  	
  				// Fall back - if no type was detected, always use string
  				if ( ! col.sType ) {
  					col.sType = 'string';
  				}
  			}
  		}
  	}
  	
  	
  	/**
  	 * Take the column definitions and static columns arrays and calculate how
  	 * they relate to column indexes. The callback function will then apply the
  	 * definition found for a column to a suitable configuration object.
  	 *  @param {object} oSettings dataTables settings object
  	 *  @param {array} aoColDefs The aoColumnDefs array that is to be applied
  	 *  @param {array} aoCols The aoColumns array that defines columns individually
  	 *  @param {function} fn Callback function - takes two parameters, the calculated
  	 *    column index and the definition for that column.
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnApplyColumnDefs( oSettings, aoColDefs, aoCols, fn )
  	{
  		var i, iLen, j, jLen, k, kLen, def;
  		var columns = oSettings.aoColumns;
  	
  		// Column definitions with aTargets
  		if ( aoColDefs )
  		{
  			/* Loop over the definitions array - loop in reverse so first instance has priority */
  			for ( i=aoColDefs.length-1 ; i>=0 ; i-- )
  			{
  				def = aoColDefs[i];
  	
  				/* Each definition can target multiple columns, as it is an array */
  				var aTargets = def.targets !== undefined$1 ?
  					def.targets :
  					def.aTargets;
  	
  				if ( ! $.isArray( aTargets ) )
  				{
  					aTargets = [ aTargets ];
  				}
  	
  				for ( j=0, jLen=aTargets.length ; j<jLen ; j++ )
  				{
  					if ( typeof aTargets[j] === 'number' && aTargets[j] >= 0 )
  					{
  						/* Add columns that we don't yet know about */
  						while( columns.length <= aTargets[j] )
  						{
  							_fnAddColumn( oSettings );
  						}
  	
  						/* Integer, basic index */
  						fn( aTargets[j], def );
  					}
  					else if ( typeof aTargets[j] === 'number' && aTargets[j] < 0 )
  					{
  						/* Negative integer, right to left column counting */
  						fn( columns.length+aTargets[j], def );
  					}
  					else if ( typeof aTargets[j] === 'string' )
  					{
  						/* Class name matching on TH element */
  						for ( k=0, kLen=columns.length ; k<kLen ; k++ )
  						{
  							if ( aTargets[j] == "_all" ||
  							     $(columns[k].nTh).hasClass( aTargets[j] ) )
  							{
  								fn( k, def );
  							}
  						}
  					}
  				}
  			}
  		}
  	
  		// Statically defined columns array
  		if ( aoCols )
  		{
  			for ( i=0, iLen=aoCols.length ; i<iLen ; i++ )
  			{
  				fn( i, aoCols[i] );
  			}
  		}
  	}
  	
  	/**
  	 * Add a data array to the table, creating DOM node etc. This is the parallel to
  	 * _fnGatherData, but for adding rows from a Javascript source, rather than a
  	 * DOM source.
  	 *  @param {object} oSettings dataTables settings object
  	 *  @param {array} aData data array to be added
  	 *  @param {node} [nTr] TR element to add to the table - optional. If not given,
  	 *    DataTables will create a row automatically
  	 *  @param {array} [anTds] Array of TD|TH elements for the row - must be given
  	 *    if nTr is.
  	 *  @returns {int} >=0 if successful (index of new aoData entry), -1 if failed
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnAddData ( oSettings, aDataIn, nTr, anTds )
  	{
  		/* Create the object for storing information about this new row */
  		var iRow = oSettings.aoData.length;
  		var oData = $.extend( true, {}, DataTable.models.oRow, {
  			src: nTr ? 'dom' : 'data',
  			idx: iRow
  		} );
  	
  		oData._aData = aDataIn;
  		oSettings.aoData.push( oData );
  		var columns = oSettings.aoColumns;
  	
  		// Invalidate the column types as the new data needs to be revalidated
  		for ( var i=0, iLen=columns.length ; i<iLen ; i++ )
  		{
  			columns[i].sType = null;
  		}
  	
  		/* Add to the display array */
  		oSettings.aiDisplayMaster.push( iRow );
  	
  		var id = oSettings.rowIdFn( aDataIn );
  		if ( id !== undefined$1 ) {
  			oSettings.aIds[ id ] = oData;
  		}
  	
  		/* Create the DOM information, or register it if already present */
  		if ( nTr || ! oSettings.oFeatures.bDeferRender )
  		{
  			_fnCreateTr( oSettings, iRow, nTr, anTds );
  		}
  	
  		return iRow;
  	}
  	
  	
  	/**
  	 * Add one or more TR elements to the table. Generally we'd expect to
  	 * use this for reading data from a DOM sourced table, but it could be
  	 * used for an TR element. Note that if a TR is given, it is used (i.e.
  	 * it is not cloned).
  	 *  @param {object} settings dataTables settings object
  	 *  @param {array|node|jQuery} trs The TR element(s) to add to the table
  	 *  @returns {array} Array of indexes for the added rows
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnAddTr( settings, trs )
  	{
  		var row;
  	
  		// Allow an individual node to be passed in
  		if ( ! (trs instanceof $) ) {
  			trs = $(trs);
  		}
  	
  		return trs.map( function (i, el) {
  			row = _fnGetRowElements( settings, el );
  			return _fnAddData( settings, row.data, el, row.cells );
  		} );
  	}
  	
  	
  	/**
  	 * Take a TR element and convert it to an index in aoData
  	 *  @param {object} oSettings dataTables settings object
  	 *  @param {node} n the TR element to find
  	 *  @returns {int} index if the node is found, null if not
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnNodeToDataIndex( oSettings, n )
  	{
  		return (n._DT_RowIndex!==undefined$1) ? n._DT_RowIndex : null;
  	}
  	
  	
  	/**
  	 * Take a TD element and convert it into a column data index (not the visible index)
  	 *  @param {object} oSettings dataTables settings object
  	 *  @param {int} iRow The row number the TD/TH can be found in
  	 *  @param {node} n The TD/TH element to find
  	 *  @returns {int} index if the node is found, -1 if not
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnNodeToColumnIndex( oSettings, iRow, n )
  	{
  		return $.inArray( n, oSettings.aoData[ iRow ].anCells );
  	}
  	
  	
  	/**
  	 * Get the data for a given cell from the internal cache, taking into account data mapping
  	 *  @param {object} settings dataTables settings object
  	 *  @param {int} rowIdx aoData row id
  	 *  @param {int} colIdx Column index
  	 *  @param {string} type data get type ('display', 'type' 'filter' 'sort')
  	 *  @returns {*} Cell data
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnGetCellData( settings, rowIdx, colIdx, type )
  	{
  		var draw           = settings.iDraw;
  		var col            = settings.aoColumns[colIdx];
  		var rowData        = settings.aoData[rowIdx]._aData;
  		var defaultContent = col.sDefaultContent;
  		var cellData       = col.fnGetData( rowData, type, {
  			settings: settings,
  			row:      rowIdx,
  			col:      colIdx
  		} );
  	
  		if ( cellData === undefined$1 ) {
  			if ( settings.iDrawError != draw && defaultContent === null ) {
  				_fnLog( settings, 0, "Requested unknown parameter "+
  					(typeof col.mData=='function' ? '{function}' : "'"+col.mData+"'")+
  					" for row "+rowIdx+", column "+colIdx, 4 );
  				settings.iDrawError = draw;
  			}
  			return defaultContent;
  		}
  	
  		// When the data source is null and a specific data type is requested (i.e.
  		// not the original data), we can use default column data
  		if ( (cellData === rowData || cellData === null) && defaultContent !== null && type !== undefined$1 ) {
  			cellData = defaultContent;
  		}
  		else if ( typeof cellData === 'function' ) {
  			// If the data source is a function, then we run it and use the return,
  			// executing in the scope of the data object (for instances)
  			return cellData.call( rowData );
  		}
  	
  		if ( cellData === null && type == 'display' ) {
  			return '';
  		}
  		return cellData;
  	}
  	
  	
  	/**
  	 * Set the value for a specific cell, into the internal data cache
  	 *  @param {object} settings dataTables settings object
  	 *  @param {int} rowIdx aoData row id
  	 *  @param {int} colIdx Column index
  	 *  @param {*} val Value to set
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnSetCellData( settings, rowIdx, colIdx, val )
  	{
  		var col     = settings.aoColumns[colIdx];
  		var rowData = settings.aoData[rowIdx]._aData;
  	
  		col.fnSetData( rowData, val, {
  			settings: settings,
  			row:      rowIdx,
  			col:      colIdx
  		}  );
  	}
  	
  	
  	// Private variable that is used to match action syntax in the data property object
  	var __reArray = /\[.*?\]$/;
  	var __reFn = /\(\)$/;
  	
  	/**
  	 * Split string on periods, taking into account escaped periods
  	 * @param  {string} str String to split
  	 * @return {array} Split string
  	 */
  	function _fnSplitObjNotation( str )
  	{
  		return $.map( str.match(/(\\.|[^\.])+/g) || [''], function ( s ) {
  			return s.replace(/\\\./g, '.');
  		} );
  	}
  	
  	
  	/**
  	 * Return a function that can be used to get data from a source object, taking
  	 * into account the ability to use nested objects as a source
  	 *  @param {string|int|function} mSource The data source for the object
  	 *  @returns {function} Data get function
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnGetObjectDataFn( mSource )
  	{
  		if ( $.isPlainObject( mSource ) )
  		{
  			/* Build an object of get functions, and wrap them in a single call */
  			var o = {};
  			$.each( mSource, function (key, val) {
  				if ( val ) {
  					o[key] = _fnGetObjectDataFn( val );
  				}
  			} );
  	
  			return function (data, type, row, meta) {
  				var t = o[type] || o._;
  				return t !== undefined$1 ?
  					t(data, type, row, meta) :
  					data;
  			};
  		}
  		else if ( mSource === null )
  		{
  			/* Give an empty string for rendering / sorting etc */
  			return function (data) { // type, row and meta also passed, but not used
  				return data;
  			};
  		}
  		else if ( typeof mSource === 'function' )
  		{
  			return function (data, type, row, meta) {
  				return mSource( data, type, row, meta );
  			};
  		}
  		else if ( typeof mSource === 'string' && (mSource.indexOf('.') !== -1 ||
  			      mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1) )
  		{
  			/* If there is a . in the source string then the data source is in a
  			 * nested object so we loop over the data for each level to get the next
  			 * level down. On each loop we test for undefined, and if found immediately
  			 * return. This allows entire objects to be missing and sDefaultContent to
  			 * be used if defined, rather than throwing an error
  			 */
  			var fetchData = function (data, type, src) {
  				var arrayNotation, funcNotation, out, innerSrc;
  	
  				if ( src !== "" )
  				{
  					var a = _fnSplitObjNotation( src );
  	
  					for ( var i=0, iLen=a.length ; i<iLen ; i++ )
  					{
  						// Check if we are dealing with special notation
  						arrayNotation = a[i].match(__reArray);
  						funcNotation = a[i].match(__reFn);
  	
  						if ( arrayNotation )
  						{
  							// Array notation
  							a[i] = a[i].replace(__reArray, '');
  	
  							// Condition allows simply [] to be passed in
  							if ( a[i] !== "" ) {
  								data = data[ a[i] ];
  							}
  							out = [];
  	
  							// Get the remainder of the nested object to get
  							a.splice( 0, i+1 );
  							innerSrc = a.join('.');
  	
  							// Traverse each entry in the array getting the properties requested
  							if ( $.isArray( data ) ) {
  								for ( var j=0, jLen=data.length ; j<jLen ; j++ ) {
  									out.push( fetchData( data[j], type, innerSrc ) );
  								}
  							}
  	
  							// If a string is given in between the array notation indicators, that
  							// is used to join the strings together, otherwise an array is returned
  							var join = arrayNotation[0].substring(1, arrayNotation[0].length-1);
  							data = (join==="") ? out : out.join(join);
  	
  							// The inner call to fetchData has already traversed through the remainder
  							// of the source requested, so we exit from the loop
  							break;
  						}
  						else if ( funcNotation )
  						{
  							// Function call
  							a[i] = a[i].replace(__reFn, '');
  							data = data[ a[i] ]();
  							continue;
  						}
  	
  						if ( data === null || data[ a[i] ] === undefined$1 )
  						{
  							return undefined$1;
  						}
  						data = data[ a[i] ];
  					}
  				}
  	
  				return data;
  			};
  	
  			return function (data, type) { // row and meta also passed, but not used
  				return fetchData( data, type, mSource );
  			};
  		}
  		else
  		{
  			/* Array or flat object mapping */
  			return function (data, type) { // row and meta also passed, but not used
  				return data[mSource];
  			};
  		}
  	}
  	
  	
  	/**
  	 * Return a function that can be used to set data from a source object, taking
  	 * into account the ability to use nested objects as a source
  	 *  @param {string|int|function} mSource The data source for the object
  	 *  @returns {function} Data set function
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnSetObjectDataFn( mSource )
  	{
  		if ( $.isPlainObject( mSource ) )
  		{
  			/* Unlike get, only the underscore (global) option is used for for
  			 * setting data since we don't know the type here. This is why an object
  			 * option is not documented for `mData` (which is read/write), but it is
  			 * for `mRender` which is read only.
  			 */
  			return _fnSetObjectDataFn( mSource._ );
  		}
  		else if ( mSource === null )
  		{
  			/* Nothing to do when the data source is null */
  			return function () {};
  		}
  		else if ( typeof mSource === 'function' )
  		{
  			return function (data, val, meta) {
  				mSource( data, 'set', val, meta );
  			};
  		}
  		else if ( typeof mSource === 'string' && (mSource.indexOf('.') !== -1 ||
  			      mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1) )
  		{
  			/* Like the get, we need to get data from a nested object */
  			var setData = function (data, val, src) {
  				var a = _fnSplitObjNotation( src ), b;
  				var aLast = a[a.length-1];
  				var arrayNotation, funcNotation, o, innerSrc;
  	
  				for ( var i=0, iLen=a.length-1 ; i<iLen ; i++ )
  				{
  					// Check if we are dealing with an array notation request
  					arrayNotation = a[i].match(__reArray);
  					funcNotation = a[i].match(__reFn);
  	
  					if ( arrayNotation )
  					{
  						a[i] = a[i].replace(__reArray, '');
  						data[ a[i] ] = [];
  	
  						// Get the remainder of the nested object to set so we can recurse
  						b = a.slice();
  						b.splice( 0, i+1 );
  						innerSrc = b.join('.');
  	
  						// Traverse each entry in the array setting the properties requested
  						if ( $.isArray( val ) )
  						{
  							for ( var j=0, jLen=val.length ; j<jLen ; j++ )
  							{
  								o = {};
  								setData( o, val[j], innerSrc );
  								data[ a[i] ].push( o );
  							}
  						}
  						else
  						{
  							// We've been asked to save data to an array, but it
  							// isn't array data to be saved. Best that can be done
  							// is to just save the value.
  							data[ a[i] ] = val;
  						}
  	
  						// The inner call to setData has already traversed through the remainder
  						// of the source and has set the data, thus we can exit here
  						return;
  					}
  					else if ( funcNotation )
  					{
  						// Function call
  						a[i] = a[i].replace(__reFn, '');
  						data = data[ a[i] ]( val );
  					}
  	
  					// If the nested object doesn't currently exist - since we are
  					// trying to set the value - create it
  					if ( data[ a[i] ] === null || data[ a[i] ] === undefined$1 )
  					{
  						data[ a[i] ] = {};
  					}
  					data = data[ a[i] ];
  				}
  	
  				// Last item in the input - i.e, the actual set
  				if ( aLast.match(__reFn ) )
  				{
  					// Function call
  					data = data[ aLast.replace(__reFn, '') ]( val );
  				}
  				else
  				{
  					// If array notation is used, we just want to strip it and use the property name
  					// and assign the value. If it isn't used, then we get the result we want anyway
  					data[ aLast.replace(__reArray, '') ] = val;
  				}
  			};
  	
  			return function (data, val) { // meta is also passed in, but not used
  				return setData( data, val, mSource );
  			};
  		}
  		else
  		{
  			/* Array or flat object mapping */
  			return function (data, val) { // meta is also passed in, but not used
  				data[mSource] = val;
  			};
  		}
  	}
  	
  	
  	/**
  	 * Return an array with the full table data
  	 *  @param {object} oSettings dataTables settings object
  	 *  @returns array {array} aData Master data array
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnGetDataMaster ( settings )
  	{
  		return _pluck( settings.aoData, '_aData' );
  	}
  	
  	
  	/**
  	 * Nuke the table
  	 *  @param {object} oSettings dataTables settings object
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnClearTable( settings )
  	{
  		settings.aoData.length = 0;
  		settings.aiDisplayMaster.length = 0;
  		settings.aiDisplay.length = 0;
  		settings.aIds = {};
  	}
  	
  	
  	 /**
  	 * Take an array of integers (index array) and remove a target integer (value - not
  	 * the key!)
  	 *  @param {array} a Index array to target
  	 *  @param {int} iTarget value to find
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnDeleteIndex( a, iTarget, splice )
  	{
  		var iTargetIndex = -1;
  	
  		for ( var i=0, iLen=a.length ; i<iLen ; i++ )
  		{
  			if ( a[i] == iTarget )
  			{
  				iTargetIndex = i;
  			}
  			else if ( a[i] > iTarget )
  			{
  				a[i]--;
  			}
  		}
  	
  		if ( iTargetIndex != -1 && splice === undefined$1 )
  		{
  			a.splice( iTargetIndex, 1 );
  		}
  	}
  	
  	
  	/**
  	 * Mark cached data as invalid such that a re-read of the data will occur when
  	 * the cached data is next requested. Also update from the data source object.
  	 *
  	 * @param {object} settings DataTables settings object
  	 * @param {int}    rowIdx   Row index to invalidate
  	 * @param {string} [src]    Source to invalidate from: undefined, 'auto', 'dom'
  	 *     or 'data'
  	 * @param {int}    [colIdx] Column index to invalidate. If undefined the whole
  	 *     row will be invalidated
  	 * @memberof DataTable#oApi
  	 *
  	 * @todo For the modularisation of v1.11 this will need to become a callback, so
  	 *   the sort and filter methods can subscribe to it. That will required
  	 *   initialisation options for sorting, which is why it is not already baked in
  	 */
  	function _fnInvalidate( settings, rowIdx, src, colIdx )
  	{
  		var row = settings.aoData[ rowIdx ];
  		var i, ien;
  		var cellWrite = function ( cell, col ) {
  			// This is very frustrating, but in IE if you just write directly
  			// to innerHTML, and elements that are overwritten are GC'ed,
  			// even if there is a reference to them elsewhere
  			while ( cell.childNodes.length ) {
  				cell.removeChild( cell.firstChild );
  			}
  	
  			cell.innerHTML = _fnGetCellData( settings, rowIdx, col, 'display' );
  		};
  	
  		// Are we reading last data from DOM or the data object?
  		if ( src === 'dom' || ((! src || src === 'auto') && row.src === 'dom') ) {
  			// Read the data from the DOM
  			row._aData = _fnGetRowElements(
  					settings, row, colIdx, colIdx === undefined$1 ? undefined$1 : row._aData
  				)
  				.data;
  		}
  		else {
  			// Reading from data object, update the DOM
  			var cells = row.anCells;
  	
  			if ( cells ) {
  				if ( colIdx !== undefined$1 ) {
  					cellWrite( cells[colIdx], colIdx );
  				}
  				else {
  					for ( i=0, ien=cells.length ; i<ien ; i++ ) {
  						cellWrite( cells[i], i );
  					}
  				}
  			}
  		}
  	
  		// For both row and cell invalidation, the cached data for sorting and
  		// filtering is nulled out
  		row._aSortData = null;
  		row._aFilterData = null;
  	
  		// Invalidate the type for a specific column (if given) or all columns since
  		// the data might have changed
  		var cols = settings.aoColumns;
  		if ( colIdx !== undefined$1 ) {
  			cols[ colIdx ].sType = null;
  		}
  		else {
  			for ( i=0, ien=cols.length ; i<ien ; i++ ) {
  				cols[i].sType = null;
  			}
  	
  			// Update DataTables special `DT_*` attributes for the row
  			_fnRowAttributes( settings, row );
  		}
  	}
  	
  	
  	/**
  	 * Build a data source object from an HTML row, reading the contents of the
  	 * cells that are in the row.
  	 *
  	 * @param {object} settings DataTables settings object
  	 * @param {node|object} TR element from which to read data or existing row
  	 *   object from which to re-read the data from the cells
  	 * @param {int} [colIdx] Optional column index
  	 * @param {array|object} [d] Data source object. If `colIdx` is given then this
  	 *   parameter should also be given and will be used to write the data into.
  	 *   Only the column in question will be written
  	 * @returns {object} Object with two parameters: `data` the data read, in
  	 *   document order, and `cells` and array of nodes (they can be useful to the
  	 *   caller, so rather than needing a second traversal to get them, just return
  	 *   them from here).
  	 * @memberof DataTable#oApi
  	 */
  	function _fnGetRowElements( settings, row, colIdx, d )
  	{
  		var 
  			tds = [],
  			td = row.firstChild,
  			name, col, i=0, contents,
  			columns = settings.aoColumns,
  			objectRead = settings._rowReadObject;
  	
  		// Allow the data object to be passed in, or construct
  		d = d !== undefined$1 ?
  			d :
  			objectRead ?
  				{} :
  				[];
  	
  		var attr = function ( str, td  ) {
  			if ( typeof str === 'string' ) {
  				var idx = str.indexOf('@');
  	
  				if ( idx !== -1 ) {
  					var attr = str.substring( idx+1 );
  					var setter = _fnSetObjectDataFn( str );
  					setter( d, td.getAttribute( attr ) );
  				}
  			}
  		};
  	
  		// Read data from a cell and store into the data object
  		var cellProcess = function ( cell ) {
  			if ( colIdx === undefined$1 || colIdx === i ) {
  				col = columns[i];
  				contents = $.trim(cell.innerHTML);
  	
  				if ( col && col._bAttrSrc ) {
  					var setter = _fnSetObjectDataFn( col.mData._ );
  					setter( d, contents );
  	
  					attr( col.mData.sort, cell );
  					attr( col.mData.type, cell );
  					attr( col.mData.filter, cell );
  				}
  				else {
  					// Depending on the `data` option for the columns the data can
  					// be read to either an object or an array.
  					if ( objectRead ) {
  						if ( ! col._setter ) {
  							// Cache the setter function
  							col._setter = _fnSetObjectDataFn( col.mData );
  						}
  						col._setter( d, contents );
  					}
  					else {
  						d[i] = contents;
  					}
  				}
  			}
  	
  			i++;
  		};
  	
  		if ( td ) {
  			// `tr` element was passed in
  			while ( td ) {
  				name = td.nodeName.toUpperCase();
  	
  				if ( name == "TD" || name == "TH" ) {
  					cellProcess( td );
  					tds.push( td );
  				}
  	
  				td = td.nextSibling;
  			}
  		}
  		else {
  			// Existing row object passed in
  			tds = row.anCells;
  	
  			for ( var j=0, jen=tds.length ; j<jen ; j++ ) {
  				cellProcess( tds[j] );
  			}
  		}
  	
  		// Read the ID from the DOM if present
  		var rowNode = row.firstChild ? row : row.nTr;
  	
  		if ( rowNode ) {
  			var id = rowNode.getAttribute( 'id' );
  	
  			if ( id ) {
  				_fnSetObjectDataFn( settings.rowId )( d, id );
  			}
  		}
  	
  		return {
  			data: d,
  			cells: tds
  		};
  	}
  	/**
  	 * Create a new TR element (and it's TD children) for a row
  	 *  @param {object} oSettings dataTables settings object
  	 *  @param {int} iRow Row to consider
  	 *  @param {node} [nTrIn] TR element to add to the table - optional. If not given,
  	 *    DataTables will create a row automatically
  	 *  @param {array} [anTds] Array of TD|TH elements for the row - must be given
  	 *    if nTr is.
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnCreateTr ( oSettings, iRow, nTrIn, anTds )
  	{
  		var
  			row = oSettings.aoData[iRow],
  			rowData = row._aData,
  			cells = [],
  			nTr, nTd, oCol,
  			i, iLen, create;
  	
  		if ( row.nTr === null )
  		{
  			nTr = nTrIn || document.createElement('tr');
  	
  			row.nTr = nTr;
  			row.anCells = cells;
  	
  			/* Use a private property on the node to allow reserve mapping from the node
  			 * to the aoData array for fast look up
  			 */
  			nTr._DT_RowIndex = iRow;
  	
  			/* Special parameters can be given by the data source to be used on the row */
  			_fnRowAttributes( oSettings, row );
  	
  			/* Process each column */
  			for ( i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )
  			{
  				oCol = oSettings.aoColumns[i];
  				create = nTrIn ? false : true;
  	
  				nTd = create ? document.createElement( oCol.sCellType ) : anTds[i];
  				nTd._DT_CellIndex = {
  					row: iRow,
  					column: i
  				};
  				
  				cells.push( nTd );
  	
  				// Need to create the HTML if new, or if a rendering function is defined
  				if ( create || ((!nTrIn || oCol.mRender || oCol.mData !== i) &&
  					 (!$.isPlainObject(oCol.mData) || oCol.mData._ !== i+'.display')
  				)) {
  					nTd.innerHTML = _fnGetCellData( oSettings, iRow, i, 'display' );
  				}
  	
  				/* Add user defined class */
  				if ( oCol.sClass )
  				{
  					nTd.className += ' '+oCol.sClass;
  				}
  	
  				// Visibility - add or remove as required
  				if ( oCol.bVisible && ! nTrIn )
  				{
  					nTr.appendChild( nTd );
  				}
  				else if ( ! oCol.bVisible && nTrIn )
  				{
  					nTd.parentNode.removeChild( nTd );
  				}
  	
  				if ( oCol.fnCreatedCell )
  				{
  					oCol.fnCreatedCell.call( oSettings.oInstance,
  						nTd, _fnGetCellData( oSettings, iRow, i ), rowData, iRow, i
  					);
  				}
  			}
  	
  			_fnCallbackFire( oSettings, 'aoRowCreatedCallback', null, [nTr, rowData, iRow, cells] );
  		}
  	
  		// Remove once webkit bug 131819 and Chromium bug 365619 have been resolved
  		// and deployed
  		row.nTr.setAttribute( 'role', 'row' );
  	}
  	
  	
  	/**
  	 * Add attributes to a row based on the special `DT_*` parameters in a data
  	 * source object.
  	 *  @param {object} settings DataTables settings object
  	 *  @param {object} DataTables row object for the row to be modified
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnRowAttributes( settings, row )
  	{
  		var tr = row.nTr;
  		var data = row._aData;
  	
  		if ( tr ) {
  			var id = settings.rowIdFn( data );
  	
  			if ( id ) {
  				tr.id = id;
  			}
  	
  			if ( data.DT_RowClass ) {
  				// Remove any classes added by DT_RowClass before
  				var a = data.DT_RowClass.split(' ');
  				row.__rowc = row.__rowc ?
  					_unique( row.__rowc.concat( a ) ) :
  					a;
  	
  				$(tr)
  					.removeClass( row.__rowc.join(' ') )
  					.addClass( data.DT_RowClass );
  			}
  	
  			if ( data.DT_RowAttr ) {
  				$(tr).attr( data.DT_RowAttr );
  			}
  	
  			if ( data.DT_RowData ) {
  				$(tr).data( data.DT_RowData );
  			}
  		}
  	}
  	
  	
  	/**
  	 * Create the HTML header for the table
  	 *  @param {object} oSettings dataTables settings object
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnBuildHead( oSettings )
  	{
  		var i, ien, cell, row, column;
  		var thead = oSettings.nTHead;
  		var tfoot = oSettings.nTFoot;
  		var createHeader = $('th, td', thead).length === 0;
  		var classes = oSettings.oClasses;
  		var columns = oSettings.aoColumns;
  	
  		if ( createHeader ) {
  			row = $('<tr/>').appendTo( thead );
  		}
  	
  		for ( i=0, ien=columns.length ; i<ien ; i++ ) {
  			column = columns[i];
  			cell = $( column.nTh ).addClass( column.sClass );
  	
  			if ( createHeader ) {
  				cell.appendTo( row );
  			}
  	
  			// 1.11 move into sorting
  			if ( oSettings.oFeatures.bSort ) {
  				cell.addClass( column.sSortingClass );
  	
  				if ( column.bSortable !== false ) {
  					cell
  						.attr( 'tabindex', oSettings.iTabIndex )
  						.attr( 'aria-controls', oSettings.sTableId );
  	
  					_fnSortAttachListener( oSettings, column.nTh, i );
  				}
  			}
  	
  			if ( column.sTitle != cell[0].innerHTML ) {
  				cell.html( column.sTitle );
  			}
  	
  			_fnRenderer( oSettings, 'header' )(
  				oSettings, cell, column, classes
  			);
  		}
  	
  		if ( createHeader ) {
  			_fnDetectHeader( oSettings.aoHeader, thead );
  		}
  		
  		/* ARIA role for the rows */
  	 	$(thead).find('>tr').attr('role', 'row');
  	
  		/* Deal with the footer - add classes if required */
  		$(thead).find('>tr>th, >tr>td').addClass( classes.sHeaderTH );
  		$(tfoot).find('>tr>th, >tr>td').addClass( classes.sFooterTH );
  	
  		// Cache the footer cells. Note that we only take the cells from the first
  		// row in the footer. If there is more than one row the user wants to
  		// interact with, they need to use the table().foot() method. Note also this
  		// allows cells to be used for multiple columns using colspan
  		if ( tfoot !== null ) {
  			var cells = oSettings.aoFooter[0];
  	
  			for ( i=0, ien=cells.length ; i<ien ; i++ ) {
  				column = columns[i];
  				column.nTf = cells[i].cell;
  	
  				if ( column.sClass ) {
  					$(column.nTf).addClass( column.sClass );
  				}
  			}
  		}
  	}
  	
  	
  	/**
  	 * Draw the header (or footer) element based on the column visibility states. The
  	 * methodology here is to use the layout array from _fnDetectHeader, modified for
  	 * the instantaneous column visibility, to construct the new layout. The grid is
  	 * traversed over cell at a time in a rows x columns grid fashion, although each
  	 * cell insert can cover multiple elements in the grid - which is tracks using the
  	 * aApplied array. Cell inserts in the grid will only occur where there isn't
  	 * already a cell in that position.
  	 *  @param {object} oSettings dataTables settings object
  	 *  @param array {objects} aoSource Layout array from _fnDetectHeader
  	 *  @param {boolean} [bIncludeHidden=false] If true then include the hidden columns in the calc,
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnDrawHead( oSettings, aoSource, bIncludeHidden )
  	{
  		var i, iLen, j, jLen, k, n, nLocalTr;
  		var aoLocal = [];
  		var aApplied = [];
  		var iColumns = oSettings.aoColumns.length;
  		var iRowspan, iColspan;
  	
  		if ( ! aoSource )
  		{
  			return;
  		}
  	
  		if (  bIncludeHidden === undefined$1 )
  		{
  			bIncludeHidden = false;
  		}
  	
  		/* Make a copy of the master layout array, but without the visible columns in it */
  		for ( i=0, iLen=aoSource.length ; i<iLen ; i++ )
  		{
  			aoLocal[i] = aoSource[i].slice();
  			aoLocal[i].nTr = aoSource[i].nTr;
  	
  			/* Remove any columns which are currently hidden */
  			for ( j=iColumns-1 ; j>=0 ; j-- )
  			{
  				if ( !oSettings.aoColumns[j].bVisible && !bIncludeHidden )
  				{
  					aoLocal[i].splice( j, 1 );
  				}
  			}
  	
  			/* Prep the applied array - it needs an element for each row */
  			aApplied.push( [] );
  		}
  	
  		for ( i=0, iLen=aoLocal.length ; i<iLen ; i++ )
  		{
  			nLocalTr = aoLocal[i].nTr;
  	
  			/* All cells are going to be replaced, so empty out the row */
  			if ( nLocalTr )
  			{
  				while( (n = nLocalTr.firstChild) )
  				{
  					nLocalTr.removeChild( n );
  				}
  			}
  	
  			for ( j=0, jLen=aoLocal[i].length ; j<jLen ; j++ )
  			{
  				iRowspan = 1;
  				iColspan = 1;
  	
  				/* Check to see if there is already a cell (row/colspan) covering our target
  				 * insert point. If there is, then there is nothing to do.
  				 */
  				if ( aApplied[i][j] === undefined$1 )
  				{
  					nLocalTr.appendChild( aoLocal[i][j].cell );
  					aApplied[i][j] = 1;
  	
  					/* Expand the cell to cover as many rows as needed */
  					while ( aoLocal[i+iRowspan] !== undefined$1 &&
  					        aoLocal[i][j].cell == aoLocal[i+iRowspan][j].cell )
  					{
  						aApplied[i+iRowspan][j] = 1;
  						iRowspan++;
  					}
  	
  					/* Expand the cell to cover as many columns as needed */
  					while ( aoLocal[i][j+iColspan] !== undefined$1 &&
  					        aoLocal[i][j].cell == aoLocal[i][j+iColspan].cell )
  					{
  						/* Must update the applied array over the rows for the columns */
  						for ( k=0 ; k<iRowspan ; k++ )
  						{
  							aApplied[i+k][j+iColspan] = 1;
  						}
  						iColspan++;
  					}
  	
  					/* Do the actual expansion in the DOM */
  					$(aoLocal[i][j].cell)
  						.attr('rowspan', iRowspan)
  						.attr('colspan', iColspan);
  				}
  			}
  		}
  	}
  	
  	
  	/**
  	 * Insert the required TR nodes into the table for display
  	 *  @param {object} oSettings dataTables settings object
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnDraw( oSettings )
  	{
  		/* Provide a pre-callback function which can be used to cancel the draw is false is returned */
  		var aPreDraw = _fnCallbackFire( oSettings, 'aoPreDrawCallback', 'preDraw', [oSettings] );
  		if ( $.inArray( false, aPreDraw ) !== -1 )
  		{
  			_fnProcessingDisplay( oSettings, false );
  			return;
  		}
  		var anRows = [];
  		var iRowCount = 0;
  		var asStripeClasses = oSettings.asStripeClasses;
  		var iStripes = asStripeClasses.length;
  		var iOpenRows = oSettings.aoOpenRows.length;
  		var oLang = oSettings.oLanguage;
  		var iInitDisplayStart = oSettings.iInitDisplayStart;
  		var bServerSide = _fnDataSource( oSettings ) == 'ssp';
  		var aiDisplay = oSettings.aiDisplay;
  	
  		oSettings.bDrawing = true;
  	
  		/* Check and see if we have an initial draw position from state saving */
  		if ( iInitDisplayStart !== undefined$1 && iInitDisplayStart !== -1 )
  		{
  			oSettings._iDisplayStart = bServerSide ?
  				iInitDisplayStart :
  				iInitDisplayStart >= oSettings.fnRecordsDisplay() ?
  					0 :
  					iInitDisplayStart;
  	
  			oSettings.iInitDisplayStart = -1;
  		}
  	
  		var iDisplayStart = oSettings._iDisplayStart;
  		var iDisplayEnd = oSettings.fnDisplayEnd();
  	
  		/* Server-side processing draw intercept */
  		if ( oSettings.bDeferLoading )
  		{
  			oSettings.bDeferLoading = false;
  			oSettings.iDraw++;
  			_fnProcessingDisplay( oSettings, false );
  		}
  		else if ( !bServerSide )
  		{
  			oSettings.iDraw++;
  		}
  		else if ( !oSettings.bDestroying && !_fnAjaxUpdate( oSettings ) )
  		{
  			return;
  		}
  	
  		if ( aiDisplay.length !== 0 )
  		{
  			var iStart = bServerSide ? 0 : iDisplayStart;
  			var iEnd = bServerSide ? oSettings.aoData.length : iDisplayEnd;
  	
  			for ( var j=iStart ; j<iEnd ; j++ )
  			{
  				var iDataIndex = aiDisplay[j];
  				var aoData = oSettings.aoData[ iDataIndex ];
  				if ( aoData.nTr === null )
  				{
  					_fnCreateTr( oSettings, iDataIndex );
  				}
  	
  				var nRow = aoData.nTr;
  	
  				/* Remove the old striping classes and then add the new one */
  				if ( iStripes !== 0 )
  				{
  					var sStripe = asStripeClasses[ iRowCount % iStripes ];
  					if ( aoData._sRowStripe != sStripe )
  					{
  						$(nRow).removeClass( aoData._sRowStripe ).addClass( sStripe );
  						aoData._sRowStripe = sStripe;
  					}
  				}
  	
  				// Row callback functions - might want to manipulate the row
  				// iRowCount and j are not currently documented. Are they at all
  				// useful?
  				_fnCallbackFire( oSettings, 'aoRowCallback', null,
  					[nRow, aoData._aData, iRowCount, j, iDataIndex] );
  	
  				anRows.push( nRow );
  				iRowCount++;
  			}
  		}
  		else
  		{
  			/* Table is empty - create a row with an empty message in it */
  			var sZero = oLang.sZeroRecords;
  			if ( oSettings.iDraw == 1 &&  _fnDataSource( oSettings ) == 'ajax' )
  			{
  				sZero = oLang.sLoadingRecords;
  			}
  			else if ( oLang.sEmptyTable && oSettings.fnRecordsTotal() === 0 )
  			{
  				sZero = oLang.sEmptyTable;
  			}
  	
  			anRows[ 0 ] = $( '<tr/>', { 'class': iStripes ? asStripeClasses[0] : '' } )
  				.append( $('<td />', {
  					'valign':  'top',
  					'colSpan': _fnVisbleColumns( oSettings ),
  					'class':   oSettings.oClasses.sRowEmpty
  				} ).html( sZero ) )[0];
  		}
  	
  		/* Header and footer callbacks */
  		_fnCallbackFire( oSettings, 'aoHeaderCallback', 'header', [ $(oSettings.nTHead).children('tr')[0],
  			_fnGetDataMaster( oSettings ), iDisplayStart, iDisplayEnd, aiDisplay ] );
  	
  		_fnCallbackFire( oSettings, 'aoFooterCallback', 'footer', [ $(oSettings.nTFoot).children('tr')[0],
  			_fnGetDataMaster( oSettings ), iDisplayStart, iDisplayEnd, aiDisplay ] );
  	
  		var body = $(oSettings.nTBody);
  	
  		body.children().detach();
  		body.append( $(anRows) );
  	
  		/* Call all required callback functions for the end of a draw */
  		_fnCallbackFire( oSettings, 'aoDrawCallback', 'draw', [oSettings] );
  	
  		/* Draw is complete, sorting and filtering must be as well */
  		oSettings.bSorted = false;
  		oSettings.bFiltered = false;
  		oSettings.bDrawing = false;
  	}
  	
  	
  	/**
  	 * Redraw the table - taking account of the various features which are enabled
  	 *  @param {object} oSettings dataTables settings object
  	 *  @param {boolean} [holdPosition] Keep the current paging position. By default
  	 *    the paging is reset to the first page
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnReDraw( settings, holdPosition )
  	{
  		var
  			features = settings.oFeatures,
  			sort     = features.bSort,
  			filter   = features.bFilter;
  	
  		if ( sort ) {
  			_fnSort( settings );
  		}
  	
  		if ( filter ) {
  			_fnFilterComplete( settings, settings.oPreviousSearch );
  		}
  		else {
  			// No filtering, so we want to just use the display master
  			settings.aiDisplay = settings.aiDisplayMaster.slice();
  		}
  	
  		if ( holdPosition !== true ) {
  			settings._iDisplayStart = 0;
  		}
  	
  		// Let any modules know about the draw hold position state (used by
  		// scrolling internally)
  		settings._drawHold = holdPosition;
  	
  		_fnDraw( settings );
  	
  		settings._drawHold = false;
  	}
  	
  	
  	/**
  	 * Add the options to the page HTML for the table
  	 *  @param {object} oSettings dataTables settings object
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnAddOptionsHtml ( oSettings )
  	{
  		var classes = oSettings.oClasses;
  		var table = $(oSettings.nTable);
  		var holding = $('<div/>').insertBefore( table ); // Holding element for speed
  		var features = oSettings.oFeatures;
  	
  		// All DataTables are wrapped in a div
  		var insert = $('<div/>', {
  			id:      oSettings.sTableId+'_wrapper',
  			'class': classes.sWrapper + (oSettings.nTFoot ? '' : ' '+classes.sNoFooter)
  		} );
  	
  		oSettings.nHolding = holding[0];
  		oSettings.nTableWrapper = insert[0];
  		oSettings.nTableReinsertBefore = oSettings.nTable.nextSibling;
  	
  		/* Loop over the user set positioning and place the elements as needed */
  		var aDom = oSettings.sDom.split('');
  		var featureNode, cOption, nNewNode, cNext, sAttr, j;
  		for ( var i=0 ; i<aDom.length ; i++ )
  		{
  			featureNode = null;
  			cOption = aDom[i];
  	
  			if ( cOption == '<' )
  			{
  				/* New container div */
  				nNewNode = $('<div/>')[0];
  	
  				/* Check to see if we should append an id and/or a class name to the container */
  				cNext = aDom[i+1];
  				if ( cNext == "'" || cNext == '"' )
  				{
  					sAttr = "";
  					j = 2;
  					while ( aDom[i+j] != cNext )
  					{
  						sAttr += aDom[i+j];
  						j++;
  					}
  	
  					/* Replace jQuery UI constants @todo depreciated */
  					if ( sAttr == "H" )
  					{
  						sAttr = classes.sJUIHeader;
  					}
  					else if ( sAttr == "F" )
  					{
  						sAttr = classes.sJUIFooter;
  					}
  	
  					/* The attribute can be in the format of "#id.class", "#id" or "class" This logic
  					 * breaks the string into parts and applies them as needed
  					 */
  					if ( sAttr.indexOf('.') != -1 )
  					{
  						var aSplit = sAttr.split('.');
  						nNewNode.id = aSplit[0].substr(1, aSplit[0].length-1);
  						nNewNode.className = aSplit[1];
  					}
  					else if ( sAttr.charAt(0) == "#" )
  					{
  						nNewNode.id = sAttr.substr(1, sAttr.length-1);
  					}
  					else
  					{
  						nNewNode.className = sAttr;
  					}
  	
  					i += j; /* Move along the position array */
  				}
  	
  				insert.append( nNewNode );
  				insert = $(nNewNode);
  			}
  			else if ( cOption == '>' )
  			{
  				/* End container div */
  				insert = insert.parent();
  			}
  			// @todo Move options into their own plugins?
  			else if ( cOption == 'l' && features.bPaginate && features.bLengthChange )
  			{
  				/* Length */
  				featureNode = _fnFeatureHtmlLength( oSettings );
  			}
  			else if ( cOption == 'f' && features.bFilter )
  			{
  				/* Filter */
  				featureNode = _fnFeatureHtmlFilter( oSettings );
  			}
  			else if ( cOption == 'r' && features.bProcessing )
  			{
  				/* pRocessing */
  				featureNode = _fnFeatureHtmlProcessing( oSettings );
  			}
  			else if ( cOption == 't' )
  			{
  				/* Table */
  				featureNode = _fnFeatureHtmlTable( oSettings );
  			}
  			else if ( cOption ==  'i' && features.bInfo )
  			{
  				/* Info */
  				featureNode = _fnFeatureHtmlInfo( oSettings );
  			}
  			else if ( cOption == 'p' && features.bPaginate )
  			{
  				/* Pagination */
  				featureNode = _fnFeatureHtmlPaginate( oSettings );
  			}
  			else if ( DataTable.ext.feature.length !== 0 )
  			{
  				/* Plug-in features */
  				var aoFeatures = DataTable.ext.feature;
  				for ( var k=0, kLen=aoFeatures.length ; k<kLen ; k++ )
  				{
  					if ( cOption == aoFeatures[k].cFeature )
  					{
  						featureNode = aoFeatures[k].fnInit( oSettings );
  						break;
  					}
  				}
  			}
  	
  			/* Add to the 2D features array */
  			if ( featureNode )
  			{
  				var aanFeatures = oSettings.aanFeatures;
  	
  				if ( ! aanFeatures[cOption] )
  				{
  					aanFeatures[cOption] = [];
  				}
  	
  				aanFeatures[cOption].push( featureNode );
  				insert.append( featureNode );
  			}
  		}
  	
  		/* Built our DOM structure - replace the holding div with what we want */
  		holding.replaceWith( insert );
  		oSettings.nHolding = null;
  	}
  	
  	
  	/**
  	 * Use the DOM source to create up an array of header cells. The idea here is to
  	 * create a layout grid (array) of rows x columns, which contains a reference
  	 * to the cell that that point in the grid (regardless of col/rowspan), such that
  	 * any column / row could be removed and the new grid constructed
  	 *  @param array {object} aLayout Array to store the calculated layout in
  	 *  @param {node} nThead The header/footer element for the table
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnDetectHeader ( aLayout, nThead )
  	{
  		var nTrs = $(nThead).children('tr');
  		var nTr, nCell;
  		var i, k, l, iLen, iColShifted, iColumn, iColspan, iRowspan;
  		var bUnique;
  		var fnShiftCol = function ( a, i, j ) {
  			var k = a[i];
  	                while ( k[j] ) {
  				j++;
  			}
  			return j;
  		};
  	
  		aLayout.splice( 0, aLayout.length );
  	
  		/* We know how many rows there are in the layout - so prep it */
  		for ( i=0, iLen=nTrs.length ; i<iLen ; i++ )
  		{
  			aLayout.push( [] );
  		}
  	
  		/* Calculate a layout array */
  		for ( i=0, iLen=nTrs.length ; i<iLen ; i++ )
  		{
  			nTr = nTrs[i];
  			iColumn = 0;
  	
  			/* For every cell in the row... */
  			nCell = nTr.firstChild;
  			while ( nCell ) {
  				if ( nCell.nodeName.toUpperCase() == "TD" ||
  				     nCell.nodeName.toUpperCase() == "TH" )
  				{
  					/* Get the col and rowspan attributes from the DOM and sanitise them */
  					iColspan = nCell.getAttribute('colspan') * 1;
  					iRowspan = nCell.getAttribute('rowspan') * 1;
  					iColspan = (!iColspan || iColspan===0 || iColspan===1) ? 1 : iColspan;
  					iRowspan = (!iRowspan || iRowspan===0 || iRowspan===1) ? 1 : iRowspan;
  	
  					/* There might be colspan cells already in this row, so shift our target
  					 * accordingly
  					 */
  					iColShifted = fnShiftCol( aLayout, i, iColumn );
  	
  					/* Cache calculation for unique columns */
  					bUnique = iColspan === 1 ? true : false;
  	
  					/* If there is col / rowspan, copy the information into the layout grid */
  					for ( l=0 ; l<iColspan ; l++ )
  					{
  						for ( k=0 ; k<iRowspan ; k++ )
  						{
  							aLayout[i+k][iColShifted+l] = {
  								"cell": nCell,
  								"unique": bUnique
  							};
  							aLayout[i+k].nTr = nTr;
  						}
  					}
  				}
  				nCell = nCell.nextSibling;
  			}
  		}
  	}
  	
  	
  	/**
  	 * Get an array of unique th elements, one for each column
  	 *  @param {object} oSettings dataTables settings object
  	 *  @param {node} nHeader automatically detect the layout from this node - optional
  	 *  @param {array} aLayout thead/tfoot layout from _fnDetectHeader - optional
  	 *  @returns array {node} aReturn list of unique th's
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnGetUniqueThs ( oSettings, nHeader, aLayout )
  	{
  		var aReturn = [];
  		if ( !aLayout )
  		{
  			aLayout = oSettings.aoHeader;
  			if ( nHeader )
  			{
  				aLayout = [];
  				_fnDetectHeader( aLayout, nHeader );
  			}
  		}
  	
  		for ( var i=0, iLen=aLayout.length ; i<iLen ; i++ )
  		{
  			for ( var j=0, jLen=aLayout[i].length ; j<jLen ; j++ )
  			{
  				if ( aLayout[i][j].unique &&
  					 (!aReturn[j] || !oSettings.bSortCellsTop) )
  				{
  					aReturn[j] = aLayout[i][j].cell;
  				}
  			}
  		}
  	
  		return aReturn;
  	}
  	
  	/**
  	 * Create an Ajax call based on the table's settings, taking into account that
  	 * parameters can have multiple forms, and backwards compatibility.
  	 *
  	 * @param {object} oSettings dataTables settings object
  	 * @param {array} data Data to send to the server, required by
  	 *     DataTables - may be augmented by developer callbacks
  	 * @param {function} fn Callback function to run when data is obtained
  	 */
  	function _fnBuildAjax( oSettings, data, fn )
  	{
  		// Compatibility with 1.9-, allow fnServerData and event to manipulate
  		_fnCallbackFire( oSettings, 'aoServerParams', 'serverParams', [data] );
  	
  		// Convert to object based for 1.10+ if using the old array scheme which can
  		// come from server-side processing or serverParams
  		if ( data && $.isArray(data) ) {
  			var tmp = {};
  			var rbracket = /(.*?)\[\]$/;
  	
  			$.each( data, function (key, val) {
  				var match = val.name.match(rbracket);
  	
  				if ( match ) {
  					// Support for arrays
  					var name = match[0];
  	
  					if ( ! tmp[ name ] ) {
  						tmp[ name ] = [];
  					}
  					tmp[ name ].push( val.value );
  				}
  				else {
  					tmp[val.name] = val.value;
  				}
  			} );
  			data = tmp;
  		}
  	
  		var ajaxData;
  		var ajax = oSettings.ajax;
  		var instance = oSettings.oInstance;
  		var callback = function ( json ) {
  			_fnCallbackFire( oSettings, null, 'xhr', [oSettings, json, oSettings.jqXHR] );
  			fn( json );
  		};
  	
  		if ( $.isPlainObject( ajax ) && ajax.data )
  		{
  			ajaxData = ajax.data;
  	
  			var newData = typeof ajaxData === 'function' ?
  				ajaxData( data, oSettings ) :  // fn can manipulate data or return
  				ajaxData;                      // an object object or array to merge
  	
  			// If the function returned something, use that alone
  			data = typeof ajaxData === 'function' && newData ?
  				newData :
  				$.extend( true, data, newData );
  	
  			// Remove the data property as we've resolved it already and don't want
  			// jQuery to do it again (it is restored at the end of the function)
  			delete ajax.data;
  		}
  	
  		var baseAjax = {
  			"data": data,
  			"success": function (json) {
  				var error = json.error || json.sError;
  				if ( error ) {
  					_fnLog( oSettings, 0, error );
  				}
  	
  				oSettings.json = json;
  				callback( json );
  			},
  			"dataType": "json",
  			"cache": false,
  			"type": oSettings.sServerMethod,
  			"error": function (xhr, error, thrown) {
  				var ret = _fnCallbackFire( oSettings, null, 'xhr', [oSettings, null, oSettings.jqXHR] );
  	
  				if ( $.inArray( true, ret ) === -1 ) {
  					if ( error == "parsererror" ) {
  						_fnLog( oSettings, 0, 'Invalid JSON response', 1 );
  					}
  					else if ( xhr.readyState === 4 ) {
  						_fnLog( oSettings, 0, 'Ajax error', 7 );
  					}
  				}
  	
  				_fnProcessingDisplay( oSettings, false );
  			}
  		};
  	
  		// Store the data submitted for the API
  		oSettings.oAjaxData = data;
  	
  		// Allow plug-ins and external processes to modify the data
  		_fnCallbackFire( oSettings, null, 'preXhr', [oSettings, data] );
  	
  		if ( oSettings.fnServerData )
  		{
  			// DataTables 1.9- compatibility
  			oSettings.fnServerData.call( instance,
  				oSettings.sAjaxSource,
  				$.map( data, function (val, key) { // Need to convert back to 1.9 trad format
  					return { name: key, value: val };
  				} ),
  				callback,
  				oSettings
  			);
  		}
  		else if ( oSettings.sAjaxSource || typeof ajax === 'string' )
  		{
  			// DataTables 1.9- compatibility
  			oSettings.jqXHR = $.ajax( $.extend( baseAjax, {
  				url: ajax || oSettings.sAjaxSource
  			} ) );
  		}
  		else if ( typeof ajax === 'function' )
  		{
  			// Is a function - let the caller define what needs to be done
  			oSettings.jqXHR = ajax.call( instance, data, callback, oSettings );
  		}
  		else
  		{
  			// Object to extend the base settings
  			oSettings.jqXHR = $.ajax( $.extend( baseAjax, ajax ) );
  	
  			// Restore for next time around
  			ajax.data = ajaxData;
  		}
  	}
  	
  	
  	/**
  	 * Update the table using an Ajax call
  	 *  @param {object} settings dataTables settings object
  	 *  @returns {boolean} Block the table drawing or not
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnAjaxUpdate( settings )
  	{
  		if ( settings.bAjaxDataGet ) {
  			settings.iDraw++;
  			_fnProcessingDisplay( settings, true );
  	
  			_fnBuildAjax(
  				settings,
  				_fnAjaxParameters( settings ),
  				function(json) {
  					_fnAjaxUpdateDraw( settings, json );
  				}
  			);
  	
  			return false;
  		}
  		return true;
  	}
  	
  	
  	/**
  	 * Build up the parameters in an object needed for a server-side processing
  	 * request. Note that this is basically done twice, is different ways - a modern
  	 * method which is used by default in DataTables 1.10 which uses objects and
  	 * arrays, or the 1.9- method with is name / value pairs. 1.9 method is used if
  	 * the sAjaxSource option is used in the initialisation, or the legacyAjax
  	 * option is set.
  	 *  @param {object} oSettings dataTables settings object
  	 *  @returns {bool} block the table drawing or not
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnAjaxParameters( settings )
  	{
  		var
  			columns = settings.aoColumns,
  			columnCount = columns.length,
  			features = settings.oFeatures,
  			preSearch = settings.oPreviousSearch,
  			preColSearch = settings.aoPreSearchCols,
  			i, data = [], dataProp, column, columnSearch,
  			sort = _fnSortFlatten( settings ),
  			displayStart = settings._iDisplayStart,
  			displayLength = features.bPaginate !== false ?
  				settings._iDisplayLength :
  				-1;
  	
  		var param = function ( name, value ) {
  			data.push( { 'name': name, 'value': value } );
  		};
  	
  		// DataTables 1.9- compatible method
  		param( 'sEcho',          settings.iDraw );
  		param( 'iColumns',       columnCount );
  		param( 'sColumns',       _pluck( columns, 'sName' ).join(',') );
  		param( 'iDisplayStart',  displayStart );
  		param( 'iDisplayLength', displayLength );
  	
  		// DataTables 1.10+ method
  		var d = {
  			draw:    settings.iDraw,
  			columns: [],
  			order:   [],
  			start:   displayStart,
  			length:  displayLength,
  			search:  {
  				value: preSearch.sSearch,
  				regex: preSearch.bRegex
  			}
  		};
  	
  		for ( i=0 ; i<columnCount ; i++ ) {
  			column = columns[i];
  			columnSearch = preColSearch[i];
  			dataProp = typeof column.mData=="function" ? 'function' : column.mData ;
  	
  			d.columns.push( {
  				data:       dataProp,
  				name:       column.sName,
  				searchable: column.bSearchable,
  				orderable:  column.bSortable,
  				search:     {
  					value: columnSearch.sSearch,
  					regex: columnSearch.bRegex
  				}
  			} );
  	
  			param( "mDataProp_"+i, dataProp );
  	
  			if ( features.bFilter ) {
  				param( 'sSearch_'+i,     columnSearch.sSearch );
  				param( 'bRegex_'+i,      columnSearch.bRegex );
  				param( 'bSearchable_'+i, column.bSearchable );
  			}
  	
  			if ( features.bSort ) {
  				param( 'bSortable_'+i, column.bSortable );
  			}
  		}
  	
  		if ( features.bFilter ) {
  			param( 'sSearch', preSearch.sSearch );
  			param( 'bRegex', preSearch.bRegex );
  		}
  	
  		if ( features.bSort ) {
  			$.each( sort, function ( i, val ) {
  				d.order.push( { column: val.col, dir: val.dir } );
  	
  				param( 'iSortCol_'+i, val.col );
  				param( 'sSortDir_'+i, val.dir );
  			} );
  	
  			param( 'iSortingCols', sort.length );
  		}
  	
  		// If the legacy.ajax parameter is null, then we automatically decide which
  		// form to use, based on sAjaxSource
  		var legacy = DataTable.ext.legacy.ajax;
  		if ( legacy === null ) {
  			return settings.sAjaxSource ? data : d;
  		}
  	
  		// Otherwise, if legacy has been specified then we use that to decide on the
  		// form
  		return legacy ? data : d;
  	}
  	
  	
  	/**
  	 * Data the data from the server (nuking the old) and redraw the table
  	 *  @param {object} oSettings dataTables settings object
  	 *  @param {object} json json data return from the server.
  	 *  @param {string} json.sEcho Tracking flag for DataTables to match requests
  	 *  @param {int} json.iTotalRecords Number of records in the data set, not accounting for filtering
  	 *  @param {int} json.iTotalDisplayRecords Number of records in the data set, accounting for filtering
  	 *  @param {array} json.aaData The data to display on this page
  	 *  @param {string} [json.sColumns] Column ordering (sName, comma separated)
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnAjaxUpdateDraw ( settings, json )
  	{
  		// v1.10 uses camelCase variables, while 1.9 uses Hungarian notation.
  		// Support both
  		var compat = function ( old, modern ) {
  			return json[old] !== undefined$1 ? json[old] : json[modern];
  		};
  	
  		var data = _fnAjaxDataSrc( settings, json );
  		var draw            = compat( 'sEcho',                'draw' );
  		var recordsTotal    = compat( 'iTotalRecords',        'recordsTotal' );
  		var recordsFiltered = compat( 'iTotalDisplayRecords', 'recordsFiltered' );
  	
  		if ( draw !== undefined$1 ) {
  			// Protect against out of sequence returns
  			if ( draw*1 < settings.iDraw ) {
  				return;
  			}
  			settings.iDraw = draw * 1;
  		}
  	
  		_fnClearTable( settings );
  		settings._iRecordsTotal   = parseInt(recordsTotal, 10);
  		settings._iRecordsDisplay = parseInt(recordsFiltered, 10);
  	
  		for ( var i=0, ien=data.length ; i<ien ; i++ ) {
  			_fnAddData( settings, data[i] );
  		}
  		settings.aiDisplay = settings.aiDisplayMaster.slice();
  	
  		settings.bAjaxDataGet = false;
  		_fnDraw( settings );
  	
  		if ( ! settings._bInitComplete ) {
  			_fnInitComplete( settings, json );
  		}
  	
  		settings.bAjaxDataGet = true;
  		_fnProcessingDisplay( settings, false );
  	}
  	
  	
  	/**
  	 * Get the data from the JSON data source to use for drawing a table. Using
  	 * `_fnGetObjectDataFn` allows the data to be sourced from a property of the
  	 * source object, or from a processing function.
  	 *  @param {object} oSettings dataTables settings object
  	 *  @param  {object} json Data source object / array from the server
  	 *  @return {array} Array of data to use
  	 */
  	function _fnAjaxDataSrc ( oSettings, json )
  	{
  		var dataSrc = $.isPlainObject( oSettings.ajax ) && oSettings.ajax.dataSrc !== undefined$1 ?
  			oSettings.ajax.dataSrc :
  			oSettings.sAjaxDataProp; // Compatibility with 1.9-.
  	
  		// Compatibility with 1.9-. In order to read from aaData, check if the
  		// default has been changed, if not, check for aaData
  		if ( dataSrc === 'data' ) {
  			return json.aaData || json[dataSrc];
  		}
  	
  		return dataSrc !== "" ?
  			_fnGetObjectDataFn( dataSrc )( json ) :
  			json;
  	}
  	
  	/**
  	 * Generate the node required for filtering text
  	 *  @returns {node} Filter control element
  	 *  @param {object} oSettings dataTables settings object
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnFeatureHtmlFilter ( settings )
  	{
  		var classes = settings.oClasses;
  		var tableId = settings.sTableId;
  		var language = settings.oLanguage;
  		var previousSearch = settings.oPreviousSearch;
  		var features = settings.aanFeatures;
  		var input = '<input type="search" class="'+classes.sFilterInput+'"/>';
  	
  		var str = language.sSearch;
  		str = str.match(/_INPUT_/) ?
  			str.replace('_INPUT_', input) :
  			str+input;
  	
  		var filter = $('<div/>', {
  				'id': ! features.f ? tableId+'_filter' : null,
  				'class': classes.sFilter
  			} )
  			.append( $('<label/>' ).append( str ) );
  	
  		var searchFn = function() {
  			/* Update all other filter input elements for the new display */
  			var n = features.f;
  			var val = !this.value ? "" : this.value; // mental IE8 fix :-(
  	
  			/* Now do the filter */
  			if ( val != previousSearch.sSearch ) {
  				_fnFilterComplete( settings, {
  					"sSearch": val,
  					"bRegex": previousSearch.bRegex,
  					"bSmart": previousSearch.bSmart ,
  					"bCaseInsensitive": previousSearch.bCaseInsensitive
  				} );
  	
  				// Need to redraw, without resorting
  				settings._iDisplayStart = 0;
  				_fnDraw( settings );
  			}
  		};
  	
  		var searchDelay = settings.searchDelay !== null ?
  			settings.searchDelay :
  			_fnDataSource( settings ) === 'ssp' ?
  				400 :
  				0;
  	
  		var jqFilter = $('input', filter)
  			.val( previousSearch.sSearch )
  			.attr( 'placeholder', language.sSearchPlaceholder )
  			.on(
  				'keyup.DT search.DT input.DT paste.DT cut.DT',
  				searchDelay ?
  					_fnThrottle( searchFn, searchDelay ) :
  					searchFn
  			)
  			.on( 'mouseup', function(e) {
  				// Edge fix! Edge 17 does not trigger anything other than mouse events when clicking
  				// on the clear icon (Edge bug 17584515). This is safe in other browsers as `searchFn`
  				// checks the value to see if it has changed. In other browsers it won't have.
  				setTimeout( function () {
  					searchFn.call(jqFilter[0]);
  				}, 10);
  			} )
  			.on( 'keypress.DT', function(e) {
  				/* Prevent form submission */
  				if ( e.keyCode == 13 ) {
  					return false;
  				}
  			} )
  			.attr('aria-controls', tableId);
  	
  		// Update the input elements whenever the table is filtered
  		$(settings.nTable).on( 'search.dt.DT', function ( ev, s ) {
  			if ( settings === s ) {
  				// IE9 throws an 'unknown error' if document.activeElement is used
  				// inside an iframe or frame...
  				try {
  					if ( jqFilter[0] !== document.activeElement ) {
  						jqFilter.val( previousSearch.sSearch );
  					}
  				}
  				catch ( e ) {}
  			}
  		} );
  	
  		return filter[0];
  	}
  	
  	
  	/**
  	 * Filter the table using both the global filter and column based filtering
  	 *  @param {object} oSettings dataTables settings object
  	 *  @param {object} oSearch search information
  	 *  @param {int} [iForce] force a research of the master array (1) or not (undefined or 0)
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnFilterComplete ( oSettings, oInput, iForce )
  	{
  		var oPrevSearch = oSettings.oPreviousSearch;
  		var aoPrevSearch = oSettings.aoPreSearchCols;
  		var fnSaveFilter = function ( oFilter ) {
  			/* Save the filtering values */
  			oPrevSearch.sSearch = oFilter.sSearch;
  			oPrevSearch.bRegex = oFilter.bRegex;
  			oPrevSearch.bSmart = oFilter.bSmart;
  			oPrevSearch.bCaseInsensitive = oFilter.bCaseInsensitive;
  		};
  		var fnRegex = function ( o ) {
  			// Backwards compatibility with the bEscapeRegex option
  			return o.bEscapeRegex !== undefined$1 ? !o.bEscapeRegex : o.bRegex;
  		};
  	
  		// Resolve any column types that are unknown due to addition or invalidation
  		// @todo As per sort - can this be moved into an event handler?
  		_fnColumnTypes( oSettings );
  	
  		/* In server-side processing all filtering is done by the server, so no point hanging around here */
  		if ( _fnDataSource( oSettings ) != 'ssp' )
  		{
  			/* Global filter */
  			_fnFilter( oSettings, oInput.sSearch, iForce, fnRegex(oInput), oInput.bSmart, oInput.bCaseInsensitive );
  			fnSaveFilter( oInput );
  	
  			/* Now do the individual column filter */
  			for ( var i=0 ; i<aoPrevSearch.length ; i++ )
  			{
  				_fnFilterColumn( oSettings, aoPrevSearch[i].sSearch, i, fnRegex(aoPrevSearch[i]),
  					aoPrevSearch[i].bSmart, aoPrevSearch[i].bCaseInsensitive );
  			}
  	
  			/* Custom filtering */
  			_fnFilterCustom( oSettings );
  		}
  		else
  		{
  			fnSaveFilter( oInput );
  		}
  	
  		/* Tell the draw function we have been filtering */
  		oSettings.bFiltered = true;
  		_fnCallbackFire( oSettings, null, 'search', [oSettings] );
  	}
  	
  	
  	/**
  	 * Apply custom filtering functions
  	 *  @param {object} oSettings dataTables settings object
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnFilterCustom( settings )
  	{
  		var filters = DataTable.ext.search;
  		var displayRows = settings.aiDisplay;
  		var row, rowIdx;
  	
  		for ( var i=0, ien=filters.length ; i<ien ; i++ ) {
  			var rows = [];
  	
  			// Loop over each row and see if it should be included
  			for ( var j=0, jen=displayRows.length ; j<jen ; j++ ) {
  				rowIdx = displayRows[ j ];
  				row = settings.aoData[ rowIdx ];
  	
  				if ( filters[i]( settings, row._aFilterData, rowIdx, row._aData, j ) ) {
  					rows.push( rowIdx );
  				}
  			}
  	
  			// So the array reference doesn't break set the results into the
  			// existing array
  			displayRows.length = 0;
  			$.merge( displayRows, rows );
  		}
  	}
  	
  	
  	/**
  	 * Filter the table on a per-column basis
  	 *  @param {object} oSettings dataTables settings object
  	 *  @param {string} sInput string to filter on
  	 *  @param {int} iColumn column to filter
  	 *  @param {bool} bRegex treat search string as a regular expression or not
  	 *  @param {bool} bSmart use smart filtering or not
  	 *  @param {bool} bCaseInsensitive Do case insenstive matching or not
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnFilterColumn ( settings, searchStr, colIdx, regex, smart, caseInsensitive )
  	{
  		if ( searchStr === '' ) {
  			return;
  		}
  	
  		var data;
  		var out = [];
  		var display = settings.aiDisplay;
  		var rpSearch = _fnFilterCreateSearch( searchStr, regex, smart, caseInsensitive );
  	
  		for ( var i=0 ; i<display.length ; i++ ) {
  			data = settings.aoData[ display[i] ]._aFilterData[ colIdx ];
  	
  			if ( rpSearch.test( data ) ) {
  				out.push( display[i] );
  			}
  		}
  	
  		settings.aiDisplay = out;
  	}
  	
  	
  	/**
  	 * Filter the data table based on user input and draw the table
  	 *  @param {object} settings dataTables settings object
  	 *  @param {string} input string to filter on
  	 *  @param {int} force optional - force a research of the master array (1) or not (undefined or 0)
  	 *  @param {bool} regex treat as a regular expression or not
  	 *  @param {bool} smart perform smart filtering or not
  	 *  @param {bool} caseInsensitive Do case insenstive matching or not
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnFilter( settings, input, force, regex, smart, caseInsensitive )
  	{
  		var rpSearch = _fnFilterCreateSearch( input, regex, smart, caseInsensitive );
  		var prevSearch = settings.oPreviousSearch.sSearch;
  		var displayMaster = settings.aiDisplayMaster;
  		var display, invalidated, i;
  		var filtered = [];
  	
  		// Need to take account of custom filtering functions - always filter
  		if ( DataTable.ext.search.length !== 0 ) {
  			force = true;
  		}
  	
  		// Check if any of the rows were invalidated
  		invalidated = _fnFilterData( settings );
  	
  		// If the input is blank - we just want the full data set
  		if ( input.length <= 0 ) {
  			settings.aiDisplay = displayMaster.slice();
  		}
  		else {
  			// New search - start from the master array
  			if ( invalidated ||
  				 force ||
  				 regex ||
  				 prevSearch.length > input.length ||
  				 input.indexOf(prevSearch) !== 0 ||
  				 settings.bSorted // On resort, the display master needs to be
  				                  // re-filtered since indexes will have changed
  			) {
  				settings.aiDisplay = displayMaster.slice();
  			}
  	
  			// Search the display array
  			display = settings.aiDisplay;
  	
  			for ( i=0 ; i<display.length ; i++ ) {
  				if ( rpSearch.test( settings.aoData[ display[i] ]._sFilterRow ) ) {
  					filtered.push( display[i] );
  				}
  			}
  	
  			settings.aiDisplay = filtered;
  		}
  	}
  	
  	
  	/**
  	 * Build a regular expression object suitable for searching a table
  	 *  @param {string} sSearch string to search for
  	 *  @param {bool} bRegex treat as a regular expression or not
  	 *  @param {bool} bSmart perform smart filtering or not
  	 *  @param {bool} bCaseInsensitive Do case insensitive matching or not
  	 *  @returns {RegExp} constructed object
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnFilterCreateSearch( search, regex, smart, caseInsensitive )
  	{
  		search = regex ?
  			search :
  			_fnEscapeRegex( search );
  		
  		if ( smart ) {
  			/* For smart filtering we want to allow the search to work regardless of
  			 * word order. We also want double quoted text to be preserved, so word
  			 * order is important - a la google. So this is what we want to
  			 * generate:
  			 * 
  			 * ^(?=.*?\bone\b)(?=.*?\btwo three\b)(?=.*?\bfour\b).*$
  			 */
  			var a = $.map( search.match( /"[^"]+"|[^ ]+/g ) || [''], function ( word ) {
  				if ( word.charAt(0) === '"' ) {
  					var m = word.match( /^"(.*)"$/ );
  					word = m ? m[1] : word;
  				}
  	
  				return word.replace('"', '');
  			} );
  	
  			search = '^(?=.*?'+a.join( ')(?=.*?' )+').*$';
  		}
  	
  		return new RegExp( search, caseInsensitive ? 'i' : '' );
  	}
  	
  	
  	/**
  	 * Escape a string such that it can be used in a regular expression
  	 *  @param {string} sVal string to escape
  	 *  @returns {string} escaped string
  	 *  @memberof DataTable#oApi
  	 */
  	var _fnEscapeRegex = DataTable.util.escapeRegex;
  	
  	var __filter_div = $('<div>')[0];
  	var __filter_div_textContent = __filter_div.textContent !== undefined$1;
  	
  	// Update the filtering data for each row if needed (by invalidation or first run)
  	function _fnFilterData ( settings )
  	{
  		var columns = settings.aoColumns;
  		var column;
  		var i, j, ien, jen, filterData, cellData, row;
  		var fomatters = DataTable.ext.type.search;
  		var wasInvalidated = false;
  	
  		for ( i=0, ien=settings.aoData.length ; i<ien ; i++ ) {
  			row = settings.aoData[i];
  	
  			if ( ! row._aFilterData ) {
  				filterData = [];
  	
  				for ( j=0, jen=columns.length ; j<jen ; j++ ) {
  					column = columns[j];
  	
  					if ( column.bSearchable ) {
  						cellData = _fnGetCellData( settings, i, j, 'filter' );
  	
  						if ( fomatters[ column.sType ] ) {
  							cellData = fomatters[ column.sType ]( cellData );
  						}
  	
  						// Search in DataTables 1.10 is string based. In 1.11 this
  						// should be altered to also allow strict type checking.
  						if ( cellData === null ) {
  							cellData = '';
  						}
  	
  						if ( typeof cellData !== 'string' && cellData.toString ) {
  							cellData = cellData.toString();
  						}
  					}
  					else {
  						cellData = '';
  					}
  	
  					// If it looks like there is an HTML entity in the string,
  					// attempt to decode it so sorting works as expected. Note that
  					// we could use a single line of jQuery to do this, but the DOM
  					// method used here is much faster http://jsperf.com/html-decode
  					if ( cellData.indexOf && cellData.indexOf('&') !== -1 ) {
  						__filter_div.innerHTML = cellData;
  						cellData = __filter_div_textContent ?
  							__filter_div.textContent :
  							__filter_div.innerText;
  					}
  	
  					if ( cellData.replace ) {
  						cellData = cellData.replace(/[\r\n\u2028]/g, '');
  					}
  	
  					filterData.push( cellData );
  				}
  	
  				row._aFilterData = filterData;
  				row._sFilterRow = filterData.join('  ');
  				wasInvalidated = true;
  			}
  		}
  	
  		return wasInvalidated;
  	}
  	
  	
  	/**
  	 * Convert from the internal Hungarian notation to camelCase for external
  	 * interaction
  	 *  @param {object} obj Object to convert
  	 *  @returns {object} Inverted object
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnSearchToCamel ( obj )
  	{
  		return {
  			search:          obj.sSearch,
  			smart:           obj.bSmart,
  			regex:           obj.bRegex,
  			caseInsensitive: obj.bCaseInsensitive
  		};
  	}
  	
  	
  	
  	/**
  	 * Convert from camelCase notation to the internal Hungarian. We could use the
  	 * Hungarian convert function here, but this is cleaner
  	 *  @param {object} obj Object to convert
  	 *  @returns {object} Inverted object
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnSearchToHung ( obj )
  	{
  		return {
  			sSearch:          obj.search,
  			bSmart:           obj.smart,
  			bRegex:           obj.regex,
  			bCaseInsensitive: obj.caseInsensitive
  		};
  	}
  	
  	/**
  	 * Generate the node required for the info display
  	 *  @param {object} oSettings dataTables settings object
  	 *  @returns {node} Information element
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnFeatureHtmlInfo ( settings )
  	{
  		var
  			tid = settings.sTableId,
  			nodes = settings.aanFeatures.i,
  			n = $('<div/>', {
  				'class': settings.oClasses.sInfo,
  				'id': ! nodes ? tid+'_info' : null
  			} );
  	
  		if ( ! nodes ) {
  			// Update display on each draw
  			settings.aoDrawCallback.push( {
  				"fn": _fnUpdateInfo,
  				"sName": "information"
  			} );
  	
  			n
  				.attr( 'role', 'status' )
  				.attr( 'aria-live', 'polite' );
  	
  			// Table is described by our info div
  			$(settings.nTable).attr( 'aria-describedby', tid+'_info' );
  		}
  	
  		return n[0];
  	}
  	
  	
  	/**
  	 * Update the information elements in the display
  	 *  @param {object} settings dataTables settings object
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnUpdateInfo ( settings )
  	{
  		/* Show information about the table */
  		var nodes = settings.aanFeatures.i;
  		if ( nodes.length === 0 ) {
  			return;
  		}
  	
  		var
  			lang  = settings.oLanguage,
  			start = settings._iDisplayStart+1,
  			end   = settings.fnDisplayEnd(),
  			max   = settings.fnRecordsTotal(),
  			total = settings.fnRecordsDisplay(),
  			out   = total ?
  				lang.sInfo :
  				lang.sInfoEmpty;
  	
  		if ( total !== max ) {
  			/* Record set after filtering */
  			out += ' ' + lang.sInfoFiltered;
  		}
  	
  		// Convert the macros
  		out += lang.sInfoPostFix;
  		out = _fnInfoMacros( settings, out );
  	
  		var callback = lang.fnInfoCallback;
  		if ( callback !== null ) {
  			out = callback.call( settings.oInstance,
  				settings, start, end, max, total, out
  			);
  		}
  	
  		$(nodes).html( out );
  	}
  	
  	
  	function _fnInfoMacros ( settings, str )
  	{
  		// When infinite scrolling, we are always starting at 1. _iDisplayStart is used only
  		// internally
  		var
  			formatter  = settings.fnFormatNumber,
  			start      = settings._iDisplayStart+1,
  			len        = settings._iDisplayLength,
  			vis        = settings.fnRecordsDisplay(),
  			all        = len === -1;
  	
  		return str.
  			replace(/_START_/g, formatter.call( settings, start ) ).
  			replace(/_END_/g,   formatter.call( settings, settings.fnDisplayEnd() ) ).
  			replace(/_MAX_/g,   formatter.call( settings, settings.fnRecordsTotal() ) ).
  			replace(/_TOTAL_/g, formatter.call( settings, vis ) ).
  			replace(/_PAGE_/g,  formatter.call( settings, all ? 1 : Math.ceil( start / len ) ) ).
  			replace(/_PAGES_/g, formatter.call( settings, all ? 1 : Math.ceil( vis / len ) ) );
  	}
  	
  	
  	
  	/**
  	 * Draw the table for the first time, adding all required features
  	 *  @param {object} settings dataTables settings object
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnInitialise ( settings )
  	{
  		var i, iLen, iAjaxStart=settings.iInitDisplayStart;
  		var columns = settings.aoColumns, column;
  		var features = settings.oFeatures;
  		var deferLoading = settings.bDeferLoading; // value modified by the draw
  	
  		/* Ensure that the table data is fully initialised */
  		if ( ! settings.bInitialised ) {
  			setTimeout( function(){ _fnInitialise( settings ); }, 200 );
  			return;
  		}
  	
  		/* Show the display HTML options */
  		_fnAddOptionsHtml( settings );
  	
  		/* Build and draw the header / footer for the table */
  		_fnBuildHead( settings );
  		_fnDrawHead( settings, settings.aoHeader );
  		_fnDrawHead( settings, settings.aoFooter );
  	
  		/* Okay to show that something is going on now */
  		_fnProcessingDisplay( settings, true );
  	
  		/* Calculate sizes for columns */
  		if ( features.bAutoWidth ) {
  			_fnCalculateColumnWidths( settings );
  		}
  	
  		for ( i=0, iLen=columns.length ; i<iLen ; i++ ) {
  			column = columns[i];
  	
  			if ( column.sWidth ) {
  				column.nTh.style.width = _fnStringToCss( column.sWidth );
  			}
  		}
  	
  		_fnCallbackFire( settings, null, 'preInit', [settings] );
  	
  		// If there is default sorting required - let's do it. The sort function
  		// will do the drawing for us. Otherwise we draw the table regardless of the
  		// Ajax source - this allows the table to look initialised for Ajax sourcing
  		// data (show 'loading' message possibly)
  		_fnReDraw( settings );
  	
  		// Server-side processing init complete is done by _fnAjaxUpdateDraw
  		var dataSrc = _fnDataSource( settings );
  		if ( dataSrc != 'ssp' || deferLoading ) {
  			// if there is an ajax source load the data
  			if ( dataSrc == 'ajax' ) {
  				_fnBuildAjax( settings, [], function(json) {
  					var aData = _fnAjaxDataSrc( settings, json );
  	
  					// Got the data - add it to the table
  					for ( i=0 ; i<aData.length ; i++ ) {
  						_fnAddData( settings, aData[i] );
  					}
  	
  					// Reset the init display for cookie saving. We've already done
  					// a filter, and therefore cleared it before. So we need to make
  					// it appear 'fresh'
  					settings.iInitDisplayStart = iAjaxStart;
  	
  					_fnReDraw( settings );
  	
  					_fnProcessingDisplay( settings, false );
  					_fnInitComplete( settings, json );
  				});
  			}
  			else {
  				_fnProcessingDisplay( settings, false );
  				_fnInitComplete( settings );
  			}
  		}
  	}
  	
  	
  	/**
  	 * Draw the table for the first time, adding all required features
  	 *  @param {object} oSettings dataTables settings object
  	 *  @param {object} [json] JSON from the server that completed the table, if using Ajax source
  	 *    with client-side processing (optional)
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnInitComplete ( settings, json )
  	{
  		settings._bInitComplete = true;
  	
  		// When data was added after the initialisation (data or Ajax) we need to
  		// calculate the column sizing
  		if ( json || settings.oInit.aaData ) {
  			_fnAdjustColumnSizing( settings );
  		}
  	
  		_fnCallbackFire( settings, null, 'plugin-init', [settings, json] );
  		_fnCallbackFire( settings, 'aoInitComplete', 'init', [settings, json] );
  	}
  	
  	
  	function _fnLengthChange ( settings, val )
  	{
  		var len = parseInt( val, 10 );
  		settings._iDisplayLength = len;
  	
  		_fnLengthOverflow( settings );
  	
  		// Fire length change event
  		_fnCallbackFire( settings, null, 'length', [settings, len] );
  	}
  	
  	
  	/**
  	 * Generate the node required for user display length changing
  	 *  @param {object} settings dataTables settings object
  	 *  @returns {node} Display length feature node
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnFeatureHtmlLength ( settings )
  	{
  		var
  			classes  = settings.oClasses,
  			tableId  = settings.sTableId,
  			menu     = settings.aLengthMenu,
  			d2       = $.isArray( menu[0] ),
  			lengths  = d2 ? menu[0] : menu,
  			language = d2 ? menu[1] : menu;
  	
  		var select = $('<select/>', {
  			'name':          tableId+'_length',
  			'aria-controls': tableId,
  			'class':         classes.sLengthSelect
  		} );
  	
  		for ( var i=0, ien=lengths.length ; i<ien ; i++ ) {
  			select[0][ i ] = new Option(
  				typeof language[i] === 'number' ?
  					settings.fnFormatNumber( language[i] ) :
  					language[i],
  				lengths[i]
  			);
  		}
  	
  		var div = $('<div><label/></div>').addClass( classes.sLength );
  		if ( ! settings.aanFeatures.l ) {
  			div[0].id = tableId+'_length';
  		}
  	
  		div.children().append(
  			settings.oLanguage.sLengthMenu.replace( '_MENU_', select[0].outerHTML )
  		);
  	
  		// Can't use `select` variable as user might provide their own and the
  		// reference is broken by the use of outerHTML
  		$('select', div)
  			.val( settings._iDisplayLength )
  			.on( 'change.DT', function(e) {
  				_fnLengthChange( settings, $(this).val() );
  				_fnDraw( settings );
  			} );
  	
  		// Update node value whenever anything changes the table's length
  		$(settings.nTable).on( 'length.dt.DT', function (e, s, len) {
  			if ( settings === s ) {
  				$('select', div).val( len );
  			}
  		} );
  	
  		return div[0];
  	}
  	
  	
  	
  	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  	 * Note that most of the paging logic is done in
  	 * DataTable.ext.pager
  	 */
  	
  	/**
  	 * Generate the node required for default pagination
  	 *  @param {object} oSettings dataTables settings object
  	 *  @returns {node} Pagination feature node
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnFeatureHtmlPaginate ( settings )
  	{
  		var
  			type   = settings.sPaginationType,
  			plugin = DataTable.ext.pager[ type ],
  			modern = typeof plugin === 'function',
  			redraw = function( settings ) {
  				_fnDraw( settings );
  			},
  			node = $('<div/>').addClass( settings.oClasses.sPaging + type )[0],
  			features = settings.aanFeatures;
  	
  		if ( ! modern ) {
  			plugin.fnInit( settings, node, redraw );
  		}
  	
  		/* Add a draw callback for the pagination on first instance, to update the paging display */
  		if ( ! features.p )
  		{
  			node.id = settings.sTableId+'_paginate';
  	
  			settings.aoDrawCallback.push( {
  				"fn": function( settings ) {
  					if ( modern ) {
  						var
  							start      = settings._iDisplayStart,
  							len        = settings._iDisplayLength,
  							visRecords = settings.fnRecordsDisplay(),
  							all        = len === -1,
  							page = all ? 0 : Math.ceil( start / len ),
  							pages = all ? 1 : Math.ceil( visRecords / len ),
  							buttons = plugin(page, pages),
  							i, ien;
  	
  						for ( i=0, ien=features.p.length ; i<ien ; i++ ) {
  							_fnRenderer( settings, 'pageButton' )(
  								settings, features.p[i], i, buttons, page, pages
  							);
  						}
  					}
  					else {
  						plugin.fnUpdate( settings, redraw );
  					}
  				},
  				"sName": "pagination"
  			} );
  		}
  	
  		return node;
  	}
  	
  	
  	/**
  	 * Alter the display settings to change the page
  	 *  @param {object} settings DataTables settings object
  	 *  @param {string|int} action Paging action to take: "first", "previous",
  	 *    "next" or "last" or page number to jump to (integer)
  	 *  @param [bool] redraw Automatically draw the update or not
  	 *  @returns {bool} true page has changed, false - no change
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnPageChange ( settings, action, redraw )
  	{
  		var
  			start     = settings._iDisplayStart,
  			len       = settings._iDisplayLength,
  			records   = settings.fnRecordsDisplay();
  	
  		if ( records === 0 || len === -1 )
  		{
  			start = 0;
  		}
  		else if ( typeof action === "number" )
  		{
  			start = action * len;
  	
  			if ( start > records )
  			{
  				start = 0;
  			}
  		}
  		else if ( action == "first" )
  		{
  			start = 0;
  		}
  		else if ( action == "previous" )
  		{
  			start = len >= 0 ?
  				start - len :
  				0;
  	
  			if ( start < 0 )
  			{
  			  start = 0;
  			}
  		}
  		else if ( action == "next" )
  		{
  			if ( start + len < records )
  			{
  				start += len;
  			}
  		}
  		else if ( action == "last" )
  		{
  			start = Math.floor( (records-1) / len) * len;
  		}
  		else
  		{
  			_fnLog( settings, 0, "Unknown paging action: "+action, 5 );
  		}
  	
  		var changed = settings._iDisplayStart !== start;
  		settings._iDisplayStart = start;
  	
  		if ( changed ) {
  			_fnCallbackFire( settings, null, 'page', [settings] );
  	
  			if ( redraw ) {
  				_fnDraw( settings );
  			}
  		}
  	
  		return changed;
  	}
  	
  	
  	
  	/**
  	 * Generate the node required for the processing node
  	 *  @param {object} settings dataTables settings object
  	 *  @returns {node} Processing element
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnFeatureHtmlProcessing ( settings )
  	{
  		return $('<div/>', {
  				'id': ! settings.aanFeatures.r ? settings.sTableId+'_processing' : null,
  				'class': settings.oClasses.sProcessing
  			} )
  			.html( settings.oLanguage.sProcessing )
  			.insertBefore( settings.nTable )[0];
  	}
  	
  	
  	/**
  	 * Display or hide the processing indicator
  	 *  @param {object} settings dataTables settings object
  	 *  @param {bool} show Show the processing indicator (true) or not (false)
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnProcessingDisplay ( settings, show )
  	{
  		if ( settings.oFeatures.bProcessing ) {
  			$(settings.aanFeatures.r).css( 'display', show ? 'block' : 'none' );
  		}
  	
  		_fnCallbackFire( settings, null, 'processing', [settings, show] );
  	}
  	
  	/**
  	 * Add any control elements for the table - specifically scrolling
  	 *  @param {object} settings dataTables settings object
  	 *  @returns {node} Node to add to the DOM
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnFeatureHtmlTable ( settings )
  	{
  		var table = $(settings.nTable);
  	
  		// Add the ARIA grid role to the table
  		table.attr( 'role', 'grid' );
  	
  		// Scrolling from here on in
  		var scroll = settings.oScroll;
  	
  		if ( scroll.sX === '' && scroll.sY === '' ) {
  			return settings.nTable;
  		}
  	
  		var scrollX = scroll.sX;
  		var scrollY = scroll.sY;
  		var classes = settings.oClasses;
  		var caption = table.children('caption');
  		var captionSide = caption.length ? caption[0]._captionSide : null;
  		var headerClone = $( table[0].cloneNode(false) );
  		var footerClone = $( table[0].cloneNode(false) );
  		var footer = table.children('tfoot');
  		var _div = '<div/>';
  		var size = function ( s ) {
  			return !s ? null : _fnStringToCss( s );
  		};
  	
  		if ( ! footer.length ) {
  			footer = null;
  		}
  	
  		/*
  		 * The HTML structure that we want to generate in this function is:
  		 *  div - scroller
  		 *    div - scroll head
  		 *      div - scroll head inner
  		 *        table - scroll head table
  		 *          thead - thead
  		 *    div - scroll body
  		 *      table - table (master table)
  		 *        thead - thead clone for sizing
  		 *        tbody - tbody
  		 *    div - scroll foot
  		 *      div - scroll foot inner
  		 *        table - scroll foot table
  		 *          tfoot - tfoot
  		 */
  		var scroller = $( _div, { 'class': classes.sScrollWrapper } )
  			.append(
  				$(_div, { 'class': classes.sScrollHead } )
  					.css( {
  						overflow: 'hidden',
  						position: 'relative',
  						border: 0,
  						width: scrollX ? size(scrollX) : '100%'
  					} )
  					.append(
  						$(_div, { 'class': classes.sScrollHeadInner } )
  							.css( {
  								'box-sizing': 'content-box',
  								width: scroll.sXInner || '100%'
  							} )
  							.append(
  								headerClone
  									.removeAttr('id')
  									.css( 'margin-left', 0 )
  									.append( captionSide === 'top' ? caption : null )
  									.append(
  										table.children('thead')
  									)
  							)
  					)
  			)
  			.append(
  				$(_div, { 'class': classes.sScrollBody } )
  					.css( {
  						position: 'relative',
  						overflow: 'auto',
  						width: size( scrollX )
  					} )
  					.append( table )
  			);
  	
  		if ( footer ) {
  			scroller.append(
  				$(_div, { 'class': classes.sScrollFoot } )
  					.css( {
  						overflow: 'hidden',
  						border: 0,
  						width: scrollX ? size(scrollX) : '100%'
  					} )
  					.append(
  						$(_div, { 'class': classes.sScrollFootInner } )
  							.append(
  								footerClone
  									.removeAttr('id')
  									.css( 'margin-left', 0 )
  									.append( captionSide === 'bottom' ? caption : null )
  									.append(
  										table.children('tfoot')
  									)
  							)
  					)
  			);
  		}
  	
  		var children = scroller.children();
  		var scrollHead = children[0];
  		var scrollBody = children[1];
  		var scrollFoot = footer ? children[2] : null;
  	
  		// When the body is scrolled, then we also want to scroll the headers
  		if ( scrollX ) {
  			$(scrollBody).on( 'scroll.DT', function (e) {
  				var scrollLeft = this.scrollLeft;
  	
  				scrollHead.scrollLeft = scrollLeft;
  	
  				if ( footer ) {
  					scrollFoot.scrollLeft = scrollLeft;
  				}
  			} );
  		}
  	
  		$(scrollBody).css('max-height', scrollY);
  		if (! scroll.bCollapse) {
  			$(scrollBody).css('height', scrollY);
  		}
  	
  		settings.nScrollHead = scrollHead;
  		settings.nScrollBody = scrollBody;
  		settings.nScrollFoot = scrollFoot;
  	
  		// On redraw - align columns
  		settings.aoDrawCallback.push( {
  			"fn": _fnScrollDraw,
  			"sName": "scrolling"
  		} );
  	
  		return scroller[0];
  	}
  	
  	
  	
  	/**
  	 * Update the header, footer and body tables for resizing - i.e. column
  	 * alignment.
  	 *
  	 * Welcome to the most horrible function DataTables. The process that this
  	 * function follows is basically:
  	 *   1. Re-create the table inside the scrolling div
  	 *   2. Take live measurements from the DOM
  	 *   3. Apply the measurements to align the columns
  	 *   4. Clean up
  	 *
  	 *  @param {object} settings dataTables settings object
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnScrollDraw ( settings )
  	{
  		// Given that this is such a monster function, a lot of variables are use
  		// to try and keep the minimised size as small as possible
  		var
  			scroll         = settings.oScroll,
  			scrollX        = scroll.sX,
  			scrollXInner   = scroll.sXInner,
  			scrollY        = scroll.sY,
  			barWidth       = scroll.iBarWidth,
  			divHeader      = $(settings.nScrollHead),
  			divHeaderStyle = divHeader[0].style,
  			divHeaderInner = divHeader.children('div'),
  			divHeaderInnerStyle = divHeaderInner[0].style,
  			divHeaderTable = divHeaderInner.children('table'),
  			divBodyEl      = settings.nScrollBody,
  			divBody        = $(divBodyEl),
  			divBodyStyle   = divBodyEl.style,
  			divFooter      = $(settings.nScrollFoot),
  			divFooterInner = divFooter.children('div'),
  			divFooterTable = divFooterInner.children('table'),
  			header         = $(settings.nTHead),
  			table          = $(settings.nTable),
  			tableEl        = table[0],
  			tableStyle     = tableEl.style,
  			footer         = settings.nTFoot ? $(settings.nTFoot) : null,
  			browser        = settings.oBrowser,
  			ie67           = browser.bScrollOversize,
  			dtHeaderCells  = _pluck( settings.aoColumns, 'nTh' ),
  			headerTrgEls, footerTrgEls,
  			headerSrcEls, footerSrcEls,
  			headerCopy, footerCopy,
  			headerWidths=[], footerWidths=[],
  			headerContent=[], footerContent=[],
  			idx, correction, sanityWidth,
  			zeroOut = function(nSizer) {
  				var style = nSizer.style;
  				style.paddingTop = "0";
  				style.paddingBottom = "0";
  				style.borderTopWidth = "0";
  				style.borderBottomWidth = "0";
  				style.height = 0;
  			};
  	
  		// If the scrollbar visibility has changed from the last draw, we need to
  		// adjust the column sizes as the table width will have changed to account
  		// for the scrollbar
  		var scrollBarVis = divBodyEl.scrollHeight > divBodyEl.clientHeight;
  		
  		if ( settings.scrollBarVis !== scrollBarVis && settings.scrollBarVis !== undefined$1 ) {
  			settings.scrollBarVis = scrollBarVis;
  			_fnAdjustColumnSizing( settings );
  			return; // adjust column sizing will call this function again
  		}
  		else {
  			settings.scrollBarVis = scrollBarVis;
  		}
  	
  		/*
  		 * 1. Re-create the table inside the scrolling div
  		 */
  	
  		// Remove the old minimised thead and tfoot elements in the inner table
  		table.children('thead, tfoot').remove();
  	
  		if ( footer ) {
  			footerCopy = footer.clone().prependTo( table );
  			footerTrgEls = footer.find('tr'); // the original tfoot is in its own table and must be sized
  			footerSrcEls = footerCopy.find('tr');
  		}
  	
  		// Clone the current header and footer elements and then place it into the inner table
  		headerCopy = header.clone().prependTo( table );
  		headerTrgEls = header.find('tr'); // original header is in its own table
  		headerSrcEls = headerCopy.find('tr');
  		headerCopy.find('th, td').removeAttr('tabindex');
  	
  	
  		/*
  		 * 2. Take live measurements from the DOM - do not alter the DOM itself!
  		 */
  	
  		// Remove old sizing and apply the calculated column widths
  		// Get the unique column headers in the newly created (cloned) header. We want to apply the
  		// calculated sizes to this header
  		if ( ! scrollX )
  		{
  			divBodyStyle.width = '100%';
  			divHeader[0].style.width = '100%';
  		}
  	
  		$.each( _fnGetUniqueThs( settings, headerCopy ), function ( i, el ) {
  			idx = _fnVisibleToColumnIndex( settings, i );
  			el.style.width = settings.aoColumns[idx].sWidth;
  		} );
  	
  		if ( footer ) {
  			_fnApplyToChildren( function(n) {
  				n.style.width = "";
  			}, footerSrcEls );
  		}
  	
  		// Size the table as a whole
  		sanityWidth = table.outerWidth();
  		if ( scrollX === "" ) {
  			// No x scrolling
  			tableStyle.width = "100%";
  	
  			// IE7 will make the width of the table when 100% include the scrollbar
  			// - which is shouldn't. When there is a scrollbar we need to take this
  			// into account.
  			if ( ie67 && (table.find('tbody').height() > divBodyEl.offsetHeight ||
  				divBody.css('overflow-y') == "scroll")
  			) {
  				tableStyle.width = _fnStringToCss( table.outerWidth() - barWidth);
  			}
  	
  			// Recalculate the sanity width
  			sanityWidth = table.outerWidth();
  		}
  		else if ( scrollXInner !== "" ) {
  			// legacy x scroll inner has been given - use it
  			tableStyle.width = _fnStringToCss(scrollXInner);
  	
  			// Recalculate the sanity width
  			sanityWidth = table.outerWidth();
  		}
  	
  		// Hidden header should have zero height, so remove padding and borders. Then
  		// set the width based on the real headers
  	
  		// Apply all styles in one pass
  		_fnApplyToChildren( zeroOut, headerSrcEls );
  	
  		// Read all widths in next pass
  		_fnApplyToChildren( function(nSizer) {
  			headerContent.push( nSizer.innerHTML );
  			headerWidths.push( _fnStringToCss( $(nSizer).css('width') ) );
  		}, headerSrcEls );
  	
  		// Apply all widths in final pass
  		_fnApplyToChildren( function(nToSize, i) {
  			// Only apply widths to the DataTables detected header cells - this
  			// prevents complex headers from having contradictory sizes applied
  			if ( $.inArray( nToSize, dtHeaderCells ) !== -1 ) {
  				nToSize.style.width = headerWidths[i];
  			}
  		}, headerTrgEls );
  	
  		$(headerSrcEls).height(0);
  	
  		/* Same again with the footer if we have one */
  		if ( footer )
  		{
  			_fnApplyToChildren( zeroOut, footerSrcEls );
  	
  			_fnApplyToChildren( function(nSizer) {
  				footerContent.push( nSizer.innerHTML );
  				footerWidths.push( _fnStringToCss( $(nSizer).css('width') ) );
  			}, footerSrcEls );
  	
  			_fnApplyToChildren( function(nToSize, i) {
  				nToSize.style.width = footerWidths[i];
  			}, footerTrgEls );
  	
  			$(footerSrcEls).height(0);
  		}
  	
  	
  		/*
  		 * 3. Apply the measurements
  		 */
  	
  		// "Hide" the header and footer that we used for the sizing. We need to keep
  		// the content of the cell so that the width applied to the header and body
  		// both match, but we want to hide it completely. We want to also fix their
  		// width to what they currently are
  		_fnApplyToChildren( function(nSizer, i) {
  			nSizer.innerHTML = '<div class="dataTables_sizing">'+headerContent[i]+'</div>';
  			nSizer.childNodes[0].style.height = "0";
  			nSizer.childNodes[0].style.overflow = "hidden";
  			nSizer.style.width = headerWidths[i];
  		}, headerSrcEls );
  	
  		if ( footer )
  		{
  			_fnApplyToChildren( function(nSizer, i) {
  				nSizer.innerHTML = '<div class="dataTables_sizing">'+footerContent[i]+'</div>';
  				nSizer.childNodes[0].style.height = "0";
  				nSizer.childNodes[0].style.overflow = "hidden";
  				nSizer.style.width = footerWidths[i];
  			}, footerSrcEls );
  		}
  	
  		// Sanity check that the table is of a sensible width. If not then we are going to get
  		// misalignment - try to prevent this by not allowing the table to shrink below its min width
  		if ( table.outerWidth() < sanityWidth )
  		{
  			// The min width depends upon if we have a vertical scrollbar visible or not */
  			correction = ((divBodyEl.scrollHeight > divBodyEl.offsetHeight ||
  				divBody.css('overflow-y') == "scroll")) ?
  					sanityWidth+barWidth :
  					sanityWidth;
  	
  			// IE6/7 are a law unto themselves...
  			if ( ie67 && (divBodyEl.scrollHeight >
  				divBodyEl.offsetHeight || divBody.css('overflow-y') == "scroll")
  			) {
  				tableStyle.width = _fnStringToCss( correction-barWidth );
  			}
  	
  			// And give the user a warning that we've stopped the table getting too small
  			if ( scrollX === "" || scrollXInner !== "" ) {
  				_fnLog( settings, 1, 'Possible column misalignment', 6 );
  			}
  		}
  		else
  		{
  			correction = '100%';
  		}
  	
  		// Apply to the container elements
  		divBodyStyle.width = _fnStringToCss( correction );
  		divHeaderStyle.width = _fnStringToCss( correction );
  	
  		if ( footer ) {
  			settings.nScrollFoot.style.width = _fnStringToCss( correction );
  		}
  	
  	
  		/*
  		 * 4. Clean up
  		 */
  		if ( ! scrollY ) {
  			/* IE7< puts a vertical scrollbar in place (when it shouldn't be) due to subtracting
  			 * the scrollbar height from the visible display, rather than adding it on. We need to
  			 * set the height in order to sort this. Don't want to do it in any other browsers.
  			 */
  			if ( ie67 ) {
  				divBodyStyle.height = _fnStringToCss( tableEl.offsetHeight+barWidth );
  			}
  		}
  	
  		/* Finally set the width's of the header and footer tables */
  		var iOuterWidth = table.outerWidth();
  		divHeaderTable[0].style.width = _fnStringToCss( iOuterWidth );
  		divHeaderInnerStyle.width = _fnStringToCss( iOuterWidth );
  	
  		// Figure out if there are scrollbar present - if so then we need a the header and footer to
  		// provide a bit more space to allow "overflow" scrolling (i.e. past the scrollbar)
  		var bScrolling = table.height() > divBodyEl.clientHeight || divBody.css('overflow-y') == "scroll";
  		var padding = 'padding' + (browser.bScrollbarLeft ? 'Left' : 'Right' );
  		divHeaderInnerStyle[ padding ] = bScrolling ? barWidth+"px" : "0px";
  	
  		if ( footer ) {
  			divFooterTable[0].style.width = _fnStringToCss( iOuterWidth );
  			divFooterInner[0].style.width = _fnStringToCss( iOuterWidth );
  			divFooterInner[0].style[padding] = bScrolling ? barWidth+"px" : "0px";
  		}
  	
  		// Correct DOM ordering for colgroup - comes before the thead
  		table.children('colgroup').insertBefore( table.children('thead') );
  	
  		/* Adjust the position of the header in case we loose the y-scrollbar */
  		divBody.trigger('scroll');
  	
  		// If sorting or filtering has occurred, jump the scrolling back to the top
  		// only if we aren't holding the position
  		if ( (settings.bSorted || settings.bFiltered) && ! settings._drawHold ) {
  			divBodyEl.scrollTop = 0;
  		}
  	}
  	
  	
  	
  	/**
  	 * Apply a given function to the display child nodes of an element array (typically
  	 * TD children of TR rows
  	 *  @param {function} fn Method to apply to the objects
  	 *  @param array {nodes} an1 List of elements to look through for display children
  	 *  @param array {nodes} an2 Another list (identical structure to the first) - optional
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnApplyToChildren( fn, an1, an2 )
  	{
  		var index=0, i=0, iLen=an1.length;
  		var nNode1, nNode2;
  	
  		while ( i < iLen ) {
  			nNode1 = an1[i].firstChild;
  			nNode2 = an2 ? an2[i].firstChild : null;
  	
  			while ( nNode1 ) {
  				if ( nNode1.nodeType === 1 ) {
  					if ( an2 ) {
  						fn( nNode1, nNode2, index );
  					}
  					else {
  						fn( nNode1, index );
  					}
  	
  					index++;
  				}
  	
  				nNode1 = nNode1.nextSibling;
  				nNode2 = an2 ? nNode2.nextSibling : null;
  			}
  	
  			i++;
  		}
  	}
  	
  	
  	
  	var __re_html_remove = /<.*?>/g;
  	
  	
  	/**
  	 * Calculate the width of columns for the table
  	 *  @param {object} oSettings dataTables settings object
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnCalculateColumnWidths ( oSettings )
  	{
  		var 
  			table = oSettings.nTable,
  			columns = oSettings.aoColumns,
  			scroll = oSettings.oScroll,
  			scrollY = scroll.sY,
  			scrollX = scroll.sX,
  			scrollXInner = scroll.sXInner,
  			columnCount = columns.length,
  			visibleColumns = _fnGetColumns( oSettings, 'bVisible' ),
  			headerCells = $('th', oSettings.nTHead),
  			tableWidthAttr = table.getAttribute('width'), // from DOM element
  			tableContainer = table.parentNode,
  			userInputs = false,
  			i, column, columnIdx, browser = oSettings.oBrowser,
  			ie67 = browser.bScrollOversize;
  	
  		var styleWidth = table.style.width;
  		if ( styleWidth && styleWidth.indexOf('%') !== -1 ) {
  			tableWidthAttr = styleWidth;
  		}
  	
  		/* Convert any user input sizes into pixel sizes */
  		for ( i=0 ; i<visibleColumns.length ; i++ ) {
  			column = columns[ visibleColumns[i] ];
  	
  			if ( column.sWidth !== null ) {
  				column.sWidth = _fnConvertToWidth( column.sWidthOrig, tableContainer );
  	
  				userInputs = true;
  			}
  		}
  	
  		/* If the number of columns in the DOM equals the number that we have to
  		 * process in DataTables, then we can use the offsets that are created by
  		 * the web- browser. No custom sizes can be set in order for this to happen,
  		 * nor scrolling used
  		 */
  		if ( ie67 || ! userInputs && ! scrollX && ! scrollY &&
  		     columnCount == _fnVisbleColumns( oSettings ) &&
  		     columnCount == headerCells.length
  		) {
  			for ( i=0 ; i<columnCount ; i++ ) {
  				var colIdx = _fnVisibleToColumnIndex( oSettings, i );
  	
  				if ( colIdx !== null ) {
  					columns[ colIdx ].sWidth = _fnStringToCss( headerCells.eq(i).width() );
  				}
  			}
  		}
  		else
  		{
  			// Otherwise construct a single row, worst case, table with the widest
  			// node in the data, assign any user defined widths, then insert it into
  			// the DOM and allow the browser to do all the hard work of calculating
  			// table widths
  			var tmpTable = $(table).clone() // don't use cloneNode - IE8 will remove events on the main table
  				.css( 'visibility', 'hidden' )
  				.removeAttr( 'id' );
  	
  			// Clean up the table body
  			tmpTable.find('tbody tr').remove();
  			var tr = $('<tr/>').appendTo( tmpTable.find('tbody') );
  	
  			// Clone the table header and footer - we can't use the header / footer
  			// from the cloned table, since if scrolling is active, the table's
  			// real header and footer are contained in different table tags
  			tmpTable.find('thead, tfoot').remove();
  			tmpTable
  				.append( $(oSettings.nTHead).clone() )
  				.append( $(oSettings.nTFoot).clone() );
  	
  			// Remove any assigned widths from the footer (from scrolling)
  			tmpTable.find('tfoot th, tfoot td').css('width', '');
  	
  			// Apply custom sizing to the cloned header
  			headerCells = _fnGetUniqueThs( oSettings, tmpTable.find('thead')[0] );
  	
  			for ( i=0 ; i<visibleColumns.length ; i++ ) {
  				column = columns[ visibleColumns[i] ];
  	
  				headerCells[i].style.width = column.sWidthOrig !== null && column.sWidthOrig !== '' ?
  					_fnStringToCss( column.sWidthOrig ) :
  					'';
  	
  				// For scrollX we need to force the column width otherwise the
  				// browser will collapse it. If this width is smaller than the
  				// width the column requires, then it will have no effect
  				if ( column.sWidthOrig && scrollX ) {
  					$( headerCells[i] ).append( $('<div/>').css( {
  						width: column.sWidthOrig,
  						margin: 0,
  						padding: 0,
  						border: 0,
  						height: 1
  					} ) );
  				}
  			}
  	
  			// Find the widest cell for each column and put it into the table
  			if ( oSettings.aoData.length ) {
  				for ( i=0 ; i<visibleColumns.length ; i++ ) {
  					columnIdx = visibleColumns[i];
  					column = columns[ columnIdx ];
  	
  					$( _fnGetWidestNode( oSettings, columnIdx ) )
  						.clone( false )
  						.append( column.sContentPadding )
  						.appendTo( tr );
  				}
  			}
  	
  			// Tidy the temporary table - remove name attributes so there aren't
  			// duplicated in the dom (radio elements for example)
  			$('[name]', tmpTable).removeAttr('name');
  	
  			// Table has been built, attach to the document so we can work with it.
  			// A holding element is used, positioned at the top of the container
  			// with minimal height, so it has no effect on if the container scrolls
  			// or not. Otherwise it might trigger scrolling when it actually isn't
  			// needed
  			var holder = $('<div/>').css( scrollX || scrollY ?
  					{
  						position: 'absolute',
  						top: 0,
  						left: 0,
  						height: 1,
  						right: 0,
  						overflow: 'hidden'
  					} :
  					{}
  				)
  				.append( tmpTable )
  				.appendTo( tableContainer );
  	
  			// When scrolling (X or Y) we want to set the width of the table as 
  			// appropriate. However, when not scrolling leave the table width as it
  			// is. This results in slightly different, but I think correct behaviour
  			if ( scrollX && scrollXInner ) {
  				tmpTable.width( scrollXInner );
  			}
  			else if ( scrollX ) {
  				tmpTable.css( 'width', 'auto' );
  				tmpTable.removeAttr('width');
  	
  				// If there is no width attribute or style, then allow the table to
  				// collapse
  				if ( tmpTable.width() < tableContainer.clientWidth && tableWidthAttr ) {
  					tmpTable.width( tableContainer.clientWidth );
  				}
  			}
  			else if ( scrollY ) {
  				tmpTable.width( tableContainer.clientWidth );
  			}
  			else if ( tableWidthAttr ) {
  				tmpTable.width( tableWidthAttr );
  			}
  	
  			// Get the width of each column in the constructed table - we need to
  			// know the inner width (so it can be assigned to the other table's
  			// cells) and the outer width so we can calculate the full width of the
  			// table. This is safe since DataTables requires a unique cell for each
  			// column, but if ever a header can span multiple columns, this will
  			// need to be modified.
  			var total = 0;
  			for ( i=0 ; i<visibleColumns.length ; i++ ) {
  				var cell = $(headerCells[i]);
  				var border = cell.outerWidth() - cell.width();
  	
  				// Use getBounding... where possible (not IE8-) because it can give
  				// sub-pixel accuracy, which we then want to round up!
  				var bounding = browser.bBounding ?
  					Math.ceil( headerCells[i].getBoundingClientRect().width ) :
  					cell.outerWidth();
  	
  				// Total is tracked to remove any sub-pixel errors as the outerWidth
  				// of the table might not equal the total given here (IE!).
  				total += bounding;
  	
  				// Width for each column to use
  				columns[ visibleColumns[i] ].sWidth = _fnStringToCss( bounding - border );
  			}
  	
  			table.style.width = _fnStringToCss( total );
  	
  			// Finished with the table - ditch it
  			holder.remove();
  		}
  	
  		// If there is a width attr, we want to attach an event listener which
  		// allows the table sizing to automatically adjust when the window is
  		// resized. Use the width attr rather than CSS, since we can't know if the
  		// CSS is a relative value or absolute - DOM read is always px.
  		if ( tableWidthAttr ) {
  			table.style.width = _fnStringToCss( tableWidthAttr );
  		}
  	
  		if ( (tableWidthAttr || scrollX) && ! oSettings._reszEvt ) {
  			var bindResize = function () {
  				$(window).on('resize.DT-'+oSettings.sInstance, _fnThrottle( function () {
  					_fnAdjustColumnSizing( oSettings );
  				} ) );
  			};
  	
  			// IE6/7 will crash if we bind a resize event handler on page load.
  			// To be removed in 1.11 which drops IE6/7 support
  			if ( ie67 ) {
  				setTimeout( bindResize, 1000 );
  			}
  			else {
  				bindResize();
  			}
  	
  			oSettings._reszEvt = true;
  		}
  	}
  	
  	
  	/**
  	 * Throttle the calls to a function. Arguments and context are maintained for
  	 * the throttled function
  	 *  @param {function} fn Function to be called
  	 *  @param {int} [freq=200] call frequency in mS
  	 *  @returns {function} wrapped function
  	 *  @memberof DataTable#oApi
  	 */
  	var _fnThrottle = DataTable.util.throttle;
  	
  	
  	/**
  	 * Convert a CSS unit width to pixels (e.g. 2em)
  	 *  @param {string} width width to be converted
  	 *  @param {node} parent parent to get the with for (required for relative widths) - optional
  	 *  @returns {int} width in pixels
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnConvertToWidth ( width, parent )
  	{
  		if ( ! width ) {
  			return 0;
  		}
  	
  		var n = $('<div/>')
  			.css( 'width', _fnStringToCss( width ) )
  			.appendTo( parent || document.body );
  	
  		var val = n[0].offsetWidth;
  		n.remove();
  	
  		return val;
  	}
  	
  	
  	/**
  	 * Get the widest node
  	 *  @param {object} settings dataTables settings object
  	 *  @param {int} colIdx column of interest
  	 *  @returns {node} widest table node
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnGetWidestNode( settings, colIdx )
  	{
  		var idx = _fnGetMaxLenString( settings, colIdx );
  		if ( idx < 0 ) {
  			return null;
  		}
  	
  		var data = settings.aoData[ idx ];
  		return ! data.nTr ? // Might not have been created when deferred rendering
  			$('<td/>').html( _fnGetCellData( settings, idx, colIdx, 'display' ) )[0] :
  			data.anCells[ colIdx ];
  	}
  	
  	
  	/**
  	 * Get the maximum strlen for each data column
  	 *  @param {object} settings dataTables settings object
  	 *  @param {int} colIdx column of interest
  	 *  @returns {string} max string length for each column
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnGetMaxLenString( settings, colIdx )
  	{
  		var s, max=-1, maxIdx = -1;
  	
  		for ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {
  			s = _fnGetCellData( settings, i, colIdx, 'display' )+'';
  			s = s.replace( __re_html_remove, '' );
  			s = s.replace( /&nbsp;/g, ' ' );
  	
  			if ( s.length > max ) {
  				max = s.length;
  				maxIdx = i;
  			}
  		}
  	
  		return maxIdx;
  	}
  	
  	
  	/**
  	 * Append a CSS unit (only if required) to a string
  	 *  @param {string} value to css-ify
  	 *  @returns {string} value with css unit
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnStringToCss( s )
  	{
  		if ( s === null ) {
  			return '0px';
  		}
  	
  		if ( typeof s == 'number' ) {
  			return s < 0 ?
  				'0px' :
  				s+'px';
  		}
  	
  		// Check it has a unit character already
  		return s.match(/\d$/) ?
  			s+'px' :
  			s;
  	}
  	
  	
  	
  	function _fnSortFlatten ( settings )
  	{
  		var 
  			i, k, kLen,
  			aSort = [],
  			aoColumns = settings.aoColumns,
  			aDataSort, iCol, sType, srcCol,
  			fixed = settings.aaSortingFixed,
  			fixedObj = $.isPlainObject( fixed ),
  			nestedSort = [],
  			add = function ( a ) {
  				if ( a.length && ! $.isArray( a[0] ) ) {
  					// 1D array
  					nestedSort.push( a );
  				}
  				else {
  					// 2D array
  					$.merge( nestedSort, a );
  				}
  			};
  	
  		// Build the sort array, with pre-fix and post-fix options if they have been
  		// specified
  		if ( $.isArray( fixed ) ) {
  			add( fixed );
  		}
  	
  		if ( fixedObj && fixed.pre ) {
  			add( fixed.pre );
  		}
  	
  		add( settings.aaSorting );
  	
  		if (fixedObj && fixed.post ) {
  			add( fixed.post );
  		}
  	
  		for ( i=0 ; i<nestedSort.length ; i++ )
  		{
  			srcCol = nestedSort[i][0];
  			aDataSort = aoColumns[ srcCol ].aDataSort;
  	
  			for ( k=0, kLen=aDataSort.length ; k<kLen ; k++ )
  			{
  				iCol = aDataSort[k];
  				sType = aoColumns[ iCol ].sType || 'string';
  	
  				if ( nestedSort[i]._idx === undefined$1 ) {
  					nestedSort[i]._idx = $.inArray( nestedSort[i][1], aoColumns[iCol].asSorting );
  				}
  	
  				aSort.push( {
  					src:       srcCol,
  					col:       iCol,
  					dir:       nestedSort[i][1],
  					index:     nestedSort[i]._idx,
  					type:      sType,
  					formatter: DataTable.ext.type.order[ sType+"-pre" ]
  				} );
  			}
  		}
  	
  		return aSort;
  	}
  	
  	/**
  	 * Change the order of the table
  	 *  @param {object} oSettings dataTables settings object
  	 *  @memberof DataTable#oApi
  	 *  @todo This really needs split up!
  	 */
  	function _fnSort ( oSettings )
  	{
  		var 
  			i, ien, iLen, aiOrig = [],
  			oExtSort = DataTable.ext.type.order,
  			aoData = oSettings.aoData,
  			aoColumns = oSettings.aoColumns,
  			formatters = 0,
  			sortCol,
  			displayMaster = oSettings.aiDisplayMaster,
  			aSort;
  	
  		// Resolve any column types that are unknown due to addition or invalidation
  		// @todo Can this be moved into a 'data-ready' handler which is called when
  		//   data is going to be used in the table?
  		_fnColumnTypes( oSettings );
  	
  		aSort = _fnSortFlatten( oSettings );
  	
  		for ( i=0, ien=aSort.length ; i<ien ; i++ ) {
  			sortCol = aSort[i];
  	
  			// Track if we can use the fast sort algorithm
  			if ( sortCol.formatter ) {
  				formatters++;
  			}
  	
  			// Load the data needed for the sort, for each cell
  			_fnSortData( oSettings, sortCol.col );
  		}
  	
  		/* No sorting required if server-side or no sorting array */
  		if ( _fnDataSource( oSettings ) != 'ssp' && aSort.length !== 0 )
  		{
  			// Create a value - key array of the current row positions such that we can use their
  			// current position during the sort, if values match, in order to perform stable sorting
  			for ( i=0, iLen=displayMaster.length ; i<iLen ; i++ ) {
  				aiOrig[ displayMaster[i] ] = i;
  			}
  	
  			/* Do the sort - here we want multi-column sorting based on a given data source (column)
  			 * and sorting function (from oSort) in a certain direction. It's reasonably complex to
  			 * follow on it's own, but this is what we want (example two column sorting):
  			 *  fnLocalSorting = function(a,b){
  			 *    var iTest;
  			 *    iTest = oSort['string-asc']('data11', 'data12');
  			 *      if (iTest !== 0)
  			 *        return iTest;
  			 *    iTest = oSort['numeric-desc']('data21', 'data22');
  			 *    if (iTest !== 0)
  			 *      return iTest;
  			 *    return oSort['numeric-asc']( aiOrig[a], aiOrig[b] );
  			 *  }
  			 * Basically we have a test for each sorting column, if the data in that column is equal,
  			 * test the next column. If all columns match, then we use a numeric sort on the row
  			 * positions in the original data array to provide a stable sort.
  			 *
  			 * Note - I know it seems excessive to have two sorting methods, but the first is around
  			 * 15% faster, so the second is only maintained for backwards compatibility with sorting
  			 * methods which do not have a pre-sort formatting function.
  			 */
  			if ( formatters === aSort.length ) {
  				// All sort types have formatting functions
  				displayMaster.sort( function ( a, b ) {
  					var
  						x, y, k, test, sort,
  						len=aSort.length,
  						dataA = aoData[a]._aSortData,
  						dataB = aoData[b]._aSortData;
  	
  					for ( k=0 ; k<len ; k++ ) {
  						sort = aSort[k];
  	
  						x = dataA[ sort.col ];
  						y = dataB[ sort.col ];
  	
  						test = x<y ? -1 : x>y ? 1 : 0;
  						if ( test !== 0 ) {
  							return sort.dir === 'asc' ? test : -test;
  						}
  					}
  	
  					x = aiOrig[a];
  					y = aiOrig[b];
  					return x<y ? -1 : x>y ? 1 : 0;
  				} );
  			}
  			else {
  				// Depreciated - remove in 1.11 (providing a plug-in option)
  				// Not all sort types have formatting methods, so we have to call their sorting
  				// methods.
  				displayMaster.sort( function ( a, b ) {
  					var 
  						x, y, k, test, sort, fn,
  						len=aSort.length,
  						dataA = aoData[a]._aSortData,
  						dataB = aoData[b]._aSortData;
  	
  					for ( k=0 ; k<len ; k++ ) {
  						sort = aSort[k];
  	
  						x = dataA[ sort.col ];
  						y = dataB[ sort.col ];
  	
  						fn = oExtSort[ sort.type+"-"+sort.dir ] || oExtSort[ "string-"+sort.dir ];
  						test = fn( x, y );
  						if ( test !== 0 ) {
  							return test;
  						}
  					}
  	
  					x = aiOrig[a];
  					y = aiOrig[b];
  					return x<y ? -1 : x>y ? 1 : 0;
  				} );
  			}
  		}
  	
  		/* Tell the draw function that we have sorted the data */
  		oSettings.bSorted = true;
  	}
  	
  	
  	function _fnSortAria ( settings )
  	{
  		var label;
  		var nextSort;
  		var columns = settings.aoColumns;
  		var aSort = _fnSortFlatten( settings );
  		var oAria = settings.oLanguage.oAria;
  	
  		// ARIA attributes - need to loop all columns, to update all (removing old
  		// attributes as needed)
  		for ( var i=0, iLen=columns.length ; i<iLen ; i++ )
  		{
  			var col = columns[i];
  			var asSorting = col.asSorting;
  			var sTitle = col.sTitle.replace( /<.*?>/g, "" );
  			var th = col.nTh;
  	
  			// IE7 is throwing an error when setting these properties with jQuery's
  			// attr() and removeAttr() methods...
  			th.removeAttribute('aria-sort');
  	
  			/* In ARIA only the first sorting column can be marked as sorting - no multi-sort option */
  			if ( col.bSortable ) {
  				if ( aSort.length > 0 && aSort[0].col == i ) {
  					th.setAttribute('aria-sort', aSort[0].dir=="asc" ? "ascending" : "descending" );
  					nextSort = asSorting[ aSort[0].index+1 ] || asSorting[0];
  				}
  				else {
  					nextSort = asSorting[0];
  				}
  	
  				label = sTitle + ( nextSort === "asc" ?
  					oAria.sSortAscending :
  					oAria.sSortDescending
  				);
  			}
  			else {
  				label = sTitle;
  			}
  	
  			th.setAttribute('aria-label', label);
  		}
  	}
  	
  	
  	/**
  	 * Function to run on user sort request
  	 *  @param {object} settings dataTables settings object
  	 *  @param {node} attachTo node to attach the handler to
  	 *  @param {int} colIdx column sorting index
  	 *  @param {boolean} [append=false] Append the requested sort to the existing
  	 *    sort if true (i.e. multi-column sort)
  	 *  @param {function} [callback] callback function
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnSortListener ( settings, colIdx, append, callback )
  	{
  		var col = settings.aoColumns[ colIdx ];
  		var sorting = settings.aaSorting;
  		var asSorting = col.asSorting;
  		var nextSortIdx;
  		var next = function ( a, overflow ) {
  			var idx = a._idx;
  			if ( idx === undefined$1 ) {
  				idx = $.inArray( a[1], asSorting );
  			}
  	
  			return idx+1 < asSorting.length ?
  				idx+1 :
  				overflow ?
  					null :
  					0;
  		};
  	
  		// Convert to 2D array if needed
  		if ( typeof sorting[0] === 'number' ) {
  			sorting = settings.aaSorting = [ sorting ];
  		}
  	
  		// If appending the sort then we are multi-column sorting
  		if ( append && settings.oFeatures.bSortMulti ) {
  			// Are we already doing some kind of sort on this column?
  			var sortIdx = $.inArray( colIdx, _pluck(sorting, '0') );
  	
  			if ( sortIdx !== -1 ) {
  				// Yes, modify the sort
  				nextSortIdx = next( sorting[sortIdx], true );
  	
  				if ( nextSortIdx === null && sorting.length === 1 ) {
  					nextSortIdx = 0; // can't remove sorting completely
  				}
  	
  				if ( nextSortIdx === null ) {
  					sorting.splice( sortIdx, 1 );
  				}
  				else {
  					sorting[sortIdx][1] = asSorting[ nextSortIdx ];
  					sorting[sortIdx]._idx = nextSortIdx;
  				}
  			}
  			else {
  				// No sort on this column yet
  				sorting.push( [ colIdx, asSorting[0], 0 ] );
  				sorting[sorting.length-1]._idx = 0;
  			}
  		}
  		else if ( sorting.length && sorting[0][0] == colIdx ) {
  			// Single column - already sorting on this column, modify the sort
  			nextSortIdx = next( sorting[0] );
  	
  			sorting.length = 1;
  			sorting[0][1] = asSorting[ nextSortIdx ];
  			sorting[0]._idx = nextSortIdx;
  		}
  		else {
  			// Single column - sort only on this column
  			sorting.length = 0;
  			sorting.push( [ colIdx, asSorting[0] ] );
  			sorting[0]._idx = 0;
  		}
  	
  		// Run the sort by calling a full redraw
  		_fnReDraw( settings );
  	
  		// callback used for async user interaction
  		if ( typeof callback == 'function' ) {
  			callback( settings );
  		}
  	}
  	
  	
  	/**
  	 * Attach a sort handler (click) to a node
  	 *  @param {object} settings dataTables settings object
  	 *  @param {node} attachTo node to attach the handler to
  	 *  @param {int} colIdx column sorting index
  	 *  @param {function} [callback] callback function
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnSortAttachListener ( settings, attachTo, colIdx, callback )
  	{
  		var col = settings.aoColumns[ colIdx ];
  	
  		_fnBindAction( attachTo, {}, function (e) {
  			/* If the column is not sortable - don't to anything */
  			if ( col.bSortable === false ) {
  				return;
  			}
  	
  			// If processing is enabled use a timeout to allow the processing
  			// display to be shown - otherwise to it synchronously
  			if ( settings.oFeatures.bProcessing ) {
  				_fnProcessingDisplay( settings, true );
  	
  				setTimeout( function() {
  					_fnSortListener( settings, colIdx, e.shiftKey, callback );
  	
  					// In server-side processing, the draw callback will remove the
  					// processing display
  					if ( _fnDataSource( settings ) !== 'ssp' ) {
  						_fnProcessingDisplay( settings, false );
  					}
  				}, 0 );
  			}
  			else {
  				_fnSortListener( settings, colIdx, e.shiftKey, callback );
  			}
  		} );
  	}
  	
  	
  	/**
  	 * Set the sorting classes on table's body, Note: it is safe to call this function
  	 * when bSort and bSortClasses are false
  	 *  @param {object} oSettings dataTables settings object
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnSortingClasses( settings )
  	{
  		var oldSort = settings.aLastSort;
  		var sortClass = settings.oClasses.sSortColumn;
  		var sort = _fnSortFlatten( settings );
  		var features = settings.oFeatures;
  		var i, ien, colIdx;
  	
  		if ( features.bSort && features.bSortClasses ) {
  			// Remove old sorting classes
  			for ( i=0, ien=oldSort.length ; i<ien ; i++ ) {
  				colIdx = oldSort[i].src;
  	
  				// Remove column sorting
  				$( _pluck( settings.aoData, 'anCells', colIdx ) )
  					.removeClass( sortClass + (i<2 ? i+1 : 3) );
  			}
  	
  			// Add new column sorting
  			for ( i=0, ien=sort.length ; i<ien ; i++ ) {
  				colIdx = sort[i].src;
  	
  				$( _pluck( settings.aoData, 'anCells', colIdx ) )
  					.addClass( sortClass + (i<2 ? i+1 : 3) );
  			}
  		}
  	
  		settings.aLastSort = sort;
  	}
  	
  	
  	// Get the data to sort a column, be it from cache, fresh (populating the
  	// cache), or from a sort formatter
  	function _fnSortData( settings, idx )
  	{
  		// Custom sorting function - provided by the sort data type
  		var column = settings.aoColumns[ idx ];
  		var customSort = DataTable.ext.order[ column.sSortDataType ];
  		var customData;
  	
  		if ( customSort ) {
  			customData = customSort.call( settings.oInstance, settings, idx,
  				_fnColumnIndexToVisible( settings, idx )
  			);
  		}
  	
  		// Use / populate cache
  		var row, cellData;
  		var formatter = DataTable.ext.type.order[ column.sType+"-pre" ];
  	
  		for ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {
  			row = settings.aoData[i];
  	
  			if ( ! row._aSortData ) {
  				row._aSortData = [];
  			}
  	
  			if ( ! row._aSortData[idx] || customSort ) {
  				cellData = customSort ?
  					customData[i] : // If there was a custom sort function, use data from there
  					_fnGetCellData( settings, i, idx, 'sort' );
  	
  				row._aSortData[ idx ] = formatter ?
  					formatter( cellData ) :
  					cellData;
  			}
  		}
  	}
  	
  	
  	
  	/**
  	 * Save the state of a table
  	 *  @param {object} oSettings dataTables settings object
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnSaveState ( settings )
  	{
  		if ( !settings.oFeatures.bStateSave || settings.bDestroying )
  		{
  			return;
  		}
  	
  		/* Store the interesting variables */
  		var state = {
  			time:    +new Date(),
  			start:   settings._iDisplayStart,
  			length:  settings._iDisplayLength,
  			order:   $.extend( true, [], settings.aaSorting ),
  			search:  _fnSearchToCamel( settings.oPreviousSearch ),
  			columns: $.map( settings.aoColumns, function ( col, i ) {
  				return {
  					visible: col.bVisible,
  					search: _fnSearchToCamel( settings.aoPreSearchCols[i] )
  				};
  			} )
  		};
  	
  		_fnCallbackFire( settings, "aoStateSaveParams", 'stateSaveParams', [settings, state] );
  	
  		settings.oSavedState = state;
  		settings.fnStateSaveCallback.call( settings.oInstance, settings, state );
  	}
  	
  	
  	/**
  	 * Attempt to load a saved table state
  	 *  @param {object} oSettings dataTables settings object
  	 *  @param {object} oInit DataTables init object so we can override settings
  	 *  @param {function} callback Callback to execute when the state has been loaded
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnLoadState ( settings, oInit, callback )
  	{
  		var i, ien;
  		var columns = settings.aoColumns;
  		var loaded = function ( s ) {
  			if ( ! s || ! s.time ) {
  				callback();
  				return;
  			}
  	
  			// Allow custom and plug-in manipulation functions to alter the saved data set and
  			// cancelling of loading by returning false
  			var abStateLoad = _fnCallbackFire( settings, 'aoStateLoadParams', 'stateLoadParams', [settings, s] );
  			if ( $.inArray( false, abStateLoad ) !== -1 ) {
  				callback();
  				return;
  			}
  	
  			// Reject old data
  			var duration = settings.iStateDuration;
  			if ( duration > 0 && s.time < +new Date() - (duration*1000) ) {
  				callback();
  				return;
  			}
  	
  			// Number of columns have changed - all bets are off, no restore of settings
  			if ( s.columns && columns.length !== s.columns.length ) {
  				callback();
  				return;
  			}
  	
  			// Store the saved state so it might be accessed at any time
  			settings.oLoadedState = $.extend( true, {}, s );
  	
  			// Restore key features - todo - for 1.11 this needs to be done by
  			// subscribed events
  			if ( s.start !== undefined$1 ) {
  				settings._iDisplayStart    = s.start;
  				settings.iInitDisplayStart = s.start;
  			}
  			if ( s.length !== undefined$1 ) {
  				settings._iDisplayLength   = s.length;
  			}
  	
  			// Order
  			if ( s.order !== undefined$1 ) {
  				settings.aaSorting = [];
  				$.each( s.order, function ( i, col ) {
  					settings.aaSorting.push( col[0] >= columns.length ?
  						[ 0, col[1] ] :
  						col
  					);
  				} );
  			}
  	
  			// Search
  			if ( s.search !== undefined$1 ) {
  				$.extend( settings.oPreviousSearch, _fnSearchToHung( s.search ) );
  			}
  	
  			// Columns
  			//
  			if ( s.columns ) {
  				for ( i=0, ien=s.columns.length ; i<ien ; i++ ) {
  					var col = s.columns[i];
  	
  					// Visibility
  					if ( col.visible !== undefined$1 ) {
  						columns[i].bVisible = col.visible;
  					}
  	
  					// Search
  					if ( col.search !== undefined$1 ) {
  						$.extend( settings.aoPreSearchCols[i], _fnSearchToHung( col.search ) );
  					}
  				}
  			}
  	
  			_fnCallbackFire( settings, 'aoStateLoaded', 'stateLoaded', [settings, s] );
  			callback();
  		};
  	
  		if ( ! settings.oFeatures.bStateSave ) {
  			callback();
  			return;
  		}
  	
  		var state = settings.fnStateLoadCallback.call( settings.oInstance, settings, loaded );
  	
  		if ( state !== undefined$1 ) {
  			loaded( state );
  		}
  		// otherwise, wait for the loaded callback to be executed
  	}
  	
  	
  	/**
  	 * Return the settings object for a particular table
  	 *  @param {node} table table we are using as a dataTable
  	 *  @returns {object} Settings object - or null if not found
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnSettingsFromNode ( table )
  	{
  		var settings = DataTable.settings;
  		var idx = $.inArray( table, _pluck( settings, 'nTable' ) );
  	
  		return idx !== -1 ?
  			settings[ idx ] :
  			null;
  	}
  	
  	
  	/**
  	 * Log an error message
  	 *  @param {object} settings dataTables settings object
  	 *  @param {int} level log error messages, or display them to the user
  	 *  @param {string} msg error message
  	 *  @param {int} tn Technical note id to get more information about the error.
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnLog( settings, level, msg, tn )
  	{
  		msg = 'DataTables warning: '+
  			(settings ? 'table id='+settings.sTableId+' - ' : '')+msg;
  	
  		if ( tn ) {
  			msg += '. For more information about this error, please see '+
  			'http://datatables.net/tn/'+tn;
  		}
  	
  		if ( ! level  ) {
  			// Backwards compatibility pre 1.10
  			var ext = DataTable.ext;
  			var type = ext.sErrMode || ext.errMode;
  	
  			if ( settings ) {
  				_fnCallbackFire( settings, null, 'error', [ settings, tn, msg ] );
  			}
  	
  			if ( type == 'alert' ) {
  				alert( msg );
  			}
  			else if ( type == 'throw' ) {
  				throw new Error(msg);
  			}
  			else if ( typeof type == 'function' ) {
  				type( settings, tn, msg );
  			}
  		}
  		else if ( window.console && console.log ) {
  			console.log( msg );
  		}
  	}
  	
  	
  	/**
  	 * See if a property is defined on one object, if so assign it to the other object
  	 *  @param {object} ret target object
  	 *  @param {object} src source object
  	 *  @param {string} name property
  	 *  @param {string} [mappedName] name to map too - optional, name used if not given
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnMap( ret, src, name, mappedName )
  	{
  		if ( $.isArray( name ) ) {
  			$.each( name, function (i, val) {
  				if ( $.isArray( val ) ) {
  					_fnMap( ret, src, val[0], val[1] );
  				}
  				else {
  					_fnMap( ret, src, val );
  				}
  			} );
  	
  			return;
  		}
  	
  		if ( mappedName === undefined$1 ) {
  			mappedName = name;
  		}
  	
  		if ( src[name] !== undefined$1 ) {
  			ret[mappedName] = src[name];
  		}
  	}
  	
  	
  	/**
  	 * Extend objects - very similar to jQuery.extend, but deep copy objects, and
  	 * shallow copy arrays. The reason we need to do this, is that we don't want to
  	 * deep copy array init values (such as aaSorting) since the dev wouldn't be
  	 * able to override them, but we do want to deep copy arrays.
  	 *  @param {object} out Object to extend
  	 *  @param {object} extender Object from which the properties will be applied to
  	 *      out
  	 *  @param {boolean} breakRefs If true, then arrays will be sliced to take an
  	 *      independent copy with the exception of the `data` or `aaData` parameters
  	 *      if they are present. This is so you can pass in a collection to
  	 *      DataTables and have that used as your data source without breaking the
  	 *      references
  	 *  @returns {object} out Reference, just for convenience - out === the return.
  	 *  @memberof DataTable#oApi
  	 *  @todo This doesn't take account of arrays inside the deep copied objects.
  	 */
  	function _fnExtend( out, extender, breakRefs )
  	{
  		var val;
  	
  		for ( var prop in extender ) {
  			if ( extender.hasOwnProperty(prop) ) {
  				val = extender[prop];
  	
  				if ( $.isPlainObject( val ) ) {
  					if ( ! $.isPlainObject( out[prop] ) ) {
  						out[prop] = {};
  					}
  					$.extend( true, out[prop], val );
  				}
  				else if ( breakRefs && prop !== 'data' && prop !== 'aaData' && $.isArray(val) ) {
  					out[prop] = val.slice();
  				}
  				else {
  					out[prop] = val;
  				}
  			}
  		}
  	
  		return out;
  	}
  	
  	
  	/**
  	 * Bind an event handers to allow a click or return key to activate the callback.
  	 * This is good for accessibility since a return on the keyboard will have the
  	 * same effect as a click, if the element has focus.
  	 *  @param {element} n Element to bind the action to
  	 *  @param {object} oData Data object to pass to the triggered function
  	 *  @param {function} fn Callback function for when the event is triggered
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnBindAction( n, oData, fn )
  	{
  		$(n)
  			.on( 'click.DT', oData, function (e) {
  					$(n).trigger('blur'); // Remove focus outline for mouse users
  					fn(e);
  				} )
  			.on( 'keypress.DT', oData, function (e){
  					if ( e.which === 13 ) {
  						e.preventDefault();
  						fn(e);
  					}
  				} )
  			.on( 'selectstart.DT', function () {
  					/* Take the brutal approach to cancelling text selection */
  					return false;
  				} );
  	}
  	
  	
  	/**
  	 * Register a callback function. Easily allows a callback function to be added to
  	 * an array store of callback functions that can then all be called together.
  	 *  @param {object} oSettings dataTables settings object
  	 *  @param {string} sStore Name of the array storage for the callbacks in oSettings
  	 *  @param {function} fn Function to be called back
  	 *  @param {string} sName Identifying name for the callback (i.e. a label)
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnCallbackReg( oSettings, sStore, fn, sName )
  	{
  		if ( fn )
  		{
  			oSettings[sStore].push( {
  				"fn": fn,
  				"sName": sName
  			} );
  		}
  	}
  	
  	
  	/**
  	 * Fire callback functions and trigger events. Note that the loop over the
  	 * callback array store is done backwards! Further note that you do not want to
  	 * fire off triggers in time sensitive applications (for example cell creation)
  	 * as its slow.
  	 *  @param {object} settings dataTables settings object
  	 *  @param {string} callbackArr Name of the array storage for the callbacks in
  	 *      oSettings
  	 *  @param {string} eventName Name of the jQuery custom event to trigger. If
  	 *      null no trigger is fired
  	 *  @param {array} args Array of arguments to pass to the callback function /
  	 *      trigger
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnCallbackFire( settings, callbackArr, eventName, args )
  	{
  		var ret = [];
  	
  		if ( callbackArr ) {
  			ret = $.map( settings[callbackArr].slice().reverse(), function (val, i) {
  				return val.fn.apply( settings.oInstance, args );
  			} );
  		}
  	
  		if ( eventName !== null ) {
  			var e = $.Event( eventName+'.dt' );
  	
  			$(settings.nTable).trigger( e, args );
  	
  			ret.push( e.result );
  		}
  	
  		return ret;
  	}
  	
  	
  	function _fnLengthOverflow ( settings )
  	{
  		var
  			start = settings._iDisplayStart,
  			end = settings.fnDisplayEnd(),
  			len = settings._iDisplayLength;
  	
  		/* If we have space to show extra rows (backing up from the end point - then do so */
  		if ( start >= end )
  		{
  			start = end - len;
  		}
  	
  		// Keep the start record on the current page
  		start -= (start % len);
  	
  		if ( len === -1 || start < 0 )
  		{
  			start = 0;
  		}
  	
  		settings._iDisplayStart = start;
  	}
  	
  	
  	function _fnRenderer( settings, type )
  	{
  		var renderer = settings.renderer;
  		var host = DataTable.ext.renderer[type];
  	
  		if ( $.isPlainObject( renderer ) && renderer[type] ) {
  			// Specific renderer for this type. If available use it, otherwise use
  			// the default.
  			return host[renderer[type]] || host._;
  		}
  		else if ( typeof renderer === 'string' ) {
  			// Common renderer - if there is one available for this type use it,
  			// otherwise use the default
  			return host[renderer] || host._;
  		}
  	
  		// Use the default
  		return host._;
  	}
  	
  	
  	/**
  	 * Detect the data source being used for the table. Used to simplify the code
  	 * a little (ajax) and to make it compress a little smaller.
  	 *
  	 *  @param {object} settings dataTables settings object
  	 *  @returns {string} Data source
  	 *  @memberof DataTable#oApi
  	 */
  	function _fnDataSource ( settings )
  	{
  		if ( settings.oFeatures.bServerSide ) {
  			return 'ssp';
  		}
  		else if ( settings.ajax || settings.sAjaxSource ) {
  			return 'ajax';
  		}
  		return 'dom';
  	}
  	

  	
  	
  	/**
  	 * Computed structure of the DataTables API, defined by the options passed to
  	 * `DataTable.Api.register()` when building the API.
  	 *
  	 * The structure is built in order to speed creation and extension of the Api
  	 * objects since the extensions are effectively pre-parsed.
  	 *
  	 * The array is an array of objects with the following structure, where this
  	 * base array represents the Api prototype base:
  	 *
  	 *     [
  	 *       {
  	 *         name:      'data'                -- string   - Property name
  	 *         val:       function () {},       -- function - Api method (or undefined if just an object
  	 *         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result
  	 *         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property
  	 *       },
  	 *       {
  	 *         name:     'row'
  	 *         val:       {},
  	 *         methodExt: [ ... ],
  	 *         propExt:   [
  	 *           {
  	 *             name:      'data'
  	 *             val:       function () {},
  	 *             methodExt: [ ... ],
  	 *             propExt:   [ ... ]
  	 *           },
  	 *           ...
  	 *         ]
  	 *       }
  	 *     ]
  	 *
  	 * @type {Array}
  	 * @ignore
  	 */
  	var __apiStruct = [];
  	
  	
  	/**
  	 * `Array.prototype` reference.
  	 *
  	 * @type object
  	 * @ignore
  	 */
  	var __arrayProto = Array.prototype;
  	
  	
  	/**
  	 * Abstraction for `context` parameter of the `Api` constructor to allow it to
  	 * take several different forms for ease of use.
  	 *
  	 * Each of the input parameter types will be converted to a DataTables settings
  	 * object where possible.
  	 *
  	 * @param  {string|node|jQuery|object} mixed DataTable identifier. Can be one
  	 *   of:
  	 *
  	 *   * `string` - jQuery selector. Any DataTables' matching the given selector
  	 *     with be found and used.
  	 *   * `node` - `TABLE` node which has already been formed into a DataTable.
  	 *   * `jQuery` - A jQuery object of `TABLE` nodes.
  	 *   * `object` - DataTables settings object
  	 *   * `DataTables.Api` - API instance
  	 * @return {array|null} Matching DataTables settings objects. `null` or
  	 *   `undefined` is returned if no matching DataTable is found.
  	 * @ignore
  	 */
  	var _toSettings = function ( mixed )
  	{
  		var idx, jq;
  		var settings = DataTable.settings;
  		var tables = $.map( settings, function (el, i) {
  			return el.nTable;
  		} );
  	
  		if ( ! mixed ) {
  			return [];
  		}
  		else if ( mixed.nTable && mixed.oApi ) {
  			// DataTables settings object
  			return [ mixed ];
  		}
  		else if ( mixed.nodeName && mixed.nodeName.toLowerCase() === 'table' ) {
  			// Table node
  			idx = $.inArray( mixed, tables );
  			return idx !== -1 ? [ settings[idx] ] : null;
  		}
  		else if ( mixed && typeof mixed.settings === 'function' ) {
  			return mixed.settings().toArray();
  		}
  		else if ( typeof mixed === 'string' ) {
  			// jQuery selector
  			jq = $(mixed);
  		}
  		else if ( mixed instanceof $ ) {
  			// jQuery object (also DataTables instance)
  			jq = mixed;
  		}
  	
  		if ( jq ) {
  			return jq.map( function(i) {
  				idx = $.inArray( this, tables );
  				return idx !== -1 ? settings[idx] : null;
  			} ).toArray();
  		}
  	};
  	
  	
  	/**
  	 * DataTables API class - used to control and interface with  one or more
  	 * DataTables enhanced tables.
  	 *
  	 * The API class is heavily based on jQuery, presenting a chainable interface
  	 * that you can use to interact with tables. Each instance of the API class has
  	 * a "context" - i.e. the tables that it will operate on. This could be a single
  	 * table, all tables on a page or a sub-set thereof.
  	 *
  	 * Additionally the API is designed to allow you to easily work with the data in
  	 * the tables, retrieving and manipulating it as required. This is done by
  	 * presenting the API class as an array like interface. The contents of the
  	 * array depend upon the actions requested by each method (for example
  	 * `rows().nodes()` will return an array of nodes, while `rows().data()` will
  	 * return an array of objects or arrays depending upon your table's
  	 * configuration). The API object has a number of array like methods (`push`,
  	 * `pop`, `reverse` etc) as well as additional helper methods (`each`, `pluck`,
  	 * `unique` etc) to assist your working with the data held in a table.
  	 *
  	 * Most methods (those which return an Api instance) are chainable, which means
  	 * the return from a method call also has all of the methods available that the
  	 * top level object had. For example, these two calls are equivalent:
  	 *
  	 *     // Not chained
  	 *     api.row.add( {...} );
  	 *     api.draw();
  	 *
  	 *     // Chained
  	 *     api.row.add( {...} ).draw();
  	 *
  	 * @class DataTable.Api
  	 * @param {array|object|string|jQuery} context DataTable identifier. This is
  	 *   used to define which DataTables enhanced tables this API will operate on.
  	 *   Can be one of:
  	 *
  	 *   * `string` - jQuery selector. Any DataTables' matching the given selector
  	 *     with be found and used.
  	 *   * `node` - `TABLE` node which has already been formed into a DataTable.
  	 *   * `jQuery` - A jQuery object of `TABLE` nodes.
  	 *   * `object` - DataTables settings object
  	 * @param {array} [data] Data to initialise the Api instance with.
  	 *
  	 * @example
  	 *   // Direct initialisation during DataTables construction
  	 *   var api = $('#example').DataTable();
  	 *
  	 * @example
  	 *   // Initialisation using a DataTables jQuery object
  	 *   var api = $('#example').dataTable().api();
  	 *
  	 * @example
  	 *   // Initialisation as a constructor
  	 *   var api = new $.fn.DataTable.Api( 'table.dataTable' );
  	 */
  	_Api = function ( context, data )
  	{
  		if ( ! (this instanceof _Api) ) {
  			return new _Api( context, data );
  		}
  	
  		var settings = [];
  		var ctxSettings = function ( o ) {
  			var a = _toSettings( o );
  			if ( a ) {
  				settings.push.apply( settings, a );
  			}
  		};
  	
  		if ( $.isArray( context ) ) {
  			for ( var i=0, ien=context.length ; i<ien ; i++ ) {
  				ctxSettings( context[i] );
  			}
  		}
  		else {
  			ctxSettings( context );
  		}
  	
  		// Remove duplicates
  		this.context = _unique( settings );
  	
  		// Initial data
  		if ( data ) {
  			$.merge( this, data );
  		}
  	
  		// selector
  		this.selector = {
  			rows: null,
  			cols: null,
  			opts: null
  		};
  	
  		_Api.extend( this, this, __apiStruct );
  	};
  	
  	DataTable.Api = _Api;
  	
  	// Don't destroy the existing prototype, just extend it. Required for jQuery 2's
  	// isPlainObject.
  	$.extend( _Api.prototype, {
  		any: function ()
  		{
  			return this.count() !== 0;
  		},
  	
  	
  		concat:  __arrayProto.concat,
  	
  	
  		context: [], // array of table settings objects
  	
  	
  		count: function ()
  		{
  			return this.flatten().length;
  		},
  	
  	
  		each: function ( fn )
  		{
  			for ( var i=0, ien=this.length ; i<ien; i++ ) {
  				fn.call( this, this[i], i, this );
  			}
  	
  			return this;
  		},
  	
  	
  		eq: function ( idx )
  		{
  			var ctx = this.context;
  	
  			return ctx.length > idx ?
  				new _Api( ctx[idx], this[idx] ) :
  				null;
  		},
  	
  	
  		filter: function ( fn )
  		{
  			var a = [];
  	
  			if ( __arrayProto.filter ) {
  				a = __arrayProto.filter.call( this, fn, this );
  			}
  			else {
  				// Compatibility for browsers without EMCA-252-5 (JS 1.6)
  				for ( var i=0, ien=this.length ; i<ien ; i++ ) {
  					if ( fn.call( this, this[i], i, this ) ) {
  						a.push( this[i] );
  					}
  				}
  			}
  	
  			return new _Api( this.context, a );
  		},
  	
  	
  		flatten: function ()
  		{
  			var a = [];
  			return new _Api( this.context, a.concat.apply( a, this.toArray() ) );
  		},
  	
  	
  		join:    __arrayProto.join,
  	
  	
  		indexOf: __arrayProto.indexOf || function (obj, start)
  		{
  			for ( var i=(start || 0), ien=this.length ; i<ien ; i++ ) {
  				if ( this[i] === obj ) {
  					return i;
  				}
  			}
  			return -1;
  		},
  	
  		iterator: function ( flatten, type, fn, alwaysNew ) {
  			var
  				a = [], ret,
  				i, ien, j, jen,
  				context = this.context,
  				rows, items, item,
  				selector = this.selector;
  	
  			// Argument shifting
  			if ( typeof flatten === 'string' ) {
  				alwaysNew = fn;
  				fn = type;
  				type = flatten;
  				flatten = false;
  			}
  	
  			for ( i=0, ien=context.length ; i<ien ; i++ ) {
  				var apiInst = new _Api( context[i] );
  	
  				if ( type === 'table' ) {
  					ret = fn.call( apiInst, context[i], i );
  	
  					if ( ret !== undefined$1 ) {
  						a.push( ret );
  					}
  				}
  				else if ( type === 'columns' || type === 'rows' ) {
  					// this has same length as context - one entry for each table
  					ret = fn.call( apiInst, context[i], this[i], i );
  	
  					if ( ret !== undefined$1 ) {
  						a.push( ret );
  					}
  				}
  				else if ( type === 'column' || type === 'column-rows' || type === 'row' || type === 'cell' ) {
  					// columns and rows share the same structure.
  					// 'this' is an array of column indexes for each context
  					items = this[i];
  	
  					if ( type === 'column-rows' ) {
  						rows = _selector_row_indexes( context[i], selector.opts );
  					}
  	
  					for ( j=0, jen=items.length ; j<jen ; j++ ) {
  						item = items[j];
  	
  						if ( type === 'cell' ) {
  							ret = fn.call( apiInst, context[i], item.row, item.column, i, j );
  						}
  						else {
  							ret = fn.call( apiInst, context[i], item, i, j, rows );
  						}
  	
  						if ( ret !== undefined$1 ) {
  							a.push( ret );
  						}
  					}
  				}
  			}
  	
  			if ( a.length || alwaysNew ) {
  				var api = new _Api( context, flatten ? a.concat.apply( [], a ) : a );
  				var apiSelector = api.selector;
  				apiSelector.rows = selector.rows;
  				apiSelector.cols = selector.cols;
  				apiSelector.opts = selector.opts;
  				return api;
  			}
  			return this;
  		},
  	
  	
  		lastIndexOf: __arrayProto.lastIndexOf || function (obj, start)
  		{
  			// Bit cheeky...
  			return this.indexOf.apply( this.toArray.reverse(), arguments );
  		},
  	
  	
  		length:  0,
  	
  	
  		map: function ( fn )
  		{
  			var a = [];
  	
  			if ( __arrayProto.map ) {
  				a = __arrayProto.map.call( this, fn, this );
  			}
  			else {
  				// Compatibility for browsers without EMCA-252-5 (JS 1.6)
  				for ( var i=0, ien=this.length ; i<ien ; i++ ) {
  					a.push( fn.call( this, this[i], i ) );
  				}
  			}
  	
  			return new _Api( this.context, a );
  		},
  	
  	
  		pluck: function ( prop )
  		{
  			return this.map( function ( el ) {
  				return el[ prop ];
  			} );
  		},
  	
  		pop:     __arrayProto.pop,
  	
  	
  		push:    __arrayProto.push,
  	
  	
  		// Does not return an API instance
  		reduce: __arrayProto.reduce || function ( fn, init )
  		{
  			return _fnReduce( this, fn, init, 0, this.length, 1 );
  		},
  	
  	
  		reduceRight: __arrayProto.reduceRight || function ( fn, init )
  		{
  			return _fnReduce( this, fn, init, this.length-1, -1, -1 );
  		},
  	
  	
  		reverse: __arrayProto.reverse,
  	
  	
  		// Object with rows, columns and opts
  		selector: null,
  	
  	
  		shift:   __arrayProto.shift,
  	
  	
  		slice: function () {
  			return new _Api( this.context, this );
  		},
  	
  	
  		sort:    __arrayProto.sort, // ? name - order?
  	
  	
  		splice:  __arrayProto.splice,
  	
  	
  		toArray: function ()
  		{
  			return __arrayProto.slice.call( this );
  		},
  	
  	
  		to$: function ()
  		{
  			return $( this );
  		},
  	
  	
  		toJQuery: function ()
  		{
  			return $( this );
  		},
  	
  	
  		unique: function ()
  		{
  			return new _Api( this.context, _unique(this) );
  		},
  	
  	
  		unshift: __arrayProto.unshift
  	} );
  	
  	
  	_Api.extend = function ( scope, obj, ext )
  	{
  		// Only extend API instances and static properties of the API
  		if ( ! ext.length || ! obj || ( ! (obj instanceof _Api) && ! obj.__dt_wrapper ) ) {
  			return;
  		}
  	
  		var
  			i, ien,
  			struct,
  			methodScoping = function ( scope, fn, struc ) {
  				return function () {
  					var ret = fn.apply( scope, arguments );
  	
  					// Method extension
  					_Api.extend( ret, ret, struc.methodExt );
  					return ret;
  				};
  			};
  	
  		for ( i=0, ien=ext.length ; i<ien ; i++ ) {
  			struct = ext[i];
  	
  			// Value
  			obj[ struct.name ] = struct.type === 'function' ?
  				methodScoping( scope, struct.val, struct ) :
  				struct.type === 'object' ?
  					{} :
  					struct.val;
  	
  			obj[ struct.name ].__dt_wrapper = true;
  	
  			// Property extension
  			_Api.extend( scope, obj[ struct.name ], struct.propExt );
  		}
  	};
  	
  	
  	// @todo - Is there need for an augment function?
  	// _Api.augment = function ( inst, name )
  	// {
  	// 	// Find src object in the structure from the name
  	// 	var parts = name.split('.');
  	
  	// 	_Api.extend( inst, obj );
  	// };
  	
  	
  	//     [
  	//       {
  	//         name:      'data'                -- string   - Property name
  	//         val:       function () {},       -- function - Api method (or undefined if just an object
  	//         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result
  	//         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property
  	//       },
  	//       {
  	//         name:     'row'
  	//         val:       {},
  	//         methodExt: [ ... ],
  	//         propExt:   [
  	//           {
  	//             name:      'data'
  	//             val:       function () {},
  	//             methodExt: [ ... ],
  	//             propExt:   [ ... ]
  	//           },
  	//           ...
  	//         ]
  	//       }
  	//     ]
  	
  	_Api.register = _api_register = function ( name, val )
  	{
  		if ( $.isArray( name ) ) {
  			for ( var j=0, jen=name.length ; j<jen ; j++ ) {
  				_Api.register( name[j], val );
  			}
  			return;
  		}
  	
  		var
  			i, ien,
  			heir = name.split('.'),
  			struct = __apiStruct,
  			key, method;
  	
  		var find = function ( src, name ) {
  			for ( var i=0, ien=src.length ; i<ien ; i++ ) {
  				if ( src[i].name === name ) {
  					return src[i];
  				}
  			}
  			return null;
  		};
  	
  		for ( i=0, ien=heir.length ; i<ien ; i++ ) {
  			method = heir[i].indexOf('()') !== -1;
  			key = method ?
  				heir[i].replace('()', '') :
  				heir[i];
  	
  			var src = find( struct, key );
  			if ( ! src ) {
  				src = {
  					name:      key,
  					val:       {},
  					methodExt: [],
  					propExt:   [],
  					type:      'object'
  				};
  				struct.push( src );
  			}
  	
  			if ( i === ien-1 ) {
  				src.val = val;
  				src.type = typeof val === 'function' ?
  					'function' :
  					$.isPlainObject( val ) ?
  						'object' :
  						'other';
  			}
  			else {
  				struct = method ?
  					src.methodExt :
  					src.propExt;
  			}
  		}
  	};
  	
  	_Api.registerPlural = _api_registerPlural = function ( pluralName, singularName, val ) {
  		_Api.register( pluralName, val );
  	
  		_Api.register( singularName, function () {
  			var ret = val.apply( this, arguments );
  	
  			if ( ret === this ) {
  				// Returned item is the API instance that was passed in, return it
  				return this;
  			}
  			else if ( ret instanceof _Api ) {
  				// New API instance returned, want the value from the first item
  				// in the returned array for the singular result.
  				return ret.length ?
  					$.isArray( ret[0] ) ?
  						new _Api( ret.context, ret[0] ) : // Array results are 'enhanced'
  						ret[0] :
  					undefined$1;
  			}
  	
  			// Non-API return - just fire it back
  			return ret;
  		} );
  	};
  	
  	
  	/**
  	 * Selector for HTML tables. Apply the given selector to the give array of
  	 * DataTables settings objects.
  	 *
  	 * @param {string|integer} [selector] jQuery selector string or integer
  	 * @param  {array} Array of DataTables settings objects to be filtered
  	 * @return {array}
  	 * @ignore
  	 */
  	var __table_selector = function ( selector, a )
  	{
  		if ( $.isArray(selector) ) {
  			return $.map( selector, function (item) {
  				return __table_selector(item, a);
  			} );
  		}
  	
  		// Integer is used to pick out a table by index
  		if ( typeof selector === 'number' ) {
  			return [ a[ selector ] ];
  		}
  	
  		// Perform a jQuery selector on the table nodes
  		var nodes = $.map( a, function (el, i) {
  			return el.nTable;
  		} );
  	
  		return $(nodes)
  			.filter( selector )
  			.map( function (i) {
  				// Need to translate back from the table node to the settings
  				var idx = $.inArray( this, nodes );
  				return a[ idx ];
  			} )
  			.toArray();
  	};
  	
  	
  	
  	/**
  	 * Context selector for the API's context (i.e. the tables the API instance
  	 * refers to.
  	 *
  	 * @name    DataTable.Api#tables
  	 * @param {string|integer} [selector] Selector to pick which tables the iterator
  	 *   should operate on. If not given, all tables in the current context are
  	 *   used. This can be given as a jQuery selector (for example `':gt(0)'`) to
  	 *   select multiple tables or as an integer to select a single table.
  	 * @returns {DataTable.Api} Returns a new API instance if a selector is given.
  	 */
  	_api_register( 'tables()', function ( selector ) {
  		// A new instance is created if there was a selector specified
  		return selector !== undefined$1 && selector !== null ?
  			new _Api( __table_selector( selector, this.context ) ) :
  			this;
  	} );
  	
  	
  	_api_register( 'table()', function ( selector ) {
  		var tables = this.tables( selector );
  		var ctx = tables.context;
  	
  		// Truncate to the first matched table
  		return ctx.length ?
  			new _Api( ctx[0] ) :
  			tables;
  	} );
  	
  	
  	_api_registerPlural( 'tables().nodes()', 'table().node()' , function () {
  		return this.iterator( 'table', function ( ctx ) {
  			return ctx.nTable;
  		}, 1 );
  	} );
  	
  	
  	_api_registerPlural( 'tables().body()', 'table().body()' , function () {
  		return this.iterator( 'table', function ( ctx ) {
  			return ctx.nTBody;
  		}, 1 );
  	} );
  	
  	
  	_api_registerPlural( 'tables().header()', 'table().header()' , function () {
  		return this.iterator( 'table', function ( ctx ) {
  			return ctx.nTHead;
  		}, 1 );
  	} );
  	
  	
  	_api_registerPlural( 'tables().footer()', 'table().footer()' , function () {
  		return this.iterator( 'table', function ( ctx ) {
  			return ctx.nTFoot;
  		}, 1 );
  	} );
  	
  	
  	_api_registerPlural( 'tables().containers()', 'table().container()' , function () {
  		return this.iterator( 'table', function ( ctx ) {
  			return ctx.nTableWrapper;
  		}, 1 );
  	} );
  	
  	
  	
  	/**
  	 * Redraw the tables in the current context.
  	 */
  	_api_register( 'draw()', function ( paging ) {
  		return this.iterator( 'table', function ( settings ) {
  			if ( paging === 'page' ) {
  				_fnDraw( settings );
  			}
  			else {
  				if ( typeof paging === 'string' ) {
  					paging = paging === 'full-hold' ?
  						false :
  						true;
  				}
  	
  				_fnReDraw( settings, paging===false );
  			}
  		} );
  	} );
  	
  	
  	
  	/**
  	 * Get the current page index.
  	 *
  	 * @return {integer} Current page index (zero based)
  	 *//**
  	 * Set the current page.
  	 *
  	 * Note that if you attempt to show a page which does not exist, DataTables will
  	 * not throw an error, but rather reset the paging.
  	 *
  	 * @param {integer|string} action The paging action to take. This can be one of:
  	 *  * `integer` - The page index to jump to
  	 *  * `string` - An action to take:
  	 *    * `first` - Jump to first page.
  	 *    * `next` - Jump to the next page
  	 *    * `previous` - Jump to previous page
  	 *    * `last` - Jump to the last page.
  	 * @returns {DataTables.Api} this
  	 */
  	_api_register( 'page()', function ( action ) {
  		if ( action === undefined$1 ) {
  			return this.page.info().page; // not an expensive call
  		}
  	
  		// else, have an action to take on all tables
  		return this.iterator( 'table', function ( settings ) {
  			_fnPageChange( settings, action );
  		} );
  	} );
  	
  	
  	/**
  	 * Paging information for the first table in the current context.
  	 *
  	 * If you require paging information for another table, use the `table()` method
  	 * with a suitable selector.
  	 *
  	 * @return {object} Object with the following properties set:
  	 *  * `page` - Current page index (zero based - i.e. the first page is `0`)
  	 *  * `pages` - Total number of pages
  	 *  * `start` - Display index for the first record shown on the current page
  	 *  * `end` - Display index for the last record shown on the current page
  	 *  * `length` - Display length (number of records). Note that generally `start
  	 *    + length = end`, but this is not always true, for example if there are
  	 *    only 2 records to show on the final page, with a length of 10.
  	 *  * `recordsTotal` - Full data set length
  	 *  * `recordsDisplay` - Data set length once the current filtering criterion
  	 *    are applied.
  	 */
  	_api_register( 'page.info()', function ( action ) {
  		if ( this.context.length === 0 ) {
  			return undefined$1;
  		}
  	
  		var
  			settings   = this.context[0],
  			start      = settings._iDisplayStart,
  			len        = settings.oFeatures.bPaginate ? settings._iDisplayLength : -1,
  			visRecords = settings.fnRecordsDisplay(),
  			all        = len === -1;
  	
  		return {
  			"page":           all ? 0 : Math.floor( start / len ),
  			"pages":          all ? 1 : Math.ceil( visRecords / len ),
  			"start":          start,
  			"end":            settings.fnDisplayEnd(),
  			"length":         len,
  			"recordsTotal":   settings.fnRecordsTotal(),
  			"recordsDisplay": visRecords,
  			"serverSide":     _fnDataSource( settings ) === 'ssp'
  		};
  	} );
  	
  	
  	/**
  	 * Get the current page length.
  	 *
  	 * @return {integer} Current page length. Note `-1` indicates that all records
  	 *   are to be shown.
  	 *//**
  	 * Set the current page length.
  	 *
  	 * @param {integer} Page length to set. Use `-1` to show all records.
  	 * @returns {DataTables.Api} this
  	 */
  	_api_register( 'page.len()', function ( len ) {
  		// Note that we can't call this function 'length()' because `length`
  		// is a Javascript property of functions which defines how many arguments
  		// the function expects.
  		if ( len === undefined$1 ) {
  			return this.context.length !== 0 ?
  				this.context[0]._iDisplayLength :
  				undefined$1;
  		}
  	
  		// else, set the page length
  		return this.iterator( 'table', function ( settings ) {
  			_fnLengthChange( settings, len );
  		} );
  	} );
  	
  	
  	
  	var __reload = function ( settings, holdPosition, callback ) {
  		// Use the draw event to trigger a callback
  		if ( callback ) {
  			var api = new _Api( settings );
  	
  			api.one( 'draw', function () {
  				callback( api.ajax.json() );
  			} );
  		}
  	
  		if ( _fnDataSource( settings ) == 'ssp' ) {
  			_fnReDraw( settings, holdPosition );
  		}
  		else {
  			_fnProcessingDisplay( settings, true );
  	
  			// Cancel an existing request
  			var xhr = settings.jqXHR;
  			if ( xhr && xhr.readyState !== 4 ) {
  				xhr.abort();
  			}
  	
  			// Trigger xhr
  			_fnBuildAjax( settings, [], function( json ) {
  				_fnClearTable( settings );
  	
  				var data = _fnAjaxDataSrc( settings, json );
  				for ( var i=0, ien=data.length ; i<ien ; i++ ) {
  					_fnAddData( settings, data[i] );
  				}
  	
  				_fnReDraw( settings, holdPosition );
  				_fnProcessingDisplay( settings, false );
  			} );
  		}
  	};
  	
  	
  	/**
  	 * Get the JSON response from the last Ajax request that DataTables made to the
  	 * server. Note that this returns the JSON from the first table in the current
  	 * context.
  	 *
  	 * @return {object} JSON received from the server.
  	 */
  	_api_register( 'ajax.json()', function () {
  		var ctx = this.context;
  	
  		if ( ctx.length > 0 ) {
  			return ctx[0].json;
  		}
  	
  		// else return undefined;
  	} );
  	
  	
  	/**
  	 * Get the data submitted in the last Ajax request
  	 */
  	_api_register( 'ajax.params()', function () {
  		var ctx = this.context;
  	
  		if ( ctx.length > 0 ) {
  			return ctx[0].oAjaxData;
  		}
  	
  		// else return undefined;
  	} );
  	
  	
  	/**
  	 * Reload tables from the Ajax data source. Note that this function will
  	 * automatically re-draw the table when the remote data has been loaded.
  	 *
  	 * @param {boolean} [reset=true] Reset (default) or hold the current paging
  	 *   position. A full re-sort and re-filter is performed when this method is
  	 *   called, which is why the pagination reset is the default action.
  	 * @returns {DataTables.Api} this
  	 */
  	_api_register( 'ajax.reload()', function ( callback, resetPaging ) {
  		return this.iterator( 'table', function (settings) {
  			__reload( settings, resetPaging===false, callback );
  		} );
  	} );
  	
  	
  	/**
  	 * Get the current Ajax URL. Note that this returns the URL from the first
  	 * table in the current context.
  	 *
  	 * @return {string} Current Ajax source URL
  	 *//**
  	 * Set the Ajax URL. Note that this will set the URL for all tables in the
  	 * current context.
  	 *
  	 * @param {string} url URL to set.
  	 * @returns {DataTables.Api} this
  	 */
  	_api_register( 'ajax.url()', function ( url ) {
  		var ctx = this.context;
  	
  		if ( url === undefined$1 ) {
  			// get
  			if ( ctx.length === 0 ) {
  				return undefined$1;
  			}
  			ctx = ctx[0];
  	
  			return ctx.ajax ?
  				$.isPlainObject( ctx.ajax ) ?
  					ctx.ajax.url :
  					ctx.ajax :
  				ctx.sAjaxSource;
  		}
  	
  		// set
  		return this.iterator( 'table', function ( settings ) {
  			if ( $.isPlainObject( settings.ajax ) ) {
  				settings.ajax.url = url;
  			}
  			else {
  				settings.ajax = url;
  			}
  			// No need to consider sAjaxSource here since DataTables gives priority
  			// to `ajax` over `sAjaxSource`. So setting `ajax` here, renders any
  			// value of `sAjaxSource` redundant.
  		} );
  	} );
  	
  	
  	/**
  	 * Load data from the newly set Ajax URL. Note that this method is only
  	 * available when `ajax.url()` is used to set a URL. Additionally, this method
  	 * has the same effect as calling `ajax.reload()` but is provided for
  	 * convenience when setting a new URL. Like `ajax.reload()` it will
  	 * automatically redraw the table once the remote data has been loaded.
  	 *
  	 * @returns {DataTables.Api} this
  	 */
  	_api_register( 'ajax.url().load()', function ( callback, resetPaging ) {
  		// Same as a reload, but makes sense to present it for easy access after a
  		// url change
  		return this.iterator( 'table', function ( ctx ) {
  			__reload( ctx, resetPaging===false, callback );
  		} );
  	} );
  	
  	
  	
  	
  	var _selector_run = function ( type, selector, selectFn, settings, opts )
  	{
  		var
  			out = [], res,
  			a, i, ien, j, jen,
  			selectorType = typeof selector;
  	
  		// Can't just check for isArray here, as an API or jQuery instance might be
  		// given with their array like look
  		if ( ! selector || selectorType === 'string' || selectorType === 'function' || selector.length === undefined$1 ) {
  			selector = [ selector ];
  		}
  	
  		for ( i=0, ien=selector.length ; i<ien ; i++ ) {
  			// Only split on simple strings - complex expressions will be jQuery selectors
  			a = selector[i] && selector[i].split && ! selector[i].match(/[\[\(:]/) ?
  				selector[i].split(',') :
  				[ selector[i] ];
  	
  			for ( j=0, jen=a.length ; j<jen ; j++ ) {
  				res = selectFn( typeof a[j] === 'string' ? $.trim(a[j]) : a[j] );
  	
  				if ( res && res.length ) {
  					out = out.concat( res );
  				}
  			}
  		}
  	
  		// selector extensions
  		var ext = _ext.selector[ type ];
  		if ( ext.length ) {
  			for ( i=0, ien=ext.length ; i<ien ; i++ ) {
  				out = ext[i]( settings, opts, out );
  			}
  		}
  	
  		return _unique( out );
  	};
  	
  	
  	var _selector_opts = function ( opts )
  	{
  		if ( ! opts ) {
  			opts = {};
  		}
  	
  		// Backwards compatibility for 1.9- which used the terminology filter rather
  		// than search
  		if ( opts.filter && opts.search === undefined$1 ) {
  			opts.search = opts.filter;
  		}
  	
  		return $.extend( {
  			search: 'none',
  			order: 'current',
  			page: 'all'
  		}, opts );
  	};
  	
  	
  	var _selector_first = function ( inst )
  	{
  		// Reduce the API instance to the first item found
  		for ( var i=0, ien=inst.length ; i<ien ; i++ ) {
  			if ( inst[i].length > 0 ) {
  				// Assign the first element to the first item in the instance
  				// and truncate the instance and context
  				inst[0] = inst[i];
  				inst[0].length = 1;
  				inst.length = 1;
  				inst.context = [ inst.context[i] ];
  	
  				return inst;
  			}
  		}
  	
  		// Not found - return an empty instance
  		inst.length = 0;
  		return inst;
  	};
  	
  	
  	var _selector_row_indexes = function ( settings, opts )
  	{
  		var
  			i, ien, tmp, a=[],
  			displayFiltered = settings.aiDisplay,
  			displayMaster = settings.aiDisplayMaster;
  	
  		var
  			search = opts.search,  // none, applied, removed
  			order  = opts.order,   // applied, current, index (original - compatibility with 1.9)
  			page   = opts.page;    // all, current
  	
  		if ( _fnDataSource( settings ) == 'ssp' ) {
  			// In server-side processing mode, most options are irrelevant since
  			// rows not shown don't exist and the index order is the applied order
  			// Removed is a special case - for consistency just return an empty
  			// array
  			return search === 'removed' ?
  				[] :
  				_range( 0, displayMaster.length );
  		}
  		else if ( page == 'current' ) {
  			// Current page implies that order=current and fitler=applied, since it is
  			// fairly senseless otherwise, regardless of what order and search actually
  			// are
  			for ( i=settings._iDisplayStart, ien=settings.fnDisplayEnd() ; i<ien ; i++ ) {
  				a.push( displayFiltered[i] );
  			}
  		}
  		else if ( order == 'current' || order == 'applied' ) {
  			if ( search == 'none') {
  				a = displayMaster.slice();
  			}
  			else if ( search == 'applied' ) {
  				a = displayFiltered.slice();
  			}
  			else if ( search == 'removed' ) {
  				// O(n+m) solution by creating a hash map
  				var displayFilteredMap = {};
  	
  				for ( var i=0, ien=displayFiltered.length ; i<ien ; i++ ) {
  					displayFilteredMap[displayFiltered[i]] = null;
  				}
  	
  				a = $.map( displayMaster, function (el) {
  					return ! displayFilteredMap.hasOwnProperty(el) ?
  						el :
  						null;
  				} );
  			}
  		}
  		else if ( order == 'index' || order == 'original' ) {
  			for ( i=0, ien=settings.aoData.length ; i<ien ; i++ ) {
  				if ( search == 'none' ) {
  					a.push( i );
  				}
  				else { // applied | removed
  					tmp = $.inArray( i, displayFiltered );
  	
  					if ((tmp === -1 && search == 'removed') ||
  						(tmp >= 0   && search == 'applied') )
  					{
  						a.push( i );
  					}
  				}
  			}
  		}
  	
  		return a;
  	};
  	
  	
  	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  	 * Rows
  	 *
  	 * {}          - no selector - use all available rows
  	 * {integer}   - row aoData index
  	 * {node}      - TR node
  	 * {string}    - jQuery selector to apply to the TR elements
  	 * {array}     - jQuery array of nodes, or simply an array of TR nodes
  	 *
  	 */
  	var __row_selector = function ( settings, selector, opts )
  	{
  		var rows;
  		var run = function ( sel ) {
  			var selInt = _intVal( sel );
  			var aoData = settings.aoData;
  	
  			// Short cut - selector is a number and no options provided (default is
  			// all records, so no need to check if the index is in there, since it
  			// must be - dev error if the index doesn't exist).
  			if ( selInt !== null && ! opts ) {
  				return [ selInt ];
  			}
  	
  			if ( ! rows ) {
  				rows = _selector_row_indexes( settings, opts );
  			}
  	
  			if ( selInt !== null && $.inArray( selInt, rows ) !== -1 ) {
  				// Selector - integer
  				return [ selInt ];
  			}
  			else if ( sel === null || sel === undefined$1 || sel === '' ) {
  				// Selector - none
  				return rows;
  			}
  	
  			// Selector - function
  			if ( typeof sel === 'function' ) {
  				return $.map( rows, function (idx) {
  					var row = aoData[ idx ];
  					return sel( idx, row._aData, row.nTr ) ? idx : null;
  				} );
  			}
  	
  			// Selector - node
  			if ( sel.nodeName ) {
  				var rowIdx = sel._DT_RowIndex;  // Property added by DT for fast lookup
  				var cellIdx = sel._DT_CellIndex;
  	
  				if ( rowIdx !== undefined$1 ) {
  					// Make sure that the row is actually still present in the table
  					return aoData[ rowIdx ] && aoData[ rowIdx ].nTr === sel ?
  						[ rowIdx ] :
  						[];
  				}
  				else if ( cellIdx ) {
  					return aoData[ cellIdx.row ] && aoData[ cellIdx.row ].nTr === sel.parentNode ?
  						[ cellIdx.row ] :
  						[];
  				}
  				else {
  					var host = $(sel).closest('*[data-dt-row]');
  					return host.length ?
  						[ host.data('dt-row') ] :
  						[];
  				}
  			}
  	
  			// ID selector. Want to always be able to select rows by id, regardless
  			// of if the tr element has been created or not, so can't rely upon
  			// jQuery here - hence a custom implementation. This does not match
  			// Sizzle's fast selector or HTML4 - in HTML5 the ID can be anything,
  			// but to select it using a CSS selector engine (like Sizzle or
  			// querySelect) it would need to need to be escaped for some characters.
  			// DataTables simplifies this for row selectors since you can select
  			// only a row. A # indicates an id any anything that follows is the id -
  			// unescaped.
  			if ( typeof sel === 'string' && sel.charAt(0) === '#' ) {
  				// get row index from id
  				var rowObj = settings.aIds[ sel.replace( /^#/, '' ) ];
  				if ( rowObj !== undefined$1 ) {
  					return [ rowObj.idx ];
  				}
  	
  				// need to fall through to jQuery in case there is DOM id that
  				// matches
  			}
  			
  			// Get nodes in the order from the `rows` array with null values removed
  			var nodes = _removeEmpty(
  				_pluck_order( settings.aoData, rows, 'nTr' )
  			);
  	
  			// Selector - jQuery selector string, array of nodes or jQuery object/
  			// As jQuery's .filter() allows jQuery objects to be passed in filter,
  			// it also allows arrays, so this will cope with all three options
  			return $(nodes)
  				.filter( sel )
  				.map( function () {
  					return this._DT_RowIndex;
  				} )
  				.toArray();
  		};
  	
  		return _selector_run( 'row', selector, run, settings, opts );
  	};
  	
  	
  	_api_register( 'rows()', function ( selector, opts ) {
  		// argument shifting
  		if ( selector === undefined$1 ) {
  			selector = '';
  		}
  		else if ( $.isPlainObject( selector ) ) {
  			opts = selector;
  			selector = '';
  		}
  	
  		opts = _selector_opts( opts );
  	
  		var inst = this.iterator( 'table', function ( settings ) {
  			return __row_selector( settings, selector, opts );
  		}, 1 );
  	
  		// Want argument shifting here and in __row_selector?
  		inst.selector.rows = selector;
  		inst.selector.opts = opts;
  	
  		return inst;
  	} );
  	
  	_api_register( 'rows().nodes()', function () {
  		return this.iterator( 'row', function ( settings, row ) {
  			return settings.aoData[ row ].nTr || undefined$1;
  		}, 1 );
  	} );
  	
  	_api_register( 'rows().data()', function () {
  		return this.iterator( true, 'rows', function ( settings, rows ) {
  			return _pluck_order( settings.aoData, rows, '_aData' );
  		}, 1 );
  	} );
  	
  	_api_registerPlural( 'rows().cache()', 'row().cache()', function ( type ) {
  		return this.iterator( 'row', function ( settings, row ) {
  			var r = settings.aoData[ row ];
  			return type === 'search' ? r._aFilterData : r._aSortData;
  		}, 1 );
  	} );
  	
  	_api_registerPlural( 'rows().invalidate()', 'row().invalidate()', function ( src ) {
  		return this.iterator( 'row', function ( settings, row ) {
  			_fnInvalidate( settings, row, src );
  		} );
  	} );
  	
  	_api_registerPlural( 'rows().indexes()', 'row().index()', function () {
  		return this.iterator( 'row', function ( settings, row ) {
  			return row;
  		}, 1 );
  	} );
  	
  	_api_registerPlural( 'rows().ids()', 'row().id()', function ( hash ) {
  		var a = [];
  		var context = this.context;
  	
  		// `iterator` will drop undefined values, but in this case we want them
  		for ( var i=0, ien=context.length ; i<ien ; i++ ) {
  			for ( var j=0, jen=this[i].length ; j<jen ; j++ ) {
  				var id = context[i].rowIdFn( context[i].aoData[ this[i][j] ]._aData );
  				a.push( (hash === true ? '#' : '' )+ id );
  			}
  		}
  	
  		return new _Api( context, a );
  	} );
  	
  	_api_registerPlural( 'rows().remove()', 'row().remove()', function () {
  		var that = this;
  	
  		this.iterator( 'row', function ( settings, row, thatIdx ) {
  			var data = settings.aoData;
  			var rowData = data[ row ];
  			var i, ien, j, jen;
  			var loopRow, loopCells;
  	
  			data.splice( row, 1 );
  	
  			// Update the cached indexes
  			for ( i=0, ien=data.length ; i<ien ; i++ ) {
  				loopRow = data[i];
  				loopCells = loopRow.anCells;
  	
  				// Rows
  				if ( loopRow.nTr !== null ) {
  					loopRow.nTr._DT_RowIndex = i;
  				}
  	
  				// Cells
  				if ( loopCells !== null ) {
  					for ( j=0, jen=loopCells.length ; j<jen ; j++ ) {
  						loopCells[j]._DT_CellIndex.row = i;
  					}
  				}
  			}
  	
  			// Delete from the display arrays
  			_fnDeleteIndex( settings.aiDisplayMaster, row );
  			_fnDeleteIndex( settings.aiDisplay, row );
  			_fnDeleteIndex( that[ thatIdx ], row, false ); // maintain local indexes
  	
  			// For server-side processing tables - subtract the deleted row from the count
  			if ( settings._iRecordsDisplay > 0 ) {
  				settings._iRecordsDisplay--;
  			}
  	
  			// Check for an 'overflow' they case for displaying the table
  			_fnLengthOverflow( settings );
  	
  			// Remove the row's ID reference if there is one
  			var id = settings.rowIdFn( rowData._aData );
  			if ( id !== undefined$1 ) {
  				delete settings.aIds[ id ];
  			}
  		} );
  	
  		this.iterator( 'table', function ( settings ) {
  			for ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {
  				settings.aoData[i].idx = i;
  			}
  		} );
  	
  		return this;
  	} );
  	
  	
  	_api_register( 'rows.add()', function ( rows ) {
  		var newRows = this.iterator( 'table', function ( settings ) {
  				var row, i, ien;
  				var out = [];
  	
  				for ( i=0, ien=rows.length ; i<ien ; i++ ) {
  					row = rows[i];
  	
  					if ( row.nodeName && row.nodeName.toUpperCase() === 'TR' ) {
  						out.push( _fnAddTr( settings, row )[0] );
  					}
  					else {
  						out.push( _fnAddData( settings, row ) );
  					}
  				}
  	
  				return out;
  			}, 1 );
  	
  		// Return an Api.rows() extended instance, so rows().nodes() etc can be used
  		var modRows = this.rows( -1 );
  		modRows.pop();
  		$.merge( modRows, newRows );
  	
  		return modRows;
  	} );
  	
  	
  	
  	
  	
  	/**
  	 *
  	 */
  	_api_register( 'row()', function ( selector, opts ) {
  		return _selector_first( this.rows( selector, opts ) );
  	} );
  	
  	
  	_api_register( 'row().data()', function ( data ) {
  		var ctx = this.context;
  	
  		if ( data === undefined$1 ) {
  			// Get
  			return ctx.length && this.length ?
  				ctx[0].aoData[ this[0] ]._aData :
  				undefined$1;
  		}
  	
  		// Set
  		var row = ctx[0].aoData[ this[0] ];
  		row._aData = data;
  	
  		// If the DOM has an id, and the data source is an array
  		if ( $.isArray( data ) && row.nTr && row.nTr.id ) {
  			_fnSetObjectDataFn( ctx[0].rowId )( data, row.nTr.id );
  		}
  	
  		// Automatically invalidate
  		_fnInvalidate( ctx[0], this[0], 'data' );
  	
  		return this;
  	} );
  	
  	
  	_api_register( 'row().node()', function () {
  		var ctx = this.context;
  	
  		return ctx.length && this.length ?
  			ctx[0].aoData[ this[0] ].nTr || null :
  			null;
  	} );
  	
  	
  	_api_register( 'row.add()', function ( row ) {
  		// Allow a jQuery object to be passed in - only a single row is added from
  		// it though - the first element in the set
  		if ( row instanceof $ && row.length ) {
  			row = row[0];
  		}
  	
  		var rows = this.iterator( 'table', function ( settings ) {
  			if ( row.nodeName && row.nodeName.toUpperCase() === 'TR' ) {
  				return _fnAddTr( settings, row )[0];
  			}
  			return _fnAddData( settings, row );
  		} );
  	
  		// Return an Api.rows() extended instance, with the newly added row selected
  		return this.row( rows[0] );
  	} );
  	
  	
  	
  	var __details_add = function ( ctx, row, data, klass )
  	{
  		// Convert to array of TR elements
  		var rows = [];
  		var addRow = function ( r, k ) {
  			// Recursion to allow for arrays of jQuery objects
  			if ( $.isArray( r ) || r instanceof $ ) {
  				for ( var i=0, ien=r.length ; i<ien ; i++ ) {
  					addRow( r[i], k );
  				}
  				return;
  			}
  	
  			// If we get a TR element, then just add it directly - up to the dev
  			// to add the correct number of columns etc
  			if ( r.nodeName && r.nodeName.toLowerCase() === 'tr' ) {
  				rows.push( r );
  			}
  			else {
  				// Otherwise create a row with a wrapper
  				var created = $('<tr><td/></tr>').addClass( k );
  				$('td', created)
  					.addClass( k )
  					.html( r )
  					[0].colSpan = _fnVisbleColumns( ctx );
  	
  				rows.push( created[0] );
  			}
  		};
  	
  		addRow( data, klass );
  	
  		if ( row._details ) {
  			row._details.detach();
  		}
  	
  		row._details = $(rows);
  	
  		// If the children were already shown, that state should be retained
  		if ( row._detailsShow ) {
  			row._details.insertAfter( row.nTr );
  		}
  	};
  	
  	
  	var __details_remove = function ( api, idx )
  	{
  		var ctx = api.context;
  	
  		if ( ctx.length ) {
  			var row = ctx[0].aoData[ idx !== undefined$1 ? idx : api[0] ];
  	
  			if ( row && row._details ) {
  				row._details.remove();
  	
  				row._detailsShow = undefined$1;
  				row._details = undefined$1;
  			}
  		}
  	};
  	
  	
  	var __details_display = function ( api, show ) {
  		var ctx = api.context;
  	
  		if ( ctx.length && api.length ) {
  			var row = ctx[0].aoData[ api[0] ];
  	
  			if ( row._details ) {
  				row._detailsShow = show;
  	
  				if ( show ) {
  					row._details.insertAfter( row.nTr );
  				}
  				else {
  					row._details.detach();
  				}
  	
  				__details_events( ctx[0] );
  			}
  		}
  	};
  	
  	
  	var __details_events = function ( settings )
  	{
  		var api = new _Api( settings );
  		var namespace = '.dt.DT_details';
  		var drawEvent = 'draw'+namespace;
  		var colvisEvent = 'column-visibility'+namespace;
  		var destroyEvent = 'destroy'+namespace;
  		var data = settings.aoData;
  	
  		api.off( drawEvent +' '+ colvisEvent +' '+ destroyEvent );
  	
  		if ( _pluck( data, '_details' ).length > 0 ) {
  			// On each draw, insert the required elements into the document
  			api.on( drawEvent, function ( e, ctx ) {
  				if ( settings !== ctx ) {
  					return;
  				}
  	
  				api.rows( {page:'current'} ).eq(0).each( function (idx) {
  					// Internal data grab
  					var row = data[ idx ];
  	
  					if ( row._detailsShow ) {
  						row._details.insertAfter( row.nTr );
  					}
  				} );
  			} );
  	
  			// Column visibility change - update the colspan
  			api.on( colvisEvent, function ( e, ctx, idx, vis ) {
  				if ( settings !== ctx ) {
  					return;
  				}
  	
  				// Update the colspan for the details rows (note, only if it already has
  				// a colspan)
  				var row, visible = _fnVisbleColumns( ctx );
  	
  				for ( var i=0, ien=data.length ; i<ien ; i++ ) {
  					row = data[i];
  	
  					if ( row._details ) {
  						row._details.children('td[colspan]').attr('colspan', visible );
  					}
  				}
  			} );
  	
  			// Table destroyed - nuke any child rows
  			api.on( destroyEvent, function ( e, ctx ) {
  				if ( settings !== ctx ) {
  					return;
  				}
  	
  				for ( var i=0, ien=data.length ; i<ien ; i++ ) {
  					if ( data[i]._details ) {
  						__details_remove( api, i );
  					}
  				}
  			} );
  		}
  	};
  	
  	// Strings for the method names to help minification
  	var _emp = '';
  	var _child_obj = _emp+'row().child';
  	var _child_mth = _child_obj+'()';
  	
  	// data can be:
  	//  tr
  	//  string
  	//  jQuery or array of any of the above
  	_api_register( _child_mth, function ( data, klass ) {
  		var ctx = this.context;
  	
  		if ( data === undefined$1 ) {
  			// get
  			return ctx.length && this.length ?
  				ctx[0].aoData[ this[0] ]._details :
  				undefined$1;
  		}
  		else if ( data === true ) {
  			// show
  			this.child.show();
  		}
  		else if ( data === false ) {
  			// remove
  			__details_remove( this );
  		}
  		else if ( ctx.length && this.length ) {
  			// set
  			__details_add( ctx[0], ctx[0].aoData[ this[0] ], data, klass );
  		}
  	
  		return this;
  	} );
  	
  	
  	_api_register( [
  		_child_obj+'.show()',
  		_child_mth+'.show()' // only when `child()` was called with parameters (without
  	], function ( show ) {   // it returns an object and this method is not executed)
  		__details_display( this, true );
  		return this;
  	} );
  	
  	
  	_api_register( [
  		_child_obj+'.hide()',
  		_child_mth+'.hide()' // only when `child()` was called with parameters (without
  	], function () {         // it returns an object and this method is not executed)
  		__details_display( this, false );
  		return this;
  	} );
  	
  	
  	_api_register( [
  		_child_obj+'.remove()',
  		_child_mth+'.remove()' // only when `child()` was called with parameters (without
  	], function () {           // it returns an object and this method is not executed)
  		__details_remove( this );
  		return this;
  	} );
  	
  	
  	_api_register( _child_obj+'.isShown()', function () {
  		var ctx = this.context;
  	
  		if ( ctx.length && this.length ) {
  			// _detailsShown as false or undefined will fall through to return false
  			return ctx[0].aoData[ this[0] ]._detailsShow || false;
  		}
  		return false;
  	} );
  	
  	
  	
  	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  	 * Columns
  	 *
  	 * {integer}           - column index (>=0 count from left, <0 count from right)
  	 * "{integer}:visIdx"  - visible column index (i.e. translate to column index)  (>=0 count from left, <0 count from right)
  	 * "{integer}:visible" - alias for {integer}:visIdx  (>=0 count from left, <0 count from right)
  	 * "{string}:name"     - column name
  	 * "{string}"          - jQuery selector on column header nodes
  	 *
  	 */
  	
  	// can be an array of these items, comma separated list, or an array of comma
  	// separated lists
  	
  	var __re_column_selector = /^([^:]+):(name|visIdx|visible)$/;
  	
  	
  	// r1 and r2 are redundant - but it means that the parameters match for the
  	// iterator callback in columns().data()
  	var __columnData = function ( settings, column, r1, r2, rows ) {
  		var a = [];
  		for ( var row=0, ien=rows.length ; row<ien ; row++ ) {
  			a.push( _fnGetCellData( settings, rows[row], column ) );
  		}
  		return a;
  	};
  	
  	
  	var __column_selector = function ( settings, selector, opts )
  	{
  		var
  			columns = settings.aoColumns,
  			names = _pluck( columns, 'sName' ),
  			nodes = _pluck( columns, 'nTh' );
  	
  		var run = function ( s ) {
  			var selInt = _intVal( s );
  	
  			// Selector - all
  			if ( s === '' ) {
  				return _range( columns.length );
  			}
  	
  			// Selector - index
  			if ( selInt !== null ) {
  				return [ selInt >= 0 ?
  					selInt : // Count from left
  					columns.length + selInt // Count from right (+ because its a negative value)
  				];
  			}
  	
  			// Selector = function
  			if ( typeof s === 'function' ) {
  				var rows = _selector_row_indexes( settings, opts );
  	
  				return $.map( columns, function (col, idx) {
  					return s(
  							idx,
  							__columnData( settings, idx, 0, 0, rows ),
  							nodes[ idx ]
  						) ? idx : null;
  				} );
  			}
  	
  			// jQuery or string selector
  			var match = typeof s === 'string' ?
  				s.match( __re_column_selector ) :
  				'';
  	
  			if ( match ) {
  				switch( match[2] ) {
  					case 'visIdx':
  					case 'visible':
  						var idx = parseInt( match[1], 10 );
  						// Visible index given, convert to column index
  						if ( idx < 0 ) {
  							// Counting from the right
  							var visColumns = $.map( columns, function (col,i) {
  								return col.bVisible ? i : null;
  							} );
  							return [ visColumns[ visColumns.length + idx ] ];
  						}
  						// Counting from the left
  						return [ _fnVisibleToColumnIndex( settings, idx ) ];
  	
  					case 'name':
  						// match by name. `names` is column index complete and in order
  						return $.map( names, function (name, i) {
  							return name === match[1] ? i : null;
  						} );
  	
  					default:
  						return [];
  				}
  			}
  	
  			// Cell in the table body
  			if ( s.nodeName && s._DT_CellIndex ) {
  				return [ s._DT_CellIndex.column ];
  			}
  	
  			// jQuery selector on the TH elements for the columns
  			var jqResult = $( nodes )
  				.filter( s )
  				.map( function () {
  					return $.inArray( this, nodes ); // `nodes` is column index complete and in order
  				} )
  				.toArray();
  	
  			if ( jqResult.length || ! s.nodeName ) {
  				return jqResult;
  			}
  	
  			// Otherwise a node which might have a `dt-column` data attribute, or be
  			// a child or such an element
  			var host = $(s).closest('*[data-dt-column]');
  			return host.length ?
  				[ host.data('dt-column') ] :
  				[];
  		};
  	
  		return _selector_run( 'column', selector, run, settings, opts );
  	};
  	
  	
  	var __setColumnVis = function ( settings, column, vis ) {
  		var 
  			cols = settings.aoColumns,
  			col  = cols[ column ],
  			data = settings.aoData,
  			cells, i, ien, tr;
  	
  		// Get
  		if ( vis === undefined$1 ) {
  			return col.bVisible;
  		}
  	
  		// Set
  		// No change
  		if ( col.bVisible === vis ) {
  			return;
  		}
  	
  		if ( vis ) {
  			// Insert column
  			// Need to decide if we should use appendChild or insertBefore
  			var insertBefore = $.inArray( true, _pluck(cols, 'bVisible'), column+1 );
  	
  			for ( i=0, ien=data.length ; i<ien ; i++ ) {
  				tr = data[i].nTr;
  				cells = data[i].anCells;
  	
  				if ( tr ) {
  					// insertBefore can act like appendChild if 2nd arg is null
  					tr.insertBefore( cells[ column ], cells[ insertBefore ] || null );
  				}
  			}
  		}
  		else {
  			// Remove column
  			$( _pluck( settings.aoData, 'anCells', column ) ).detach();
  		}
  	
  		// Common actions
  		col.bVisible = vis;
  	};
  	
  	
  	_api_register( 'columns()', function ( selector, opts ) {
  		// argument shifting
  		if ( selector === undefined$1 ) {
  			selector = '';
  		}
  		else if ( $.isPlainObject( selector ) ) {
  			opts = selector;
  			selector = '';
  		}
  	
  		opts = _selector_opts( opts );
  	
  		var inst = this.iterator( 'table', function ( settings ) {
  			return __column_selector( settings, selector, opts );
  		}, 1 );
  	
  		// Want argument shifting here and in _row_selector?
  		inst.selector.cols = selector;
  		inst.selector.opts = opts;
  	
  		return inst;
  	} );
  	
  	_api_registerPlural( 'columns().header()', 'column().header()', function ( selector, opts ) {
  		return this.iterator( 'column', function ( settings, column ) {
  			return settings.aoColumns[column].nTh;
  		}, 1 );
  	} );
  	
  	_api_registerPlural( 'columns().footer()', 'column().footer()', function ( selector, opts ) {
  		return this.iterator( 'column', function ( settings, column ) {
  			return settings.aoColumns[column].nTf;
  		}, 1 );
  	} );
  	
  	_api_registerPlural( 'columns().data()', 'column().data()', function () {
  		return this.iterator( 'column-rows', __columnData, 1 );
  	} );
  	
  	_api_registerPlural( 'columns().dataSrc()', 'column().dataSrc()', function () {
  		return this.iterator( 'column', function ( settings, column ) {
  			return settings.aoColumns[column].mData;
  		}, 1 );
  	} );
  	
  	_api_registerPlural( 'columns().cache()', 'column().cache()', function ( type ) {
  		return this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {
  			return _pluck_order( settings.aoData, rows,
  				type === 'search' ? '_aFilterData' : '_aSortData', column
  			);
  		}, 1 );
  	} );
  	
  	_api_registerPlural( 'columns().nodes()', 'column().nodes()', function () {
  		return this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {
  			return _pluck_order( settings.aoData, rows, 'anCells', column ) ;
  		}, 1 );
  	} );
  	
  	_api_registerPlural( 'columns().visible()', 'column().visible()', function ( vis, calc ) {
  		var that = this;
  		var ret = this.iterator( 'column', function ( settings, column ) {
  			if ( vis === undefined$1 ) {
  				return settings.aoColumns[ column ].bVisible;
  			} // else
  			__setColumnVis( settings, column, vis );
  		} );
  	
  		// Group the column visibility changes
  		if ( vis !== undefined$1 ) {
  			this.iterator( 'table', function ( settings ) {
  				// Redraw the header after changes
  				_fnDrawHead( settings, settings.aoHeader );
  				_fnDrawHead( settings, settings.aoFooter );
  		
  				// Update colspan for no records display. Child rows and extensions will use their own
  				// listeners to do this - only need to update the empty table item here
  				if ( ! settings.aiDisplay.length ) {
  					$(settings.nTBody).find('td[colspan]').attr('colspan', _fnVisbleColumns(settings));
  				}
  		
  				_fnSaveState( settings );
  	
  				// Second loop once the first is done for events
  				that.iterator( 'column', function ( settings, column ) {
  					_fnCallbackFire( settings, null, 'column-visibility', [settings, column, vis, calc] );
  				} );
  	
  				if ( calc === undefined$1 || calc ) {
  					that.columns.adjust();
  				}
  			});
  		}
  	
  		return ret;
  	} );
  	
  	_api_registerPlural( 'columns().indexes()', 'column().index()', function ( type ) {
  		return this.iterator( 'column', function ( settings, column ) {
  			return type === 'visible' ?
  				_fnColumnIndexToVisible( settings, column ) :
  				column;
  		}, 1 );
  	} );
  	
  	_api_register( 'columns.adjust()', function () {
  		return this.iterator( 'table', function ( settings ) {
  			_fnAdjustColumnSizing( settings );
  		}, 1 );
  	} );
  	
  	_api_register( 'column.index()', function ( type, idx ) {
  		if ( this.context.length !== 0 ) {
  			var ctx = this.context[0];
  	
  			if ( type === 'fromVisible' || type === 'toData' ) {
  				return _fnVisibleToColumnIndex( ctx, idx );
  			}
  			else if ( type === 'fromData' || type === 'toVisible' ) {
  				return _fnColumnIndexToVisible( ctx, idx );
  			}
  		}
  	} );
  	
  	_api_register( 'column()', function ( selector, opts ) {
  		return _selector_first( this.columns( selector, opts ) );
  	} );
  	
  	
  	
  	var __cell_selector = function ( settings, selector, opts )
  	{
  		var data = settings.aoData;
  		var rows = _selector_row_indexes( settings, opts );
  		var cells = _removeEmpty( _pluck_order( data, rows, 'anCells' ) );
  		var allCells = $( [].concat.apply([], cells) );
  		var row;
  		var columns = settings.aoColumns.length;
  		var a, i, ien, j, o, host;
  	
  		var run = function ( s ) {
  			var fnSelector = typeof s === 'function';
  	
  			if ( s === null || s === undefined$1 || fnSelector ) {
  				// All cells and function selectors
  				a = [];
  	
  				for ( i=0, ien=rows.length ; i<ien ; i++ ) {
  					row = rows[i];
  	
  					for ( j=0 ; j<columns ; j++ ) {
  						o = {
  							row: row,
  							column: j
  						};
  	
  						if ( fnSelector ) {
  							// Selector - function
  							host = data[ row ];
  	
  							if ( s( o, _fnGetCellData(settings, row, j), host.anCells ? host.anCells[j] : null ) ) {
  								a.push( o );
  							}
  						}
  						else {
  							// Selector - all
  							a.push( o );
  						}
  					}
  				}
  	
  				return a;
  			}
  			
  			// Selector - index
  			if ( $.isPlainObject( s ) ) {
  				// Valid cell index and its in the array of selectable rows
  				return s.column !== undefined$1 && s.row !== undefined$1 && $.inArray( s.row, rows ) !== -1 ?
  					[s] :
  					[];
  			}
  	
  			// Selector - jQuery filtered cells
  			var jqResult = allCells
  				.filter( s )
  				.map( function (i, el) {
  					return { // use a new object, in case someone changes the values
  						row:    el._DT_CellIndex.row,
  						column: el._DT_CellIndex.column
  	 				};
  				} )
  				.toArray();
  	
  			if ( jqResult.length || ! s.nodeName ) {
  				return jqResult;
  			}
  	
  			// Otherwise the selector is a node, and there is one last option - the
  			// element might be a child of an element which has dt-row and dt-column
  			// data attributes
  			host = $(s).closest('*[data-dt-row]');
  			return host.length ?
  				[ {
  					row: host.data('dt-row'),
  					column: host.data('dt-column')
  				} ] :
  				[];
  		};
  	
  		return _selector_run( 'cell', selector, run, settings, opts );
  	};
  	
  	
  	
  	
  	_api_register( 'cells()', function ( rowSelector, columnSelector, opts ) {
  		// Argument shifting
  		if ( $.isPlainObject( rowSelector ) ) {
  			// Indexes
  			if ( rowSelector.row === undefined$1 ) {
  				// Selector options in first parameter
  				opts = rowSelector;
  				rowSelector = null;
  			}
  			else {
  				// Cell index objects in first parameter
  				opts = columnSelector;
  				columnSelector = null;
  			}
  		}
  		if ( $.isPlainObject( columnSelector ) ) {
  			opts = columnSelector;
  			columnSelector = null;
  		}
  	
  		// Cell selector
  		if ( columnSelector === null || columnSelector === undefined$1 ) {
  			return this.iterator( 'table', function ( settings ) {
  				return __cell_selector( settings, rowSelector, _selector_opts( opts ) );
  			} );
  		}
  	
  		// The default built in options need to apply to row and columns
  		var internalOpts = opts ? {
  			page: opts.page,
  			order: opts.order,
  			search: opts.search
  		} : {};
  	
  		// Row + column selector
  		var columns = this.columns( columnSelector, internalOpts );
  		var rows = this.rows( rowSelector, internalOpts );
  		var i, ien, j, jen;
  	
  		var cellsNoOpts = this.iterator( 'table', function ( settings, idx ) {
  			var a = [];
  	
  			for ( i=0, ien=rows[idx].length ; i<ien ; i++ ) {
  				for ( j=0, jen=columns[idx].length ; j<jen ; j++ ) {
  					a.push( {
  						row:    rows[idx][i],
  						column: columns[idx][j]
  					} );
  				}
  			}
  	
  			return a;
  		}, 1 );
  	
  		// There is currently only one extension which uses a cell selector extension
  		// It is a _major_ performance drag to run this if it isn't needed, so this is
  		// an extension specific check at the moment
  		var cells = opts && opts.selected ?
  			this.cells( cellsNoOpts, opts ) :
  			cellsNoOpts;
  	
  		$.extend( cells.selector, {
  			cols: columnSelector,
  			rows: rowSelector,
  			opts: opts
  		} );
  	
  		return cells;
  	} );
  	
  	
  	_api_registerPlural( 'cells().nodes()', 'cell().node()', function () {
  		return this.iterator( 'cell', function ( settings, row, column ) {
  			var data = settings.aoData[ row ];
  	
  			return data && data.anCells ?
  				data.anCells[ column ] :
  				undefined$1;
  		}, 1 );
  	} );
  	
  	
  	_api_register( 'cells().data()', function () {
  		return this.iterator( 'cell', function ( settings, row, column ) {
  			return _fnGetCellData( settings, row, column );
  		}, 1 );
  	} );
  	
  	
  	_api_registerPlural( 'cells().cache()', 'cell().cache()', function ( type ) {
  		type = type === 'search' ? '_aFilterData' : '_aSortData';
  	
  		return this.iterator( 'cell', function ( settings, row, column ) {
  			return settings.aoData[ row ][ type ][ column ];
  		}, 1 );
  	} );
  	
  	
  	_api_registerPlural( 'cells().render()', 'cell().render()', function ( type ) {
  		return this.iterator( 'cell', function ( settings, row, column ) {
  			return _fnGetCellData( settings, row, column, type );
  		}, 1 );
  	} );
  	
  	
  	_api_registerPlural( 'cells().indexes()', 'cell().index()', function () {
  		return this.iterator( 'cell', function ( settings, row, column ) {
  			return {
  				row: row,
  				column: column,
  				columnVisible: _fnColumnIndexToVisible( settings, column )
  			};
  		}, 1 );
  	} );
  	
  	
  	_api_registerPlural( 'cells().invalidate()', 'cell().invalidate()', function ( src ) {
  		return this.iterator( 'cell', function ( settings, row, column ) {
  			_fnInvalidate( settings, row, src, column );
  		} );
  	} );
  	
  	
  	
  	_api_register( 'cell()', function ( rowSelector, columnSelector, opts ) {
  		return _selector_first( this.cells( rowSelector, columnSelector, opts ) );
  	} );
  	
  	
  	_api_register( 'cell().data()', function ( data ) {
  		var ctx = this.context;
  		var cell = this[0];
  	
  		if ( data === undefined$1 ) {
  			// Get
  			return ctx.length && cell.length ?
  				_fnGetCellData( ctx[0], cell[0].row, cell[0].column ) :
  				undefined$1;
  		}
  	
  		// Set
  		_fnSetCellData( ctx[0], cell[0].row, cell[0].column, data );
  		_fnInvalidate( ctx[0], cell[0].row, 'data', cell[0].column );
  	
  		return this;
  	} );
  	
  	
  	
  	/**
  	 * Get current ordering (sorting) that has been applied to the table.
  	 *
  	 * @returns {array} 2D array containing the sorting information for the first
  	 *   table in the current context. Each element in the parent array represents
  	 *   a column being sorted upon (i.e. multi-sorting with two columns would have
  	 *   2 inner arrays). The inner arrays may have 2 or 3 elements. The first is
  	 *   the column index that the sorting condition applies to, the second is the
  	 *   direction of the sort (`desc` or `asc`) and, optionally, the third is the
  	 *   index of the sorting order from the `column.sorting` initialisation array.
  	 *//**
  	 * Set the ordering for the table.
  	 *
  	 * @param {integer} order Column index to sort upon.
  	 * @param {string} direction Direction of the sort to be applied (`asc` or `desc`)
  	 * @returns {DataTables.Api} this
  	 *//**
  	 * Set the ordering for the table.
  	 *
  	 * @param {array} order 1D array of sorting information to be applied.
  	 * @param {array} [...] Optional additional sorting conditions
  	 * @returns {DataTables.Api} this
  	 *//**
  	 * Set the ordering for the table.
  	 *
  	 * @param {array} order 2D array of sorting information to be applied.
  	 * @returns {DataTables.Api} this
  	 */
  	_api_register( 'order()', function ( order, dir ) {
  		var ctx = this.context;
  	
  		if ( order === undefined$1 ) {
  			// get
  			return ctx.length !== 0 ?
  				ctx[0].aaSorting :
  				undefined$1;
  		}
  	
  		// set
  		if ( typeof order === 'number' ) {
  			// Simple column / direction passed in
  			order = [ [ order, dir ] ];
  		}
  		else if ( order.length && ! $.isArray( order[0] ) ) {
  			// Arguments passed in (list of 1D arrays)
  			order = Array.prototype.slice.call( arguments );
  		}
  		// otherwise a 2D array was passed in
  	
  		return this.iterator( 'table', function ( settings ) {
  			settings.aaSorting = order.slice();
  		} );
  	} );
  	
  	
  	/**
  	 * Attach a sort listener to an element for a given column
  	 *
  	 * @param {node|jQuery|string} node Identifier for the element(s) to attach the
  	 *   listener to. This can take the form of a single DOM node, a jQuery
  	 *   collection of nodes or a jQuery selector which will identify the node(s).
  	 * @param {integer} column the column that a click on this node will sort on
  	 * @param {function} [callback] callback function when sort is run
  	 * @returns {DataTables.Api} this
  	 */
  	_api_register( 'order.listener()', function ( node, column, callback ) {
  		return this.iterator( 'table', function ( settings ) {
  			_fnSortAttachListener( settings, node, column, callback );
  		} );
  	} );
  	
  	
  	_api_register( 'order.fixed()', function ( set ) {
  		if ( ! set ) {
  			var ctx = this.context;
  			var fixed = ctx.length ?
  				ctx[0].aaSortingFixed :
  				undefined$1;
  	
  			return $.isArray( fixed ) ?
  				{ pre: fixed } :
  				fixed;
  		}
  	
  		return this.iterator( 'table', function ( settings ) {
  			settings.aaSortingFixed = $.extend( true, {}, set );
  		} );
  	} );
  	
  	
  	// Order by the selected column(s)
  	_api_register( [
  		'columns().order()',
  		'column().order()'
  	], function ( dir ) {
  		var that = this;
  	
  		return this.iterator( 'table', function ( settings, i ) {
  			var sort = [];
  	
  			$.each( that[i], function (j, col) {
  				sort.push( [ col, dir ] );
  			} );
  	
  			settings.aaSorting = sort;
  		} );
  	} );
  	
  	
  	
  	_api_register( 'search()', function ( input, regex, smart, caseInsen ) {
  		var ctx = this.context;
  	
  		if ( input === undefined$1 ) {
  			// get
  			return ctx.length !== 0 ?
  				ctx[0].oPreviousSearch.sSearch :
  				undefined$1;
  		}
  	
  		// set
  		return this.iterator( 'table', function ( settings ) {
  			if ( ! settings.oFeatures.bFilter ) {
  				return;
  			}
  	
  			_fnFilterComplete( settings, $.extend( {}, settings.oPreviousSearch, {
  				"sSearch": input+"",
  				"bRegex":  regex === null ? false : regex,
  				"bSmart":  smart === null ? true  : smart,
  				"bCaseInsensitive": caseInsen === null ? true : caseInsen
  			} ), 1 );
  		} );
  	} );
  	
  	
  	_api_registerPlural(
  		'columns().search()',
  		'column().search()',
  		function ( input, regex, smart, caseInsen ) {
  			return this.iterator( 'column', function ( settings, column ) {
  				var preSearch = settings.aoPreSearchCols;
  	
  				if ( input === undefined$1 ) {
  					// get
  					return preSearch[ column ].sSearch;
  				}
  	
  				// set
  				if ( ! settings.oFeatures.bFilter ) {
  					return;
  				}
  	
  				$.extend( preSearch[ column ], {
  					"sSearch": input+"",
  					"bRegex":  regex === null ? false : regex,
  					"bSmart":  smart === null ? true  : smart,
  					"bCaseInsensitive": caseInsen === null ? true : caseInsen
  				} );
  	
  				_fnFilterComplete( settings, settings.oPreviousSearch, 1 );
  			} );
  		}
  	);
  	
  	/*
  	 * State API methods
  	 */
  	
  	_api_register( 'state()', function () {
  		return this.context.length ?
  			this.context[0].oSavedState :
  			null;
  	} );
  	
  	
  	_api_register( 'state.clear()', function () {
  		return this.iterator( 'table', function ( settings ) {
  			// Save an empty object
  			settings.fnStateSaveCallback.call( settings.oInstance, settings, {} );
  		} );
  	} );
  	
  	
  	_api_register( 'state.loaded()', function () {
  		return this.context.length ?
  			this.context[0].oLoadedState :
  			null;
  	} );
  	
  	
  	_api_register( 'state.save()', function () {
  		return this.iterator( 'table', function ( settings ) {
  			_fnSaveState( settings );
  		} );
  	} );
  	
  	
  	
  	/**
  	 * Provide a common method for plug-ins to check the version of DataTables being
  	 * used, in order to ensure compatibility.
  	 *
  	 *  @param {string} version Version string to check for, in the format "X.Y.Z".
  	 *    Note that the formats "X" and "X.Y" are also acceptable.
  	 *  @returns {boolean} true if this version of DataTables is greater or equal to
  	 *    the required version, or false if this version of DataTales is not
  	 *    suitable
  	 *  @static
  	 *  @dtopt API-Static
  	 *
  	 *  @example
  	 *    alert( $.fn.dataTable.versionCheck( '1.9.0' ) );
  	 */
  	DataTable.versionCheck = DataTable.fnVersionCheck = function( version )
  	{
  		var aThis = DataTable.version.split('.');
  		var aThat = version.split('.');
  		var iThis, iThat;
  	
  		for ( var i=0, iLen=aThat.length ; i<iLen ; i++ ) {
  			iThis = parseInt( aThis[i], 10 ) || 0;
  			iThat = parseInt( aThat[i], 10 ) || 0;
  	
  			// Parts are the same, keep comparing
  			if (iThis === iThat) {
  				continue;
  			}
  	
  			// Parts are different, return immediately
  			return iThis > iThat;
  		}
  	
  		return true;
  	};
  	
  	
  	/**
  	 * Check if a `<table>` node is a DataTable table already or not.
  	 *
  	 *  @param {node|jquery|string} table Table node, jQuery object or jQuery
  	 *      selector for the table to test. Note that if more than more than one
  	 *      table is passed on, only the first will be checked
  	 *  @returns {boolean} true the table given is a DataTable, or false otherwise
  	 *  @static
  	 *  @dtopt API-Static
  	 *
  	 *  @example
  	 *    if ( ! $.fn.DataTable.isDataTable( '#example' ) ) {
  	 *      $('#example').dataTable();
  	 *    }
  	 */
  	DataTable.isDataTable = DataTable.fnIsDataTable = function ( table )
  	{
  		var t = $(table).get(0);
  		var is = false;
  	
  		if ( table instanceof DataTable.Api ) {
  			return true;
  		}
  	
  		$.each( DataTable.settings, function (i, o) {
  			var head = o.nScrollHead ? $('table', o.nScrollHead)[0] : null;
  			var foot = o.nScrollFoot ? $('table', o.nScrollFoot)[0] : null;
  	
  			if ( o.nTable === t || head === t || foot === t ) {
  				is = true;
  			}
  		} );
  	
  		return is;
  	};
  	
  	
  	/**
  	 * Get all DataTable tables that have been initialised - optionally you can
  	 * select to get only currently visible tables.
  	 *
  	 *  @param {boolean} [visible=false] Flag to indicate if you want all (default)
  	 *    or visible tables only.
  	 *  @returns {array} Array of `table` nodes (not DataTable instances) which are
  	 *    DataTables
  	 *  @static
  	 *  @dtopt API-Static
  	 *
  	 *  @example
  	 *    $.each( $.fn.dataTable.tables(true), function () {
  	 *      $(table).DataTable().columns.adjust();
  	 *    } );
  	 */
  	DataTable.tables = DataTable.fnTables = function ( visible )
  	{
  		var api = false;
  	
  		if ( $.isPlainObject( visible ) ) {
  			api = visible.api;
  			visible = visible.visible;
  		}
  	
  		var a = $.map( DataTable.settings, function (o) {
  			if ( !visible || (visible && $(o.nTable).is(':visible')) ) {
  				return o.nTable;
  			}
  		} );
  	
  		return api ?
  			new _Api( a ) :
  			a;
  	};
  	
  	
  	/**
  	 * Convert from camel case parameters to Hungarian notation. This is made public
  	 * for the extensions to provide the same ability as DataTables core to accept
  	 * either the 1.9 style Hungarian notation, or the 1.10+ style camelCase
  	 * parameters.
  	 *
  	 *  @param {object} src The model object which holds all parameters that can be
  	 *    mapped.
  	 *  @param {object} user The object to convert from camel case to Hungarian.
  	 *  @param {boolean} force When set to `true`, properties which already have a
  	 *    Hungarian value in the `user` object will be overwritten. Otherwise they
  	 *    won't be.
  	 */
  	DataTable.camelToHungarian = _fnCamelToHungarian;
  	
  	
  	
  	/**
  	 *
  	 */
  	_api_register( '$()', function ( selector, opts ) {
  		var
  			rows   = this.rows( opts ).nodes(), // Get all rows
  			jqRows = $(rows);
  	
  		return $( [].concat(
  			jqRows.filter( selector ).toArray(),
  			jqRows.find( selector ).toArray()
  		) );
  	} );
  	
  	
  	// jQuery functions to operate on the tables
  	$.each( [ 'on', 'one', 'off' ], function (i, key) {
  		_api_register( key+'()', function ( /* event, handler */ ) {
  			var args = Array.prototype.slice.call(arguments);
  	
  			// Add the `dt` namespace automatically if it isn't already present
  			args[0] = $.map( args[0].split( /\s/ ), function ( e ) {
  				return ! e.match(/\.dt\b/) ?
  					e+'.dt' :
  					e;
  				} ).join( ' ' );
  	
  			var inst = $( this.tables().nodes() );
  			inst[key].apply( inst, args );
  			return this;
  		} );
  	} );
  	
  	
  	_api_register( 'clear()', function () {
  		return this.iterator( 'table', function ( settings ) {
  			_fnClearTable( settings );
  		} );
  	} );
  	
  	
  	_api_register( 'settings()', function () {
  		return new _Api( this.context, this.context );
  	} );
  	
  	
  	_api_register( 'init()', function () {
  		var ctx = this.context;
  		return ctx.length ? ctx[0].oInit : null;
  	} );
  	
  	
  	_api_register( 'data()', function () {
  		return this.iterator( 'table', function ( settings ) {
  			return _pluck( settings.aoData, '_aData' );
  		} ).flatten();
  	} );
  	
  	
  	_api_register( 'destroy()', function ( remove ) {
  		remove = remove || false;
  	
  		return this.iterator( 'table', function ( settings ) {
  			var orig      = settings.nTableWrapper.parentNode;
  			var classes   = settings.oClasses;
  			var table     = settings.nTable;
  			var tbody     = settings.nTBody;
  			var thead     = settings.nTHead;
  			var tfoot     = settings.nTFoot;
  			var jqTable   = $(table);
  			var jqTbody   = $(tbody);
  			var jqWrapper = $(settings.nTableWrapper);
  			var rows      = $.map( settings.aoData, function (r) { return r.nTr; } );
  			var ien;
  	
  			// Flag to note that the table is currently being destroyed - no action
  			// should be taken
  			settings.bDestroying = true;
  	
  			// Fire off the destroy callbacks for plug-ins etc
  			_fnCallbackFire( settings, "aoDestroyCallback", "destroy", [settings] );
  	
  			// If not being removed from the document, make all columns visible
  			if ( ! remove ) {
  				new _Api( settings ).columns().visible( true );
  			}
  	
  			// Blitz all `DT` namespaced events (these are internal events, the
  			// lowercase, `dt` events are user subscribed and they are responsible
  			// for removing them
  			jqWrapper.off('.DT').find(':not(tbody *)').off('.DT');
  			$(window).off('.DT-'+settings.sInstance);
  	
  			// When scrolling we had to break the table up - restore it
  			if ( table != thead.parentNode ) {
  				jqTable.children('thead').detach();
  				jqTable.append( thead );
  			}
  	
  			if ( tfoot && table != tfoot.parentNode ) {
  				jqTable.children('tfoot').detach();
  				jqTable.append( tfoot );
  			}
  	
  			settings.aaSorting = [];
  			settings.aaSortingFixed = [];
  			_fnSortingClasses( settings );
  	
  			$( rows ).removeClass( settings.asStripeClasses.join(' ') );
  	
  			$('th, td', thead).removeClass( classes.sSortable+' '+
  				classes.sSortableAsc+' '+classes.sSortableDesc+' '+classes.sSortableNone
  			);
  	
  			// Add the TR elements back into the table in their original order
  			jqTbody.children().detach();
  			jqTbody.append( rows );
  	
  			// Remove the DataTables generated nodes, events and classes
  			var removedMethod = remove ? 'remove' : 'detach';
  			jqTable[ removedMethod ]();
  			jqWrapper[ removedMethod ]();
  	
  			// If we need to reattach the table to the document
  			if ( ! remove && orig ) {
  				// insertBefore acts like appendChild if !arg[1]
  				orig.insertBefore( table, settings.nTableReinsertBefore );
  	
  				// Restore the width of the original table - was read from the style property,
  				// so we can restore directly to that
  				jqTable
  					.css( 'width', settings.sDestroyWidth )
  					.removeClass( classes.sTable );
  	
  				// If the were originally stripe classes - then we add them back here.
  				// Note this is not fool proof (for example if not all rows had stripe
  				// classes - but it's a good effort without getting carried away
  				ien = settings.asDestroyStripes.length;
  	
  				if ( ien ) {
  					jqTbody.children().each( function (i) {
  						$(this).addClass( settings.asDestroyStripes[i % ien] );
  					} );
  				}
  			}
  	
  			/* Remove the settings object from the settings array */
  			var idx = $.inArray( settings, DataTable.settings );
  			if ( idx !== -1 ) {
  				DataTable.settings.splice( idx, 1 );
  			}
  		} );
  	} );
  	
  	
  	// Add the `every()` method for rows, columns and cells in a compact form
  	$.each( [ 'column', 'row', 'cell' ], function ( i, type ) {
  		_api_register( type+'s().every()', function ( fn ) {
  			var opts = this.selector.opts;
  			var api = this;
  	
  			return this.iterator( type, function ( settings, arg1, arg2, arg3, arg4 ) {
  				// Rows and columns:
  				//  arg1 - index
  				//  arg2 - table counter
  				//  arg3 - loop counter
  				//  arg4 - undefined
  				// Cells:
  				//  arg1 - row index
  				//  arg2 - column index
  				//  arg3 - table counter
  				//  arg4 - loop counter
  				fn.call(
  					api[ type ](
  						arg1,
  						type==='cell' ? arg2 : opts,
  						type==='cell' ? opts : undefined$1
  					),
  					arg1, arg2, arg3, arg4
  				);
  			} );
  		} );
  	} );
  	
  	
  	// i18n method for extensions to be able to use the language object from the
  	// DataTable
  	_api_register( 'i18n()', function ( token, def, plural ) {
  		var ctx = this.context[0];
  		var resolved = _fnGetObjectDataFn( token )( ctx.oLanguage );
  	
  		if ( resolved === undefined$1 ) {
  			resolved = def;
  		}
  	
  		if ( plural !== undefined$1 && $.isPlainObject( resolved ) ) {
  			resolved = resolved[ plural ] !== undefined$1 ?
  				resolved[ plural ] :
  				resolved._;
  		}
  	
  		return resolved.replace( '%d', plural ); // nb: plural might be undefined,
  	} );
  	/**
  	 * Version string for plug-ins to check compatibility. Allowed format is
  	 * `a.b.c-d` where: a:int, b:int, c:int, d:string(dev|beta|alpha). `d` is used
  	 * only for non-release builds. See http://semver.org/ for more information.
  	 *  @member
  	 *  @type string
  	 *  @default Version number
  	 */
  	DataTable.version = "1.10.21";

  	/**
  	 * Private data store, containing all of the settings objects that are
  	 * created for the tables on a given page.
  	 *
  	 * Note that the `DataTable.settings` object is aliased to
  	 * `jQuery.fn.dataTableExt` through which it may be accessed and
  	 * manipulated, or `jQuery.fn.dataTable.settings`.
  	 *  @member
  	 *  @type array
  	 *  @default []
  	 *  @private
  	 */
  	DataTable.settings = [];

  	/**
  	 * Object models container, for the various models that DataTables has
  	 * available to it. These models define the objects that are used to hold
  	 * the active state and configuration of the table.
  	 *  @namespace
  	 */
  	DataTable.models = {};
  	
  	
  	
  	/**
  	 * Template object for the way in which DataTables holds information about
  	 * search information for the global filter and individual column filters.
  	 *  @namespace
  	 */
  	DataTable.models.oSearch = {
  		/**
  		 * Flag to indicate if the filtering should be case insensitive or not
  		 *  @type boolean
  		 *  @default true
  		 */
  		"bCaseInsensitive": true,
  	
  		/**
  		 * Applied search term
  		 *  @type string
  		 *  @default <i>Empty string</i>
  		 */
  		"sSearch": "",
  	
  		/**
  		 * Flag to indicate if the search term should be interpreted as a
  		 * regular expression (true) or not (false) and therefore and special
  		 * regex characters escaped.
  		 *  @type boolean
  		 *  @default false
  		 */
  		"bRegex": false,
  	
  		/**
  		 * Flag to indicate if DataTables is to use its smart filtering or not.
  		 *  @type boolean
  		 *  @default true
  		 */
  		"bSmart": true
  	};
  	
  	
  	
  	
  	/**
  	 * Template object for the way in which DataTables holds information about
  	 * each individual row. This is the object format used for the settings
  	 * aoData array.
  	 *  @namespace
  	 */
  	DataTable.models.oRow = {
  		/**
  		 * TR element for the row
  		 *  @type node
  		 *  @default null
  		 */
  		"nTr": null,
  	
  		/**
  		 * Array of TD elements for each row. This is null until the row has been
  		 * created.
  		 *  @type array nodes
  		 *  @default []
  		 */
  		"anCells": null,
  	
  		/**
  		 * Data object from the original data source for the row. This is either
  		 * an array if using the traditional form of DataTables, or an object if
  		 * using mData options. The exact type will depend on the passed in
  		 * data from the data source, or will be an array if using DOM a data
  		 * source.
  		 *  @type array|object
  		 *  @default []
  		 */
  		"_aData": [],
  	
  		/**
  		 * Sorting data cache - this array is ostensibly the same length as the
  		 * number of columns (although each index is generated only as it is
  		 * needed), and holds the data that is used for sorting each column in the
  		 * row. We do this cache generation at the start of the sort in order that
  		 * the formatting of the sort data need be done only once for each cell
  		 * per sort. This array should not be read from or written to by anything
  		 * other than the master sorting methods.
  		 *  @type array
  		 *  @default null
  		 *  @private
  		 */
  		"_aSortData": null,
  	
  		/**
  		 * Per cell filtering data cache. As per the sort data cache, used to
  		 * increase the performance of the filtering in DataTables
  		 *  @type array
  		 *  @default null
  		 *  @private
  		 */
  		"_aFilterData": null,
  	
  		/**
  		 * Filtering data cache. This is the same as the cell filtering cache, but
  		 * in this case a string rather than an array. This is easily computed with
  		 * a join on `_aFilterData`, but is provided as a cache so the join isn't
  		 * needed on every search (memory traded for performance)
  		 *  @type array
  		 *  @default null
  		 *  @private
  		 */
  		"_sFilterRow": null,
  	
  		/**
  		 * Cache of the class name that DataTables has applied to the row, so we
  		 * can quickly look at this variable rather than needing to do a DOM check
  		 * on className for the nTr property.
  		 *  @type string
  		 *  @default <i>Empty string</i>
  		 *  @private
  		 */
  		"_sRowStripe": "",
  	
  		/**
  		 * Denote if the original data source was from the DOM, or the data source
  		 * object. This is used for invalidating data, so DataTables can
  		 * automatically read data from the original source, unless uninstructed
  		 * otherwise.
  		 *  @type string
  		 *  @default null
  		 *  @private
  		 */
  		"src": null,
  	
  		/**
  		 * Index in the aoData array. This saves an indexOf lookup when we have the
  		 * object, but want to know the index
  		 *  @type integer
  		 *  @default -1
  		 *  @private
  		 */
  		"idx": -1
  	};
  	
  	
  	/**
  	 * Template object for the column information object in DataTables. This object
  	 * is held in the settings aoColumns array and contains all the information that
  	 * DataTables needs about each individual column.
  	 *
  	 * Note that this object is related to {@link DataTable.defaults.column}
  	 * but this one is the internal data store for DataTables's cache of columns.
  	 * It should NOT be manipulated outside of DataTables. Any configuration should
  	 * be done through the initialisation options.
  	 *  @namespace
  	 */
  	DataTable.models.oColumn = {
  		/**
  		 * Column index. This could be worked out on-the-fly with $.inArray, but it
  		 * is faster to just hold it as a variable
  		 *  @type integer
  		 *  @default null
  		 */
  		"idx": null,
  	
  		/**
  		 * A list of the columns that sorting should occur on when this column
  		 * is sorted. That this property is an array allows multi-column sorting
  		 * to be defined for a column (for example first name / last name columns
  		 * would benefit from this). The values are integers pointing to the
  		 * columns to be sorted on (typically it will be a single integer pointing
  		 * at itself, but that doesn't need to be the case).
  		 *  @type array
  		 */
  		"aDataSort": null,
  	
  		/**
  		 * Define the sorting directions that are applied to the column, in sequence
  		 * as the column is repeatedly sorted upon - i.e. the first value is used
  		 * as the sorting direction when the column if first sorted (clicked on).
  		 * Sort it again (click again) and it will move on to the next index.
  		 * Repeat until loop.
  		 *  @type array
  		 */
  		"asSorting": null,
  	
  		/**
  		 * Flag to indicate if the column is searchable, and thus should be included
  		 * in the filtering or not.
  		 *  @type boolean
  		 */
  		"bSearchable": null,
  	
  		/**
  		 * Flag to indicate if the column is sortable or not.
  		 *  @type boolean
  		 */
  		"bSortable": null,
  	
  		/**
  		 * Flag to indicate if the column is currently visible in the table or not
  		 *  @type boolean
  		 */
  		"bVisible": null,
  	
  		/**
  		 * Store for manual type assignment using the `column.type` option. This
  		 * is held in store so we can manipulate the column's `sType` property.
  		 *  @type string
  		 *  @default null
  		 *  @private
  		 */
  		"_sManualType": null,
  	
  		/**
  		 * Flag to indicate if HTML5 data attributes should be used as the data
  		 * source for filtering or sorting. True is either are.
  		 *  @type boolean
  		 *  @default false
  		 *  @private
  		 */
  		"_bAttrSrc": false,
  	
  		/**
  		 * Developer definable function that is called whenever a cell is created (Ajax source,
  		 * etc) or processed for input (DOM source). This can be used as a compliment to mRender
  		 * allowing you to modify the DOM element (add background colour for example) when the
  		 * element is available.
  		 *  @type function
  		 *  @param {element} nTd The TD node that has been created
  		 *  @param {*} sData The Data for the cell
  		 *  @param {array|object} oData The data for the whole row
  		 *  @param {int} iRow The row index for the aoData data store
  		 *  @default null
  		 */
  		"fnCreatedCell": null,
  	
  		/**
  		 * Function to get data from a cell in a column. You should <b>never</b>
  		 * access data directly through _aData internally in DataTables - always use
  		 * the method attached to this property. It allows mData to function as
  		 * required. This function is automatically assigned by the column
  		 * initialisation method
  		 *  @type function
  		 *  @param {array|object} oData The data array/object for the array
  		 *    (i.e. aoData[]._aData)
  		 *  @param {string} sSpecific The specific data type you want to get -
  		 *    'display', 'type' 'filter' 'sort'
  		 *  @returns {*} The data for the cell from the given row's data
  		 *  @default null
  		 */
  		"fnGetData": null,
  	
  		/**
  		 * Function to set data for a cell in the column. You should <b>never</b>
  		 * set the data directly to _aData internally in DataTables - always use
  		 * this method. It allows mData to function as required. This function
  		 * is automatically assigned by the column initialisation method
  		 *  @type function
  		 *  @param {array|object} oData The data array/object for the array
  		 *    (i.e. aoData[]._aData)
  		 *  @param {*} sValue Value to set
  		 *  @default null
  		 */
  		"fnSetData": null,
  	
  		/**
  		 * Property to read the value for the cells in the column from the data
  		 * source array / object. If null, then the default content is used, if a
  		 * function is given then the return from the function is used.
  		 *  @type function|int|string|null
  		 *  @default null
  		 */
  		"mData": null,
  	
  		/**
  		 * Partner property to mData which is used (only when defined) to get
  		 * the data - i.e. it is basically the same as mData, but without the
  		 * 'set' option, and also the data fed to it is the result from mData.
  		 * This is the rendering method to match the data method of mData.
  		 *  @type function|int|string|null
  		 *  @default null
  		 */
  		"mRender": null,
  	
  		/**
  		 * Unique header TH/TD element for this column - this is what the sorting
  		 * listener is attached to (if sorting is enabled.)
  		 *  @type node
  		 *  @default null
  		 */
  		"nTh": null,
  	
  		/**
  		 * Unique footer TH/TD element for this column (if there is one). Not used
  		 * in DataTables as such, but can be used for plug-ins to reference the
  		 * footer for each column.
  		 *  @type node
  		 *  @default null
  		 */
  		"nTf": null,
  	
  		/**
  		 * The class to apply to all TD elements in the table's TBODY for the column
  		 *  @type string
  		 *  @default null
  		 */
  		"sClass": null,
  	
  		/**
  		 * When DataTables calculates the column widths to assign to each column,
  		 * it finds the longest string in each column and then constructs a
  		 * temporary table and reads the widths from that. The problem with this
  		 * is that "mmm" is much wider then "iiii", but the latter is a longer
  		 * string - thus the calculation can go wrong (doing it properly and putting
  		 * it into an DOM object and measuring that is horribly(!) slow). Thus as
  		 * a "work around" we provide this option. It will append its value to the
  		 * text that is found to be the longest string for the column - i.e. padding.
  		 *  @type string
  		 */
  		"sContentPadding": null,
  	
  		/**
  		 * Allows a default value to be given for a column's data, and will be used
  		 * whenever a null data source is encountered (this can be because mData
  		 * is set to null, or because the data source itself is null).
  		 *  @type string
  		 *  @default null
  		 */
  		"sDefaultContent": null,
  	
  		/**
  		 * Name for the column, allowing reference to the column by name as well as
  		 * by index (needs a lookup to work by name).
  		 *  @type string
  		 */
  		"sName": null,
  	
  		/**
  		 * Custom sorting data type - defines which of the available plug-ins in
  		 * afnSortData the custom sorting will use - if any is defined.
  		 *  @type string
  		 *  @default std
  		 */
  		"sSortDataType": 'std',
  	
  		/**
  		 * Class to be applied to the header element when sorting on this column
  		 *  @type string
  		 *  @default null
  		 */
  		"sSortingClass": null,
  	
  		/**
  		 * Class to be applied to the header element when sorting on this column -
  		 * when jQuery UI theming is used.
  		 *  @type string
  		 *  @default null
  		 */
  		"sSortingClassJUI": null,
  	
  		/**
  		 * Title of the column - what is seen in the TH element (nTh).
  		 *  @type string
  		 */
  		"sTitle": null,
  	
  		/**
  		 * Column sorting and filtering type
  		 *  @type string
  		 *  @default null
  		 */
  		"sType": null,
  	
  		/**
  		 * Width of the column
  		 *  @type string
  		 *  @default null
  		 */
  		"sWidth": null,
  	
  		/**
  		 * Width of the column when it was first "encountered"
  		 *  @type string
  		 *  @default null
  		 */
  		"sWidthOrig": null
  	};
  	
  	
  	/*
  	 * Developer note: The properties of the object below are given in Hungarian
  	 * notation, that was used as the interface for DataTables prior to v1.10, however
  	 * from v1.10 onwards the primary interface is camel case. In order to avoid
  	 * breaking backwards compatibility utterly with this change, the Hungarian
  	 * version is still, internally the primary interface, but is is not documented
  	 * - hence the @name tags in each doc comment. This allows a Javascript function
  	 * to create a map from Hungarian notation to camel case (going the other direction
  	 * would require each property to be listed, which would at around 3K to the size
  	 * of DataTables, while this method is about a 0.5K hit.
  	 *
  	 * Ultimately this does pave the way for Hungarian notation to be dropped
  	 * completely, but that is a massive amount of work and will break current
  	 * installs (therefore is on-hold until v2).
  	 */
  	
  	/**
  	 * Initialisation options that can be given to DataTables at initialisation
  	 * time.
  	 *  @namespace
  	 */
  	DataTable.defaults = {
  		/**
  		 * An array of data to use for the table, passed in at initialisation which
  		 * will be used in preference to any data which is already in the DOM. This is
  		 * particularly useful for constructing tables purely in Javascript, for
  		 * example with a custom Ajax call.
  		 *  @type array
  		 *  @default null
  		 *
  		 *  @dtopt Option
  		 *  @name DataTable.defaults.data
  		 *
  		 *  @example
  		 *    // Using a 2D array data source
  		 *    $(document).ready( function () {
  		 *      $('#example').dataTable( {
  		 *        "data": [
  		 *          ['Trident', 'Internet Explorer 4.0', 'Win 95+', 4, 'X'],
  		 *          ['Trident', 'Internet Explorer 5.0', 'Win 95+', 5, 'C'],
  		 *        ],
  		 *        "columns": [
  		 *          { "title": "Engine" },
  		 *          { "title": "Browser" },
  		 *          { "title": "Platform" },
  		 *          { "title": "Version" },
  		 *          { "title": "Grade" }
  		 *        ]
  		 *      } );
  		 *    } );
  		 *
  		 *  @example
  		 *    // Using an array of objects as a data source (`data`)
  		 *    $(document).ready( function () {
  		 *      $('#example').dataTable( {
  		 *        "data": [
  		 *          {
  		 *            "engine":   "Trident",
  		 *            "browser":  "Internet Explorer 4.0",
  		 *            "platform": "Win 95+",
  		 *            "version":  4,
  		 *            "grade":    "X"
  		 *          },
  		 *          {
  		 *            "engine":   "Trident",
  		 *            "browser":  "Internet Explorer 5.0",
  		 *            "platform": "Win 95+",
  		 *            "version":  5,
  		 *            "grade":    "C"
  		 *          }
  		 *        ],
  		 *        "columns": [
  		 *          { "title": "Engine",   "data": "engine" },
  		 *          { "title": "Browser",  "data": "browser" },
  		 *          { "title": "Platform", "data": "platform" },
  		 *          { "title": "Version",  "data": "version" },
  		 *          { "title": "Grade",    "data": "grade" }
  		 *        ]
  		 *      } );
  		 *    } );
  		 */
  		"aaData": null,
  	
  	
  		/**
  		 * If ordering is enabled, then DataTables will perform a first pass sort on
  		 * initialisation. You can define which column(s) the sort is performed
  		 * upon, and the sorting direction, with this variable. The `sorting` array
  		 * should contain an array for each column to be sorted initially containing
  		 * the column's index and a direction string ('asc' or 'desc').
  		 *  @type array
  		 *  @default [[0,'asc']]
  		 *
  		 *  @dtopt Option
  		 *  @name DataTable.defaults.order
  		 *
  		 *  @example
  		 *    // Sort by 3rd column first, and then 4th column
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "order": [[2,'asc'], [3,'desc']]
  		 *      } );
  		 *    } );
  		 *
  		 *    // No initial sorting
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "order": []
  		 *      } );
  		 *    } );
  		 */
  		"aaSorting": [[0,'asc']],
  	
  	
  		/**
  		 * This parameter is basically identical to the `sorting` parameter, but
  		 * cannot be overridden by user interaction with the table. What this means
  		 * is that you could have a column (visible or hidden) which the sorting
  		 * will always be forced on first - any sorting after that (from the user)
  		 * will then be performed as required. This can be useful for grouping rows
  		 * together.
  		 *  @type array
  		 *  @default null
  		 *
  		 *  @dtopt Option
  		 *  @name DataTable.defaults.orderFixed
  		 *
  		 *  @example
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "orderFixed": [[0,'asc']]
  		 *      } );
  		 *    } )
  		 */
  		"aaSortingFixed": [],
  	
  	
  		/**
  		 * DataTables can be instructed to load data to display in the table from a
  		 * Ajax source. This option defines how that Ajax call is made and where to.
  		 *
  		 * The `ajax` property has three different modes of operation, depending on
  		 * how it is defined. These are:
  		 *
  		 * * `string` - Set the URL from where the data should be loaded from.
  		 * * `object` - Define properties for `jQuery.ajax`.
  		 * * `function` - Custom data get function
  		 *
  		 * `string`
  		 * --------
  		 *
  		 * As a string, the `ajax` property simply defines the URL from which
  		 * DataTables will load data.
  		 *
  		 * `object`
  		 * --------
  		 *
  		 * As an object, the parameters in the object are passed to
  		 * [jQuery.ajax](http://api.jquery.com/jQuery.ajax/) allowing fine control
  		 * of the Ajax request. DataTables has a number of default parameters which
  		 * you can override using this option. Please refer to the jQuery
  		 * documentation for a full description of the options available, although
  		 * the following parameters provide additional options in DataTables or
  		 * require special consideration:
  		 *
  		 * * `data` - As with jQuery, `data` can be provided as an object, but it
  		 *   can also be used as a function to manipulate the data DataTables sends
  		 *   to the server. The function takes a single parameter, an object of
  		 *   parameters with the values that DataTables has readied for sending. An
  		 *   object may be returned which will be merged into the DataTables
  		 *   defaults, or you can add the items to the object that was passed in and
  		 *   not return anything from the function. This supersedes `fnServerParams`
  		 *   from DataTables 1.9-.
  		 *
  		 * * `dataSrc` - By default DataTables will look for the property `data` (or
  		 *   `aaData` for compatibility with DataTables 1.9-) when obtaining data
  		 *   from an Ajax source or for server-side processing - this parameter
  		 *   allows that property to be changed. You can use Javascript dotted
  		 *   object notation to get a data source for multiple levels of nesting, or
  		 *   it my be used as a function. As a function it takes a single parameter,
  		 *   the JSON returned from the server, which can be manipulated as
  		 *   required, with the returned value being that used by DataTables as the
  		 *   data source for the table. This supersedes `sAjaxDataProp` from
  		 *   DataTables 1.9-.
  		 *
  		 * * `success` - Should not be overridden it is used internally in
  		 *   DataTables. To manipulate / transform the data returned by the server
  		 *   use `ajax.dataSrc`, or use `ajax` as a function (see below).
  		 *
  		 * `function`
  		 * ----------
  		 *
  		 * As a function, making the Ajax call is left up to yourself allowing
  		 * complete control of the Ajax request. Indeed, if desired, a method other
  		 * than Ajax could be used to obtain the required data, such as Web storage
  		 * or an AIR database.
  		 *
  		 * The function is given four parameters and no return is required. The
  		 * parameters are:
  		 *
  		 * 1. _object_ - Data to send to the server
  		 * 2. _function_ - Callback function that must be executed when the required
  		 *    data has been obtained. That data should be passed into the callback
  		 *    as the only parameter
  		 * 3. _object_ - DataTables settings object for the table
  		 *
  		 * Note that this supersedes `fnServerData` from DataTables 1.9-.
  		 *
  		 *  @type string|object|function
  		 *  @default null
  		 *
  		 *  @dtopt Option
  		 *  @name DataTable.defaults.ajax
  		 *  @since 1.10.0
  		 *
  		 * @example
  		 *   // Get JSON data from a file via Ajax.
  		 *   // Note DataTables expects data in the form `{ data: [ ...data... ] }` by default).
  		 *   $('#example').dataTable( {
  		 *     "ajax": "data.json"
  		 *   } );
  		 *
  		 * @example
  		 *   // Get JSON data from a file via Ajax, using `dataSrc` to change
  		 *   // `data` to `tableData` (i.e. `{ tableData: [ ...data... ] }`)
  		 *   $('#example').dataTable( {
  		 *     "ajax": {
  		 *       "url": "data.json",
  		 *       "dataSrc": "tableData"
  		 *     }
  		 *   } );
  		 *
  		 * @example
  		 *   // Get JSON data from a file via Ajax, using `dataSrc` to read data
  		 *   // from a plain array rather than an array in an object
  		 *   $('#example').dataTable( {
  		 *     "ajax": {
  		 *       "url": "data.json",
  		 *       "dataSrc": ""
  		 *     }
  		 *   } );
  		 *
  		 * @example
  		 *   // Manipulate the data returned from the server - add a link to data
  		 *   // (note this can, should, be done using `render` for the column - this
  		 *   // is just a simple example of how the data can be manipulated).
  		 *   $('#example').dataTable( {
  		 *     "ajax": {
  		 *       "url": "data.json",
  		 *       "dataSrc": function ( json ) {
  		 *         for ( var i=0, ien=json.length ; i<ien ; i++ ) {
  		 *           json[i][0] = '<a href="/message/'+json[i][0]+'>View message</a>';
  		 *         }
  		 *         return json;
  		 *       }
  		 *     }
  		 *   } );
  		 *
  		 * @example
  		 *   // Add data to the request
  		 *   $('#example').dataTable( {
  		 *     "ajax": {
  		 *       "url": "data.json",
  		 *       "data": function ( d ) {
  		 *         return {
  		 *           "extra_search": $('#extra').val()
  		 *         };
  		 *       }
  		 *     }
  		 *   } );
  		 *
  		 * @example
  		 *   // Send request as POST
  		 *   $('#example').dataTable( {
  		 *     "ajax": {
  		 *       "url": "data.json",
  		 *       "type": "POST"
  		 *     }
  		 *   } );
  		 *
  		 * @example
  		 *   // Get the data from localStorage (could interface with a form for
  		 *   // adding, editing and removing rows).
  		 *   $('#example').dataTable( {
  		 *     "ajax": function (data, callback, settings) {
  		 *       callback(
  		 *         JSON.parse( localStorage.getItem('dataTablesData') )
  		 *       );
  		 *     }
  		 *   } );
  		 */
  		"ajax": null,
  	
  	
  		/**
  		 * This parameter allows you to readily specify the entries in the length drop
  		 * down menu that DataTables shows when pagination is enabled. It can be
  		 * either a 1D array of options which will be used for both the displayed
  		 * option and the value, or a 2D array which will use the array in the first
  		 * position as the value, and the array in the second position as the
  		 * displayed options (useful for language strings such as 'All').
  		 *
  		 * Note that the `pageLength` property will be automatically set to the
  		 * first value given in this array, unless `pageLength` is also provided.
  		 *  @type array
  		 *  @default [ 10, 25, 50, 100 ]
  		 *
  		 *  @dtopt Option
  		 *  @name DataTable.defaults.lengthMenu
  		 *
  		 *  @example
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "lengthMenu": [[10, 25, 50, -1], [10, 25, 50, "All"]]
  		 *      } );
  		 *    } );
  		 */
  		"aLengthMenu": [ 10, 25, 50, 100 ],
  	
  	
  		/**
  		 * The `columns` option in the initialisation parameter allows you to define
  		 * details about the way individual columns behave. For a full list of
  		 * column options that can be set, please see
  		 * {@link DataTable.defaults.column}. Note that if you use `columns` to
  		 * define your columns, you must have an entry in the array for every single
  		 * column that you have in your table (these can be null if you don't which
  		 * to specify any options).
  		 *  @member
  		 *
  		 *  @name DataTable.defaults.column
  		 */
  		"aoColumns": null,
  	
  		/**
  		 * Very similar to `columns`, `columnDefs` allows you to target a specific
  		 * column, multiple columns, or all columns, using the `targets` property of
  		 * each object in the array. This allows great flexibility when creating
  		 * tables, as the `columnDefs` arrays can be of any length, targeting the
  		 * columns you specifically want. `columnDefs` may use any of the column
  		 * options available: {@link DataTable.defaults.column}, but it _must_
  		 * have `targets` defined in each object in the array. Values in the `targets`
  		 * array may be:
  		 *   <ul>
  		 *     <li>a string - class name will be matched on the TH for the column</li>
  		 *     <li>0 or a positive integer - column index counting from the left</li>
  		 *     <li>a negative integer - column index counting from the right</li>
  		 *     <li>the string "_all" - all columns (i.e. assign a default)</li>
  		 *   </ul>
  		 *  @member
  		 *
  		 *  @name DataTable.defaults.columnDefs
  		 */
  		"aoColumnDefs": null,
  	
  	
  		/**
  		 * Basically the same as `search`, this parameter defines the individual column
  		 * filtering state at initialisation time. The array must be of the same size
  		 * as the number of columns, and each element be an object with the parameters
  		 * `search` and `escapeRegex` (the latter is optional). 'null' is also
  		 * accepted and the default will be used.
  		 *  @type array
  		 *  @default []
  		 *
  		 *  @dtopt Option
  		 *  @name DataTable.defaults.searchCols
  		 *
  		 *  @example
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "searchCols": [
  		 *          null,
  		 *          { "search": "My filter" },
  		 *          null,
  		 *          { "search": "^[0-9]", "escapeRegex": false }
  		 *        ]
  		 *      } );
  		 *    } )
  		 */
  		"aoSearchCols": [],
  	
  	
  		/**
  		 * An array of CSS classes that should be applied to displayed rows. This
  		 * array may be of any length, and DataTables will apply each class
  		 * sequentially, looping when required.
  		 *  @type array
  		 *  @default null <i>Will take the values determined by the `oClasses.stripe*`
  		 *    options</i>
  		 *
  		 *  @dtopt Option
  		 *  @name DataTable.defaults.stripeClasses
  		 *
  		 *  @example
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "stripeClasses": [ 'strip1', 'strip2', 'strip3' ]
  		 *      } );
  		 *    } )
  		 */
  		"asStripeClasses": null,
  	
  	
  		/**
  		 * Enable or disable automatic column width calculation. This can be disabled
  		 * as an optimisation (it takes some time to calculate the widths) if the
  		 * tables widths are passed in using `columns`.
  		 *  @type boolean
  		 *  @default true
  		 *
  		 *  @dtopt Features
  		 *  @name DataTable.defaults.autoWidth
  		 *
  		 *  @example
  		 *    $(document).ready( function () {
  		 *      $('#example').dataTable( {
  		 *        "autoWidth": false
  		 *      } );
  		 *    } );
  		 */
  		"bAutoWidth": true,
  	
  	
  		/**
  		 * Deferred rendering can provide DataTables with a huge speed boost when you
  		 * are using an Ajax or JS data source for the table. This option, when set to
  		 * true, will cause DataTables to defer the creation of the table elements for
  		 * each row until they are needed for a draw - saving a significant amount of
  		 * time.
  		 *  @type boolean
  		 *  @default false
  		 *
  		 *  @dtopt Features
  		 *  @name DataTable.defaults.deferRender
  		 *
  		 *  @example
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "ajax": "sources/arrays.txt",
  		 *        "deferRender": true
  		 *      } );
  		 *    } );
  		 */
  		"bDeferRender": false,
  	
  	
  		/**
  		 * Replace a DataTable which matches the given selector and replace it with
  		 * one which has the properties of the new initialisation object passed. If no
  		 * table matches the selector, then the new DataTable will be constructed as
  		 * per normal.
  		 *  @type boolean
  		 *  @default false
  		 *
  		 *  @dtopt Options
  		 *  @name DataTable.defaults.destroy
  		 *
  		 *  @example
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "srollY": "200px",
  		 *        "paginate": false
  		 *      } );
  		 *
  		 *      // Some time later....
  		 *      $('#example').dataTable( {
  		 *        "filter": false,
  		 *        "destroy": true
  		 *      } );
  		 *    } );
  		 */
  		"bDestroy": false,
  	
  	
  		/**
  		 * Enable or disable filtering of data. Filtering in DataTables is "smart" in
  		 * that it allows the end user to input multiple words (space separated) and
  		 * will match a row containing those words, even if not in the order that was
  		 * specified (this allow matching across multiple columns). Note that if you
  		 * wish to use filtering in DataTables this must remain 'true' - to remove the
  		 * default filtering input box and retain filtering abilities, please use
  		 * {@link DataTable.defaults.dom}.
  		 *  @type boolean
  		 *  @default true
  		 *
  		 *  @dtopt Features
  		 *  @name DataTable.defaults.searching
  		 *
  		 *  @example
  		 *    $(document).ready( function () {
  		 *      $('#example').dataTable( {
  		 *        "searching": false
  		 *      } );
  		 *    } );
  		 */
  		"bFilter": true,
  	
  	
  		/**
  		 * Enable or disable the table information display. This shows information
  		 * about the data that is currently visible on the page, including information
  		 * about filtered data if that action is being performed.
  		 *  @type boolean
  		 *  @default true
  		 *
  		 *  @dtopt Features
  		 *  @name DataTable.defaults.info
  		 *
  		 *  @example
  		 *    $(document).ready( function () {
  		 *      $('#example').dataTable( {
  		 *        "info": false
  		 *      } );
  		 *    } );
  		 */
  		"bInfo": true,
  	
  	
  		/**
  		 * Allows the end user to select the size of a formatted page from a select
  		 * menu (sizes are 10, 25, 50 and 100). Requires pagination (`paginate`).
  		 *  @type boolean
  		 *  @default true
  		 *
  		 *  @dtopt Features
  		 *  @name DataTable.defaults.lengthChange
  		 *
  		 *  @example
  		 *    $(document).ready( function () {
  		 *      $('#example').dataTable( {
  		 *        "lengthChange": false
  		 *      } );
  		 *    } );
  		 */
  		"bLengthChange": true,
  	
  	
  		/**
  		 * Enable or disable pagination.
  		 *  @type boolean
  		 *  @default true
  		 *
  		 *  @dtopt Features
  		 *  @name DataTable.defaults.paging
  		 *
  		 *  @example
  		 *    $(document).ready( function () {
  		 *      $('#example').dataTable( {
  		 *        "paging": false
  		 *      } );
  		 *    } );
  		 */
  		"bPaginate": true,
  	
  	
  		/**
  		 * Enable or disable the display of a 'processing' indicator when the table is
  		 * being processed (e.g. a sort). This is particularly useful for tables with
  		 * large amounts of data where it can take a noticeable amount of time to sort
  		 * the entries.
  		 *  @type boolean
  		 *  @default false
  		 *
  		 *  @dtopt Features
  		 *  @name DataTable.defaults.processing
  		 *
  		 *  @example
  		 *    $(document).ready( function () {
  		 *      $('#example').dataTable( {
  		 *        "processing": true
  		 *      } );
  		 *    } );
  		 */
  		"bProcessing": false,
  	
  	
  		/**
  		 * Retrieve the DataTables object for the given selector. Note that if the
  		 * table has already been initialised, this parameter will cause DataTables
  		 * to simply return the object that has already been set up - it will not take
  		 * account of any changes you might have made to the initialisation object
  		 * passed to DataTables (setting this parameter to true is an acknowledgement
  		 * that you understand this). `destroy` can be used to reinitialise a table if
  		 * you need.
  		 *  @type boolean
  		 *  @default false
  		 *
  		 *  @dtopt Options
  		 *  @name DataTable.defaults.retrieve
  		 *
  		 *  @example
  		 *    $(document).ready( function() {
  		 *      initTable();
  		 *      tableActions();
  		 *    } );
  		 *
  		 *    function initTable ()
  		 *    {
  		 *      return $('#example').dataTable( {
  		 *        "scrollY": "200px",
  		 *        "paginate": false,
  		 *        "retrieve": true
  		 *      } );
  		 *    }
  		 *
  		 *    function tableActions ()
  		 *    {
  		 *      var table = initTable();
  		 *      // perform API operations with oTable
  		 *    }
  		 */
  		"bRetrieve": false,
  	
  	
  		/**
  		 * When vertical (y) scrolling is enabled, DataTables will force the height of
  		 * the table's viewport to the given height at all times (useful for layout).
  		 * However, this can look odd when filtering data down to a small data set,
  		 * and the footer is left "floating" further down. This parameter (when
  		 * enabled) will cause DataTables to collapse the table's viewport down when
  		 * the result set will fit within the given Y height.
  		 *  @type boolean
  		 *  @default false
  		 *
  		 *  @dtopt Options
  		 *  @name DataTable.defaults.scrollCollapse
  		 *
  		 *  @example
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "scrollY": "200",
  		 *        "scrollCollapse": true
  		 *      } );
  		 *    } );
  		 */
  		"bScrollCollapse": false,
  	
  	
  		/**
  		 * Configure DataTables to use server-side processing. Note that the
  		 * `ajax` parameter must also be given in order to give DataTables a
  		 * source to obtain the required data for each draw.
  		 *  @type boolean
  		 *  @default false
  		 *
  		 *  @dtopt Features
  		 *  @dtopt Server-side
  		 *  @name DataTable.defaults.serverSide
  		 *
  		 *  @example
  		 *    $(document).ready( function () {
  		 *      $('#example').dataTable( {
  		 *        "serverSide": true,
  		 *        "ajax": "xhr.php"
  		 *      } );
  		 *    } );
  		 */
  		"bServerSide": false,
  	
  	
  		/**
  		 * Enable or disable sorting of columns. Sorting of individual columns can be
  		 * disabled by the `sortable` option for each column.
  		 *  @type boolean
  		 *  @default true
  		 *
  		 *  @dtopt Features
  		 *  @name DataTable.defaults.ordering
  		 *
  		 *  @example
  		 *    $(document).ready( function () {
  		 *      $('#example').dataTable( {
  		 *        "ordering": false
  		 *      } );
  		 *    } );
  		 */
  		"bSort": true,
  	
  	
  		/**
  		 * Enable or display DataTables' ability to sort multiple columns at the
  		 * same time (activated by shift-click by the user).
  		 *  @type boolean
  		 *  @default true
  		 *
  		 *  @dtopt Options
  		 *  @name DataTable.defaults.orderMulti
  		 *
  		 *  @example
  		 *    // Disable multiple column sorting ability
  		 *    $(document).ready( function () {
  		 *      $('#example').dataTable( {
  		 *        "orderMulti": false
  		 *      } );
  		 *    } );
  		 */
  		"bSortMulti": true,
  	
  	
  		/**
  		 * Allows control over whether DataTables should use the top (true) unique
  		 * cell that is found for a single column, or the bottom (false - default).
  		 * This is useful when using complex headers.
  		 *  @type boolean
  		 *  @default false
  		 *
  		 *  @dtopt Options
  		 *  @name DataTable.defaults.orderCellsTop
  		 *
  		 *  @example
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "orderCellsTop": true
  		 *      } );
  		 *    } );
  		 */
  		"bSortCellsTop": false,
  	
  	
  		/**
  		 * Enable or disable the addition of the classes `sorting\_1`, `sorting\_2` and
  		 * `sorting\_3` to the columns which are currently being sorted on. This is
  		 * presented as a feature switch as it can increase processing time (while
  		 * classes are removed and added) so for large data sets you might want to
  		 * turn this off.
  		 *  @type boolean
  		 *  @default true
  		 *
  		 *  @dtopt Features
  		 *  @name DataTable.defaults.orderClasses
  		 *
  		 *  @example
  		 *    $(document).ready( function () {
  		 *      $('#example').dataTable( {
  		 *        "orderClasses": false
  		 *      } );
  		 *    } );
  		 */
  		"bSortClasses": true,
  	
  	
  		/**
  		 * Enable or disable state saving. When enabled HTML5 `localStorage` will be
  		 * used to save table display information such as pagination information,
  		 * display length, filtering and sorting. As such when the end user reloads
  		 * the page the display display will match what thy had previously set up.
  		 *
  		 * Due to the use of `localStorage` the default state saving is not supported
  		 * in IE6 or 7. If state saving is required in those browsers, use
  		 * `stateSaveCallback` to provide a storage solution such as cookies.
  		 *  @type boolean
  		 *  @default false
  		 *
  		 *  @dtopt Features
  		 *  @name DataTable.defaults.stateSave
  		 *
  		 *  @example
  		 *    $(document).ready( function () {
  		 *      $('#example').dataTable( {
  		 *        "stateSave": true
  		 *      } );
  		 *    } );
  		 */
  		"bStateSave": false,
  	
  	
  		/**
  		 * This function is called when a TR element is created (and all TD child
  		 * elements have been inserted), or registered if using a DOM source, allowing
  		 * manipulation of the TR element (adding classes etc).
  		 *  @type function
  		 *  @param {node} row "TR" element for the current row
  		 *  @param {array} data Raw data array for this row
  		 *  @param {int} dataIndex The index of this row in the internal aoData array
  		 *
  		 *  @dtopt Callbacks
  		 *  @name DataTable.defaults.createdRow
  		 *
  		 *  @example
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "createdRow": function( row, data, dataIndex ) {
  		 *          // Bold the grade for all 'A' grade browsers
  		 *          if ( data[4] == "A" )
  		 *          {
  		 *            $('td:eq(4)', row).html( '<b>A</b>' );
  		 *          }
  		 *        }
  		 *      } );
  		 *    } );
  		 */
  		"fnCreatedRow": null,
  	
  	
  		/**
  		 * This function is called on every 'draw' event, and allows you to
  		 * dynamically modify any aspect you want about the created DOM.
  		 *  @type function
  		 *  @param {object} settings DataTables settings object
  		 *
  		 *  @dtopt Callbacks
  		 *  @name DataTable.defaults.drawCallback
  		 *
  		 *  @example
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "drawCallback": function( settings ) {
  		 *          alert( 'DataTables has redrawn the table' );
  		 *        }
  		 *      } );
  		 *    } );
  		 */
  		"fnDrawCallback": null,
  	
  	
  		/**
  		 * Identical to fnHeaderCallback() but for the table footer this function
  		 * allows you to modify the table footer on every 'draw' event.
  		 *  @type function
  		 *  @param {node} foot "TR" element for the footer
  		 *  @param {array} data Full table data (as derived from the original HTML)
  		 *  @param {int} start Index for the current display starting point in the
  		 *    display array
  		 *  @param {int} end Index for the current display ending point in the
  		 *    display array
  		 *  @param {array int} display Index array to translate the visual position
  		 *    to the full data array
  		 *
  		 *  @dtopt Callbacks
  		 *  @name DataTable.defaults.footerCallback
  		 *
  		 *  @example
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "footerCallback": function( tfoot, data, start, end, display ) {
  		 *          tfoot.getElementsByTagName('th')[0].innerHTML = "Starting index is "+start;
  		 *        }
  		 *      } );
  		 *    } )
  		 */
  		"fnFooterCallback": null,
  	
  	
  		/**
  		 * When rendering large numbers in the information element for the table
  		 * (i.e. "Showing 1 to 10 of 57 entries") DataTables will render large numbers
  		 * to have a comma separator for the 'thousands' units (e.g. 1 million is
  		 * rendered as "1,000,000") to help readability for the end user. This
  		 * function will override the default method DataTables uses.
  		 *  @type function
  		 *  @member
  		 *  @param {int} toFormat number to be formatted
  		 *  @returns {string} formatted string for DataTables to show the number
  		 *
  		 *  @dtopt Callbacks
  		 *  @name DataTable.defaults.formatNumber
  		 *
  		 *  @example
  		 *    // Format a number using a single quote for the separator (note that
  		 *    // this can also be done with the language.thousands option)
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "formatNumber": function ( toFormat ) {
  		 *          return toFormat.toString().replace(
  		 *            /\B(?=(\d{3})+(?!\d))/g, "'"
  		 *          );
  		 *        };
  		 *      } );
  		 *    } );
  		 */
  		"fnFormatNumber": function ( toFormat ) {
  			return toFormat.toString().replace(
  				/\B(?=(\d{3})+(?!\d))/g,
  				this.oLanguage.sThousands
  			);
  		},
  	
  	
  		/**
  		 * This function is called on every 'draw' event, and allows you to
  		 * dynamically modify the header row. This can be used to calculate and
  		 * display useful information about the table.
  		 *  @type function
  		 *  @param {node} head "TR" element for the header
  		 *  @param {array} data Full table data (as derived from the original HTML)
  		 *  @param {int} start Index for the current display starting point in the
  		 *    display array
  		 *  @param {int} end Index for the current display ending point in the
  		 *    display array
  		 *  @param {array int} display Index array to translate the visual position
  		 *    to the full data array
  		 *
  		 *  @dtopt Callbacks
  		 *  @name DataTable.defaults.headerCallback
  		 *
  		 *  @example
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "fheaderCallback": function( head, data, start, end, display ) {
  		 *          head.getElementsByTagName('th')[0].innerHTML = "Displaying "+(end-start)+" records";
  		 *        }
  		 *      } );
  		 *    } )
  		 */
  		"fnHeaderCallback": null,
  	
  	
  		/**
  		 * The information element can be used to convey information about the current
  		 * state of the table. Although the internationalisation options presented by
  		 * DataTables are quite capable of dealing with most customisations, there may
  		 * be times where you wish to customise the string further. This callback
  		 * allows you to do exactly that.
  		 *  @type function
  		 *  @param {object} oSettings DataTables settings object
  		 *  @param {int} start Starting position in data for the draw
  		 *  @param {int} end End position in data for the draw
  		 *  @param {int} max Total number of rows in the table (regardless of
  		 *    filtering)
  		 *  @param {int} total Total number of rows in the data set, after filtering
  		 *  @param {string} pre The string that DataTables has formatted using it's
  		 *    own rules
  		 *  @returns {string} The string to be displayed in the information element.
  		 *
  		 *  @dtopt Callbacks
  		 *  @name DataTable.defaults.infoCallback
  		 *
  		 *  @example
  		 *    $('#example').dataTable( {
  		 *      "infoCallback": function( settings, start, end, max, total, pre ) {
  		 *        return start +" to "+ end;
  		 *      }
  		 *    } );
  		 */
  		"fnInfoCallback": null,
  	
  	
  		/**
  		 * Called when the table has been initialised. Normally DataTables will
  		 * initialise sequentially and there will be no need for this function,
  		 * however, this does not hold true when using external language information
  		 * since that is obtained using an async XHR call.
  		 *  @type function
  		 *  @param {object} settings DataTables settings object
  		 *  @param {object} json The JSON object request from the server - only
  		 *    present if client-side Ajax sourced data is used
  		 *
  		 *  @dtopt Callbacks
  		 *  @name DataTable.defaults.initComplete
  		 *
  		 *  @example
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "initComplete": function(settings, json) {
  		 *          alert( 'DataTables has finished its initialisation.' );
  		 *        }
  		 *      } );
  		 *    } )
  		 */
  		"fnInitComplete": null,
  	
  	
  		/**
  		 * Called at the very start of each table draw and can be used to cancel the
  		 * draw by returning false, any other return (including undefined) results in
  		 * the full draw occurring).
  		 *  @type function
  		 *  @param {object} settings DataTables settings object
  		 *  @returns {boolean} False will cancel the draw, anything else (including no
  		 *    return) will allow it to complete.
  		 *
  		 *  @dtopt Callbacks
  		 *  @name DataTable.defaults.preDrawCallback
  		 *
  		 *  @example
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "preDrawCallback": function( settings ) {
  		 *          if ( $('#test').val() == 1 ) {
  		 *            return false;
  		 *          }
  		 *        }
  		 *      } );
  		 *    } );
  		 */
  		"fnPreDrawCallback": null,
  	
  	
  		/**
  		 * This function allows you to 'post process' each row after it have been
  		 * generated for each table draw, but before it is rendered on screen. This
  		 * function might be used for setting the row class name etc.
  		 *  @type function
  		 *  @param {node} row "TR" element for the current row
  		 *  @param {array} data Raw data array for this row
  		 *  @param {int} displayIndex The display index for the current table draw
  		 *  @param {int} displayIndexFull The index of the data in the full list of
  		 *    rows (after filtering)
  		 *
  		 *  @dtopt Callbacks
  		 *  @name DataTable.defaults.rowCallback
  		 *
  		 *  @example
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "rowCallback": function( row, data, displayIndex, displayIndexFull ) {
  		 *          // Bold the grade for all 'A' grade browsers
  		 *          if ( data[4] == "A" ) {
  		 *            $('td:eq(4)', row).html( '<b>A</b>' );
  		 *          }
  		 *        }
  		 *      } );
  		 *    } );
  		 */
  		"fnRowCallback": null,
  	
  	
  		/**
  		 * __Deprecated__ The functionality provided by this parameter has now been
  		 * superseded by that provided through `ajax`, which should be used instead.
  		 *
  		 * This parameter allows you to override the default function which obtains
  		 * the data from the server so something more suitable for your application.
  		 * For example you could use POST data, or pull information from a Gears or
  		 * AIR database.
  		 *  @type function
  		 *  @member
  		 *  @param {string} source HTTP source to obtain the data from (`ajax`)
  		 *  @param {array} data A key/value pair object containing the data to send
  		 *    to the server
  		 *  @param {function} callback to be called on completion of the data get
  		 *    process that will draw the data on the page.
  		 *  @param {object} settings DataTables settings object
  		 *
  		 *  @dtopt Callbacks
  		 *  @dtopt Server-side
  		 *  @name DataTable.defaults.serverData
  		 *
  		 *  @deprecated 1.10. Please use `ajax` for this functionality now.
  		 */
  		"fnServerData": null,
  	
  	
  		/**
  		 * __Deprecated__ The functionality provided by this parameter has now been
  		 * superseded by that provided through `ajax`, which should be used instead.
  		 *
  		 *  It is often useful to send extra data to the server when making an Ajax
  		 * request - for example custom filtering information, and this callback
  		 * function makes it trivial to send extra information to the server. The
  		 * passed in parameter is the data set that has been constructed by
  		 * DataTables, and you can add to this or modify it as you require.
  		 *  @type function
  		 *  @param {array} data Data array (array of objects which are name/value
  		 *    pairs) that has been constructed by DataTables and will be sent to the
  		 *    server. In the case of Ajax sourced data with server-side processing
  		 *    this will be an empty array, for server-side processing there will be a
  		 *    significant number of parameters!
  		 *  @returns {undefined} Ensure that you modify the data array passed in,
  		 *    as this is passed by reference.
  		 *
  		 *  @dtopt Callbacks
  		 *  @dtopt Server-side
  		 *  @name DataTable.defaults.serverParams
  		 *
  		 *  @deprecated 1.10. Please use `ajax` for this functionality now.
  		 */
  		"fnServerParams": null,
  	
  	
  		/**
  		 * Load the table state. With this function you can define from where, and how, the
  		 * state of a table is loaded. By default DataTables will load from `localStorage`
  		 * but you might wish to use a server-side database or cookies.
  		 *  @type function
  		 *  @member
  		 *  @param {object} settings DataTables settings object
  		 *  @param {object} callback Callback that can be executed when done. It
  		 *    should be passed the loaded state object.
  		 *  @return {object} The DataTables state object to be loaded
  		 *
  		 *  @dtopt Callbacks
  		 *  @name DataTable.defaults.stateLoadCallback
  		 *
  		 *  @example
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "stateSave": true,
  		 *        "stateLoadCallback": function (settings, callback) {
  		 *          $.ajax( {
  		 *            "url": "/state_load",
  		 *            "dataType": "json",
  		 *            "success": function (json) {
  		 *              callback( json );
  		 *            }
  		 *          } );
  		 *        }
  		 *      } );
  		 *    } );
  		 */
  		"fnStateLoadCallback": function ( settings ) {
  			try {
  				return JSON.parse(
  					(settings.iStateDuration === -1 ? sessionStorage : localStorage).getItem(
  						'DataTables_'+settings.sInstance+'_'+location.pathname
  					)
  				);
  			} catch (e) {
  				return {};
  			}
  		},
  	
  	
  		/**
  		 * Callback which allows modification of the saved state prior to loading that state.
  		 * This callback is called when the table is loading state from the stored data, but
  		 * prior to the settings object being modified by the saved state. Note that for
  		 * plug-in authors, you should use the `stateLoadParams` event to load parameters for
  		 * a plug-in.
  		 *  @type function
  		 *  @param {object} settings DataTables settings object
  		 *  @param {object} data The state object that is to be loaded
  		 *
  		 *  @dtopt Callbacks
  		 *  @name DataTable.defaults.stateLoadParams
  		 *
  		 *  @example
  		 *    // Remove a saved filter, so filtering is never loaded
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "stateSave": true,
  		 *        "stateLoadParams": function (settings, data) {
  		 *          data.oSearch.sSearch = "";
  		 *        }
  		 *      } );
  		 *    } );
  		 *
  		 *  @example
  		 *    // Disallow state loading by returning false
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "stateSave": true,
  		 *        "stateLoadParams": function (settings, data) {
  		 *          return false;
  		 *        }
  		 *      } );
  		 *    } );
  		 */
  		"fnStateLoadParams": null,
  	
  	
  		/**
  		 * Callback that is called when the state has been loaded from the state saving method
  		 * and the DataTables settings object has been modified as a result of the loaded state.
  		 *  @type function
  		 *  @param {object} settings DataTables settings object
  		 *  @param {object} data The state object that was loaded
  		 *
  		 *  @dtopt Callbacks
  		 *  @name DataTable.defaults.stateLoaded
  		 *
  		 *  @example
  		 *    // Show an alert with the filtering value that was saved
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "stateSave": true,
  		 *        "stateLoaded": function (settings, data) {
  		 *          alert( 'Saved filter was: '+data.oSearch.sSearch );
  		 *        }
  		 *      } );
  		 *    } );
  		 */
  		"fnStateLoaded": null,
  	
  	
  		/**
  		 * Save the table state. This function allows you to define where and how the state
  		 * information for the table is stored By default DataTables will use `localStorage`
  		 * but you might wish to use a server-side database or cookies.
  		 *  @type function
  		 *  @member
  		 *  @param {object} settings DataTables settings object
  		 *  @param {object} data The state object to be saved
  		 *
  		 *  @dtopt Callbacks
  		 *  @name DataTable.defaults.stateSaveCallback
  		 *
  		 *  @example
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "stateSave": true,
  		 *        "stateSaveCallback": function (settings, data) {
  		 *          // Send an Ajax request to the server with the state object
  		 *          $.ajax( {
  		 *            "url": "/state_save",
  		 *            "data": data,
  		 *            "dataType": "json",
  		 *            "method": "POST"
  		 *            "success": function () {}
  		 *          } );
  		 *        }
  		 *      } );
  		 *    } );
  		 */
  		"fnStateSaveCallback": function ( settings, data ) {
  			try {
  				(settings.iStateDuration === -1 ? sessionStorage : localStorage).setItem(
  					'DataTables_'+settings.sInstance+'_'+location.pathname,
  					JSON.stringify( data )
  				);
  			} catch (e) {}
  		},
  	
  	
  		/**
  		 * Callback which allows modification of the state to be saved. Called when the table
  		 * has changed state a new state save is required. This method allows modification of
  		 * the state saving object prior to actually doing the save, including addition or
  		 * other state properties or modification. Note that for plug-in authors, you should
  		 * use the `stateSaveParams` event to save parameters for a plug-in.
  		 *  @type function
  		 *  @param {object} settings DataTables settings object
  		 *  @param {object} data The state object to be saved
  		 *
  		 *  @dtopt Callbacks
  		 *  @name DataTable.defaults.stateSaveParams
  		 *
  		 *  @example
  		 *    // Remove a saved filter, so filtering is never saved
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "stateSave": true,
  		 *        "stateSaveParams": function (settings, data) {
  		 *          data.oSearch.sSearch = "";
  		 *        }
  		 *      } );
  		 *    } );
  		 */
  		"fnStateSaveParams": null,
  	
  	
  		/**
  		 * Duration for which the saved state information is considered valid. After this period
  		 * has elapsed the state will be returned to the default.
  		 * Value is given in seconds.
  		 *  @type int
  		 *  @default 7200 <i>(2 hours)</i>
  		 *
  		 *  @dtopt Options
  		 *  @name DataTable.defaults.stateDuration
  		 *
  		 *  @example
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "stateDuration": 60*60*24; // 1 day
  		 *      } );
  		 *    } )
  		 */
  		"iStateDuration": 7200,
  	
  	
  		/**
  		 * When enabled DataTables will not make a request to the server for the first
  		 * page draw - rather it will use the data already on the page (no sorting etc
  		 * will be applied to it), thus saving on an XHR at load time. `deferLoading`
  		 * is used to indicate that deferred loading is required, but it is also used
  		 * to tell DataTables how many records there are in the full table (allowing
  		 * the information element and pagination to be displayed correctly). In the case
  		 * where a filtering is applied to the table on initial load, this can be
  		 * indicated by giving the parameter as an array, where the first element is
  		 * the number of records available after filtering and the second element is the
  		 * number of records without filtering (allowing the table information element
  		 * to be shown correctly).
  		 *  @type int | array
  		 *  @default null
  		 *
  		 *  @dtopt Options
  		 *  @name DataTable.defaults.deferLoading
  		 *
  		 *  @example
  		 *    // 57 records available in the table, no filtering applied
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "serverSide": true,
  		 *        "ajax": "scripts/server_processing.php",
  		 *        "deferLoading": 57
  		 *      } );
  		 *    } );
  		 *
  		 *  @example
  		 *    // 57 records after filtering, 100 without filtering (an initial filter applied)
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "serverSide": true,
  		 *        "ajax": "scripts/server_processing.php",
  		 *        "deferLoading": [ 57, 100 ],
  		 *        "search": {
  		 *          "search": "my_filter"
  		 *        }
  		 *      } );
  		 *    } );
  		 */
  		"iDeferLoading": null,
  	
  	
  		/**
  		 * Number of rows to display on a single page when using pagination. If
  		 * feature enabled (`lengthChange`) then the end user will be able to override
  		 * this to a custom setting using a pop-up menu.
  		 *  @type int
  		 *  @default 10
  		 *
  		 *  @dtopt Options
  		 *  @name DataTable.defaults.pageLength
  		 *
  		 *  @example
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "pageLength": 50
  		 *      } );
  		 *    } )
  		 */
  		"iDisplayLength": 10,
  	
  	
  		/**
  		 * Define the starting point for data display when using DataTables with
  		 * pagination. Note that this parameter is the number of records, rather than
  		 * the page number, so if you have 10 records per page and want to start on
  		 * the third page, it should be "20".
  		 *  @type int
  		 *  @default 0
  		 *
  		 *  @dtopt Options
  		 *  @name DataTable.defaults.displayStart
  		 *
  		 *  @example
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "displayStart": 20
  		 *      } );
  		 *    } )
  		 */
  		"iDisplayStart": 0,
  	
  	
  		/**
  		 * By default DataTables allows keyboard navigation of the table (sorting, paging,
  		 * and filtering) by adding a `tabindex` attribute to the required elements. This
  		 * allows you to tab through the controls and press the enter key to activate them.
  		 * The tabindex is default 0, meaning that the tab follows the flow of the document.
  		 * You can overrule this using this parameter if you wish. Use a value of -1 to
  		 * disable built-in keyboard navigation.
  		 *  @type int
  		 *  @default 0
  		 *
  		 *  @dtopt Options
  		 *  @name DataTable.defaults.tabIndex
  		 *
  		 *  @example
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "tabIndex": 1
  		 *      } );
  		 *    } );
  		 */
  		"iTabIndex": 0,
  	
  	
  		/**
  		 * Classes that DataTables assigns to the various components and features
  		 * that it adds to the HTML table. This allows classes to be configured
  		 * during initialisation in addition to through the static
  		 * {@link DataTable.ext.oStdClasses} object).
  		 *  @namespace
  		 *  @name DataTable.defaults.classes
  		 */
  		"oClasses": {},
  	
  	
  		/**
  		 * All strings that DataTables uses in the user interface that it creates
  		 * are defined in this object, allowing you to modified them individually or
  		 * completely replace them all as required.
  		 *  @namespace
  		 *  @name DataTable.defaults.language
  		 */
  		"oLanguage": {
  			/**
  			 * Strings that are used for WAI-ARIA labels and controls only (these are not
  			 * actually visible on the page, but will be read by screenreaders, and thus
  			 * must be internationalised as well).
  			 *  @namespace
  			 *  @name DataTable.defaults.language.aria
  			 */
  			"oAria": {
  				/**
  				 * ARIA label that is added to the table headers when the column may be
  				 * sorted ascending by activing the column (click or return when focused).
  				 * Note that the column header is prefixed to this string.
  				 *  @type string
  				 *  @default : activate to sort column ascending
  				 *
  				 *  @dtopt Language
  				 *  @name DataTable.defaults.language.aria.sortAscending
  				 *
  				 *  @example
  				 *    $(document).ready( function() {
  				 *      $('#example').dataTable( {
  				 *        "language": {
  				 *          "aria": {
  				 *            "sortAscending": " - click/return to sort ascending"
  				 *          }
  				 *        }
  				 *      } );
  				 *    } );
  				 */
  				"sSortAscending": ": activate to sort column ascending",
  	
  				/**
  				 * ARIA label that is added to the table headers when the column may be
  				 * sorted descending by activing the column (click or return when focused).
  				 * Note that the column header is prefixed to this string.
  				 *  @type string
  				 *  @default : activate to sort column ascending
  				 *
  				 *  @dtopt Language
  				 *  @name DataTable.defaults.language.aria.sortDescending
  				 *
  				 *  @example
  				 *    $(document).ready( function() {
  				 *      $('#example').dataTable( {
  				 *        "language": {
  				 *          "aria": {
  				 *            "sortDescending": " - click/return to sort descending"
  				 *          }
  				 *        }
  				 *      } );
  				 *    } );
  				 */
  				"sSortDescending": ": activate to sort column descending"
  			},
  	
  			/**
  			 * Pagination string used by DataTables for the built-in pagination
  			 * control types.
  			 *  @namespace
  			 *  @name DataTable.defaults.language.paginate
  			 */
  			"oPaginate": {
  				/**
  				 * Text to use when using the 'full_numbers' type of pagination for the
  				 * button to take the user to the first page.
  				 *  @type string
  				 *  @default First
  				 *
  				 *  @dtopt Language
  				 *  @name DataTable.defaults.language.paginate.first
  				 *
  				 *  @example
  				 *    $(document).ready( function() {
  				 *      $('#example').dataTable( {
  				 *        "language": {
  				 *          "paginate": {
  				 *            "first": "First page"
  				 *          }
  				 *        }
  				 *      } );
  				 *    } );
  				 */
  				"sFirst": "First",
  	
  	
  				/**
  				 * Text to use when using the 'full_numbers' type of pagination for the
  				 * button to take the user to the last page.
  				 *  @type string
  				 *  @default Last
  				 *
  				 *  @dtopt Language
  				 *  @name DataTable.defaults.language.paginate.last
  				 *
  				 *  @example
  				 *    $(document).ready( function() {
  				 *      $('#example').dataTable( {
  				 *        "language": {
  				 *          "paginate": {
  				 *            "last": "Last page"
  				 *          }
  				 *        }
  				 *      } );
  				 *    } );
  				 */
  				"sLast": "Last",
  	
  	
  				/**
  				 * Text to use for the 'next' pagination button (to take the user to the
  				 * next page).
  				 *  @type string
  				 *  @default Next
  				 *
  				 *  @dtopt Language
  				 *  @name DataTable.defaults.language.paginate.next
  				 *
  				 *  @example
  				 *    $(document).ready( function() {
  				 *      $('#example').dataTable( {
  				 *        "language": {
  				 *          "paginate": {
  				 *            "next": "Next page"
  				 *          }
  				 *        }
  				 *      } );
  				 *    } );
  				 */
  				"sNext": "Next",
  	
  	
  				/**
  				 * Text to use for the 'previous' pagination button (to take the user to
  				 * the previous page).
  				 *  @type string
  				 *  @default Previous
  				 *
  				 *  @dtopt Language
  				 *  @name DataTable.defaults.language.paginate.previous
  				 *
  				 *  @example
  				 *    $(document).ready( function() {
  				 *      $('#example').dataTable( {
  				 *        "language": {
  				 *          "paginate": {
  				 *            "previous": "Previous page"
  				 *          }
  				 *        }
  				 *      } );
  				 *    } );
  				 */
  				"sPrevious": "Previous"
  			},
  	
  			/**
  			 * This string is shown in preference to `zeroRecords` when the table is
  			 * empty of data (regardless of filtering). Note that this is an optional
  			 * parameter - if it is not given, the value of `zeroRecords` will be used
  			 * instead (either the default or given value).
  			 *  @type string
  			 *  @default No data available in table
  			 *
  			 *  @dtopt Language
  			 *  @name DataTable.defaults.language.emptyTable
  			 *
  			 *  @example
  			 *    $(document).ready( function() {
  			 *      $('#example').dataTable( {
  			 *        "language": {
  			 *          "emptyTable": "No data available in table"
  			 *        }
  			 *      } );
  			 *    } );
  			 */
  			"sEmptyTable": "No data available in table",
  	
  	
  			/**
  			 * This string gives information to the end user about the information
  			 * that is current on display on the page. The following tokens can be
  			 * used in the string and will be dynamically replaced as the table
  			 * display updates. This tokens can be placed anywhere in the string, or
  			 * removed as needed by the language requires:
  			 *
  			 * * `\_START\_` - Display index of the first record on the current page
  			 * * `\_END\_` - Display index of the last record on the current page
  			 * * `\_TOTAL\_` - Number of records in the table after filtering
  			 * * `\_MAX\_` - Number of records in the table without filtering
  			 * * `\_PAGE\_` - Current page number
  			 * * `\_PAGES\_` - Total number of pages of data in the table
  			 *
  			 *  @type string
  			 *  @default Showing _START_ to _END_ of _TOTAL_ entries
  			 *
  			 *  @dtopt Language
  			 *  @name DataTable.defaults.language.info
  			 *
  			 *  @example
  			 *    $(document).ready( function() {
  			 *      $('#example').dataTable( {
  			 *        "language": {
  			 *          "info": "Showing page _PAGE_ of _PAGES_"
  			 *        }
  			 *      } );
  			 *    } );
  			 */
  			"sInfo": "Showing _START_ to _END_ of _TOTAL_ entries",
  	
  	
  			/**
  			 * Display information string for when the table is empty. Typically the
  			 * format of this string should match `info`.
  			 *  @type string
  			 *  @default Showing 0 to 0 of 0 entries
  			 *
  			 *  @dtopt Language
  			 *  @name DataTable.defaults.language.infoEmpty
  			 *
  			 *  @example
  			 *    $(document).ready( function() {
  			 *      $('#example').dataTable( {
  			 *        "language": {
  			 *          "infoEmpty": "No entries to show"
  			 *        }
  			 *      } );
  			 *    } );
  			 */
  			"sInfoEmpty": "Showing 0 to 0 of 0 entries",
  	
  	
  			/**
  			 * When a user filters the information in a table, this string is appended
  			 * to the information (`info`) to give an idea of how strong the filtering
  			 * is. The variable _MAX_ is dynamically updated.
  			 *  @type string
  			 *  @default (filtered from _MAX_ total entries)
  			 *
  			 *  @dtopt Language
  			 *  @name DataTable.defaults.language.infoFiltered
  			 *
  			 *  @example
  			 *    $(document).ready( function() {
  			 *      $('#example').dataTable( {
  			 *        "language": {
  			 *          "infoFiltered": " - filtering from _MAX_ records"
  			 *        }
  			 *      } );
  			 *    } );
  			 */
  			"sInfoFiltered": "(filtered from _MAX_ total entries)",
  	
  	
  			/**
  			 * If can be useful to append extra information to the info string at times,
  			 * and this variable does exactly that. This information will be appended to
  			 * the `info` (`infoEmpty` and `infoFiltered` in whatever combination they are
  			 * being used) at all times.
  			 *  @type string
  			 *  @default <i>Empty string</i>
  			 *
  			 *  @dtopt Language
  			 *  @name DataTable.defaults.language.infoPostFix
  			 *
  			 *  @example
  			 *    $(document).ready( function() {
  			 *      $('#example').dataTable( {
  			 *        "language": {
  			 *          "infoPostFix": "All records shown are derived from real information."
  			 *        }
  			 *      } );
  			 *    } );
  			 */
  			"sInfoPostFix": "",
  	
  	
  			/**
  			 * This decimal place operator is a little different from the other
  			 * language options since DataTables doesn't output floating point
  			 * numbers, so it won't ever use this for display of a number. Rather,
  			 * what this parameter does is modify the sort methods of the table so
  			 * that numbers which are in a format which has a character other than
  			 * a period (`.`) as a decimal place will be sorted numerically.
  			 *
  			 * Note that numbers with different decimal places cannot be shown in
  			 * the same table and still be sortable, the table must be consistent.
  			 * However, multiple different tables on the page can use different
  			 * decimal place characters.
  			 *  @type string
  			 *  @default 
  			 *
  			 *  @dtopt Language
  			 *  @name DataTable.defaults.language.decimal
  			 *
  			 *  @example
  			 *    $(document).ready( function() {
  			 *      $('#example').dataTable( {
  			 *        "language": {
  			 *          "decimal": ","
  			 *          "thousands": "."
  			 *        }
  			 *      } );
  			 *    } );
  			 */
  			"sDecimal": "",
  	
  	
  			/**
  			 * DataTables has a build in number formatter (`formatNumber`) which is
  			 * used to format large numbers that are used in the table information.
  			 * By default a comma is used, but this can be trivially changed to any
  			 * character you wish with this parameter.
  			 *  @type string
  			 *  @default ,
  			 *
  			 *  @dtopt Language
  			 *  @name DataTable.defaults.language.thousands
  			 *
  			 *  @example
  			 *    $(document).ready( function() {
  			 *      $('#example').dataTable( {
  			 *        "language": {
  			 *          "thousands": "'"
  			 *        }
  			 *      } );
  			 *    } );
  			 */
  			"sThousands": ",",
  	
  	
  			/**
  			 * Detail the action that will be taken when the drop down menu for the
  			 * pagination length option is changed. The '_MENU_' variable is replaced
  			 * with a default select list of 10, 25, 50 and 100, and can be replaced
  			 * with a custom select box if required.
  			 *  @type string
  			 *  @default Show _MENU_ entries
  			 *
  			 *  @dtopt Language
  			 *  @name DataTable.defaults.language.lengthMenu
  			 *
  			 *  @example
  			 *    // Language change only
  			 *    $(document).ready( function() {
  			 *      $('#example').dataTable( {
  			 *        "language": {
  			 *          "lengthMenu": "Display _MENU_ records"
  			 *        }
  			 *      } );
  			 *    } );
  			 *
  			 *  @example
  			 *    // Language and options change
  			 *    $(document).ready( function() {
  			 *      $('#example').dataTable( {
  			 *        "language": {
  			 *          "lengthMenu": 'Display <select>'+
  			 *            '<option value="10">10</option>'+
  			 *            '<option value="20">20</option>'+
  			 *            '<option value="30">30</option>'+
  			 *            '<option value="40">40</option>'+
  			 *            '<option value="50">50</option>'+
  			 *            '<option value="-1">All</option>'+
  			 *            '</select> records'
  			 *        }
  			 *      } );
  			 *    } );
  			 */
  			"sLengthMenu": "Show _MENU_ entries",
  	
  	
  			/**
  			 * When using Ajax sourced data and during the first draw when DataTables is
  			 * gathering the data, this message is shown in an empty row in the table to
  			 * indicate to the end user the the data is being loaded. Note that this
  			 * parameter is not used when loading data by server-side processing, just
  			 * Ajax sourced data with client-side processing.
  			 *  @type string
  			 *  @default Loading...
  			 *
  			 *  @dtopt Language
  			 *  @name DataTable.defaults.language.loadingRecords
  			 *
  			 *  @example
  			 *    $(document).ready( function() {
  			 *      $('#example').dataTable( {
  			 *        "language": {
  			 *          "loadingRecords": "Please wait - loading..."
  			 *        }
  			 *      } );
  			 *    } );
  			 */
  			"sLoadingRecords": "Loading...",
  	
  	
  			/**
  			 * Text which is displayed when the table is processing a user action
  			 * (usually a sort command or similar).
  			 *  @type string
  			 *  @default Processing...
  			 *
  			 *  @dtopt Language
  			 *  @name DataTable.defaults.language.processing
  			 *
  			 *  @example
  			 *    $(document).ready( function() {
  			 *      $('#example').dataTable( {
  			 *        "language": {
  			 *          "processing": "DataTables is currently busy"
  			 *        }
  			 *      } );
  			 *    } );
  			 */
  			"sProcessing": "Processing...",
  	
  	
  			/**
  			 * Details the actions that will be taken when the user types into the
  			 * filtering input text box. The variable "_INPUT_", if used in the string,
  			 * is replaced with the HTML text box for the filtering input allowing
  			 * control over where it appears in the string. If "_INPUT_" is not given
  			 * then the input box is appended to the string automatically.
  			 *  @type string
  			 *  @default Search:
  			 *
  			 *  @dtopt Language
  			 *  @name DataTable.defaults.language.search
  			 *
  			 *  @example
  			 *    // Input text box will be appended at the end automatically
  			 *    $(document).ready( function() {
  			 *      $('#example').dataTable( {
  			 *        "language": {
  			 *          "search": "Filter records:"
  			 *        }
  			 *      } );
  			 *    } );
  			 *
  			 *  @example
  			 *    // Specify where the filter should appear
  			 *    $(document).ready( function() {
  			 *      $('#example').dataTable( {
  			 *        "language": {
  			 *          "search": "Apply filter _INPUT_ to table"
  			 *        }
  			 *      } );
  			 *    } );
  			 */
  			"sSearch": "Search:",
  	
  	
  			/**
  			 * Assign a `placeholder` attribute to the search `input` element
  			 *  @type string
  			 *  @default 
  			 *
  			 *  @dtopt Language
  			 *  @name DataTable.defaults.language.searchPlaceholder
  			 */
  			"sSearchPlaceholder": "",
  	
  	
  			/**
  			 * All of the language information can be stored in a file on the
  			 * server-side, which DataTables will look up if this parameter is passed.
  			 * It must store the URL of the language file, which is in a JSON format,
  			 * and the object has the same properties as the oLanguage object in the
  			 * initialiser object (i.e. the above parameters). Please refer to one of
  			 * the example language files to see how this works in action.
  			 *  @type string
  			 *  @default <i>Empty string - i.e. disabled</i>
  			 *
  			 *  @dtopt Language
  			 *  @name DataTable.defaults.language.url
  			 *
  			 *  @example
  			 *    $(document).ready( function() {
  			 *      $('#example').dataTable( {
  			 *        "language": {
  			 *          "url": "http://www.sprymedia.co.uk/dataTables/lang.txt"
  			 *        }
  			 *      } );
  			 *    } );
  			 */
  			"sUrl": "",
  	
  	
  			/**
  			 * Text shown inside the table records when the is no information to be
  			 * displayed after filtering. `emptyTable` is shown when there is simply no
  			 * information in the table at all (regardless of filtering).
  			 *  @type string
  			 *  @default No matching records found
  			 *
  			 *  @dtopt Language
  			 *  @name DataTable.defaults.language.zeroRecords
  			 *
  			 *  @example
  			 *    $(document).ready( function() {
  			 *      $('#example').dataTable( {
  			 *        "language": {
  			 *          "zeroRecords": "No records to display"
  			 *        }
  			 *      } );
  			 *    } );
  			 */
  			"sZeroRecords": "No matching records found"
  		},
  	
  	
  		/**
  		 * This parameter allows you to have define the global filtering state at
  		 * initialisation time. As an object the `search` parameter must be
  		 * defined, but all other parameters are optional. When `regex` is true,
  		 * the search string will be treated as a regular expression, when false
  		 * (default) it will be treated as a straight string. When `smart`
  		 * DataTables will use it's smart filtering methods (to word match at
  		 * any point in the data), when false this will not be done.
  		 *  @namespace
  		 *  @extends DataTable.models.oSearch
  		 *
  		 *  @dtopt Options
  		 *  @name DataTable.defaults.search
  		 *
  		 *  @example
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "search": {"search": "Initial search"}
  		 *      } );
  		 *    } )
  		 */
  		"oSearch": $.extend( {}, DataTable.models.oSearch ),
  	
  	
  		/**
  		 * __Deprecated__ The functionality provided by this parameter has now been
  		 * superseded by that provided through `ajax`, which should be used instead.
  		 *
  		 * By default DataTables will look for the property `data` (or `aaData` for
  		 * compatibility with DataTables 1.9-) when obtaining data from an Ajax
  		 * source or for server-side processing - this parameter allows that
  		 * property to be changed. You can use Javascript dotted object notation to
  		 * get a data source for multiple levels of nesting.
  		 *  @type string
  		 *  @default data
  		 *
  		 *  @dtopt Options
  		 *  @dtopt Server-side
  		 *  @name DataTable.defaults.ajaxDataProp
  		 *
  		 *  @deprecated 1.10. Please use `ajax` for this functionality now.
  		 */
  		"sAjaxDataProp": "data",
  	
  	
  		/**
  		 * __Deprecated__ The functionality provided by this parameter has now been
  		 * superseded by that provided through `ajax`, which should be used instead.
  		 *
  		 * You can instruct DataTables to load data from an external
  		 * source using this parameter (use aData if you want to pass data in you
  		 * already have). Simply provide a url a JSON object can be obtained from.
  		 *  @type string
  		 *  @default null
  		 *
  		 *  @dtopt Options
  		 *  @dtopt Server-side
  		 *  @name DataTable.defaults.ajaxSource
  		 *
  		 *  @deprecated 1.10. Please use `ajax` for this functionality now.
  		 */
  		"sAjaxSource": null,
  	
  	
  		/**
  		 * This initialisation variable allows you to specify exactly where in the
  		 * DOM you want DataTables to inject the various controls it adds to the page
  		 * (for example you might want the pagination controls at the top of the
  		 * table). DIV elements (with or without a custom class) can also be added to
  		 * aid styling. The follow syntax is used:
  		 *   <ul>
  		 *     <li>The following options are allowed:
  		 *       <ul>
  		 *         <li>'l' - Length changing</li>
  		 *         <li>'f' - Filtering input</li>
  		 *         <li>'t' - The table!</li>
  		 *         <li>'i' - Information</li>
  		 *         <li>'p' - Pagination</li>
  		 *         <li>'r' - pRocessing</li>
  		 *       </ul>
  		 *     </li>
  		 *     <li>The following constants are allowed:
  		 *       <ul>
  		 *         <li>'H' - jQueryUI theme "header" classes ('fg-toolbar ui-widget-header ui-corner-tl ui-corner-tr ui-helper-clearfix')</li>
  		 *         <li>'F' - jQueryUI theme "footer" classes ('fg-toolbar ui-widget-header ui-corner-bl ui-corner-br ui-helper-clearfix')</li>
  		 *       </ul>
  		 *     </li>
  		 *     <li>The following syntax is expected:
  		 *       <ul>
  		 *         <li>'&lt;' and '&gt;' - div elements</li>
  		 *         <li>'&lt;"class" and '&gt;' - div with a class</li>
  		 *         <li>'&lt;"#id" and '&gt;' - div with an ID</li>
  		 *       </ul>
  		 *     </li>
  		 *     <li>Examples:
  		 *       <ul>
  		 *         <li>'&lt;"wrapper"flipt&gt;'</li>
  		 *         <li>'&lt;lf&lt;t&gt;ip&gt;'</li>
  		 *       </ul>
  		 *     </li>
  		 *   </ul>
  		 *  @type string
  		 *  @default lfrtip <i>(when `jQueryUI` is false)</i> <b>or</b>
  		 *    <"H"lfr>t<"F"ip> <i>(when `jQueryUI` is true)</i>
  		 *
  		 *  @dtopt Options
  		 *  @name DataTable.defaults.dom
  		 *
  		 *  @example
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "dom": '&lt;"top"i&gt;rt&lt;"bottom"flp&gt;&lt;"clear"&gt;'
  		 *      } );
  		 *    } );
  		 */
  		"sDom": "lfrtip",
  	
  	
  		/**
  		 * Search delay option. This will throttle full table searches that use the
  		 * DataTables provided search input element (it does not effect calls to
  		 * `dt-api search()`, providing a delay before the search is made.
  		 *  @type integer
  		 *  @default 0
  		 *
  		 *  @dtopt Options
  		 *  @name DataTable.defaults.searchDelay
  		 *
  		 *  @example
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "searchDelay": 200
  		 *      } );
  		 *    } )
  		 */
  		"searchDelay": null,
  	
  	
  		/**
  		 * DataTables features six different built-in options for the buttons to
  		 * display for pagination control:
  		 *
  		 * * `numbers` - Page number buttons only
  		 * * `simple` - 'Previous' and 'Next' buttons only
  		 * * 'simple_numbers` - 'Previous' and 'Next' buttons, plus page numbers
  		 * * `full` - 'First', 'Previous', 'Next' and 'Last' buttons
  		 * * `full_numbers` - 'First', 'Previous', 'Next' and 'Last' buttons, plus page numbers
  		 * * `first_last_numbers` - 'First' and 'Last' buttons, plus page numbers
  		 *  
  		 * Further methods can be added using {@link DataTable.ext.oPagination}.
  		 *  @type string
  		 *  @default simple_numbers
  		 *
  		 *  @dtopt Options
  		 *  @name DataTable.defaults.pagingType
  		 *
  		 *  @example
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "pagingType": "full_numbers"
  		 *      } );
  		 *    } )
  		 */
  		"sPaginationType": "simple_numbers",
  	
  	
  		/**
  		 * Enable horizontal scrolling. When a table is too wide to fit into a
  		 * certain layout, or you have a large number of columns in the table, you
  		 * can enable x-scrolling to show the table in a viewport, which can be
  		 * scrolled. This property can be `true` which will allow the table to
  		 * scroll horizontally when needed, or any CSS unit, or a number (in which
  		 * case it will be treated as a pixel measurement). Setting as simply `true`
  		 * is recommended.
  		 *  @type boolean|string
  		 *  @default <i>blank string - i.e. disabled</i>
  		 *
  		 *  @dtopt Features
  		 *  @name DataTable.defaults.scrollX
  		 *
  		 *  @example
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "scrollX": true,
  		 *        "scrollCollapse": true
  		 *      } );
  		 *    } );
  		 */
  		"sScrollX": "",
  	
  	
  		/**
  		 * This property can be used to force a DataTable to use more width than it
  		 * might otherwise do when x-scrolling is enabled. For example if you have a
  		 * table which requires to be well spaced, this parameter is useful for
  		 * "over-sizing" the table, and thus forcing scrolling. This property can by
  		 * any CSS unit, or a number (in which case it will be treated as a pixel
  		 * measurement).
  		 *  @type string
  		 *  @default <i>blank string - i.e. disabled</i>
  		 *
  		 *  @dtopt Options
  		 *  @name DataTable.defaults.scrollXInner
  		 *
  		 *  @example
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "scrollX": "100%",
  		 *        "scrollXInner": "110%"
  		 *      } );
  		 *    } );
  		 */
  		"sScrollXInner": "",
  	
  	
  		/**
  		 * Enable vertical scrolling. Vertical scrolling will constrain the DataTable
  		 * to the given height, and enable scrolling for any data which overflows the
  		 * current viewport. This can be used as an alternative to paging to display
  		 * a lot of data in a small area (although paging and scrolling can both be
  		 * enabled at the same time). This property can be any CSS unit, or a number
  		 * (in which case it will be treated as a pixel measurement).
  		 *  @type string
  		 *  @default <i>blank string - i.e. disabled</i>
  		 *
  		 *  @dtopt Features
  		 *  @name DataTable.defaults.scrollY
  		 *
  		 *  @example
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "scrollY": "200px",
  		 *        "paginate": false
  		 *      } );
  		 *    } );
  		 */
  		"sScrollY": "",
  	
  	
  		/**
  		 * __Deprecated__ The functionality provided by this parameter has now been
  		 * superseded by that provided through `ajax`, which should be used instead.
  		 *
  		 * Set the HTTP method that is used to make the Ajax call for server-side
  		 * processing or Ajax sourced data.
  		 *  @type string
  		 *  @default GET
  		 *
  		 *  @dtopt Options
  		 *  @dtopt Server-side
  		 *  @name DataTable.defaults.serverMethod
  		 *
  		 *  @deprecated 1.10. Please use `ajax` for this functionality now.
  		 */
  		"sServerMethod": "GET",
  	
  	
  		/**
  		 * DataTables makes use of renderers when displaying HTML elements for
  		 * a table. These renderers can be added or modified by plug-ins to
  		 * generate suitable mark-up for a site. For example the Bootstrap
  		 * integration plug-in for DataTables uses a paging button renderer to
  		 * display pagination buttons in the mark-up required by Bootstrap.
  		 *
  		 * For further information about the renderers available see
  		 * DataTable.ext.renderer
  		 *  @type string|object
  		 *  @default null
  		 *
  		 *  @name DataTable.defaults.renderer
  		 *
  		 */
  		"renderer": null,
  	
  	
  		/**
  		 * Set the data property name that DataTables should use to get a row's id
  		 * to set as the `id` property in the node.
  		 *  @type string
  		 *  @default DT_RowId
  		 *
  		 *  @name DataTable.defaults.rowId
  		 */
  		"rowId": "DT_RowId"
  	};
  	
  	_fnHungarianMap( DataTable.defaults );
  	
  	
  	
  	/*
  	 * Developer note - See note in model.defaults.js about the use of Hungarian
  	 * notation and camel case.
  	 */
  	
  	/**
  	 * Column options that can be given to DataTables at initialisation time.
  	 *  @namespace
  	 */
  	DataTable.defaults.column = {
  		/**
  		 * Define which column(s) an order will occur on for this column. This
  		 * allows a column's ordering to take multiple columns into account when
  		 * doing a sort or use the data from a different column. For example first
  		 * name / last name columns make sense to do a multi-column sort over the
  		 * two columns.
  		 *  @type array|int
  		 *  @default null <i>Takes the value of the column index automatically</i>
  		 *
  		 *  @name DataTable.defaults.column.orderData
  		 *  @dtopt Columns
  		 *
  		 *  @example
  		 *    // Using `columnDefs`
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "columnDefs": [
  		 *          { "orderData": [ 0, 1 ], "targets": [ 0 ] },
  		 *          { "orderData": [ 1, 0 ], "targets": [ 1 ] },
  		 *          { "orderData": 2, "targets": [ 2 ] }
  		 *        ]
  		 *      } );
  		 *    } );
  		 *
  		 *  @example
  		 *    // Using `columns`
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "columns": [
  		 *          { "orderData": [ 0, 1 ] },
  		 *          { "orderData": [ 1, 0 ] },
  		 *          { "orderData": 2 },
  		 *          null,
  		 *          null
  		 *        ]
  		 *      } );
  		 *    } );
  		 */
  		"aDataSort": null,
  		"iDataSort": -1,
  	
  	
  		/**
  		 * You can control the default ordering direction, and even alter the
  		 * behaviour of the sort handler (i.e. only allow ascending ordering etc)
  		 * using this parameter.
  		 *  @type array
  		 *  @default [ 'asc', 'desc' ]
  		 *
  		 *  @name DataTable.defaults.column.orderSequence
  		 *  @dtopt Columns
  		 *
  		 *  @example
  		 *    // Using `columnDefs`
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "columnDefs": [
  		 *          { "orderSequence": [ "asc" ], "targets": [ 1 ] },
  		 *          { "orderSequence": [ "desc", "asc", "asc" ], "targets": [ 2 ] },
  		 *          { "orderSequence": [ "desc" ], "targets": [ 3 ] }
  		 *        ]
  		 *      } );
  		 *    } );
  		 *
  		 *  @example
  		 *    // Using `columns`
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "columns": [
  		 *          null,
  		 *          { "orderSequence": [ "asc" ] },
  		 *          { "orderSequence": [ "desc", "asc", "asc" ] },
  		 *          { "orderSequence": [ "desc" ] },
  		 *          null
  		 *        ]
  		 *      } );
  		 *    } );
  		 */
  		"asSorting": [ 'asc', 'desc' ],
  	
  	
  		/**
  		 * Enable or disable filtering on the data in this column.
  		 *  @type boolean
  		 *  @default true
  		 *
  		 *  @name DataTable.defaults.column.searchable
  		 *  @dtopt Columns
  		 *
  		 *  @example
  		 *    // Using `columnDefs`
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "columnDefs": [
  		 *          { "searchable": false, "targets": [ 0 ] }
  		 *        ] } );
  		 *    } );
  		 *
  		 *  @example
  		 *    // Using `columns`
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "columns": [
  		 *          { "searchable": false },
  		 *          null,
  		 *          null,
  		 *          null,
  		 *          null
  		 *        ] } );
  		 *    } );
  		 */
  		"bSearchable": true,
  	
  	
  		/**
  		 * Enable or disable ordering on this column.
  		 *  @type boolean
  		 *  @default true
  		 *
  		 *  @name DataTable.defaults.column.orderable
  		 *  @dtopt Columns
  		 *
  		 *  @example
  		 *    // Using `columnDefs`
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "columnDefs": [
  		 *          { "orderable": false, "targets": [ 0 ] }
  		 *        ] } );
  		 *    } );
  		 *
  		 *  @example
  		 *    // Using `columns`
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "columns": [
  		 *          { "orderable": false },
  		 *          null,
  		 *          null,
  		 *          null,
  		 *          null
  		 *        ] } );
  		 *    } );
  		 */
  		"bSortable": true,
  	
  	
  		/**
  		 * Enable or disable the display of this column.
  		 *  @type boolean
  		 *  @default true
  		 *
  		 *  @name DataTable.defaults.column.visible
  		 *  @dtopt Columns
  		 *
  		 *  @example
  		 *    // Using `columnDefs`
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "columnDefs": [
  		 *          { "visible": false, "targets": [ 0 ] }
  		 *        ] } );
  		 *    } );
  		 *
  		 *  @example
  		 *    // Using `columns`
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "columns": [
  		 *          { "visible": false },
  		 *          null,
  		 *          null,
  		 *          null,
  		 *          null
  		 *        ] } );
  		 *    } );
  		 */
  		"bVisible": true,
  	
  	
  		/**
  		 * Developer definable function that is called whenever a cell is created (Ajax source,
  		 * etc) or processed for input (DOM source). This can be used as a compliment to mRender
  		 * allowing you to modify the DOM element (add background colour for example) when the
  		 * element is available.
  		 *  @type function
  		 *  @param {element} td The TD node that has been created
  		 *  @param {*} cellData The Data for the cell
  		 *  @param {array|object} rowData The data for the whole row
  		 *  @param {int} row The row index for the aoData data store
  		 *  @param {int} col The column index for aoColumns
  		 *
  		 *  @name DataTable.defaults.column.createdCell
  		 *  @dtopt Columns
  		 *
  		 *  @example
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "columnDefs": [ {
  		 *          "targets": [3],
  		 *          "createdCell": function (td, cellData, rowData, row, col) {
  		 *            if ( cellData == "1.7" ) {
  		 *              $(td).css('color', 'blue')
  		 *            }
  		 *          }
  		 *        } ]
  		 *      });
  		 *    } );
  		 */
  		"fnCreatedCell": null,
  	
  	
  		/**
  		 * This parameter has been replaced by `data` in DataTables to ensure naming
  		 * consistency. `dataProp` can still be used, as there is backwards
  		 * compatibility in DataTables for this option, but it is strongly
  		 * recommended that you use `data` in preference to `dataProp`.
  		 *  @name DataTable.defaults.column.dataProp
  		 */
  	
  	
  		/**
  		 * This property can be used to read data from any data source property,
  		 * including deeply nested objects / properties. `data` can be given in a
  		 * number of different ways which effect its behaviour:
  		 *
  		 * * `integer` - treated as an array index for the data source. This is the
  		 *   default that DataTables uses (incrementally increased for each column).
  		 * * `string` - read an object property from the data source. There are
  		 *   three 'special' options that can be used in the string to alter how
  		 *   DataTables reads the data from the source object:
  		 *    * `.` - Dotted Javascript notation. Just as you use a `.` in
  		 *      Javascript to read from nested objects, so to can the options
  		 *      specified in `data`. For example: `browser.version` or
  		 *      `browser.name`. If your object parameter name contains a period, use
  		 *      `\\` to escape it - i.e. `first\\.name`.
  		 *    * `[]` - Array notation. DataTables can automatically combine data
  		 *      from and array source, joining the data with the characters provided
  		 *      between the two brackets. For example: `name[, ]` would provide a
  		 *      comma-space separated list from the source array. If no characters
  		 *      are provided between the brackets, the original array source is
  		 *      returned.
  		 *    * `()` - Function notation. Adding `()` to the end of a parameter will
  		 *      execute a function of the name given. For example: `browser()` for a
  		 *      simple function on the data source, `browser.version()` for a
  		 *      function in a nested property or even `browser().version` to get an
  		 *      object property if the function called returns an object. Note that
  		 *      function notation is recommended for use in `render` rather than
  		 *      `data` as it is much simpler to use as a renderer.
  		 * * `null` - use the original data source for the row rather than plucking
  		 *   data directly from it. This action has effects on two other
  		 *   initialisation options:
  		 *    * `defaultContent` - When null is given as the `data` option and
  		 *      `defaultContent` is specified for the column, the value defined by
  		 *      `defaultContent` will be used for the cell.
  		 *    * `render` - When null is used for the `data` option and the `render`
  		 *      option is specified for the column, the whole data source for the
  		 *      row is used for the renderer.
  		 * * `function` - the function given will be executed whenever DataTables
  		 *   needs to set or get the data for a cell in the column. The function
  		 *   takes three parameters:
  		 *    * Parameters:
  		 *      * `{array|object}` The data source for the row
  		 *      * `{string}` The type call data requested - this will be 'set' when
  		 *        setting data or 'filter', 'display', 'type', 'sort' or undefined
  		 *        when gathering data. Note that when `undefined` is given for the
  		 *        type DataTables expects to get the raw data for the object back<
  		 *      * `{*}` Data to set when the second parameter is 'set'.
  		 *    * Return:
  		 *      * The return value from the function is not required when 'set' is
  		 *        the type of call, but otherwise the return is what will be used
  		 *        for the data requested.
  		 *
  		 * Note that `data` is a getter and setter option. If you just require
  		 * formatting of data for output, you will likely want to use `render` which
  		 * is simply a getter and thus simpler to use.
  		 *
  		 * Note that prior to DataTables 1.9.2 `data` was called `mDataProp`. The
  		 * name change reflects the flexibility of this property and is consistent
  		 * with the naming of mRender. If 'mDataProp' is given, then it will still
  		 * be used by DataTables, as it automatically maps the old name to the new
  		 * if required.
  		 *
  		 *  @type string|int|function|null
  		 *  @default null <i>Use automatically calculated column index</i>
  		 *
  		 *  @name DataTable.defaults.column.data
  		 *  @dtopt Columns
  		 *
  		 *  @example
  		 *    // Read table data from objects
  		 *    // JSON structure for each row:
  		 *    //   {
  		 *    //      "engine": {value},
  		 *    //      "browser": {value},
  		 *    //      "platform": {value},
  		 *    //      "version": {value},
  		 *    //      "grade": {value}
  		 *    //   }
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "ajaxSource": "sources/objects.txt",
  		 *        "columns": [
  		 *          { "data": "engine" },
  		 *          { "data": "browser" },
  		 *          { "data": "platform" },
  		 *          { "data": "version" },
  		 *          { "data": "grade" }
  		 *        ]
  		 *      } );
  		 *    } );
  		 *
  		 *  @example
  		 *    // Read information from deeply nested objects
  		 *    // JSON structure for each row:
  		 *    //   {
  		 *    //      "engine": {value},
  		 *    //      "browser": {value},
  		 *    //      "platform": {
  		 *    //         "inner": {value}
  		 *    //      },
  		 *    //      "details": [
  		 *    //         {value}, {value}
  		 *    //      ]
  		 *    //   }
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "ajaxSource": "sources/deep.txt",
  		 *        "columns": [
  		 *          { "data": "engine" },
  		 *          { "data": "browser" },
  		 *          { "data": "platform.inner" },
  		 *          { "data": "details.0" },
  		 *          { "data": "details.1" }
  		 *        ]
  		 *      } );
  		 *    } );
  		 *
  		 *  @example
  		 *    // Using `data` as a function to provide different information for
  		 *    // sorting, filtering and display. In this case, currency (price)
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "columnDefs": [ {
  		 *          "targets": [ 0 ],
  		 *          "data": function ( source, type, val ) {
  		 *            if (type === 'set') {
  		 *              source.price = val;
  		 *              // Store the computed dislay and filter values for efficiency
  		 *              source.price_display = val=="" ? "" : "$"+numberFormat(val);
  		 *              source.price_filter  = val=="" ? "" : "$"+numberFormat(val)+" "+val;
  		 *              return;
  		 *            }
  		 *            else if (type === 'display') {
  		 *              return source.price_display;
  		 *            }
  		 *            else if (type === 'filter') {
  		 *              return source.price_filter;
  		 *            }
  		 *            // 'sort', 'type' and undefined all just use the integer
  		 *            return source.price;
  		 *          }
  		 *        } ]
  		 *      } );
  		 *    } );
  		 *
  		 *  @example
  		 *    // Using default content
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "columnDefs": [ {
  		 *          "targets": [ 0 ],
  		 *          "data": null,
  		 *          "defaultContent": "Click to edit"
  		 *        } ]
  		 *      } );
  		 *    } );
  		 *
  		 *  @example
  		 *    // Using array notation - outputting a list from an array
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "columnDefs": [ {
  		 *          "targets": [ 0 ],
  		 *          "data": "name[, ]"
  		 *        } ]
  		 *      } );
  		 *    } );
  		 *
  		 */
  		"mData": null,
  	
  	
  		/**
  		 * This property is the rendering partner to `data` and it is suggested that
  		 * when you want to manipulate data for display (including filtering,
  		 * sorting etc) without altering the underlying data for the table, use this
  		 * property. `render` can be considered to be the the read only companion to
  		 * `data` which is read / write (then as such more complex). Like `data`
  		 * this option can be given in a number of different ways to effect its
  		 * behaviour:
  		 *
  		 * * `integer` - treated as an array index for the data source. This is the
  		 *   default that DataTables uses (incrementally increased for each column).
  		 * * `string` - read an object property from the data source. There are
  		 *   three 'special' options that can be used in the string to alter how
  		 *   DataTables reads the data from the source object:
  		 *    * `.` - Dotted Javascript notation. Just as you use a `.` in
  		 *      Javascript to read from nested objects, so to can the options
  		 *      specified in `data`. For example: `browser.version` or
  		 *      `browser.name`. If your object parameter name contains a period, use
  		 *      `\\` to escape it - i.e. `first\\.name`.
  		 *    * `[]` - Array notation. DataTables can automatically combine data
  		 *      from and array source, joining the data with the characters provided
  		 *      between the two brackets. For example: `name[, ]` would provide a
  		 *      comma-space separated list from the source array. If no characters
  		 *      are provided between the brackets, the original array source is
  		 *      returned.
  		 *    * `()` - Function notation. Adding `()` to the end of a parameter will
  		 *      execute a function of the name given. For example: `browser()` for a
  		 *      simple function on the data source, `browser.version()` for a
  		 *      function in a nested property or even `browser().version` to get an
  		 *      object property if the function called returns an object.
  		 * * `object` - use different data for the different data types requested by
  		 *   DataTables ('filter', 'display', 'type' or 'sort'). The property names
  		 *   of the object is the data type the property refers to and the value can
  		 *   defined using an integer, string or function using the same rules as
  		 *   `render` normally does. Note that an `_` option _must_ be specified.
  		 *   This is the default value to use if you haven't specified a value for
  		 *   the data type requested by DataTables.
  		 * * `function` - the function given will be executed whenever DataTables
  		 *   needs to set or get the data for a cell in the column. The function
  		 *   takes three parameters:
  		 *    * Parameters:
  		 *      * {array|object} The data source for the row (based on `data`)
  		 *      * {string} The type call data requested - this will be 'filter',
  		 *        'display', 'type' or 'sort'.
  		 *      * {array|object} The full data source for the row (not based on
  		 *        `data`)
  		 *    * Return:
  		 *      * The return value from the function is what will be used for the
  		 *        data requested.
  		 *
  		 *  @type string|int|function|object|null
  		 *  @default null Use the data source value.
  		 *
  		 *  @name DataTable.defaults.column.render
  		 *  @dtopt Columns
  		 *
  		 *  @example
  		 *    // Create a comma separated list from an array of objects
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "ajaxSource": "sources/deep.txt",
  		 *        "columns": [
  		 *          { "data": "engine" },
  		 *          { "data": "browser" },
  		 *          {
  		 *            "data": "platform",
  		 *            "render": "[, ].name"
  		 *          }
  		 *        ]
  		 *      } );
  		 *    } );
  		 *
  		 *  @example
  		 *    // Execute a function to obtain data
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "columnDefs": [ {
  		 *          "targets": [ 0 ],
  		 *          "data": null, // Use the full data source object for the renderer's source
  		 *          "render": "browserName()"
  		 *        } ]
  		 *      } );
  		 *    } );
  		 *
  		 *  @example
  		 *    // As an object, extracting different data for the different types
  		 *    // This would be used with a data source such as:
  		 *    //   { "phone": 5552368, "phone_filter": "5552368 555-2368", "phone_display": "555-2368" }
  		 *    // Here the `phone` integer is used for sorting and type detection, while `phone_filter`
  		 *    // (which has both forms) is used for filtering for if a user inputs either format, while
  		 *    // the formatted phone number is the one that is shown in the table.
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "columnDefs": [ {
  		 *          "targets": [ 0 ],
  		 *          "data": null, // Use the full data source object for the renderer's source
  		 *          "render": {
  		 *            "_": "phone",
  		 *            "filter": "phone_filter",
  		 *            "display": "phone_display"
  		 *          }
  		 *        } ]
  		 *      } );
  		 *    } );
  		 *
  		 *  @example
  		 *    // Use as a function to create a link from the data source
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "columnDefs": [ {
  		 *          "targets": [ 0 ],
  		 *          "data": "download_link",
  		 *          "render": function ( data, type, full ) {
  		 *            return '<a href="'+data+'">Download</a>';
  		 *          }
  		 *        } ]
  		 *      } );
  		 *    } );
  		 */
  		"mRender": null,
  	
  	
  		/**
  		 * Change the cell type created for the column - either TD cells or TH cells. This
  		 * can be useful as TH cells have semantic meaning in the table body, allowing them
  		 * to act as a header for a row (you may wish to add scope='row' to the TH elements).
  		 *  @type string
  		 *  @default td
  		 *
  		 *  @name DataTable.defaults.column.cellType
  		 *  @dtopt Columns
  		 *
  		 *  @example
  		 *    // Make the first column use TH cells
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "columnDefs": [ {
  		 *          "targets": [ 0 ],
  		 *          "cellType": "th"
  		 *        } ]
  		 *      } );
  		 *    } );
  		 */
  		"sCellType": "td",
  	
  	
  		/**
  		 * Class to give to each cell in this column.
  		 *  @type string
  		 *  @default <i>Empty string</i>
  		 *
  		 *  @name DataTable.defaults.column.class
  		 *  @dtopt Columns
  		 *
  		 *  @example
  		 *    // Using `columnDefs`
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "columnDefs": [
  		 *          { "class": "my_class", "targets": [ 0 ] }
  		 *        ]
  		 *      } );
  		 *    } );
  		 *
  		 *  @example
  		 *    // Using `columns`
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "columns": [
  		 *          { "class": "my_class" },
  		 *          null,
  		 *          null,
  		 *          null,
  		 *          null
  		 *        ]
  		 *      } );
  		 *    } );
  		 */
  		"sClass": "",
  	
  		/**
  		 * When DataTables calculates the column widths to assign to each column,
  		 * it finds the longest string in each column and then constructs a
  		 * temporary table and reads the widths from that. The problem with this
  		 * is that "mmm" is much wider then "iiii", but the latter is a longer
  		 * string - thus the calculation can go wrong (doing it properly and putting
  		 * it into an DOM object and measuring that is horribly(!) slow). Thus as
  		 * a "work around" we provide this option. It will append its value to the
  		 * text that is found to be the longest string for the column - i.e. padding.
  		 * Generally you shouldn't need this!
  		 *  @type string
  		 *  @default <i>Empty string<i>
  		 *
  		 *  @name DataTable.defaults.column.contentPadding
  		 *  @dtopt Columns
  		 *
  		 *  @example
  		 *    // Using `columns`
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "columns": [
  		 *          null,
  		 *          null,
  		 *          null,
  		 *          {
  		 *            "contentPadding": "mmm"
  		 *          }
  		 *        ]
  		 *      } );
  		 *    } );
  		 */
  		"sContentPadding": "",
  	
  	
  		/**
  		 * Allows a default value to be given for a column's data, and will be used
  		 * whenever a null data source is encountered (this can be because `data`
  		 * is set to null, or because the data source itself is null).
  		 *  @type string
  		 *  @default null
  		 *
  		 *  @name DataTable.defaults.column.defaultContent
  		 *  @dtopt Columns
  		 *
  		 *  @example
  		 *    // Using `columnDefs`
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "columnDefs": [
  		 *          {
  		 *            "data": null,
  		 *            "defaultContent": "Edit",
  		 *            "targets": [ -1 ]
  		 *          }
  		 *        ]
  		 *      } );
  		 *    } );
  		 *
  		 *  @example
  		 *    // Using `columns`
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "columns": [
  		 *          null,
  		 *          null,
  		 *          null,
  		 *          {
  		 *            "data": null,
  		 *            "defaultContent": "Edit"
  		 *          }
  		 *        ]
  		 *      } );
  		 *    } );
  		 */
  		"sDefaultContent": null,
  	
  	
  		/**
  		 * This parameter is only used in DataTables' server-side processing. It can
  		 * be exceptionally useful to know what columns are being displayed on the
  		 * client side, and to map these to database fields. When defined, the names
  		 * also allow DataTables to reorder information from the server if it comes
  		 * back in an unexpected order (i.e. if you switch your columns around on the
  		 * client-side, your server-side code does not also need updating).
  		 *  @type string
  		 *  @default <i>Empty string</i>
  		 *
  		 *  @name DataTable.defaults.column.name
  		 *  @dtopt Columns
  		 *
  		 *  @example
  		 *    // Using `columnDefs`
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "columnDefs": [
  		 *          { "name": "engine", "targets": [ 0 ] },
  		 *          { "name": "browser", "targets": [ 1 ] },
  		 *          { "name": "platform", "targets": [ 2 ] },
  		 *          { "name": "version", "targets": [ 3 ] },
  		 *          { "name": "grade", "targets": [ 4 ] }
  		 *        ]
  		 *      } );
  		 *    } );
  		 *
  		 *  @example
  		 *    // Using `columns`
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "columns": [
  		 *          { "name": "engine" },
  		 *          { "name": "browser" },
  		 *          { "name": "platform" },
  		 *          { "name": "version" },
  		 *          { "name": "grade" }
  		 *        ]
  		 *      } );
  		 *    } );
  		 */
  		"sName": "",
  	
  	
  		/**
  		 * Defines a data source type for the ordering which can be used to read
  		 * real-time information from the table (updating the internally cached
  		 * version) prior to ordering. This allows ordering to occur on user
  		 * editable elements such as form inputs.
  		 *  @type string
  		 *  @default std
  		 *
  		 *  @name DataTable.defaults.column.orderDataType
  		 *  @dtopt Columns
  		 *
  		 *  @example
  		 *    // Using `columnDefs`
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "columnDefs": [
  		 *          { "orderDataType": "dom-text", "targets": [ 2, 3 ] },
  		 *          { "type": "numeric", "targets": [ 3 ] },
  		 *          { "orderDataType": "dom-select", "targets": [ 4 ] },
  		 *          { "orderDataType": "dom-checkbox", "targets": [ 5 ] }
  		 *        ]
  		 *      } );
  		 *    } );
  		 *
  		 *  @example
  		 *    // Using `columns`
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "columns": [
  		 *          null,
  		 *          null,
  		 *          { "orderDataType": "dom-text" },
  		 *          { "orderDataType": "dom-text", "type": "numeric" },
  		 *          { "orderDataType": "dom-select" },
  		 *          { "orderDataType": "dom-checkbox" }
  		 *        ]
  		 *      } );
  		 *    } );
  		 */
  		"sSortDataType": "std",
  	
  	
  		/**
  		 * The title of this column.
  		 *  @type string
  		 *  @default null <i>Derived from the 'TH' value for this column in the
  		 *    original HTML table.</i>
  		 *
  		 *  @name DataTable.defaults.column.title
  		 *  @dtopt Columns
  		 *
  		 *  @example
  		 *    // Using `columnDefs`
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "columnDefs": [
  		 *          { "title": "My column title", "targets": [ 0 ] }
  		 *        ]
  		 *      } );
  		 *    } );
  		 *
  		 *  @example
  		 *    // Using `columns`
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "columns": [
  		 *          { "title": "My column title" },
  		 *          null,
  		 *          null,
  		 *          null,
  		 *          null
  		 *        ]
  		 *      } );
  		 *    } );
  		 */
  		"sTitle": null,
  	
  	
  		/**
  		 * The type allows you to specify how the data for this column will be
  		 * ordered. Four types (string, numeric, date and html (which will strip
  		 * HTML tags before ordering)) are currently available. Note that only date
  		 * formats understood by Javascript's Date() object will be accepted as type
  		 * date. For example: "Mar 26, 2008 5:03 PM". May take the values: 'string',
  		 * 'numeric', 'date' or 'html' (by default). Further types can be adding
  		 * through plug-ins.
  		 *  @type string
  		 *  @default null <i>Auto-detected from raw data</i>
  		 *
  		 *  @name DataTable.defaults.column.type
  		 *  @dtopt Columns
  		 *
  		 *  @example
  		 *    // Using `columnDefs`
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "columnDefs": [
  		 *          { "type": "html", "targets": [ 0 ] }
  		 *        ]
  		 *      } );
  		 *    } );
  		 *
  		 *  @example
  		 *    // Using `columns`
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "columns": [
  		 *          { "type": "html" },
  		 *          null,
  		 *          null,
  		 *          null,
  		 *          null
  		 *        ]
  		 *      } );
  		 *    } );
  		 */
  		"sType": null,
  	
  	
  		/**
  		 * Defining the width of the column, this parameter may take any CSS value
  		 * (3em, 20px etc). DataTables applies 'smart' widths to columns which have not
  		 * been given a specific width through this interface ensuring that the table
  		 * remains readable.
  		 *  @type string
  		 *  @default null <i>Automatic</i>
  		 *
  		 *  @name DataTable.defaults.column.width
  		 *  @dtopt Columns
  		 *
  		 *  @example
  		 *    // Using `columnDefs`
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "columnDefs": [
  		 *          { "width": "20%", "targets": [ 0 ] }
  		 *        ]
  		 *      } );
  		 *    } );
  		 *
  		 *  @example
  		 *    // Using `columns`
  		 *    $(document).ready( function() {
  		 *      $('#example').dataTable( {
  		 *        "columns": [
  		 *          { "width": "20%" },
  		 *          null,
  		 *          null,
  		 *          null,
  		 *          null
  		 *        ]
  		 *      } );
  		 *    } );
  		 */
  		"sWidth": null
  	};
  	
  	_fnHungarianMap( DataTable.defaults.column );
  	
  	
  	
  	/**
  	 * DataTables settings object - this holds all the information needed for a
  	 * given table, including configuration, data and current application of the
  	 * table options. DataTables does not have a single instance for each DataTable
  	 * with the settings attached to that instance, but rather instances of the
  	 * DataTable "class" are created on-the-fly as needed (typically by a
  	 * $().dataTable() call) and the settings object is then applied to that
  	 * instance.
  	 *
  	 * Note that this object is related to {@link DataTable.defaults} but this
  	 * one is the internal data store for DataTables's cache of columns. It should
  	 * NOT be manipulated outside of DataTables. Any configuration should be done
  	 * through the initialisation options.
  	 *  @namespace
  	 *  @todo Really should attach the settings object to individual instances so we
  	 *    don't need to create new instances on each $().dataTable() call (if the
  	 *    table already exists). It would also save passing oSettings around and
  	 *    into every single function. However, this is a very significant
  	 *    architecture change for DataTables and will almost certainly break
  	 *    backwards compatibility with older installations. This is something that
  	 *    will be done in 2.0.
  	 */
  	DataTable.models.oSettings = {
  		/**
  		 * Primary features of DataTables and their enablement state.
  		 *  @namespace
  		 */
  		"oFeatures": {
  	
  			/**
  			 * Flag to say if DataTables should automatically try to calculate the
  			 * optimum table and columns widths (true) or not (false).
  			 * Note that this parameter will be set by the initialisation routine. To
  			 * set a default use {@link DataTable.defaults}.
  			 *  @type boolean
  			 */
  			"bAutoWidth": null,
  	
  			/**
  			 * Delay the creation of TR and TD elements until they are actually
  			 * needed by a driven page draw. This can give a significant speed
  			 * increase for Ajax source and Javascript source data, but makes no
  			 * difference at all fro DOM and server-side processing tables.
  			 * Note that this parameter will be set by the initialisation routine. To
  			 * set a default use {@link DataTable.defaults}.
  			 *  @type boolean
  			 */
  			"bDeferRender": null,
  	
  			/**
  			 * Enable filtering on the table or not. Note that if this is disabled
  			 * then there is no filtering at all on the table, including fnFilter.
  			 * To just remove the filtering input use sDom and remove the 'f' option.
  			 * Note that this parameter will be set by the initialisation routine. To
  			 * set a default use {@link DataTable.defaults}.
  			 *  @type boolean
  			 */
  			"bFilter": null,
  	
  			/**
  			 * Table information element (the 'Showing x of y records' div) enable
  			 * flag.
  			 * Note that this parameter will be set by the initialisation routine. To
  			 * set a default use {@link DataTable.defaults}.
  			 *  @type boolean
  			 */
  			"bInfo": null,
  	
  			/**
  			 * Present a user control allowing the end user to change the page size
  			 * when pagination is enabled.
  			 * Note that this parameter will be set by the initialisation routine. To
  			 * set a default use {@link DataTable.defaults}.
  			 *  @type boolean
  			 */
  			"bLengthChange": null,
  	
  			/**
  			 * Pagination enabled or not. Note that if this is disabled then length
  			 * changing must also be disabled.
  			 * Note that this parameter will be set by the initialisation routine. To
  			 * set a default use {@link DataTable.defaults}.
  			 *  @type boolean
  			 */
  			"bPaginate": null,
  	
  			/**
  			 * Processing indicator enable flag whenever DataTables is enacting a
  			 * user request - typically an Ajax request for server-side processing.
  			 * Note that this parameter will be set by the initialisation routine. To
  			 * set a default use {@link DataTable.defaults}.
  			 *  @type boolean
  			 */
  			"bProcessing": null,
  	
  			/**
  			 * Server-side processing enabled flag - when enabled DataTables will
  			 * get all data from the server for every draw - there is no filtering,
  			 * sorting or paging done on the client-side.
  			 * Note that this parameter will be set by the initialisation routine. To
  			 * set a default use {@link DataTable.defaults}.
  			 *  @type boolean
  			 */
  			"bServerSide": null,
  	
  			/**
  			 * Sorting enablement flag.
  			 * Note that this parameter will be set by the initialisation routine. To
  			 * set a default use {@link DataTable.defaults}.
  			 *  @type boolean
  			 */
  			"bSort": null,
  	
  			/**
  			 * Multi-column sorting
  			 * Note that this parameter will be set by the initialisation routine. To
  			 * set a default use {@link DataTable.defaults}.
  			 *  @type boolean
  			 */
  			"bSortMulti": null,
  	
  			/**
  			 * Apply a class to the columns which are being sorted to provide a
  			 * visual highlight or not. This can slow things down when enabled since
  			 * there is a lot of DOM interaction.
  			 * Note that this parameter will be set by the initialisation routine. To
  			 * set a default use {@link DataTable.defaults}.
  			 *  @type boolean
  			 */
  			"bSortClasses": null,
  	
  			/**
  			 * State saving enablement flag.
  			 * Note that this parameter will be set by the initialisation routine. To
  			 * set a default use {@link DataTable.defaults}.
  			 *  @type boolean
  			 */
  			"bStateSave": null
  		},
  	
  	
  		/**
  		 * Scrolling settings for a table.
  		 *  @namespace
  		 */
  		"oScroll": {
  			/**
  			 * When the table is shorter in height than sScrollY, collapse the
  			 * table container down to the height of the table (when true).
  			 * Note that this parameter will be set by the initialisation routine. To
  			 * set a default use {@link DataTable.defaults}.
  			 *  @type boolean
  			 */
  			"bCollapse": null,
  	
  			/**
  			 * Width of the scrollbar for the web-browser's platform. Calculated
  			 * during table initialisation.
  			 *  @type int
  			 *  @default 0
  			 */
  			"iBarWidth": 0,
  	
  			/**
  			 * Viewport width for horizontal scrolling. Horizontal scrolling is
  			 * disabled if an empty string.
  			 * Note that this parameter will be set by the initialisation routine. To
  			 * set a default use {@link DataTable.defaults}.
  			 *  @type string
  			 */
  			"sX": null,
  	
  			/**
  			 * Width to expand the table to when using x-scrolling. Typically you
  			 * should not need to use this.
  			 * Note that this parameter will be set by the initialisation routine. To
  			 * set a default use {@link DataTable.defaults}.
  			 *  @type string
  			 *  @deprecated
  			 */
  			"sXInner": null,
  	
  			/**
  			 * Viewport height for vertical scrolling. Vertical scrolling is disabled
  			 * if an empty string.
  			 * Note that this parameter will be set by the initialisation routine. To
  			 * set a default use {@link DataTable.defaults}.
  			 *  @type string
  			 */
  			"sY": null
  		},
  	
  		/**
  		 * Language information for the table.
  		 *  @namespace
  		 *  @extends DataTable.defaults.oLanguage
  		 */
  		"oLanguage": {
  			/**
  			 * Information callback function. See
  			 * {@link DataTable.defaults.fnInfoCallback}
  			 *  @type function
  			 *  @default null
  			 */
  			"fnInfoCallback": null
  		},
  	
  		/**
  		 * Browser support parameters
  		 *  @namespace
  		 */
  		"oBrowser": {
  			/**
  			 * Indicate if the browser incorrectly calculates width:100% inside a
  			 * scrolling element (IE6/7)
  			 *  @type boolean
  			 *  @default false
  			 */
  			"bScrollOversize": false,
  	
  			/**
  			 * Determine if the vertical scrollbar is on the right or left of the
  			 * scrolling container - needed for rtl language layout, although not
  			 * all browsers move the scrollbar (Safari).
  			 *  @type boolean
  			 *  @default false
  			 */
  			"bScrollbarLeft": false,
  	
  			/**
  			 * Flag for if `getBoundingClientRect` is fully supported or not
  			 *  @type boolean
  			 *  @default false
  			 */
  			"bBounding": false,
  	
  			/**
  			 * Browser scrollbar width
  			 *  @type integer
  			 *  @default 0
  			 */
  			"barWidth": 0
  		},
  	
  	
  		"ajax": null,
  	
  	
  		/**
  		 * Array referencing the nodes which are used for the features. The
  		 * parameters of this object match what is allowed by sDom - i.e.
  		 *   <ul>
  		 *     <li>'l' - Length changing</li>
  		 *     <li>'f' - Filtering input</li>
  		 *     <li>'t' - The table!</li>
  		 *     <li>'i' - Information</li>
  		 *     <li>'p' - Pagination</li>
  		 *     <li>'r' - pRocessing</li>
  		 *   </ul>
  		 *  @type array
  		 *  @default []
  		 */
  		"aanFeatures": [],
  	
  		/**
  		 * Store data information - see {@link DataTable.models.oRow} for detailed
  		 * information.
  		 *  @type array
  		 *  @default []
  		 */
  		"aoData": [],
  	
  		/**
  		 * Array of indexes which are in the current display (after filtering etc)
  		 *  @type array
  		 *  @default []
  		 */
  		"aiDisplay": [],
  	
  		/**
  		 * Array of indexes for display - no filtering
  		 *  @type array
  		 *  @default []
  		 */
  		"aiDisplayMaster": [],
  	
  		/**
  		 * Map of row ids to data indexes
  		 *  @type object
  		 *  @default {}
  		 */
  		"aIds": {},
  	
  		/**
  		 * Store information about each column that is in use
  		 *  @type array
  		 *  @default []
  		 */
  		"aoColumns": [],
  	
  		/**
  		 * Store information about the table's header
  		 *  @type array
  		 *  @default []
  		 */
  		"aoHeader": [],
  	
  		/**
  		 * Store information about the table's footer
  		 *  @type array
  		 *  @default []
  		 */
  		"aoFooter": [],
  	
  		/**
  		 * Store the applied global search information in case we want to force a
  		 * research or compare the old search to a new one.
  		 * Note that this parameter will be set by the initialisation routine. To
  		 * set a default use {@link DataTable.defaults}.
  		 *  @namespace
  		 *  @extends DataTable.models.oSearch
  		 */
  		"oPreviousSearch": {},
  	
  		/**
  		 * Store the applied search for each column - see
  		 * {@link DataTable.models.oSearch} for the format that is used for the
  		 * filtering information for each column.
  		 *  @type array
  		 *  @default []
  		 */
  		"aoPreSearchCols": [],
  	
  		/**
  		 * Sorting that is applied to the table. Note that the inner arrays are
  		 * used in the following manner:
  		 * <ul>
  		 *   <li>Index 0 - column number</li>
  		 *   <li>Index 1 - current sorting direction</li>
  		 * </ul>
  		 * Note that this parameter will be set by the initialisation routine. To
  		 * set a default use {@link DataTable.defaults}.
  		 *  @type array
  		 *  @todo These inner arrays should really be objects
  		 */
  		"aaSorting": null,
  	
  		/**
  		 * Sorting that is always applied to the table (i.e. prefixed in front of
  		 * aaSorting).
  		 * Note that this parameter will be set by the initialisation routine. To
  		 * set a default use {@link DataTable.defaults}.
  		 *  @type array
  		 *  @default []
  		 */
  		"aaSortingFixed": [],
  	
  		/**
  		 * Classes to use for the striping of a table.
  		 * Note that this parameter will be set by the initialisation routine. To
  		 * set a default use {@link DataTable.defaults}.
  		 *  @type array
  		 *  @default []
  		 */
  		"asStripeClasses": null,
  	
  		/**
  		 * If restoring a table - we should restore its striping classes as well
  		 *  @type array
  		 *  @default []
  		 */
  		"asDestroyStripes": [],
  	
  		/**
  		 * If restoring a table - we should restore its width
  		 *  @type int
  		 *  @default 0
  		 */
  		"sDestroyWidth": 0,
  	
  		/**
  		 * Callback functions array for every time a row is inserted (i.e. on a draw).
  		 *  @type array
  		 *  @default []
  		 */
  		"aoRowCallback": [],
  	
  		/**
  		 * Callback functions for the header on each draw.
  		 *  @type array
  		 *  @default []
  		 */
  		"aoHeaderCallback": [],
  	
  		/**
  		 * Callback function for the footer on each draw.
  		 *  @type array
  		 *  @default []
  		 */
  		"aoFooterCallback": [],
  	
  		/**
  		 * Array of callback functions for draw callback functions
  		 *  @type array
  		 *  @default []
  		 */
  		"aoDrawCallback": [],
  	
  		/**
  		 * Array of callback functions for row created function
  		 *  @type array
  		 *  @default []
  		 */
  		"aoRowCreatedCallback": [],
  	
  		/**
  		 * Callback functions for just before the table is redrawn. A return of
  		 * false will be used to cancel the draw.
  		 *  @type array
  		 *  @default []
  		 */
  		"aoPreDrawCallback": [],
  	
  		/**
  		 * Callback functions for when the table has been initialised.
  		 *  @type array
  		 *  @default []
  		 */
  		"aoInitComplete": [],
  	
  	
  		/**
  		 * Callbacks for modifying the settings to be stored for state saving, prior to
  		 * saving state.
  		 *  @type array
  		 *  @default []
  		 */
  		"aoStateSaveParams": [],
  	
  		/**
  		 * Callbacks for modifying the settings that have been stored for state saving
  		 * prior to using the stored values to restore the state.
  		 *  @type array
  		 *  @default []
  		 */
  		"aoStateLoadParams": [],
  	
  		/**
  		 * Callbacks for operating on the settings object once the saved state has been
  		 * loaded
  		 *  @type array
  		 *  @default []
  		 */
  		"aoStateLoaded": [],
  	
  		/**
  		 * Cache the table ID for quick access
  		 *  @type string
  		 *  @default <i>Empty string</i>
  		 */
  		"sTableId": "",
  	
  		/**
  		 * The TABLE node for the main table
  		 *  @type node
  		 *  @default null
  		 */
  		"nTable": null,
  	
  		/**
  		 * Permanent ref to the thead element
  		 *  @type node
  		 *  @default null
  		 */
  		"nTHead": null,
  	
  		/**
  		 * Permanent ref to the tfoot element - if it exists
  		 *  @type node
  		 *  @default null
  		 */
  		"nTFoot": null,
  	
  		/**
  		 * Permanent ref to the tbody element
  		 *  @type node
  		 *  @default null
  		 */
  		"nTBody": null,
  	
  		/**
  		 * Cache the wrapper node (contains all DataTables controlled elements)
  		 *  @type node
  		 *  @default null
  		 */
  		"nTableWrapper": null,
  	
  		/**
  		 * Indicate if when using server-side processing the loading of data
  		 * should be deferred until the second draw.
  		 * Note that this parameter will be set by the initialisation routine. To
  		 * set a default use {@link DataTable.defaults}.
  		 *  @type boolean
  		 *  @default false
  		 */
  		"bDeferLoading": false,
  	
  		/**
  		 * Indicate if all required information has been read in
  		 *  @type boolean
  		 *  @default false
  		 */
  		"bInitialised": false,
  	
  		/**
  		 * Information about open rows. Each object in the array has the parameters
  		 * 'nTr' and 'nParent'
  		 *  @type array
  		 *  @default []
  		 */
  		"aoOpenRows": [],
  	
  		/**
  		 * Dictate the positioning of DataTables' control elements - see
  		 * {@link DataTable.model.oInit.sDom}.
  		 * Note that this parameter will be set by the initialisation routine. To
  		 * set a default use {@link DataTable.defaults}.
  		 *  @type string
  		 *  @default null
  		 */
  		"sDom": null,
  	
  		/**
  		 * Search delay (in mS)
  		 *  @type integer
  		 *  @default null
  		 */
  		"searchDelay": null,
  	
  		/**
  		 * Which type of pagination should be used.
  		 * Note that this parameter will be set by the initialisation routine. To
  		 * set a default use {@link DataTable.defaults}.
  		 *  @type string
  		 *  @default two_button
  		 */
  		"sPaginationType": "two_button",
  	
  		/**
  		 * The state duration (for `stateSave`) in seconds.
  		 * Note that this parameter will be set by the initialisation routine. To
  		 * set a default use {@link DataTable.defaults}.
  		 *  @type int
  		 *  @default 0
  		 */
  		"iStateDuration": 0,
  	
  		/**
  		 * Array of callback functions for state saving. Each array element is an
  		 * object with the following parameters:
  		 *   <ul>
  		 *     <li>function:fn - function to call. Takes two parameters, oSettings
  		 *       and the JSON string to save that has been thus far created. Returns
  		 *       a JSON string to be inserted into a json object
  		 *       (i.e. '"param": [ 0, 1, 2]')</li>
  		 *     <li>string:sName - name of callback</li>
  		 *   </ul>
  		 *  @type array
  		 *  @default []
  		 */
  		"aoStateSave": [],
  	
  		/**
  		 * Array of callback functions for state loading. Each array element is an
  		 * object with the following parameters:
  		 *   <ul>
  		 *     <li>function:fn - function to call. Takes two parameters, oSettings
  		 *       and the object stored. May return false to cancel state loading</li>
  		 *     <li>string:sName - name of callback</li>
  		 *   </ul>
  		 *  @type array
  		 *  @default []
  		 */
  		"aoStateLoad": [],
  	
  		/**
  		 * State that was saved. Useful for back reference
  		 *  @type object
  		 *  @default null
  		 */
  		"oSavedState": null,
  	
  		/**
  		 * State that was loaded. Useful for back reference
  		 *  @type object
  		 *  @default null
  		 */
  		"oLoadedState": null,
  	
  		/**
  		 * Source url for AJAX data for the table.
  		 * Note that this parameter will be set by the initialisation routine. To
  		 * set a default use {@link DataTable.defaults}.
  		 *  @type string
  		 *  @default null
  		 */
  		"sAjaxSource": null,
  	
  		/**
  		 * Property from a given object from which to read the table data from. This
  		 * can be an empty string (when not server-side processing), in which case
  		 * it is  assumed an an array is given directly.
  		 * Note that this parameter will be set by the initialisation routine. To
  		 * set a default use {@link DataTable.defaults}.
  		 *  @type string
  		 */
  		"sAjaxDataProp": null,
  	
  		/**
  		 * Note if draw should be blocked while getting data
  		 *  @type boolean
  		 *  @default true
  		 */
  		"bAjaxDataGet": true,
  	
  		/**
  		 * The last jQuery XHR object that was used for server-side data gathering.
  		 * This can be used for working with the XHR information in one of the
  		 * callbacks
  		 *  @type object
  		 *  @default null
  		 */
  		"jqXHR": null,
  	
  		/**
  		 * JSON returned from the server in the last Ajax request
  		 *  @type object
  		 *  @default undefined
  		 */
  		"json": undefined$1,
  	
  		/**
  		 * Data submitted as part of the last Ajax request
  		 *  @type object
  		 *  @default undefined
  		 */
  		"oAjaxData": undefined$1,
  	
  		/**
  		 * Function to get the server-side data.
  		 * Note that this parameter will be set by the initialisation routine. To
  		 * set a default use {@link DataTable.defaults}.
  		 *  @type function
  		 */
  		"fnServerData": null,
  	
  		/**
  		 * Functions which are called prior to sending an Ajax request so extra
  		 * parameters can easily be sent to the server
  		 *  @type array
  		 *  @default []
  		 */
  		"aoServerParams": [],
  	
  		/**
  		 * Send the XHR HTTP method - GET or POST (could be PUT or DELETE if
  		 * required).
  		 * Note that this parameter will be set by the initialisation routine. To
  		 * set a default use {@link DataTable.defaults}.
  		 *  @type string
  		 */
  		"sServerMethod": null,
  	
  		/**
  		 * Format numbers for display.
  		 * Note that this parameter will be set by the initialisation routine. To
  		 * set a default use {@link DataTable.defaults}.
  		 *  @type function
  		 */
  		"fnFormatNumber": null,
  	
  		/**
  		 * List of options that can be used for the user selectable length menu.
  		 * Note that this parameter will be set by the initialisation routine. To
  		 * set a default use {@link DataTable.defaults}.
  		 *  @type array
  		 *  @default []
  		 */
  		"aLengthMenu": null,
  	
  		/**
  		 * Counter for the draws that the table does. Also used as a tracker for
  		 * server-side processing
  		 *  @type int
  		 *  @default 0
  		 */
  		"iDraw": 0,
  	
  		/**
  		 * Indicate if a redraw is being done - useful for Ajax
  		 *  @type boolean
  		 *  @default false
  		 */
  		"bDrawing": false,
  	
  		/**
  		 * Draw index (iDraw) of the last error when parsing the returned data
  		 *  @type int
  		 *  @default -1
  		 */
  		"iDrawError": -1,
  	
  		/**
  		 * Paging display length
  		 *  @type int
  		 *  @default 10
  		 */
  		"_iDisplayLength": 10,
  	
  		/**
  		 * Paging start point - aiDisplay index
  		 *  @type int
  		 *  @default 0
  		 */
  		"_iDisplayStart": 0,
  	
  		/**
  		 * Server-side processing - number of records in the result set
  		 * (i.e. before filtering), Use fnRecordsTotal rather than
  		 * this property to get the value of the number of records, regardless of
  		 * the server-side processing setting.
  		 *  @type int
  		 *  @default 0
  		 *  @private
  		 */
  		"_iRecordsTotal": 0,
  	
  		/**
  		 * Server-side processing - number of records in the current display set
  		 * (i.e. after filtering). Use fnRecordsDisplay rather than
  		 * this property to get the value of the number of records, regardless of
  		 * the server-side processing setting.
  		 *  @type boolean
  		 *  @default 0
  		 *  @private
  		 */
  		"_iRecordsDisplay": 0,
  	
  		/**
  		 * The classes to use for the table
  		 *  @type object
  		 *  @default {}
  		 */
  		"oClasses": {},
  	
  		/**
  		 * Flag attached to the settings object so you can check in the draw
  		 * callback if filtering has been done in the draw. Deprecated in favour of
  		 * events.
  		 *  @type boolean
  		 *  @default false
  		 *  @deprecated
  		 */
  		"bFiltered": false,
  	
  		/**
  		 * Flag attached to the settings object so you can check in the draw
  		 * callback if sorting has been done in the draw. Deprecated in favour of
  		 * events.
  		 *  @type boolean
  		 *  @default false
  		 *  @deprecated
  		 */
  		"bSorted": false,
  	
  		/**
  		 * Indicate that if multiple rows are in the header and there is more than
  		 * one unique cell per column, if the top one (true) or bottom one (false)
  		 * should be used for sorting / title by DataTables.
  		 * Note that this parameter will be set by the initialisation routine. To
  		 * set a default use {@link DataTable.defaults}.
  		 *  @type boolean
  		 */
  		"bSortCellsTop": null,
  	
  		/**
  		 * Initialisation object that is used for the table
  		 *  @type object
  		 *  @default null
  		 */
  		"oInit": null,
  	
  		/**
  		 * Destroy callback functions - for plug-ins to attach themselves to the
  		 * destroy so they can clean up markup and events.
  		 *  @type array
  		 *  @default []
  		 */
  		"aoDestroyCallback": [],
  	
  	
  		/**
  		 * Get the number of records in the current record set, before filtering
  		 *  @type function
  		 */
  		"fnRecordsTotal": function ()
  		{
  			return _fnDataSource( this ) == 'ssp' ?
  				this._iRecordsTotal * 1 :
  				this.aiDisplayMaster.length;
  		},
  	
  		/**
  		 * Get the number of records in the current record set, after filtering
  		 *  @type function
  		 */
  		"fnRecordsDisplay": function ()
  		{
  			return _fnDataSource( this ) == 'ssp' ?
  				this._iRecordsDisplay * 1 :
  				this.aiDisplay.length;
  		},
  	
  		/**
  		 * Get the display end point - aiDisplay index
  		 *  @type function
  		 */
  		"fnDisplayEnd": function ()
  		{
  			var
  				len      = this._iDisplayLength,
  				start    = this._iDisplayStart,
  				calc     = start + len,
  				records  = this.aiDisplay.length,
  				features = this.oFeatures,
  				paginate = features.bPaginate;
  	
  			if ( features.bServerSide ) {
  				return paginate === false || len === -1 ?
  					start + records :
  					Math.min( start+len, this._iRecordsDisplay );
  			}
  			else {
  				return ! paginate || calc>records || len===-1 ?
  					records :
  					calc;
  			}
  		},
  	
  		/**
  		 * The DataTables object for this table
  		 *  @type object
  		 *  @default null
  		 */
  		"oInstance": null,
  	
  		/**
  		 * Unique identifier for each instance of the DataTables object. If there
  		 * is an ID on the table node, then it takes that value, otherwise an
  		 * incrementing internal counter is used.
  		 *  @type string
  		 *  @default null
  		 */
  		"sInstance": null,
  	
  		/**
  		 * tabindex attribute value that is added to DataTables control elements, allowing
  		 * keyboard navigation of the table and its controls.
  		 */
  		"iTabIndex": 0,
  	
  		/**
  		 * DIV container for the footer scrolling table if scrolling
  		 */
  		"nScrollHead": null,
  	
  		/**
  		 * DIV container for the footer scrolling table if scrolling
  		 */
  		"nScrollFoot": null,
  	
  		/**
  		 * Last applied sort
  		 *  @type array
  		 *  @default []
  		 */
  		"aLastSort": [],
  	
  		/**
  		 * Stored plug-in instances
  		 *  @type object
  		 *  @default {}
  		 */
  		"oPlugins": {},
  	
  		/**
  		 * Function used to get a row's id from the row's data
  		 *  @type function
  		 *  @default null
  		 */
  		"rowIdFn": null,
  	
  		/**
  		 * Data location where to store a row's id
  		 *  @type string
  		 *  @default null
  		 */
  		"rowId": null
  	};

  	/**
  	 * Extension object for DataTables that is used to provide all extension
  	 * options.
  	 *
  	 * Note that the `DataTable.ext` object is available through
  	 * `jQuery.fn.dataTable.ext` where it may be accessed and manipulated. It is
  	 * also aliased to `jQuery.fn.dataTableExt` for historic reasons.
  	 *  @namespace
  	 *  @extends DataTable.models.ext
  	 */
  	
  	
  	/**
  	 * DataTables extensions
  	 * 
  	 * This namespace acts as a collection area for plug-ins that can be used to
  	 * extend DataTables capabilities. Indeed many of the build in methods
  	 * use this method to provide their own capabilities (sorting methods for
  	 * example).
  	 *
  	 * Note that this namespace is aliased to `jQuery.fn.dataTableExt` for legacy
  	 * reasons
  	 *
  	 *  @namespace
  	 */
  	DataTable.ext = _ext = {
  		/**
  		 * Buttons. For use with the Buttons extension for DataTables. This is
  		 * defined here so other extensions can define buttons regardless of load
  		 * order. It is _not_ used by DataTables core.
  		 *
  		 *  @type object
  		 *  @default {}
  		 */
  		buttons: {},
  	
  	
  		/**
  		 * Element class names
  		 *
  		 *  @type object
  		 *  @default {}
  		 */
  		classes: {},
  	
  	
  		/**
  		 * DataTables build type (expanded by the download builder)
  		 *
  		 *  @type string
  		 */
  		builder: "-source-",
  	
  	
  		/**
  		 * Error reporting.
  		 * 
  		 * How should DataTables report an error. Can take the value 'alert',
  		 * 'throw', 'none' or a function.
  		 *
  		 *  @type string|function
  		 *  @default alert
  		 */
  		errMode: "alert",
  	
  	
  		/**
  		 * Feature plug-ins.
  		 * 
  		 * This is an array of objects which describe the feature plug-ins that are
  		 * available to DataTables. These feature plug-ins are then available for
  		 * use through the `dom` initialisation option.
  		 * 
  		 * Each feature plug-in is described by an object which must have the
  		 * following properties:
  		 * 
  		 * * `fnInit` - function that is used to initialise the plug-in,
  		 * * `cFeature` - a character so the feature can be enabled by the `dom`
  		 *   instillation option. This is case sensitive.
  		 *
  		 * The `fnInit` function has the following input parameters:
  		 *
  		 * 1. `{object}` DataTables settings object: see
  		 *    {@link DataTable.models.oSettings}
  		 *
  		 * And the following return is expected:
  		 * 
  		 * * {node|null} The element which contains your feature. Note that the
  		 *   return may also be void if your plug-in does not require to inject any
  		 *   DOM elements into DataTables control (`dom`) - for example this might
  		 *   be useful when developing a plug-in which allows table control via
  		 *   keyboard entry
  		 *
  		 *  @type array
  		 *
  		 *  @example
  		 *    $.fn.dataTable.ext.features.push( {
  		 *      "fnInit": function( oSettings ) {
  		 *        return new TableTools( { "oDTSettings": oSettings } );
  		 *      },
  		 *      "cFeature": "T"
  		 *    } );
  		 */
  		feature: [],
  	
  	
  		/**
  		 * Row searching.
  		 * 
  		 * This method of searching is complimentary to the default type based
  		 * searching, and a lot more comprehensive as it allows you complete control
  		 * over the searching logic. Each element in this array is a function
  		 * (parameters described below) that is called for every row in the table,
  		 * and your logic decides if it should be included in the searching data set
  		 * or not.
  		 *
  		 * Searching functions have the following input parameters:
  		 *
  		 * 1. `{object}` DataTables settings object: see
  		 *    {@link DataTable.models.oSettings}
  		 * 2. `{array|object}` Data for the row to be processed (same as the
  		 *    original format that was passed in as the data source, or an array
  		 *    from a DOM data source
  		 * 3. `{int}` Row index ({@link DataTable.models.oSettings.aoData}), which
  		 *    can be useful to retrieve the `TR` element if you need DOM interaction.
  		 *
  		 * And the following return is expected:
  		 *
  		 * * {boolean} Include the row in the searched result set (true) or not
  		 *   (false)
  		 *
  		 * Note that as with the main search ability in DataTables, technically this
  		 * is "filtering", since it is subtractive. However, for consistency in
  		 * naming we call it searching here.
  		 *
  		 *  @type array
  		 *  @default []
  		 *
  		 *  @example
  		 *    // The following example shows custom search being applied to the
  		 *    // fourth column (i.e. the data[3] index) based on two input values
  		 *    // from the end-user, matching the data in a certain range.
  		 *    $.fn.dataTable.ext.search.push(
  		 *      function( settings, data, dataIndex ) {
  		 *        var min = document.getElementById('min').value * 1;
  		 *        var max = document.getElementById('max').value * 1;
  		 *        var version = data[3] == "-" ? 0 : data[3]*1;
  		 *
  		 *        if ( min == "" && max == "" ) {
  		 *          return true;
  		 *        }
  		 *        else if ( min == "" && version < max ) {
  		 *          return true;
  		 *        }
  		 *        else if ( min < version && "" == max ) {
  		 *          return true;
  		 *        }
  		 *        else if ( min < version && version < max ) {
  		 *          return true;
  		 *        }
  		 *        return false;
  		 *      }
  		 *    );
  		 */
  		search: [],
  	
  	
  		/**
  		 * Selector extensions
  		 *
  		 * The `selector` option can be used to extend the options available for the
  		 * selector modifier options (`selector-modifier` object data type) that
  		 * each of the three built in selector types offer (row, column and cell +
  		 * their plural counterparts). For example the Select extension uses this
  		 * mechanism to provide an option to select only rows, columns and cells
  		 * that have been marked as selected by the end user (`{selected: true}`),
  		 * which can be used in conjunction with the existing built in selector
  		 * options.
  		 *
  		 * Each property is an array to which functions can be pushed. The functions
  		 * take three attributes:
  		 *
  		 * * Settings object for the host table
  		 * * Options object (`selector-modifier` object type)
  		 * * Array of selected item indexes
  		 *
  		 * The return is an array of the resulting item indexes after the custom
  		 * selector has been applied.
  		 *
  		 *  @type object
  		 */
  		selector: {
  			cell: [],
  			column: [],
  			row: []
  		},
  	
  	
  		/**
  		 * Internal functions, exposed for used in plug-ins.
  		 * 
  		 * Please note that you should not need to use the internal methods for
  		 * anything other than a plug-in (and even then, try to avoid if possible).
  		 * The internal function may change between releases.
  		 *
  		 *  @type object
  		 *  @default {}
  		 */
  		internal: {},
  	
  	
  		/**
  		 * Legacy configuration options. Enable and disable legacy options that
  		 * are available in DataTables.
  		 *
  		 *  @type object
  		 */
  		legacy: {
  			/**
  			 * Enable / disable DataTables 1.9 compatible server-side processing
  			 * requests
  			 *
  			 *  @type boolean
  			 *  @default null
  			 */
  			ajax: null
  		},
  	
  	
  		/**
  		 * Pagination plug-in methods.
  		 * 
  		 * Each entry in this object is a function and defines which buttons should
  		 * be shown by the pagination rendering method that is used for the table:
  		 * {@link DataTable.ext.renderer.pageButton}. The renderer addresses how the
  		 * buttons are displayed in the document, while the functions here tell it
  		 * what buttons to display. This is done by returning an array of button
  		 * descriptions (what each button will do).
  		 *
  		 * Pagination types (the four built in options and any additional plug-in
  		 * options defined here) can be used through the `paginationType`
  		 * initialisation parameter.
  		 *
  		 * The functions defined take two parameters:
  		 *
  		 * 1. `{int} page` The current page index
  		 * 2. `{int} pages` The number of pages in the table
  		 *
  		 * Each function is expected to return an array where each element of the
  		 * array can be one of:
  		 *
  		 * * `first` - Jump to first page when activated
  		 * * `last` - Jump to last page when activated
  		 * * `previous` - Show previous page when activated
  		 * * `next` - Show next page when activated
  		 * * `{int}` - Show page of the index given
  		 * * `{array}` - A nested array containing the above elements to add a
  		 *   containing 'DIV' element (might be useful for styling).
  		 *
  		 * Note that DataTables v1.9- used this object slightly differently whereby
  		 * an object with two functions would be defined for each plug-in. That
  		 * ability is still supported by DataTables 1.10+ to provide backwards
  		 * compatibility, but this option of use is now decremented and no longer
  		 * documented in DataTables 1.10+.
  		 *
  		 *  @type object
  		 *  @default {}
  		 *
  		 *  @example
  		 *    // Show previous, next and current page buttons only
  		 *    $.fn.dataTableExt.oPagination.current = function ( page, pages ) {
  		 *      return [ 'previous', page, 'next' ];
  		 *    };
  		 */
  		pager: {},
  	
  	
  		renderer: {
  			pageButton: {},
  			header: {}
  		},
  	
  	
  		/**
  		 * Ordering plug-ins - custom data source
  		 * 
  		 * The extension options for ordering of data available here is complimentary
  		 * to the default type based ordering that DataTables typically uses. It
  		 * allows much greater control over the the data that is being used to
  		 * order a column, but is necessarily therefore more complex.
  		 * 
  		 * This type of ordering is useful if you want to do ordering based on data
  		 * live from the DOM (for example the contents of an 'input' element) rather
  		 * than just the static string that DataTables knows of.
  		 * 
  		 * The way these plug-ins work is that you create an array of the values you
  		 * wish to be ordering for the column in question and then return that
  		 * array. The data in the array much be in the index order of the rows in
  		 * the table (not the currently ordering order!). Which order data gathering
  		 * function is run here depends on the `dt-init columns.orderDataType`
  		 * parameter that is used for the column (if any).
  		 *
  		 * The functions defined take two parameters:
  		 *
  		 * 1. `{object}` DataTables settings object: see
  		 *    {@link DataTable.models.oSettings}
  		 * 2. `{int}` Target column index
  		 *
  		 * Each function is expected to return an array:
  		 *
  		 * * `{array}` Data for the column to be ordering upon
  		 *
  		 *  @type array
  		 *
  		 *  @example
  		 *    // Ordering using `input` node values
  		 *    $.fn.dataTable.ext.order['dom-text'] = function  ( settings, col )
  		 *    {
  		 *      return this.api().column( col, {order:'index'} ).nodes().map( function ( td, i ) {
  		 *        return $('input', td).val();
  		 *      } );
  		 *    }
  		 */
  		order: {},
  	
  	
  		/**
  		 * Type based plug-ins.
  		 *
  		 * Each column in DataTables has a type assigned to it, either by automatic
  		 * detection or by direct assignment using the `type` option for the column.
  		 * The type of a column will effect how it is ordering and search (plug-ins
  		 * can also make use of the column type if required).
  		 *
  		 * @namespace
  		 */
  		type: {
  			/**
  			 * Type detection functions.
  			 *
  			 * The functions defined in this object are used to automatically detect
  			 * a column's type, making initialisation of DataTables super easy, even
  			 * when complex data is in the table.
  			 *
  			 * The functions defined take two parameters:
  			 *
  		     *  1. `{*}` Data from the column cell to be analysed
  		     *  2. `{settings}` DataTables settings object. This can be used to
  		     *     perform context specific type detection - for example detection
  		     *     based on language settings such as using a comma for a decimal
  		     *     place. Generally speaking the options from the settings will not
  		     *     be required
  			 *
  			 * Each function is expected to return:
  			 *
  			 * * `{string|null}` Data type detected, or null if unknown (and thus
  			 *   pass it on to the other type detection functions.
  			 *
  			 *  @type array
  			 *
  			 *  @example
  			 *    // Currency type detection plug-in:
  			 *    $.fn.dataTable.ext.type.detect.push(
  			 *      function ( data, settings ) {
  			 *        // Check the numeric part
  			 *        if ( ! data.substring(1).match(/[0-9]/) ) {
  			 *          return null;
  			 *        }
  			 *
  			 *        // Check prefixed by currency
  			 *        if ( data.charAt(0) == '$' || data.charAt(0) == '&pound;' ) {
  			 *          return 'currency';
  			 *        }
  			 *        return null;
  			 *      }
  			 *    );
  			 */
  			detect: [],
  	
  	
  			/**
  			 * Type based search formatting.
  			 *
  			 * The type based searching functions can be used to pre-format the
  			 * data to be search on. For example, it can be used to strip HTML
  			 * tags or to de-format telephone numbers for numeric only searching.
  			 *
  			 * Note that is a search is not defined for a column of a given type,
  			 * no search formatting will be performed.
  			 * 
  			 * Pre-processing of searching data plug-ins - When you assign the sType
  			 * for a column (or have it automatically detected for you by DataTables
  			 * or a type detection plug-in), you will typically be using this for
  			 * custom sorting, but it can also be used to provide custom searching
  			 * by allowing you to pre-processing the data and returning the data in
  			 * the format that should be searched upon. This is done by adding
  			 * functions this object with a parameter name which matches the sType
  			 * for that target column. This is the corollary of <i>afnSortData</i>
  			 * for searching data.
  			 *
  			 * The functions defined take a single parameter:
  			 *
  		     *  1. `{*}` Data from the column cell to be prepared for searching
  			 *
  			 * Each function is expected to return:
  			 *
  			 * * `{string|null}` Formatted string that will be used for the searching.
  			 *
  			 *  @type object
  			 *  @default {}
  			 *
  			 *  @example
  			 *    $.fn.dataTable.ext.type.search['title-numeric'] = function ( d ) {
  			 *      return d.replace(/\n/g," ").replace( /<.*?>/g, "" );
  			 *    }
  			 */
  			search: {},
  	
  	
  			/**
  			 * Type based ordering.
  			 *
  			 * The column type tells DataTables what ordering to apply to the table
  			 * when a column is sorted upon. The order for each type that is defined,
  			 * is defined by the functions available in this object.
  			 *
  			 * Each ordering option can be described by three properties added to
  			 * this object:
  			 *
  			 * * `{type}-pre` - Pre-formatting function
  			 * * `{type}-asc` - Ascending order function
  			 * * `{type}-desc` - Descending order function
  			 *
  			 * All three can be used together, only `{type}-pre` or only
  			 * `{type}-asc` and `{type}-desc` together. It is generally recommended
  			 * that only `{type}-pre` is used, as this provides the optimal
  			 * implementation in terms of speed, although the others are provided
  			 * for compatibility with existing Javascript sort functions.
  			 *
  			 * `{type}-pre`: Functions defined take a single parameter:
  			 *
  		     *  1. `{*}` Data from the column cell to be prepared for ordering
  			 *
  			 * And return:
  			 *
  			 * * `{*}` Data to be sorted upon
  			 *
  			 * `{type}-asc` and `{type}-desc`: Functions are typical Javascript sort
  			 * functions, taking two parameters:
  			 *
  		     *  1. `{*}` Data to compare to the second parameter
  		     *  2. `{*}` Data to compare to the first parameter
  			 *
  			 * And returning:
  			 *
  			 * * `{*}` Ordering match: <0 if first parameter should be sorted lower
  			 *   than the second parameter, ===0 if the two parameters are equal and
  			 *   >0 if the first parameter should be sorted height than the second
  			 *   parameter.
  			 * 
  			 *  @type object
  			 *  @default {}
  			 *
  			 *  @example
  			 *    // Numeric ordering of formatted numbers with a pre-formatter
  			 *    $.extend( $.fn.dataTable.ext.type.order, {
  			 *      "string-pre": function(x) {
  			 *        a = (a === "-" || a === "") ? 0 : a.replace( /[^\d\-\.]/g, "" );
  			 *        return parseFloat( a );
  			 *      }
  			 *    } );
  			 *
  			 *  @example
  			 *    // Case-sensitive string ordering, with no pre-formatting method
  			 *    $.extend( $.fn.dataTable.ext.order, {
  			 *      "string-case-asc": function(x,y) {
  			 *        return ((x < y) ? -1 : ((x > y) ? 1 : 0));
  			 *      },
  			 *      "string-case-desc": function(x,y) {
  			 *        return ((x < y) ? 1 : ((x > y) ? -1 : 0));
  			 *      }
  			 *    } );
  			 */
  			order: {}
  		},
  	
  		/**
  		 * Unique DataTables instance counter
  		 *
  		 * @type int
  		 * @private
  		 */
  		_unique: 0,
  	
  	
  		//
  		// Depreciated
  		// The following properties are retained for backwards compatiblity only.
  		// The should not be used in new projects and will be removed in a future
  		// version
  		//
  	
  		/**
  		 * Version check function.
  		 *  @type function
  		 *  @depreciated Since 1.10
  		 */
  		fnVersionCheck: DataTable.fnVersionCheck,
  	
  	
  		/**
  		 * Index for what 'this' index API functions should use
  		 *  @type int
  		 *  @deprecated Since v1.10
  		 */
  		iApiIndex: 0,
  	
  	
  		/**
  		 * jQuery UI class container
  		 *  @type object
  		 *  @deprecated Since v1.10
  		 */
  		oJUIClasses: {},
  	
  	
  		/**
  		 * Software version
  		 *  @type string
  		 *  @deprecated Since v1.10
  		 */
  		sVersion: DataTable.version
  	};
  	
  	
  	//
  	// Backwards compatibility. Alias to pre 1.10 Hungarian notation counter parts
  	//
  	$.extend( _ext, {
  		afnFiltering: _ext.search,
  		aTypes:       _ext.type.detect,
  		ofnSearch:    _ext.type.search,
  		oSort:        _ext.type.order,
  		afnSortData:  _ext.order,
  		aoFeatures:   _ext.feature,
  		oApi:         _ext.internal,
  		oStdClasses:  _ext.classes,
  		oPagination:  _ext.pager
  	} );
  	
  	
  	$.extend( DataTable.ext.classes, {
  		"sTable": "dataTable",
  		"sNoFooter": "no-footer",
  	
  		/* Paging buttons */
  		"sPageButton": "paginate_button",
  		"sPageButtonActive": "current",
  		"sPageButtonDisabled": "disabled",
  	
  		/* Striping classes */
  		"sStripeOdd": "odd",
  		"sStripeEven": "even",
  	
  		/* Empty row */
  		"sRowEmpty": "dataTables_empty",
  	
  		/* Features */
  		"sWrapper": "dataTables_wrapper",
  		"sFilter": "dataTables_filter",
  		"sInfo": "dataTables_info",
  		"sPaging": "dataTables_paginate paging_", /* Note that the type is postfixed */
  		"sLength": "dataTables_length",
  		"sProcessing": "dataTables_processing",
  	
  		/* Sorting */
  		"sSortAsc": "sorting_asc",
  		"sSortDesc": "sorting_desc",
  		"sSortable": "sorting", /* Sortable in both directions */
  		"sSortableAsc": "sorting_asc_disabled",
  		"sSortableDesc": "sorting_desc_disabled",
  		"sSortableNone": "sorting_disabled",
  		"sSortColumn": "sorting_", /* Note that an int is postfixed for the sorting order */
  	
  		/* Filtering */
  		"sFilterInput": "",
  	
  		/* Page length */
  		"sLengthSelect": "",
  	
  		/* Scrolling */
  		"sScrollWrapper": "dataTables_scroll",
  		"sScrollHead": "dataTables_scrollHead",
  		"sScrollHeadInner": "dataTables_scrollHeadInner",
  		"sScrollBody": "dataTables_scrollBody",
  		"sScrollFoot": "dataTables_scrollFoot",
  		"sScrollFootInner": "dataTables_scrollFootInner",
  	
  		/* Misc */
  		"sHeaderTH": "",
  		"sFooterTH": "",
  	
  		// Deprecated
  		"sSortJUIAsc": "",
  		"sSortJUIDesc": "",
  		"sSortJUI": "",
  		"sSortJUIAscAllowed": "",
  		"sSortJUIDescAllowed": "",
  		"sSortJUIWrapper": "",
  		"sSortIcon": "",
  		"sJUIHeader": "",
  		"sJUIFooter": ""
  	} );
  	
  	
  	var extPagination = DataTable.ext.pager;
  	
  	function _numbers ( page, pages ) {
  		var 
  			numbers = [],
  			buttons = extPagination.numbers_length,
  			half = Math.floor( buttons / 2 );
  	
  		if ( pages <= buttons ) {
  			numbers = _range( 0, pages );
  		}
  		else if ( page <= half ) {
  			numbers = _range( 0, buttons-2 );
  			numbers.push( 'ellipsis' );
  			numbers.push( pages-1 );
  		}
  		else if ( page >= pages - 1 - half ) {
  			numbers = _range( pages-(buttons-2), pages );
  			numbers.splice( 0, 0, 'ellipsis' ); // no unshift in ie6
  			numbers.splice( 0, 0, 0 );
  		}
  		else {
  			numbers = _range( page-half+2, page+half-1 );
  			numbers.push( 'ellipsis' );
  			numbers.push( pages-1 );
  			numbers.splice( 0, 0, 'ellipsis' );
  			numbers.splice( 0, 0, 0 );
  		}
  	
  		numbers.DT_el = 'span';
  		return numbers;
  	}
  	
  	
  	$.extend( extPagination, {
  		simple: function ( page, pages ) {
  			return [ 'previous', 'next' ];
  		},
  	
  		full: function ( page, pages ) {
  			return [  'first', 'previous', 'next', 'last' ];
  		},
  	
  		numbers: function ( page, pages ) {
  			return [ _numbers(page, pages) ];
  		},
  	
  		simple_numbers: function ( page, pages ) {
  			return [ 'previous', _numbers(page, pages), 'next' ];
  		},
  	
  		full_numbers: function ( page, pages ) {
  			return [ 'first', 'previous', _numbers(page, pages), 'next', 'last' ];
  		},
  		
  		first_last_numbers: function (page, pages) {
  	 		return ['first', _numbers(page, pages), 'last'];
  	 	},
  	
  		// For testing and plug-ins to use
  		_numbers: _numbers,
  	
  		// Number of number buttons (including ellipsis) to show. _Must be odd!_
  		numbers_length: 7
  	} );
  	
  	
  	$.extend( true, DataTable.ext.renderer, {
  		pageButton: {
  			_: function ( settings, host, idx, buttons, page, pages ) {
  				var classes = settings.oClasses;
  				var lang = settings.oLanguage.oPaginate;
  				var aria = settings.oLanguage.oAria.paginate || {};
  				var btnDisplay, btnClass, counter=0;
  	
  				var attach = function( container, buttons ) {
  					var i, ien, node, button, tabIndex;
  					var disabledClass = classes.sPageButtonDisabled;
  					var clickHandler = function ( e ) {
  						_fnPageChange( settings, e.data.action, true );
  					};
  	
  					for ( i=0, ien=buttons.length ; i<ien ; i++ ) {
  						button = buttons[i];
  	
  						if ( $.isArray( button ) ) {
  							var inner = $( '<'+(button.DT_el || 'div')+'/>' )
  								.appendTo( container );
  							attach( inner, button );
  						}
  						else {
  							btnDisplay = null;
  							btnClass = button;
  							tabIndex = settings.iTabIndex;
  	
  							switch ( button ) {
  								case 'ellipsis':
  									container.append('<span class="ellipsis">&#x2026;</span>');
  									break;
  	
  								case 'first':
  									btnDisplay = lang.sFirst;
  	
  									if ( page === 0 ) {
  										tabIndex = -1;
  										btnClass += ' ' + disabledClass;
  									}
  									break;
  	
  								case 'previous':
  									btnDisplay = lang.sPrevious;
  	
  									if ( page === 0 ) {
  										tabIndex = -1;
  										btnClass += ' ' + disabledClass;
  									}
  									break;
  	
  								case 'next':
  									btnDisplay = lang.sNext;
  	
  									if ( pages === 0 || page === pages-1 ) {
  										tabIndex = -1;
  										btnClass += ' ' + disabledClass;
  									}
  									break;
  	
  								case 'last':
  									btnDisplay = lang.sLast;
  	
  									if ( page === pages-1 ) {
  										tabIndex = -1;
  										btnClass += ' ' + disabledClass;
  									}
  									break;
  	
  								default:
  									btnDisplay = button + 1;
  									btnClass = page === button ?
  										classes.sPageButtonActive : '';
  									break;
  							}
  	
  							if ( btnDisplay !== null ) {
  								node = $('<a>', {
  										'class': classes.sPageButton+' '+btnClass,
  										'aria-controls': settings.sTableId,
  										'aria-label': aria[ button ],
  										'data-dt-idx': counter,
  										'tabindex': tabIndex,
  										'id': idx === 0 && typeof button === 'string' ?
  											settings.sTableId +'_'+ button :
  											null
  									} )
  									.html( btnDisplay )
  									.appendTo( container );
  	
  								_fnBindAction(
  									node, {action: button}, clickHandler
  								);
  	
  								counter++;
  							}
  						}
  					}
  				};
  	
  				// IE9 throws an 'unknown error' if document.activeElement is used
  				// inside an iframe or frame. Try / catch the error. Not good for
  				// accessibility, but neither are frames.
  				var activeEl;
  	
  				try {
  					// Because this approach is destroying and recreating the paging
  					// elements, focus is lost on the select button which is bad for
  					// accessibility. So we want to restore focus once the draw has
  					// completed
  					activeEl = $(host).find(document.activeElement).data('dt-idx');
  				}
  				catch (e) {}
  	
  				attach( $(host).empty(), buttons );
  	
  				if ( activeEl !== undefined$1 ) {
  					$(host).find( '[data-dt-idx='+activeEl+']' ).trigger('focus');
  				}
  			}
  		}
  	} );
  	
  	
  	
  	// Built in type detection. See model.ext.aTypes for information about
  	// what is required from this methods.
  	$.extend( DataTable.ext.type.detect, [
  		// Plain numbers - first since V8 detects some plain numbers as dates
  		// e.g. Date.parse('55') (but not all, e.g. Date.parse('22')...).
  		function ( d, settings )
  		{
  			var decimal = settings.oLanguage.sDecimal;
  			return _isNumber( d, decimal ) ? 'num'+decimal : null;
  		},
  	
  		// Dates (only those recognised by the browser's Date.parse)
  		function ( d, settings )
  		{
  			// V8 tries _very_ hard to make a string passed into `Date.parse()`
  			// valid, so we need to use a regex to restrict date formats. Use a
  			// plug-in for anything other than ISO8601 style strings
  			if ( d && !(d instanceof Date) && ! _re_date.test(d) ) {
  				return null;
  			}
  			var parsed = Date.parse(d);
  			return (parsed !== null && !isNaN(parsed)) || _empty(d) ? 'date' : null;
  		},
  	
  		// Formatted numbers
  		function ( d, settings )
  		{
  			var decimal = settings.oLanguage.sDecimal;
  			return _isNumber( d, decimal, true ) ? 'num-fmt'+decimal : null;
  		},
  	
  		// HTML numeric
  		function ( d, settings )
  		{
  			var decimal = settings.oLanguage.sDecimal;
  			return _htmlNumeric( d, decimal ) ? 'html-num'+decimal : null;
  		},
  	
  		// HTML numeric, formatted
  		function ( d, settings )
  		{
  			var decimal = settings.oLanguage.sDecimal;
  			return _htmlNumeric( d, decimal, true ) ? 'html-num-fmt'+decimal : null;
  		},
  	
  		// HTML (this is strict checking - there must be html)
  		function ( d, settings )
  		{
  			return _empty( d ) || (typeof d === 'string' && d.indexOf('<') !== -1) ?
  				'html' : null;
  		}
  	] );
  	
  	
  	
  	// Filter formatting functions. See model.ext.ofnSearch for information about
  	// what is required from these methods.
  	// 
  	// Note that additional search methods are added for the html numbers and
  	// html formatted numbers by `_addNumericSort()` when we know what the decimal
  	// place is
  	
  	
  	$.extend( DataTable.ext.type.search, {
  		html: function ( data ) {
  			return _empty(data) ?
  				data :
  				typeof data === 'string' ?
  					data
  						.replace( _re_new_lines, " " )
  						.replace( _re_html, "" ) :
  					'';
  		},
  	
  		string: function ( data ) {
  			return _empty(data) ?
  				data :
  				typeof data === 'string' ?
  					data.replace( _re_new_lines, " " ) :
  					data;
  		}
  	} );
  	
  	
  	
  	var __numericReplace = function ( d, decimalPlace, re1, re2 ) {
  		if ( d !== 0 && (!d || d === '-') ) {
  			return -Infinity;
  		}
  	
  		// If a decimal place other than `.` is used, it needs to be given to the
  		// function so we can detect it and replace with a `.` which is the only
  		// decimal place Javascript recognises - it is not locale aware.
  		if ( decimalPlace ) {
  			d = _numToDecimal( d, decimalPlace );
  		}
  	
  		if ( d.replace ) {
  			if ( re1 ) {
  				d = d.replace( re1, '' );
  			}
  	
  			if ( re2 ) {
  				d = d.replace( re2, '' );
  			}
  		}
  	
  		return d * 1;
  	};
  	
  	
  	// Add the numeric 'deformatting' functions for sorting and search. This is done
  	// in a function to provide an easy ability for the language options to add
  	// additional methods if a non-period decimal place is used.
  	function _addNumericSort ( decimalPlace ) {
  		$.each(
  			{
  				// Plain numbers
  				"num": function ( d ) {
  					return __numericReplace( d, decimalPlace );
  				},
  	
  				// Formatted numbers
  				"num-fmt": function ( d ) {
  					return __numericReplace( d, decimalPlace, _re_formatted_numeric );
  				},
  	
  				// HTML numeric
  				"html-num": function ( d ) {
  					return __numericReplace( d, decimalPlace, _re_html );
  				},
  	
  				// HTML numeric, formatted
  				"html-num-fmt": function ( d ) {
  					return __numericReplace( d, decimalPlace, _re_html, _re_formatted_numeric );
  				}
  			},
  			function ( key, fn ) {
  				// Add the ordering method
  				_ext.type.order[ key+decimalPlace+'-pre' ] = fn;
  	
  				// For HTML types add a search formatter that will strip the HTML
  				if ( key.match(/^html\-/) ) {
  					_ext.type.search[ key+decimalPlace ] = _ext.type.search.html;
  				}
  			}
  		);
  	}
  	
  	
  	// Default sort methods
  	$.extend( _ext.type.order, {
  		// Dates
  		"date-pre": function ( d ) {
  			var ts = Date.parse( d );
  			return isNaN(ts) ? -Infinity : ts;
  		},
  	
  		// html
  		"html-pre": function ( a ) {
  			return _empty(a) ?
  				'' :
  				a.replace ?
  					a.replace( /<.*?>/g, "" ).toLowerCase() :
  					a+'';
  		},
  	
  		// string
  		"string-pre": function ( a ) {
  			// This is a little complex, but faster than always calling toString,
  			// http://jsperf.com/tostring-v-check
  			return _empty(a) ?
  				'' :
  				typeof a === 'string' ?
  					a.toLowerCase() :
  					! a.toString ?
  						'' :
  						a.toString();
  		},
  	
  		// string-asc and -desc are retained only for compatibility with the old
  		// sort methods
  		"string-asc": function ( x, y ) {
  			return ((x < y) ? -1 : ((x > y) ? 1 : 0));
  		},
  	
  		"string-desc": function ( x, y ) {
  			return ((x < y) ? 1 : ((x > y) ? -1 : 0));
  		}
  	} );
  	
  	
  	// Numeric sorting types - order doesn't matter here
  	_addNumericSort( '' );
  	
  	
  	$.extend( true, DataTable.ext.renderer, {
  		header: {
  			_: function ( settings, cell, column, classes ) {
  				// No additional mark-up required
  				// Attach a sort listener to update on sort - note that using the
  				// `DT` namespace will allow the event to be removed automatically
  				// on destroy, while the `dt` namespaced event is the one we are
  				// listening for
  				$(settings.nTable).on( 'order.dt.DT', function ( e, ctx, sorting, columns ) {
  					if ( settings !== ctx ) { // need to check this this is the host
  						return;               // table, not a nested one
  					}
  	
  					var colIdx = column.idx;
  	
  					cell
  						.removeClass(
  							column.sSortingClass +' '+
  							classes.sSortAsc +' '+
  							classes.sSortDesc
  						)
  						.addClass( columns[ colIdx ] == 'asc' ?
  							classes.sSortAsc : columns[ colIdx ] == 'desc' ?
  								classes.sSortDesc :
  								column.sSortingClass
  						);
  				} );
  			},
  	
  			jqueryui: function ( settings, cell, column, classes ) {
  				$('<div/>')
  					.addClass( classes.sSortJUIWrapper )
  					.append( cell.contents() )
  					.append( $('<span/>')
  						.addClass( classes.sSortIcon+' '+column.sSortingClassJUI )
  					)
  					.appendTo( cell );
  	
  				// Attach a sort listener to update on sort
  				$(settings.nTable).on( 'order.dt.DT', function ( e, ctx, sorting, columns ) {
  					if ( settings !== ctx ) {
  						return;
  					}
  	
  					var colIdx = column.idx;
  	
  					cell
  						.removeClass( classes.sSortAsc +" "+classes.sSortDesc )
  						.addClass( columns[ colIdx ] == 'asc' ?
  							classes.sSortAsc : columns[ colIdx ] == 'desc' ?
  								classes.sSortDesc :
  								column.sSortingClass
  						);
  	
  					cell
  						.find( 'span.'+classes.sSortIcon )
  						.removeClass(
  							classes.sSortJUIAsc +" "+
  							classes.sSortJUIDesc +" "+
  							classes.sSortJUI +" "+
  							classes.sSortJUIAscAllowed +" "+
  							classes.sSortJUIDescAllowed
  						)
  						.addClass( columns[ colIdx ] == 'asc' ?
  							classes.sSortJUIAsc : columns[ colIdx ] == 'desc' ?
  								classes.sSortJUIDesc :
  								column.sSortingClassJUI
  						);
  				} );
  			}
  		}
  	} );
  	
  	/*
  	 * Public helper functions. These aren't used internally by DataTables, or
  	 * called by any of the options passed into DataTables, but they can be used
  	 * externally by developers working with DataTables. They are helper functions
  	 * to make working with DataTables a little bit easier.
  	 */
  	
  	var __htmlEscapeEntities = function ( d ) {
  		return typeof d === 'string' ?
  			d
  				.replace(/&/g, '&amp;')
  				.replace(/</g, '&lt;')
  				.replace(/>/g, '&gt;')
  				.replace(/"/g, '&quot;') :
  			d;
  	};
  	
  	/**
  	 * Helpers for `columns.render`.
  	 *
  	 * The options defined here can be used with the `columns.render` initialisation
  	 * option to provide a display renderer. The following functions are defined:
  	 *
  	 * * `number` - Will format numeric data (defined by `columns.data`) for
  	 *   display, retaining the original unformatted data for sorting and filtering.
  	 *   It takes 5 parameters:
  	 *   * `string` - Thousands grouping separator
  	 *   * `string` - Decimal point indicator
  	 *   * `integer` - Number of decimal points to show
  	 *   * `string` (optional) - Prefix.
  	 *   * `string` (optional) - Postfix (/suffix).
  	 * * `text` - Escape HTML to help prevent XSS attacks. It has no optional
  	 *   parameters.
  	 *
  	 * @example
  	 *   // Column definition using the number renderer
  	 *   {
  	 *     data: "salary",
  	 *     render: $.fn.dataTable.render.number( '\'', '.', 0, '$' )
  	 *   }
  	 *
  	 * @namespace
  	 */
  	DataTable.render = {
  		number: function ( thousands, decimal, precision, prefix, postfix ) {
  			return {
  				display: function ( d ) {
  					if ( typeof d !== 'number' && typeof d !== 'string' ) {
  						return d;
  					}
  	
  					var negative = d < 0 ? '-' : '';
  					var flo = parseFloat( d );
  	
  					// If NaN then there isn't much formatting that we can do - just
  					// return immediately, escaping any HTML (this was supposed to
  					// be a number after all)
  					if ( isNaN( flo ) ) {
  						return __htmlEscapeEntities( d );
  					}
  	
  					flo = flo.toFixed( precision );
  					d = Math.abs( flo );
  	
  					var intPart = parseInt( d, 10 );
  					var floatPart = precision ?
  						decimal+(d - intPart).toFixed( precision ).substring( 2 ):
  						'';
  	
  					return negative + (prefix||'') +
  						intPart.toString().replace(
  							/\B(?=(\d{3})+(?!\d))/g, thousands
  						) +
  						floatPart +
  						(postfix||'');
  				}
  			};
  		},
  	
  		text: function () {
  			return {
  				display: __htmlEscapeEntities,
  				filter: __htmlEscapeEntities
  			};
  		}
  	};
  	
  	
  	/*
  	 * This is really a good bit rubbish this method of exposing the internal methods
  	 * publicly... - To be fixed in 2.0 using methods on the prototype
  	 */
  	
  	
  	/**
  	 * Create a wrapper function for exporting an internal functions to an external API.
  	 *  @param {string} fn API function name
  	 *  @returns {function} wrapped function
  	 *  @memberof DataTable#internal
  	 */
  	function _fnExternApiFunc (fn)
  	{
  		return function() {
  			var args = [_fnSettingsFromNode( this[DataTable.ext.iApiIndex] )].concat(
  				Array.prototype.slice.call(arguments)
  			);
  			return DataTable.ext.internal[fn].apply( this, args );
  		};
  	}
  	
  	
  	/**
  	 * Reference to internal functions for use by plug-in developers. Note that
  	 * these methods are references to internal functions and are considered to be
  	 * private. If you use these methods, be aware that they are liable to change
  	 * between versions.
  	 *  @namespace
  	 */
  	$.extend( DataTable.ext.internal, {
  		_fnExternApiFunc: _fnExternApiFunc,
  		_fnBuildAjax: _fnBuildAjax,
  		_fnAjaxUpdate: _fnAjaxUpdate,
  		_fnAjaxParameters: _fnAjaxParameters,
  		_fnAjaxUpdateDraw: _fnAjaxUpdateDraw,
  		_fnAjaxDataSrc: _fnAjaxDataSrc,
  		_fnAddColumn: _fnAddColumn,
  		_fnColumnOptions: _fnColumnOptions,
  		_fnAdjustColumnSizing: _fnAdjustColumnSizing,
  		_fnVisibleToColumnIndex: _fnVisibleToColumnIndex,
  		_fnColumnIndexToVisible: _fnColumnIndexToVisible,
  		_fnVisbleColumns: _fnVisbleColumns,
  		_fnGetColumns: _fnGetColumns,
  		_fnColumnTypes: _fnColumnTypes,
  		_fnApplyColumnDefs: _fnApplyColumnDefs,
  		_fnHungarianMap: _fnHungarianMap,
  		_fnCamelToHungarian: _fnCamelToHungarian,
  		_fnLanguageCompat: _fnLanguageCompat,
  		_fnBrowserDetect: _fnBrowserDetect,
  		_fnAddData: _fnAddData,
  		_fnAddTr: _fnAddTr,
  		_fnNodeToDataIndex: _fnNodeToDataIndex,
  		_fnNodeToColumnIndex: _fnNodeToColumnIndex,
  		_fnGetCellData: _fnGetCellData,
  		_fnSetCellData: _fnSetCellData,
  		_fnSplitObjNotation: _fnSplitObjNotation,
  		_fnGetObjectDataFn: _fnGetObjectDataFn,
  		_fnSetObjectDataFn: _fnSetObjectDataFn,
  		_fnGetDataMaster: _fnGetDataMaster,
  		_fnClearTable: _fnClearTable,
  		_fnDeleteIndex: _fnDeleteIndex,
  		_fnInvalidate: _fnInvalidate,
  		_fnGetRowElements: _fnGetRowElements,
  		_fnCreateTr: _fnCreateTr,
  		_fnBuildHead: _fnBuildHead,
  		_fnDrawHead: _fnDrawHead,
  		_fnDraw: _fnDraw,
  		_fnReDraw: _fnReDraw,
  		_fnAddOptionsHtml: _fnAddOptionsHtml,
  		_fnDetectHeader: _fnDetectHeader,
  		_fnGetUniqueThs: _fnGetUniqueThs,
  		_fnFeatureHtmlFilter: _fnFeatureHtmlFilter,
  		_fnFilterComplete: _fnFilterComplete,
  		_fnFilterCustom: _fnFilterCustom,
  		_fnFilterColumn: _fnFilterColumn,
  		_fnFilter: _fnFilter,
  		_fnFilterCreateSearch: _fnFilterCreateSearch,
  		_fnEscapeRegex: _fnEscapeRegex,
  		_fnFilterData: _fnFilterData,
  		_fnFeatureHtmlInfo: _fnFeatureHtmlInfo,
  		_fnUpdateInfo: _fnUpdateInfo,
  		_fnInfoMacros: _fnInfoMacros,
  		_fnInitialise: _fnInitialise,
  		_fnInitComplete: _fnInitComplete,
  		_fnLengthChange: _fnLengthChange,
  		_fnFeatureHtmlLength: _fnFeatureHtmlLength,
  		_fnFeatureHtmlPaginate: _fnFeatureHtmlPaginate,
  		_fnPageChange: _fnPageChange,
  		_fnFeatureHtmlProcessing: _fnFeatureHtmlProcessing,
  		_fnProcessingDisplay: _fnProcessingDisplay,
  		_fnFeatureHtmlTable: _fnFeatureHtmlTable,
  		_fnScrollDraw: _fnScrollDraw,
  		_fnApplyToChildren: _fnApplyToChildren,
  		_fnCalculateColumnWidths: _fnCalculateColumnWidths,
  		_fnThrottle: _fnThrottle,
  		_fnConvertToWidth: _fnConvertToWidth,
  		_fnGetWidestNode: _fnGetWidestNode,
  		_fnGetMaxLenString: _fnGetMaxLenString,
  		_fnStringToCss: _fnStringToCss,
  		_fnSortFlatten: _fnSortFlatten,
  		_fnSort: _fnSort,
  		_fnSortAria: _fnSortAria,
  		_fnSortListener: _fnSortListener,
  		_fnSortAttachListener: _fnSortAttachListener,
  		_fnSortingClasses: _fnSortingClasses,
  		_fnSortData: _fnSortData,
  		_fnSaveState: _fnSaveState,
  		_fnLoadState: _fnLoadState,
  		_fnSettingsFromNode: _fnSettingsFromNode,
  		_fnLog: _fnLog,
  		_fnMap: _fnMap,
  		_fnBindAction: _fnBindAction,
  		_fnCallbackReg: _fnCallbackReg,
  		_fnCallbackFire: _fnCallbackFire,
  		_fnLengthOverflow: _fnLengthOverflow,
  		_fnRenderer: _fnRenderer,
  		_fnDataSource: _fnDataSource,
  		_fnRowAttributes: _fnRowAttributes,
  		_fnExtend: _fnExtend,
  		_fnCalculateEnd: function () {} // Used by a lot of plug-ins, but redundant
  		                                // in 1.10, so this dead-end function is
  		                                // added to prevent errors
  	} );
  	

  	// jQuery access
  	$.fn.dataTable = DataTable;

  	// Provide access to the host jQuery object (circular reference)
  	DataTable.$ = $;

  	// Legacy aliases
  	$.fn.dataTableSettings = DataTable.settings;
  	$.fn.dataTableExt = DataTable.ext;

  	// With a capital `D` we return a DataTables API instance rather than a
  	// jQuery object
  	$.fn.DataTable = function ( opts ) {
  		return $(this).dataTable( opts ).api();
  	};

  	// All properties that are available to $.fn.dataTable should also be
  	// available on $.fn.DataTable
  	$.each( DataTable, function ( prop, val ) {
  		$.fn.DataTable[ prop ] = val;
  	} );


  	// Information about events fired by DataTables - for documentation.
  	/**
  	 * Draw event, fired whenever the table is redrawn on the page, at the same
  	 * point as fnDrawCallback. This may be useful for binding events or
  	 * performing calculations when the table is altered at all.
  	 *  @name DataTable#draw.dt
  	 *  @event
  	 *  @param {event} e jQuery event object
  	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
  	 */

  	/**
  	 * Search event, fired when the searching applied to the table (using the
  	 * built-in global search, or column filters) is altered.
  	 *  @name DataTable#search.dt
  	 *  @event
  	 *  @param {event} e jQuery event object
  	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
  	 */

  	/**
  	 * Page change event, fired when the paging of the table is altered.
  	 *  @name DataTable#page.dt
  	 *  @event
  	 *  @param {event} e jQuery event object
  	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
  	 */

  	/**
  	 * Order event, fired when the ordering applied to the table is altered.
  	 *  @name DataTable#order.dt
  	 *  @event
  	 *  @param {event} e jQuery event object
  	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
  	 */

  	/**
  	 * DataTables initialisation complete event, fired when the table is fully
  	 * drawn, including Ajax data loaded, if Ajax data is required.
  	 *  @name DataTable#init.dt
  	 *  @event
  	 *  @param {event} e jQuery event object
  	 *  @param {object} oSettings DataTables settings object
  	 *  @param {object} json The JSON object request from the server - only
  	 *    present if client-side Ajax sourced data is used</li></ol>
  	 */

  	/**
  	 * State save event, fired when the table has changed state a new state save
  	 * is required. This event allows modification of the state saving object
  	 * prior to actually doing the save, including addition or other state
  	 * properties (for plug-ins) or modification of a DataTables core property.
  	 *  @name DataTable#stateSaveParams.dt
  	 *  @event
  	 *  @param {event} e jQuery event object
  	 *  @param {object} oSettings DataTables settings object
  	 *  @param {object} json The state information to be saved
  	 */

  	/**
  	 * State load event, fired when the table is loading state from the stored
  	 * data, but prior to the settings object being modified by the saved state
  	 * - allowing modification of the saved state is required or loading of
  	 * state for a plug-in.
  	 *  @name DataTable#stateLoadParams.dt
  	 *  @event
  	 *  @param {event} e jQuery event object
  	 *  @param {object} oSettings DataTables settings object
  	 *  @param {object} json The saved state information
  	 */

  	/**
  	 * State loaded event, fired when state has been loaded from stored data and
  	 * the settings object has been modified by the loaded data.
  	 *  @name DataTable#stateLoaded.dt
  	 *  @event
  	 *  @param {event} e jQuery event object
  	 *  @param {object} oSettings DataTables settings object
  	 *  @param {object} json The saved state information
  	 */

  	/**
  	 * Processing event, fired when DataTables is doing some kind of processing
  	 * (be it, order, search or anything else). It can be used to indicate to
  	 * the end user that there is something happening, or that something has
  	 * finished.
  	 *  @name DataTable#processing.dt
  	 *  @event
  	 *  @param {event} e jQuery event object
  	 *  @param {object} oSettings DataTables settings object
  	 *  @param {boolean} bShow Flag for if DataTables is doing processing or not
  	 */

  	/**
  	 * Ajax (XHR) event, fired whenever an Ajax request is completed from a
  	 * request to made to the server for new data. This event is called before
  	 * DataTables processed the returned data, so it can also be used to pre-
  	 * process the data returned from the server, if needed.
  	 *
  	 * Note that this trigger is called in `fnServerData`, if you override
  	 * `fnServerData` and which to use this event, you need to trigger it in you
  	 * success function.
  	 *  @name DataTable#xhr.dt
  	 *  @event
  	 *  @param {event} e jQuery event object
  	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
  	 *  @param {object} json JSON returned from the server
  	 *
  	 *  @example
  	 *     // Use a custom property returned from the server in another DOM element
  	 *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {
  	 *       $('#status').html( json.status );
  	 *     } );
  	 *
  	 *  @example
  	 *     // Pre-process the data returned from the server
  	 *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {
  	 *       for ( var i=0, ien=json.aaData.length ; i<ien ; i++ ) {
  	 *         json.aaData[i].sum = json.aaData[i].one + json.aaData[i].two;
  	 *       }
  	 *       // Note no return - manipulate the data directly in the JSON object.
  	 *     } );
  	 */

  	/**
  	 * Destroy event, fired when the DataTable is destroyed by calling fnDestroy
  	 * or passing the bDestroy:true parameter in the initialisation object. This
  	 * can be used to remove bound events, added DOM nodes, etc.
  	 *  @name DataTable#destroy.dt
  	 *  @event
  	 *  @param {event} e jQuery event object
  	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
  	 */

  	/**
  	 * Page length change event, fired when number of records to show on each
  	 * page (the length) is changed.
  	 *  @name DataTable#length.dt
  	 *  @event
  	 *  @param {event} e jQuery event object
  	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
  	 *  @param {integer} len New length
  	 */

  	/**
  	 * Column sizing has changed.
  	 *  @name DataTable#column-sizing.dt
  	 *  @event
  	 *  @param {event} e jQuery event object
  	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
  	 */

  	/**
  	 * Column visibility has changed.
  	 *  @name DataTable#column-visibility.dt
  	 *  @event
  	 *  @param {event} e jQuery event object
  	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
  	 *  @param {int} column Column index
  	 *  @param {bool} vis `false` if column now hidden, or `true` if visible
  	 */

  	return $.fn.dataTable;
  }));
  });

  var dataTables_bootstrap = createCommonjsModule(function (module, exports) {
  /*! DataTables Bootstrap 3 integration
   * ©2011-2015 SpryMedia Ltd - datatables.net/license
   */

  /**
   * DataTables integration for Bootstrap 3. This requires Bootstrap 3 and
   * DataTables 1.10 or newer.
   *
   * This file sets the defaults and adds options to DataTables to style its
   * controls using Bootstrap. See http://datatables.net/manual/styling/bootstrap
   * for further information.
   */
  (function( factory ){
  	{
  		// CommonJS
  		module.exports = function (root, $) {
  			if ( ! root ) {
  				root = window;
  			}

  			if ( ! $ || ! $.fn.dataTable ) {
  				// Require DataTables, which attaches to jQuery, including
  				// jQuery if needed and have a $ property so we can access the
  				// jQuery object that is used
  				$ = jquery_dataTables(root, $).$;
  			}

  			return factory( $, root, root.document );
  		};
  	}
  }(function( $, window, document, undefined$1 ) {
  var DataTable = $.fn.dataTable;


  /* Set the defaults for DataTables initialisation */
  $.extend( true, DataTable.defaults, {
  	dom:
  		"<'row'<'col-sm-6'l><'col-sm-6'f>>" +
  		"<'row'<'col-sm-12'tr>>" +
  		"<'row'<'col-sm-5'i><'col-sm-7'p>>",
  	renderer: 'bootstrap'
  } );


  /* Default class modification */
  $.extend( DataTable.ext.classes, {
  	sWrapper:      "dataTables_wrapper form-inline dt-bootstrap",
  	sFilterInput:  "form-control input-sm",
  	sLengthSelect: "form-control input-sm",
  	sProcessing:   "dataTables_processing panel panel-default"
  } );


  /* Bootstrap paging button renderer */
  DataTable.ext.renderer.pageButton.bootstrap = function ( settings, host, idx, buttons, page, pages ) {
  	var api     = new DataTable.Api( settings );
  	var classes = settings.oClasses;
  	var lang    = settings.oLanguage.oPaginate;
  	var aria = settings.oLanguage.oAria.paginate || {};
  	var btnDisplay, btnClass, counter=0;

  	var attach = function( container, buttons ) {
  		var i, ien, node, button;
  		var clickHandler = function ( e ) {
  			e.preventDefault();
  			if ( !$(e.currentTarget).hasClass('disabled') && api.page() != e.data.action ) {
  				api.page( e.data.action ).draw( 'page' );
  			}
  		};

  		for ( i=0, ien=buttons.length ; i<ien ; i++ ) {
  			button = buttons[i];

  			if ( $.isArray( button ) ) {
  				attach( container, button );
  			}
  			else {
  				btnDisplay = '';
  				btnClass = '';

  				switch ( button ) {
  					case 'ellipsis':
  						btnDisplay = '&#x2026;';
  						btnClass = 'disabled';
  						break;

  					case 'first':
  						btnDisplay = lang.sFirst;
  						btnClass = button + (page > 0 ?
  							'' : ' disabled');
  						break;

  					case 'previous':
  						btnDisplay = lang.sPrevious;
  						btnClass = button + (page > 0 ?
  							'' : ' disabled');
  						break;

  					case 'next':
  						btnDisplay = lang.sNext;
  						btnClass = button + (page < pages-1 ?
  							'' : ' disabled');
  						break;

  					case 'last':
  						btnDisplay = lang.sLast;
  						btnClass = button + (page < pages-1 ?
  							'' : ' disabled');
  						break;

  					default:
  						btnDisplay = button + 1;
  						btnClass = page === button ?
  							'active' : '';
  						break;
  				}

  				if ( btnDisplay ) {
  					node = $('<li>', {
  							'class': classes.sPageButton+' '+btnClass,
  							'id': idx === 0 && typeof button === 'string' ?
  								settings.sTableId +'_'+ button :
  								null
  						} )
  						.append( $('<a>', {
  								'href': '#',
  								'aria-controls': settings.sTableId,
  								'aria-label': aria[ button ],
  								'data-dt-idx': counter,
  								'tabindex': settings.iTabIndex
  							} )
  							.html( btnDisplay )
  						)
  						.appendTo( container );

  					settings.oApi._fnBindAction(
  						node, {action: button}, clickHandler
  					);

  					counter++;
  				}
  			}
  		}
  	};

  	// IE9 throws an 'unknown error' if document.activeElement is used
  	// inside an iframe or frame. 
  	var activeEl;

  	try {
  		// Because this approach is destroying and recreating the paging
  		// elements, focus is lost on the select button which is bad for
  		// accessibility. So we want to restore focus once the draw has
  		// completed
  		activeEl = $(host).find(document.activeElement).data('dt-idx');
  	}
  	catch (e) {}

  	attach(
  		$(host).empty().html('<ul class="pagination"/>').children('ul'),
  		buttons
  	);

  	if ( activeEl !== undefined$1 ) {
  		$(host).find( '[data-dt-idx='+activeEl+']' ).trigger('focus');
  	}
  };


  return DataTable;
  }));
  });

  var dataTables_buttons = createCommonjsModule(function (module, exports) {
  /*! Buttons for DataTables 1.6.5
   * ©2016-2020 SpryMedia Ltd - datatables.net/license
   */

  (function( factory ){
  	{
  		// CommonJS
  		module.exports = function (root, $) {
  			if ( ! root ) {
  				root = window;
  			}

  			if ( ! $ || ! $.fn.dataTable ) {
  				$ = jquery_dataTables(root, $).$;
  			}

  			return factory( $, root, root.document );
  		};
  	}
  }(function( $, window, document, undefined$1 ) {
  var DataTable = $.fn.dataTable;


  // Used for namespacing events added to the document by each instance, so they
  // can be removed on destroy
  var _instCounter = 0;

  // Button namespacing counter for namespacing events on individual buttons
  var _buttonCounter = 0;

  var _dtButtons = DataTable.ext.buttons;

  // Allow for jQuery slim
  function _fadeIn(el, duration, fn) {
  	if ($.fn.animate) {
  		el
  			.stop()
  			.fadeIn( duration, fn );
  	}
  	else {
  		el.css('display', 'block');

  		if (fn) {
  			fn.call(el);
  		}
  	}
  }

  function _fadeOut(el, duration, fn) {
  	if ($.fn.animate) {
  		el
  			.stop()
  			.fadeOut( duration, fn );
  	}
  	else {
  		el.css('display', 'none');
  		
  		if (fn) {
  			fn.call(el);
  		}
  	}
  }

  /**
   * [Buttons description]
   * @param {[type]}
   * @param {[type]}
   */
  var Buttons = function( dt, config )
  {
  	// If not created with a `new` keyword then we return a wrapper function that
  	// will take the settings object for a DT. This allows easy use of new instances
  	// with the `layout` option - e.g. `topLeft: $.fn.dataTable.Buttons( ... )`.
  	if ( !(this instanceof Buttons) ) {
  		return function (settings) {
  			return new Buttons( settings, dt ).container();
  		};
  	}

  	// If there is no config set it to an empty object
  	if ( typeof( config ) === 'undefined' ) {
  		config = {};	
  	}
  	
  	// Allow a boolean true for defaults
  	if ( config === true ) {
  		config = {};
  	}

  	// For easy configuration of buttons an array can be given
  	if ( Array.isArray( config ) ) {
  		config = { buttons: config };
  	}

  	this.c = $.extend( true, {}, Buttons.defaults, config );

  	// Don't want a deep copy for the buttons
  	if ( config.buttons ) {
  		this.c.buttons = config.buttons;
  	}

  	this.s = {
  		dt: new DataTable.Api( dt ),
  		buttons: [],
  		listenKeys: '',
  		namespace: 'dtb'+(_instCounter++)
  	};

  	this.dom = {
  		container: $('<'+this.c.dom.container.tag+'/>')
  			.addClass( this.c.dom.container.className )
  	};

  	this._constructor();
  };


  $.extend( Buttons.prototype, {
  	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  	 * Public methods
  	 */

  	/**
  	 * Get the action of a button
  	 * @param  {int|string} Button index
  	 * @return {function}
  	 *//**
  	 * Set the action of a button
  	 * @param  {node} node Button element
  	 * @param  {function} action Function to set
  	 * @return {Buttons} Self for chaining
  	 */
  	action: function ( node, action )
  	{
  		var button = this._nodeToButton( node );

  		if ( action === undefined$1 ) {
  			return button.conf.action;
  		}

  		button.conf.action = action;

  		return this;
  	},

  	/**
  	 * Add an active class to the button to make to look active or get current
  	 * active state.
  	 * @param  {node} node Button element
  	 * @param  {boolean} [flag] Enable / disable flag
  	 * @return {Buttons} Self for chaining or boolean for getter
  	 */
  	active: function ( node, flag ) {
  		var button = this._nodeToButton( node );
  		var klass = this.c.dom.button.active;
  		var jqNode = $(button.node);

  		if ( flag === undefined$1 ) {
  			return jqNode.hasClass( klass );
  		}

  		jqNode.toggleClass( klass, flag === undefined$1 ? true : flag );

  		return this;
  	},

  	/**
  	 * Add a new button
  	 * @param {object} config Button configuration object, base string name or function
  	 * @param {int|string} [idx] Button index for where to insert the button
  	 * @return {Buttons} Self for chaining
  	 */
  	add: function ( config, idx )
  	{
  		var buttons = this.s.buttons;

  		if ( typeof idx === 'string' ) {
  			var split = idx.split('-');
  			var base = this.s;

  			for ( var i=0, ien=split.length-1 ; i<ien ; i++ ) {
  				base = base.buttons[ split[i]*1 ];
  			}

  			buttons = base.buttons;
  			idx = split[ split.length-1 ]*1;
  		}

  		this._expandButton( buttons, config, base !== undefined$1, idx );
  		this._draw();

  		return this;
  	},

  	/**
  	 * Get the container node for the buttons
  	 * @return {jQuery} Buttons node
  	 */
  	container: function ()
  	{
  		return this.dom.container;
  	},

  	/**
  	 * Disable a button
  	 * @param  {node} node Button node
  	 * @return {Buttons} Self for chaining
  	 */
  	disable: function ( node ) {
  		var button = this._nodeToButton( node );

  		$(button.node)
  			.addClass( this.c.dom.button.disabled )
  			.attr('disabled', true);

  		return this;
  	},

  	/**
  	 * Destroy the instance, cleaning up event handlers and removing DOM
  	 * elements
  	 * @return {Buttons} Self for chaining
  	 */
  	destroy: function ()
  	{
  		// Key event listener
  		$('body').off( 'keyup.'+this.s.namespace );

  		// Individual button destroy (so they can remove their own events if
  		// needed). Take a copy as the array is modified by `remove`
  		var buttons = this.s.buttons.slice();
  		var i, ien;
  		
  		for ( i=0, ien=buttons.length ; i<ien ; i++ ) {
  			this.remove( buttons[i].node );
  		}

  		// Container
  		this.dom.container.remove();

  		// Remove from the settings object collection
  		var buttonInsts = this.s.dt.settings()[0];

  		for ( i=0, ien=buttonInsts.length ; i<ien ; i++ ) {
  			if ( buttonInsts.inst === this ) {
  				buttonInsts.splice( i, 1 );
  				break;
  			}
  		}

  		return this;
  	},

  	/**
  	 * Enable / disable a button
  	 * @param  {node} node Button node
  	 * @param  {boolean} [flag=true] Enable / disable flag
  	 * @return {Buttons} Self for chaining
  	 */
  	enable: function ( node, flag )
  	{
  		if ( flag === false ) {
  			return this.disable( node );
  		}

  		var button = this._nodeToButton( node );
  		$(button.node)
  			.removeClass( this.c.dom.button.disabled )
  			.removeAttr('disabled');

  		return this;
  	},

  	/**
  	 * Get the instance name for the button set selector
  	 * @return {string} Instance name
  	 */
  	name: function ()
  	{
  		return this.c.name;
  	},

  	/**
  	 * Get a button's node of the buttons container if no button is given
  	 * @param  {node} [node] Button node
  	 * @return {jQuery} Button element, or container
  	 */
  	node: function ( node )
  	{
  		if ( ! node ) {
  			return this.dom.container;
  		}

  		var button = this._nodeToButton( node );
  		return $(button.node);
  	},

  	/**
  	 * Set / get a processing class on the selected button
  	 * @param {element} node Triggering button node
  	 * @param  {boolean} flag true to add, false to remove, undefined to get
  	 * @return {boolean|Buttons} Getter value or this if a setter.
  	 */
  	processing: function ( node, flag )
  	{
  		var dt = this.s.dt;
  		var button = this._nodeToButton( node );

  		if ( flag === undefined$1 ) {
  			return $(button.node).hasClass( 'processing' );
  		}

  		$(button.node).toggleClass( 'processing', flag );

  		$(dt.table().node()).triggerHandler( 'buttons-processing.dt', [
  			flag, dt.button( node ), dt, $(node), button.conf
  		] );

  		return this;
  	},

  	/**
  	 * Remove a button.
  	 * @param  {node} node Button node
  	 * @return {Buttons} Self for chaining
  	 */
  	remove: function ( node )
  	{
  		var button = this._nodeToButton( node );
  		var host = this._nodeToHost( node );
  		var dt = this.s.dt;

  		// Remove any child buttons first
  		if ( button.buttons.length ) {
  			for ( var i=button.buttons.length-1 ; i>=0 ; i-- ) {
  				this.remove( button.buttons[i].node );
  			}
  		}

  		// Allow the button to remove event handlers, etc
  		if ( button.conf.destroy ) {
  			button.conf.destroy.call( dt.button(node), dt, $(node), button.conf );
  		}

  		this._removeKey( button.conf );

  		$(button.node).remove();

  		var idx = $.inArray( button, host );
  		host.splice( idx, 1 );

  		return this;
  	},

  	/**
  	 * Get the text for a button
  	 * @param  {int|string} node Button index
  	 * @return {string} Button text
  	 *//**
  	 * Set the text for a button
  	 * @param  {int|string|function} node Button index
  	 * @param  {string} label Text
  	 * @return {Buttons} Self for chaining
  	 */
  	text: function ( node, label )
  	{
  		var button = this._nodeToButton( node );
  		var buttonLiner = this.c.dom.collection.buttonLiner;
  		var linerTag = button.inCollection && buttonLiner && buttonLiner.tag ?
  			buttonLiner.tag :
  			this.c.dom.buttonLiner.tag;
  		var dt = this.s.dt;
  		var jqNode = $(button.node);
  		var text = function ( opt ) {
  			return typeof opt === 'function' ?
  				opt( dt, jqNode, button.conf ) :
  				opt;
  		};

  		if ( label === undefined$1 ) {
  			return text( button.conf.text );
  		}

  		button.conf.text = label;

  		if ( linerTag ) {
  			jqNode.children( linerTag ).html( text(label) );
  		}
  		else {
  			jqNode.html( text(label) );
  		}

  		return this;
  	},


  	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  	 * Constructor
  	 */

  	/**
  	 * Buttons constructor
  	 * @private
  	 */
  	_constructor: function ()
  	{
  		var that = this;
  		var dt = this.s.dt;
  		var dtSettings = dt.settings()[0];
  		var buttons =  this.c.buttons;

  		if ( ! dtSettings._buttons ) {
  			dtSettings._buttons = [];
  		}

  		dtSettings._buttons.push( {
  			inst: this,
  			name: this.c.name
  		} );

  		for ( var i=0, ien=buttons.length ; i<ien ; i++ ) {
  			this.add( buttons[i] );
  		}

  		dt.on( 'destroy', function ( e, settings ) {
  			if ( settings === dtSettings ) {
  				that.destroy();
  			}
  		} );

  		// Global key event binding to listen for button keys
  		$('body').on( 'keyup.'+this.s.namespace, function ( e ) {
  			if ( ! document.activeElement || document.activeElement === document.body ) {
  				// SUse a string of characters for fast lookup of if we need to
  				// handle this
  				var character = String.fromCharCode(e.keyCode).toLowerCase();

  				if ( that.s.listenKeys.toLowerCase().indexOf( character ) !== -1 ) {
  					that._keypress( character, e );
  				}
  			}
  		} );
  	},


  	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  	 * Private methods
  	 */

  	/**
  	 * Add a new button to the key press listener
  	 * @param {object} conf Resolved button configuration object
  	 * @private
  	 */
  	_addKey: function ( conf )
  	{
  		if ( conf.key ) {
  			this.s.listenKeys += $.isPlainObject( conf.key ) ?
  				conf.key.key :
  				conf.key;
  		}
  	},

  	/**
  	 * Insert the buttons into the container. Call without parameters!
  	 * @param  {node} [container] Recursive only - Insert point
  	 * @param  {array} [buttons] Recursive only - Buttons array
  	 * @private
  	 */
  	_draw: function ( container, buttons )
  	{
  		if ( ! container ) {
  			container = this.dom.container;
  			buttons = this.s.buttons;
  		}

  		container.children().detach();

  		for ( var i=0, ien=buttons.length ; i<ien ; i++ ) {
  			container.append( buttons[i].inserter );
  			container.append( ' ' );

  			if ( buttons[i].buttons && buttons[i].buttons.length ) {
  				this._draw( buttons[i].collection, buttons[i].buttons );
  			}
  		}
  	},

  	/**
  	 * Create buttons from an array of buttons
  	 * @param  {array} attachTo Buttons array to attach to
  	 * @param  {object} button Button definition
  	 * @param  {boolean} inCollection true if the button is in a collection
  	 * @private
  	 */
  	_expandButton: function ( attachTo, button, inCollection, attachPoint )
  	{
  		var dt = this.s.dt;
  		var buttons = ! Array.isArray( button ) ?
  			[ button ] :
  			button;

  		for ( var i=0, ien=buttons.length ; i<ien ; i++ ) {
  			var conf = this._resolveExtends( buttons[i] );

  			if ( ! conf ) {
  				continue;
  			}

  			// If the configuration is an array, then expand the buttons at this
  			// point
  			if ( Array.isArray( conf ) ) {
  				this._expandButton( attachTo, conf, inCollection, attachPoint );
  				continue;
  			}

  			var built = this._buildButton( conf, inCollection );
  			if ( ! built ) {
  				continue;
  			}

  			if ( attachPoint !== undefined$1 && attachPoint !== null ) {
  				attachTo.splice( attachPoint, 0, built );
  				attachPoint++;
  			}
  			else {
  				attachTo.push( built );
  			}

  			if ( built.conf.buttons ) {
  				built.collection = $('<'+this.c.dom.collection.tag+'/>');

  				built.conf._collection = built.collection;

  				this._expandButton( built.buttons, built.conf.buttons, true, attachPoint );
  			}

  			// init call is made here, rather than buildButton as it needs to
  			// be selectable, and for that it needs to be in the buttons array
  			if ( conf.init ) {
  				conf.init.call( dt.button( built.node ), dt, $(built.node), conf );
  			}
  		}
  	},

  	/**
  	 * Create an individual button
  	 * @param  {object} config            Resolved button configuration
  	 * @param  {boolean} inCollection `true` if a collection button
  	 * @return {jQuery} Created button node (jQuery)
  	 * @private
  	 */
  	_buildButton: function ( config, inCollection )
  	{
  		var buttonDom = this.c.dom.button;
  		var linerDom = this.c.dom.buttonLiner;
  		var collectionDom = this.c.dom.collection;
  		var dt = this.s.dt;
  		var text = function ( opt ) {
  			return typeof opt === 'function' ?
  				opt( dt, button, config ) :
  				opt;
  		};

  		if ( inCollection && collectionDom.button ) {
  			buttonDom = collectionDom.button;
  		}

  		if ( inCollection && collectionDom.buttonLiner ) {
  			linerDom = collectionDom.buttonLiner;
  		}

  		// Make sure that the button is available based on whatever requirements
  		// it has. For example, Flash buttons require Flash
  		if ( config.available && ! config.available( dt, config ) ) {
  			return false;
  		}

  		var action = function ( e, dt, button, config ) {
  			config.action.call( dt.button( button ), e, dt, button, config );

  			$(dt.table().node()).triggerHandler( 'buttons-action.dt', [
  				dt.button( button ), dt, button, config 
  			] );
  		};

  		var tag = config.tag || buttonDom.tag;
  		var clickBlurs = config.clickBlurs === undefined$1 ? true : config.clickBlurs;
  		var button = $('<'+tag+'/>')
  			.addClass( buttonDom.className )
  			.attr( 'tabindex', this.s.dt.settings()[0].iTabIndex )
  			.attr( 'aria-controls', this.s.dt.table().node().id )
  			.on( 'click.dtb', function (e) {
  				e.preventDefault();

  				if ( ! button.hasClass( buttonDom.disabled ) && config.action ) {
  					action( e, dt, button, config );
  				}
  				if( clickBlurs ) {
  					button.trigger('blur');
  				}
  			} )
  			.on( 'keyup.dtb', function (e) {
  				if ( e.keyCode === 13 ) {
  					if ( ! button.hasClass( buttonDom.disabled ) && config.action ) {
  						action( e, dt, button, config );
  					}
  				}
  			} );

  		// Make `a` tags act like a link
  		if ( tag.toLowerCase() === 'a' ) {
  			button.attr( 'href', '#' );
  		}

  		// Button tags should have `type=button` so they don't have any default behaviour
  		if ( tag.toLowerCase() === 'button' ) {
  			button.attr( 'type', 'button' );
  		}

  		if ( linerDom.tag ) {
  			var liner = $('<'+linerDom.tag+'/>')
  				.html( text( config.text ) )
  				.addClass( linerDom.className );

  			if ( linerDom.tag.toLowerCase() === 'a' ) {
  				liner.attr( 'href', '#' );
  			}

  			button.append( liner );
  		}
  		else {
  			button.html( text( config.text ) );
  		}

  		if ( config.enabled === false ) {
  			button.addClass( buttonDom.disabled );
  		}

  		if ( config.className ) {
  			button.addClass( config.className );
  		}

  		if ( config.titleAttr ) {
  			button.attr( 'title', text( config.titleAttr ) );
  		}

  		if ( config.attr ) {
  			button.attr( config.attr );
  		}

  		if ( ! config.namespace ) {
  			config.namespace = '.dt-button-'+(_buttonCounter++);
  		}

  		var buttonContainer = this.c.dom.buttonContainer;
  		var inserter;
  		if ( buttonContainer && buttonContainer.tag ) {
  			inserter = $('<'+buttonContainer.tag+'/>')
  				.addClass( buttonContainer.className )
  				.append( button );
  		}
  		else {
  			inserter = button;
  		}

  		this._addKey( config );

  		// Style integration callback for DOM manipulation
  		// Note that this is _not_ documented. It is currently
  		// for style integration only
  		if( this.c.buttonCreated ) {
  			inserter = this.c.buttonCreated( config, inserter );
  		}

  		return {
  			conf:         config,
  			node:         button.get(0),
  			inserter:     inserter,
  			buttons:      [],
  			inCollection: inCollection,
  			collection:   null
  		};
  	},

  	/**
  	 * Get the button object from a node (recursive)
  	 * @param  {node} node Button node
  	 * @param  {array} [buttons] Button array, uses base if not defined
  	 * @return {object} Button object
  	 * @private
  	 */
  	_nodeToButton: function ( node, buttons )
  	{
  		if ( ! buttons ) {
  			buttons = this.s.buttons;
  		}

  		for ( var i=0, ien=buttons.length ; i<ien ; i++ ) {
  			if ( buttons[i].node === node ) {
  				return buttons[i];
  			}

  			if ( buttons[i].buttons.length ) {
  				var ret = this._nodeToButton( node, buttons[i].buttons );

  				if ( ret ) {
  					return ret;
  				}
  			}
  		}
  	},

  	/**
  	 * Get container array for a button from a button node (recursive)
  	 * @param  {node} node Button node
  	 * @param  {array} [buttons] Button array, uses base if not defined
  	 * @return {array} Button's host array
  	 * @private
  	 */
  	_nodeToHost: function ( node, buttons )
  	{
  		if ( ! buttons ) {
  			buttons = this.s.buttons;
  		}

  		for ( var i=0, ien=buttons.length ; i<ien ; i++ ) {
  			if ( buttons[i].node === node ) {
  				return buttons;
  			}

  			if ( buttons[i].buttons.length ) {
  				var ret = this._nodeToHost( node, buttons[i].buttons );

  				if ( ret ) {
  					return ret;
  				}
  			}
  		}
  	},

  	/**
  	 * Handle a key press - determine if any button's key configured matches
  	 * what was typed and trigger the action if so.
  	 * @param  {string} character The character pressed
  	 * @param  {object} e Key event that triggered this call
  	 * @private
  	 */
  	_keypress: function ( character, e )
  	{
  		// Check if this button press already activated on another instance of Buttons
  		if ( e._buttonsHandled ) {
  			return;
  		}

  		var run = function ( conf, node ) {
  			if ( ! conf.key ) {
  				return;
  			}

  			if ( conf.key === character ) {
  				e._buttonsHandled = true;
  				$(node).click();
  			}
  			else if ( $.isPlainObject( conf.key ) ) {
  				if ( conf.key.key !== character ) {
  					return;
  				}

  				if ( conf.key.shiftKey && ! e.shiftKey ) {
  					return;
  				}

  				if ( conf.key.altKey && ! e.altKey ) {
  					return;
  				}

  				if ( conf.key.ctrlKey && ! e.ctrlKey ) {
  					return;
  				}

  				if ( conf.key.metaKey && ! e.metaKey ) {
  					return;
  				}

  				// Made it this far - it is good
  				e._buttonsHandled = true;
  				$(node).click();
  			}
  		};

  		var recurse = function ( a ) {
  			for ( var i=0, ien=a.length ; i<ien ; i++ ) {
  				run( a[i].conf, a[i].node );

  				if ( a[i].buttons.length ) {
  					recurse( a[i].buttons );
  				}
  			}
  		};

  		recurse( this.s.buttons );
  	},

  	/**
  	 * Remove a key from the key listener for this instance (to be used when a
  	 * button is removed)
  	 * @param  {object} conf Button configuration
  	 * @private
  	 */
  	_removeKey: function ( conf )
  	{
  		if ( conf.key ) {
  			var character = $.isPlainObject( conf.key ) ?
  				conf.key.key :
  				conf.key;

  			// Remove only one character, as multiple buttons could have the
  			// same listening key
  			var a = this.s.listenKeys.split('');
  			var idx = $.inArray( character, a );
  			a.splice( idx, 1 );
  			this.s.listenKeys = a.join('');
  		}
  	},

  	/**
  	 * Resolve a button configuration
  	 * @param  {string|function|object} conf Button config to resolve
  	 * @return {object} Button configuration
  	 * @private
  	 */
  	_resolveExtends: function ( conf )
  	{
  		var dt = this.s.dt;
  		var i, ien;
  		var toConfObject = function ( base ) {
  			var loop = 0;

  			// Loop until we have resolved to a button configuration, or an
  			// array of button configurations (which will be iterated
  			// separately)
  			while ( ! $.isPlainObject(base) && ! Array.isArray(base) ) {
  				if ( base === undefined$1 ) {
  					return;
  				}

  				if ( typeof base === 'function' ) {
  					base = base( dt, conf );

  					if ( ! base ) {
  						return false;
  					}
  				}
  				else if ( typeof base === 'string' ) {
  					if ( ! _dtButtons[ base ] ) {
  						throw 'Unknown button type: '+base;
  					}

  					base = _dtButtons[ base ];
  				}

  				loop++;
  				if ( loop > 30 ) {
  					// Protect against misconfiguration killing the browser
  					throw 'Buttons: Too many iterations';
  				}
  			}

  			return Array.isArray( base ) ?
  				base :
  				$.extend( {}, base );
  		};

  		conf = toConfObject( conf );

  		while ( conf && conf.extend ) {
  			// Use `toConfObject` in case the button definition being extended
  			// is itself a string or a function
  			if ( ! _dtButtons[ conf.extend ] ) {
  				throw 'Cannot extend unknown button type: '+conf.extend;
  			}

  			var objArray = toConfObject( _dtButtons[ conf.extend ] );
  			if ( Array.isArray( objArray ) ) {
  				return objArray;
  			}
  			else if ( ! objArray ) {
  				// This is a little brutal as it might be possible to have a
  				// valid button without the extend, but if there is no extend
  				// then the host button would be acting in an undefined state
  				return false;
  			}

  			// Stash the current class name
  			var originalClassName = objArray.className;

  			conf = $.extend( {}, objArray, conf );

  			// The extend will have overwritten the original class name if the
  			// `conf` object also assigned a class, but we want to concatenate
  			// them so they are list that is combined from all extended buttons
  			if ( originalClassName && conf.className !== originalClassName ) {
  				conf.className = originalClassName+' '+conf.className;
  			}

  			// Buttons to be added to a collection  -gives the ability to define
  			// if buttons should be added to the start or end of a collection
  			var postfixButtons = conf.postfixButtons;
  			if ( postfixButtons ) {
  				if ( ! conf.buttons ) {
  					conf.buttons = [];
  				}

  				for ( i=0, ien=postfixButtons.length ; i<ien ; i++ ) {
  					conf.buttons.push( postfixButtons[i] );
  				}

  				conf.postfixButtons = null;
  			}

  			var prefixButtons = conf.prefixButtons;
  			if ( prefixButtons ) {
  				if ( ! conf.buttons ) {
  					conf.buttons = [];
  				}

  				for ( i=0, ien=prefixButtons.length ; i<ien ; i++ ) {
  					conf.buttons.splice( i, 0, prefixButtons[i] );
  				}

  				conf.prefixButtons = null;
  			}

  			// Although we want the `conf` object to overwrite almost all of
  			// the properties of the object being extended, the `extend`
  			// property should come from the object being extended
  			conf.extend = objArray.extend;
  		}

  		return conf;
  	},

  	/**
  	 * Display (and replace if there is an existing one) a popover attached to a button
  	 * @param {string|node} content Content to show
  	 * @param {DataTable.Api} hostButton DT API instance of the button
  	 * @param {object} inOpts Options (see object below for all options)
  	 */
  	_popover: function ( content, hostButton, inOpts ) {
  		var dt = hostButton;
  		var buttonsSettings = this.c;
  		var options = $.extend( {
  			align: 'button-left', // button-right, dt-container
  			autoClose: false,
  			background: true,
  			backgroundClassName: 'dt-button-background',
  			contentClassName: buttonsSettings.dom.collection.className,
  			collectionLayout: '',
  			collectionTitle: '',
  			dropup: false,
  			fade: 400,
  			rightAlignClassName: 'dt-button-right',
  			tag: buttonsSettings.dom.collection.tag
  		}, inOpts );
  		var hostNode = hostButton.node();

  		var close = function () {
  			_fadeOut(
  				$('.dt-button-collection'),
  				options.fade,
  				function () {
  					$(this).detach();
  				}
  			);

  			$(dt.buttons( '[aria-haspopup="true"][aria-expanded="true"]' ).nodes())
  				.attr('aria-expanded', 'false');

  			$('div.dt-button-background').off( 'click.dtb-collection' );
  			Buttons.background( false, options.backgroundClassName, options.fade, hostNode );

  			$('body').off( '.dtb-collection' );
  			dt.off( 'buttons-action.b-internal' );
  		};

  		if (content === false) {
  			close();
  		}

  		var existingExpanded = $(dt.buttons( '[aria-haspopup="true"][aria-expanded="true"]' ).nodes());
  		if ( existingExpanded.length ) {
  			hostNode = existingExpanded.eq(0);

  			close();
  		}

  		var display = $('<div/>')
  			.addClass('dt-button-collection')
  			.addClass(options.collectionLayout)
  			.css('display', 'none');

  		content = $(content)
  			.addClass(options.contentClassName)
  			.attr('role', 'menu')
  			.appendTo(display);

  		hostNode.attr( 'aria-expanded', 'true' );

  		if ( hostNode.parents('body')[0] !== document.body ) {
  			hostNode = document.body.lastChild;
  		}

  		if ( options.collectionTitle ) {
  			display.prepend('<div class="dt-button-collection-title">'+options.collectionTitle+'</div>');
  		}

  		_fadeIn( display.insertAfter( hostNode ), options.fade );

  		var tableContainer = $( hostButton.table().container() );
  		var position = display.css( 'position' );

  		if ( options.align === 'dt-container' ) {
  			hostNode = hostNode.parent();
  			display.css('width', tableContainer.width());
  		}

  		// Align the popover relative to the DataTables container
  		// Useful for wide popovers such as SearchPanes
  		if (
  			position === 'absolute' &&
  			(
  				display.hasClass( options.rightAlignClassName ) ||
  				display.hasClass( options.leftAlignClassName ) ||
  				options.align === 'dt-container'
  			)
  		) {

  			var hostPosition = hostNode.position();

  			display.css( {
  				top: hostPosition.top + hostNode.outerHeight(),
  				left: hostPosition.left
  			} );

  			// calculate overflow when positioned beneath
  			var collectionHeight = display.outerHeight();
  			var tableBottom = tableContainer.offset().top + tableContainer.height();
  			var listBottom = hostPosition.top + hostNode.outerHeight() + collectionHeight;
  			var bottomOverflow = listBottom - tableBottom;

  			// calculate overflow when positioned above
  			var listTop = hostPosition.top - collectionHeight;
  			var tableTop = tableContainer.offset().top;
  			var topOverflow = tableTop - listTop;

  			// if bottom overflow is larger, move to the top because it fits better, or if dropup is requested
  			var moveTop = hostPosition.top - collectionHeight - 5;
  			if ( (bottomOverflow > topOverflow || options.dropup) && -moveTop < tableTop ) {
  				display.css( 'top', moveTop);
  			}

  			// Get the size of the container (left and width - and thus also right)
  			var tableLeft = tableContainer.offset().left;
  			var tableWidth = tableContainer.width();
  			var tableRight = tableLeft + tableWidth;

  			// Get the size of the popover (left and width - and ...)
  			var popoverLeft = display.offset().left;
  			var popoverWidth = display.width();
  			var popoverRight = popoverLeft + popoverWidth;

  			// Get the size of the host buttons (left and width - and ...)
  			var buttonsLeft = hostNode.offset().left;
  			var buttonsWidth = hostNode.outerWidth();
  			var buttonsRight = buttonsLeft + buttonsWidth;
  			
  			// You've then got all the numbers you need to do some calculations and if statements,
  			//  so we can do some quick JS maths and apply it only once
  			// If it has the right align class OR the buttons are right aligned OR the button container is floated right,
  			//  then calculate left position for the popover to align the popover to the right hand
  			//  side of the button - check to see if the left of the popover is inside the table container.
  			// If not, move the popover so it is, but not more than it means that the popover is to the right of the table container
  			var popoverShuffle = 0;
  			if ( display.hasClass( options.rightAlignClassName )) {
  				popoverShuffle = buttonsRight - popoverRight;
  				if(tableLeft > (popoverLeft + popoverShuffle)){
  					var leftGap = tableLeft - (popoverLeft + popoverShuffle);
  					var rightGap = tableRight - (popoverRight + popoverShuffle);
  	
  					if(leftGap > rightGap){
  						popoverShuffle += rightGap; 
  					}
  					else {
  						popoverShuffle += leftGap;
  					}
  				}
  			}
  			// else attempt to left align the popover to the button. Similar to above, if the popover's right goes past the table container's right,
  			//  then move it back, but not so much that it goes past the left of the table container
  			else {
  				popoverShuffle = tableLeft - popoverLeft;

  				if(tableRight < (popoverRight + popoverShuffle)){
  					var leftGap = tableLeft - (popoverLeft + popoverShuffle);
  					var rightGap = tableRight - (popoverRight + popoverShuffle);

  					if(leftGap > rightGap ){
  						popoverShuffle += rightGap;
  					}
  					else {
  						popoverShuffle += leftGap;
  					}

  				}
  			}

  			display.css('left', display.position().left + popoverShuffle);
  			
  		}
  		else if (position === 'absolute') {
  			// Align relative to the host button
  			var hostPosition = hostNode.position();

  			display.css( {
  				top: hostPosition.top + hostNode.outerHeight(),
  				left: hostPosition.left
  			} );

  			// calculate overflow when positioned beneath
  			var collectionHeight = display.outerHeight();
  			var top = hostNode.offset().top;
  			var popoverShuffle = 0;

  			// Get the size of the host buttons (left and width - and ...)
  			var buttonsLeft = hostNode.offset().left;
  			var buttonsWidth = hostNode.outerWidth();
  			var buttonsRight = buttonsLeft + buttonsWidth;

  			// Get the size of the popover (left and width - and ...)
  			var popoverLeft = display.offset().left;
  			var popoverWidth = content.width();
  			var popoverRight = popoverLeft + popoverWidth;

  			var moveTop = hostPosition.top - collectionHeight - 5;
  			var tableBottom = tableContainer.offset().top + tableContainer.height();
  			var listBottom = hostPosition.top + hostNode.outerHeight() + collectionHeight;
  			var bottomOverflow = listBottom - tableBottom;

  			// calculate overflow when positioned above
  			var listTop = hostPosition.top - collectionHeight;
  			var tableTop = tableContainer.offset().top;
  			var topOverflow = tableTop - listTop;

  			if ( (bottomOverflow > topOverflow || options.dropup) && -moveTop < tableTop ) {
  				display.css( 'top', moveTop);
  			}

  			popoverShuffle = options.align === 'button-right'
  				? buttonsRight - popoverRight
  				: buttonsLeft - popoverLeft;

  			display.css('left', display.position().left + popoverShuffle);
  		}
  		else {
  			// Fix position - centre on screen
  			var top = display.height() / 2;
  			if ( top > $(window).height() / 2 ) {
  				top = $(window).height() / 2;
  			}

  			display.css( 'marginTop', top*-1 );
  		}

  		if ( options.background ) {
  			Buttons.background( true, options.backgroundClassName, options.fade, hostNode );
  		}

  		// This is bonkers, but if we don't have a click listener on the
  		// background element, iOS Safari will ignore the body click
  		// listener below. An empty function here is all that is
  		// required to make it work...
  		$('div.dt-button-background').on( 'click.dtb-collection', function () {} );

  		$('body')
  			.on( 'click.dtb-collection', function (e) {
  				// andSelf is deprecated in jQ1.8, but we want 1.7 compat
  				var back = $.fn.addBack ? 'addBack' : 'andSelf';
  				var parent = $(e.target).parent()[0];

  				if (( ! $(e.target).parents()[back]().filter( content ).length  && !$(parent).hasClass('dt-buttons')) || $(e.target).hasClass('dt-button-background')) {
  					close();
  				}
  			} )
  			.on( 'keyup.dtb-collection', function (e) {
  				if ( e.keyCode === 27 ) {
  					close();
  				}
  			} );

  		if ( options.autoClose ) {
  			setTimeout( function () {
  				dt.on( 'buttons-action.b-internal', function (e, btn, dt, node) {
  					if ( node[0] === hostNode[0] ) {
  						return;
  					}
  					close();
  				} );
  			}, 0);
  		}

  		$(display).trigger('buttons-popover.dt');
  	}
  } );



  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   * Statics
   */

  /**
   * Show / hide a background layer behind a collection
   * @param  {boolean} Flag to indicate if the background should be shown or
   *   hidden 
   * @param  {string} Class to assign to the background
   * @static
   */
  Buttons.background = function ( show, className, fade, insertPoint ) {
  	if ( fade === undefined$1 ) {
  		fade = 400;
  	}
  	if ( ! insertPoint ) {
  		insertPoint = document.body;
  	}

  	if ( show ) {
  		_fadeIn(
  			$('<div/>')
  				.addClass( className )
  				.css( 'display', 'none' )
  				.insertAfter( insertPoint ),
  			fade
  		);
  	}
  	else {
  		_fadeOut(
  			$('div.'+className),
  			fade,
  			function () {
  				$(this)
  					.removeClass( className )
  					.remove();
  			}
  		);
  	}
  };

  /**
   * Instance selector - select Buttons instances based on an instance selector
   * value from the buttons assigned to a DataTable. This is only useful if
   * multiple instances are attached to a DataTable.
   * @param  {string|int|array} Instance selector - see `instance-selector`
   *   documentation on the DataTables site
   * @param  {array} Button instance array that was attached to the DataTables
   *   settings object
   * @return {array} Buttons instances
   * @static
   */
  Buttons.instanceSelector = function ( group, buttons )
  {
  	if ( group === undefined$1 || group === null ) {
  		return $.map( buttons, function ( v ) {
  			return v.inst;
  		} );
  	}

  	var ret = [];
  	var names = $.map( buttons, function ( v ) {
  		return v.name;
  	} );

  	// Flatten the group selector into an array of single options
  	var process = function ( input ) {
  		if ( Array.isArray( input ) ) {
  			for ( var i=0, ien=input.length ; i<ien ; i++ ) {
  				process( input[i] );
  			}
  			return;
  		}

  		if ( typeof input === 'string' ) {
  			if ( input.indexOf( ',' ) !== -1 ) {
  				// String selector, list of names
  				process( input.split(',') );
  			}
  			else {
  				// String selector individual name
  				var idx = $.inArray( input.trim(), names );

  				if ( idx !== -1 ) {
  					ret.push( buttons[ idx ].inst );
  				}
  			}
  		}
  		else if ( typeof input === 'number' ) {
  			// Index selector
  			ret.push( buttons[ input ].inst );
  		}
  	};
  	
  	process( group );

  	return ret;
  };

  /**
   * Button selector - select one or more buttons from a selector input so some
   * operation can be performed on them.
   * @param  {array} Button instances array that the selector should operate on
   * @param  {string|int|node|jQuery|array} Button selector - see
   *   `button-selector` documentation on the DataTables site
   * @return {array} Array of objects containing `inst` and `idx` properties of
   *   the selected buttons so you know which instance each button belongs to.
   * @static
   */
  Buttons.buttonSelector = function ( insts, selector )
  {
  	var ret = [];
  	var nodeBuilder = function ( a, buttons, baseIdx ) {
  		var button;
  		var idx;

  		for ( var i=0, ien=buttons.length ; i<ien ; i++ ) {
  			button = buttons[i];

  			if ( button ) {
  				idx = baseIdx !== undefined$1 ?
  					baseIdx+i :
  					i+'';

  				a.push( {
  					node: button.node,
  					name: button.conf.name,
  					idx:  idx
  				} );

  				if ( button.buttons ) {
  					nodeBuilder( a, button.buttons, idx+'-' );
  				}
  			}
  		}
  	};

  	var run = function ( selector, inst ) {
  		var i, ien;
  		var buttons = [];
  		nodeBuilder( buttons, inst.s.buttons );

  		var nodes = $.map( buttons, function (v) {
  			return v.node;
  		} );

  		if ( Array.isArray( selector ) || selector instanceof $ ) {
  			for ( i=0, ien=selector.length ; i<ien ; i++ ) {
  				run( selector[i], inst );
  			}
  			return;
  		}

  		if ( selector === null || selector === undefined$1 || selector === '*' ) {
  			// Select all
  			for ( i=0, ien=buttons.length ; i<ien ; i++ ) {
  				ret.push( {
  					inst: inst,
  					node: buttons[i].node
  				} );
  			}
  		}
  		else if ( typeof selector === 'number' ) {
  			// Main button index selector
  			ret.push( {
  				inst: inst,
  				node: inst.s.buttons[ selector ].node
  			} );
  		}
  		else if ( typeof selector === 'string' ) {
  			if ( selector.indexOf( ',' ) !== -1 ) {
  				// Split
  				var a = selector.split(',');

  				for ( i=0, ien=a.length ; i<ien ; i++ ) {
  					run( a[i].trim(), inst );
  				}
  			}
  			else if ( selector.match( /^\d+(\-\d+)*$/ ) ) {
  				// Sub-button index selector
  				var indexes = $.map( buttons, function (v) {
  					return v.idx;
  				} );

  				ret.push( {
  					inst: inst,
  					node: buttons[ $.inArray( selector, indexes ) ].node
  				} );
  			}
  			else if ( selector.indexOf( ':name' ) !== -1 ) {
  				// Button name selector
  				var name = selector.replace( ':name', '' );

  				for ( i=0, ien=buttons.length ; i<ien ; i++ ) {
  					if ( buttons[i].name === name ) {
  						ret.push( {
  							inst: inst,
  							node: buttons[i].node
  						} );
  					}
  				}
  			}
  			else {
  				// jQuery selector on the nodes
  				$( nodes ).filter( selector ).each( function () {
  					ret.push( {
  						inst: inst,
  						node: this
  					} );
  				} );
  			}
  		}
  		else if ( typeof selector === 'object' && selector.nodeName ) {
  			// Node selector
  			var idx = $.inArray( selector, nodes );

  			if ( idx !== -1 ) {
  				ret.push( {
  					inst: inst,
  					node: nodes[ idx ]
  				} );
  			}
  		}
  	};


  	for ( var i=0, ien=insts.length ; i<ien ; i++ ) {
  		var inst = insts[i];

  		run( selector, inst );
  	}

  	return ret;
  };


  /**
   * Buttons defaults. For full documentation, please refer to the docs/option
   * directory or the DataTables site.
   * @type {Object}
   * @static
   */
  Buttons.defaults = {
  	buttons: [ 'copy', 'excel', 'csv', 'pdf', 'print' ],
  	name: 'main',
  	tabIndex: 0,
  	dom: {
  		container: {
  			tag: 'div',
  			className: 'dt-buttons'
  		},
  		collection: {
  			tag: 'div',
  			className: ''
  		},
  		button: {
  			// Flash buttons will not work with `<button>` in IE - it has to be `<a>`
  			tag: 'ActiveXObject' in window ?
  				'a' :
  				'button',
  			className: 'dt-button',
  			active: 'active',
  			disabled: 'disabled'
  		},
  		buttonLiner: {
  			tag: 'span',
  			className: ''
  		}
  	}
  };

  /**
   * Version information
   * @type {string}
   * @static
   */
  Buttons.version = '1.6.5';


  $.extend( _dtButtons, {
  	collection: {
  		text: function ( dt ) {
  			return dt.i18n( 'buttons.collection', 'Collection' );
  		},
  		className: 'buttons-collection',
  		init: function ( dt, button, config ) {
  			button.attr( 'aria-expanded', false );
  		},
  		action: function ( e, dt, button, config ) {
  			e.stopPropagation();

  			if ( config._collection.parents('body').length ) {
  				this.popover(false, config);
  			}
  			else {
  				this.popover(config._collection, config);
  			}
  		},
  		attr: {
  			'aria-haspopup': true
  		}
  		// Also the popover options, defined in Buttons.popover
  	},
  	copy: function ( dt, conf ) {
  		if ( _dtButtons.copyHtml5 ) {
  			return 'copyHtml5';
  		}
  		if ( _dtButtons.copyFlash && _dtButtons.copyFlash.available( dt, conf ) ) {
  			return 'copyFlash';
  		}
  	},
  	csv: function ( dt, conf ) {
  		// Common option that will use the HTML5 or Flash export buttons
  		if ( _dtButtons.csvHtml5 && _dtButtons.csvHtml5.available( dt, conf ) ) {
  			return 'csvHtml5';
  		}
  		if ( _dtButtons.csvFlash && _dtButtons.csvFlash.available( dt, conf ) ) {
  			return 'csvFlash';
  		}
  	},
  	excel: function ( dt, conf ) {
  		// Common option that will use the HTML5 or Flash export buttons
  		if ( _dtButtons.excelHtml5 && _dtButtons.excelHtml5.available( dt, conf ) ) {
  			return 'excelHtml5';
  		}
  		if ( _dtButtons.excelFlash && _dtButtons.excelFlash.available( dt, conf ) ) {
  			return 'excelFlash';
  		}
  	},
  	pdf: function ( dt, conf ) {
  		// Common option that will use the HTML5 or Flash export buttons
  		if ( _dtButtons.pdfHtml5 && _dtButtons.pdfHtml5.available( dt, conf ) ) {
  			return 'pdfHtml5';
  		}
  		if ( _dtButtons.pdfFlash && _dtButtons.pdfFlash.available( dt, conf ) ) {
  			return 'pdfFlash';
  		}
  	},
  	pageLength: function ( dt ) {
  		var lengthMenu = dt.settings()[0].aLengthMenu;
  		var vals = Array.isArray( lengthMenu[0] ) ? lengthMenu[0] : lengthMenu;
  		var lang = Array.isArray( lengthMenu[0] ) ? lengthMenu[1] : lengthMenu;
  		var text = function ( dt ) {
  			return dt.i18n( 'buttons.pageLength', {
  				"-1": 'Show all rows',
  				_:    'Show %d rows'
  			}, dt.page.len() );
  		};

  		return {
  			extend: 'collection',
  			text: text,
  			className: 'buttons-page-length',
  			autoClose: true,
  			buttons: $.map( vals, function ( val, i ) {
  				return {
  					text: lang[i],
  					className: 'button-page-length',
  					action: function ( e, dt ) {
  						dt.page.len( val ).draw();
  					},
  					init: function ( dt, node, conf ) {
  						var that = this;
  						var fn = function () {
  							that.active( dt.page.len() === val );
  						};

  						dt.on( 'length.dt'+conf.namespace, fn );
  						fn();
  					},
  					destroy: function ( dt, node, conf ) {
  						dt.off( 'length.dt'+conf.namespace );
  					}
  				};
  			} ),
  			init: function ( dt, node, conf ) {
  				var that = this;
  				dt.on( 'length.dt'+conf.namespace, function () {
  					that.text( conf.text );
  				} );
  			},
  			destroy: function ( dt, node, conf ) {
  				dt.off( 'length.dt'+conf.namespace );
  			}
  		};
  	}
  } );


  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   * DataTables API
   *
   * For complete documentation, please refer to the docs/api directory or the
   * DataTables site
   */

  // Buttons group and individual button selector
  DataTable.Api.register( 'buttons()', function ( group, selector ) {
  	// Argument shifting
  	if ( selector === undefined$1 ) {
  		selector = group;
  		group = undefined$1;
  	}

  	this.selector.buttonGroup = group;

  	var res = this.iterator( true, 'table', function ( ctx ) {
  		if ( ctx._buttons ) {
  			return Buttons.buttonSelector(
  				Buttons.instanceSelector( group, ctx._buttons ),
  				selector
  			);
  		}
  	}, true );

  	res._groupSelector = group;
  	return res;
  } );

  // Individual button selector
  DataTable.Api.register( 'button()', function ( group, selector ) {
  	// just run buttons() and truncate
  	var buttons = this.buttons( group, selector );

  	if ( buttons.length > 1 ) {
  		buttons.splice( 1, buttons.length );
  	}

  	return buttons;
  } );

  // Active buttons
  DataTable.Api.registerPlural( 'buttons().active()', 'button().active()', function ( flag ) {
  	if ( flag === undefined$1 ) {
  		return this.map( function ( set ) {
  			return set.inst.active( set.node );
  		} );
  	}

  	return this.each( function ( set ) {
  		set.inst.active( set.node, flag );
  	} );
  } );

  // Get / set button action
  DataTable.Api.registerPlural( 'buttons().action()', 'button().action()', function ( action ) {
  	if ( action === undefined$1 ) {
  		return this.map( function ( set ) {
  			return set.inst.action( set.node );
  		} );
  	}

  	return this.each( function ( set ) {
  		set.inst.action( set.node, action );
  	} );
  } );

  // Enable / disable buttons
  DataTable.Api.register( ['buttons().enable()', 'button().enable()'], function ( flag ) {
  	return this.each( function ( set ) {
  		set.inst.enable( set.node, flag );
  	} );
  } );

  // Disable buttons
  DataTable.Api.register( ['buttons().disable()', 'button().disable()'], function () {
  	return this.each( function ( set ) {
  		set.inst.disable( set.node );
  	} );
  } );

  // Get button nodes
  DataTable.Api.registerPlural( 'buttons().nodes()', 'button().node()', function () {
  	var jq = $();

  	// jQuery will automatically reduce duplicates to a single entry
  	$( this.each( function ( set ) {
  		jq = jq.add( set.inst.node( set.node ) );
  	} ) );

  	return jq;
  } );

  // Get / set button processing state
  DataTable.Api.registerPlural( 'buttons().processing()', 'button().processing()', function ( flag ) {
  	if ( flag === undefined$1 ) {
  		return this.map( function ( set ) {
  			return set.inst.processing( set.node );
  		} );
  	}

  	return this.each( function ( set ) {
  		set.inst.processing( set.node, flag );
  	} );
  } );

  // Get / set button text (i.e. the button labels)
  DataTable.Api.registerPlural( 'buttons().text()', 'button().text()', function ( label ) {
  	if ( label === undefined$1 ) {
  		return this.map( function ( set ) {
  			return set.inst.text( set.node );
  		} );
  	}

  	return this.each( function ( set ) {
  		set.inst.text( set.node, label );
  	} );
  } );

  // Trigger a button's action
  DataTable.Api.registerPlural( 'buttons().trigger()', 'button().trigger()', function () {
  	return this.each( function ( set ) {
  		set.inst.node( set.node ).trigger( 'click' );
  	} );
  } );

  // Button resolver to the popover
  DataTable.Api.register( 'button().popover()', function (content, options) {
  	return this.map( function ( set ) {
  		return set.inst._popover( content, this.button(this[0].node), options );
  	} );
  } );

  // Get the container elements
  DataTable.Api.register( 'buttons().containers()', function () {
  	var jq = $();
  	var groupSelector = this._groupSelector;

  	// We need to use the group selector directly, since if there are no buttons
  	// the result set will be empty
  	this.iterator( true, 'table', function ( ctx ) {
  		if ( ctx._buttons ) {
  			var insts = Buttons.instanceSelector( groupSelector, ctx._buttons );

  			for ( var i=0, ien=insts.length ; i<ien ; i++ ) {
  				jq = jq.add( insts[i].container() );
  			}
  		}
  	} );

  	return jq;
  } );

  DataTable.Api.register( 'buttons().container()', function () {
  	// API level of nesting is `buttons()` so we can zip into the containers method
  	return this.containers().eq(0);
  } );

  // Add a new button
  DataTable.Api.register( 'button().add()', function ( idx, conf ) {
  	var ctx = this.context;

  	// Don't use `this` as it could be empty - select the instances directly
  	if ( ctx.length ) {
  		var inst = Buttons.instanceSelector( this._groupSelector, ctx[0]._buttons );

  		if ( inst.length ) {
  			inst[0].add( conf, idx );
  		}
  	}

  	return this.button( this._groupSelector, idx );
  } );

  // Destroy the button sets selected
  DataTable.Api.register( 'buttons().destroy()', function () {
  	this.pluck( 'inst' ).unique().each( function ( inst ) {
  		inst.destroy();
  	} );

  	return this;
  } );

  // Remove a button
  DataTable.Api.registerPlural( 'buttons().remove()', 'buttons().remove()', function () {
  	this.each( function ( set ) {
  		set.inst.remove( set.node );
  	} );

  	return this;
  } );

  // Information box that can be used by buttons
  var _infoTimer;
  DataTable.Api.register( 'buttons.info()', function ( title, message, time ) {
  	var that = this;

  	if ( title === false ) {
  		this.off('destroy.btn-info');
  		_fadeOut(
  			$('#datatables_buttons_info'),
  			400,
  			function () {
  				$(this).remove();
  			}
  		);
  		clearTimeout( _infoTimer );
  		_infoTimer = null;

  		return this;
  	}

  	if ( _infoTimer ) {
  		clearTimeout( _infoTimer );
  	}

  	if ( $('#datatables_buttons_info').length ) {
  		$('#datatables_buttons_info').remove();
  	}

  	title = title ? '<h2>'+title+'</h2>' : '';

  	_fadeIn(
  		$('<div id="datatables_buttons_info" class="dt-button-info"/>')
  			.html( title )
  			.append( $('<div/>')[ typeof message === 'string' ? 'html' : 'append' ]( message ) )
  			.css( 'display', 'none' )
  			.appendTo( 'body' )
  	);

  	if ( time !== undefined$1 && time !== 0 ) {
  		_infoTimer = setTimeout( function () {
  			that.buttons.info( false );
  		}, time );
  	}

  	this.on('destroy.btn-info', function () {
  		that.buttons.info(false);
  	});

  	return this;
  } );

  // Get data from the table for export - this is common to a number of plug-in
  // buttons so it is included in the Buttons core library
  DataTable.Api.register( 'buttons.exportData()', function ( options ) {
  	if ( this.context.length ) {
  		return _exportData( new DataTable.Api( this.context[0] ), options );
  	}
  } );

  // Get information about the export that is common to many of the export data
  // types (DRY)
  DataTable.Api.register( 'buttons.exportInfo()', function ( conf ) {
  	if ( ! conf ) {
  		conf = {};
  	}

  	return {
  		filename: _filename( conf ),
  		title: _title( conf ),
  		messageTop: _message(this, conf.message || conf.messageTop, 'top'),
  		messageBottom: _message(this, conf.messageBottom, 'bottom')
  	};
  } );



  /**
   * Get the file name for an exported file.
   *
   * @param {object}	config Button configuration
   * @param {boolean} incExtension Include the file name extension
   */
  var _filename = function ( config )
  {
  	// Backwards compatibility
  	var filename = config.filename === '*' && config.title !== '*' && config.title !== undefined$1 && config.title !== null && config.title !== '' ?
  		config.title :
  		config.filename;

  	if ( typeof filename === 'function' ) {
  		filename = filename();
  	}

  	if ( filename === undefined$1 || filename === null ) {
  		return null;
  	}

  	if ( filename.indexOf( '*' ) !== -1 ) {
  		filename = filename.replace( '*', $('head > title').text() ).trim();
  	}

  	// Strip characters which the OS will object to
  	filename = filename.replace(/[^a-zA-Z0-9_\u00A1-\uFFFF\.,\-_ !\(\)]/g, "");

  	var extension = _stringOrFunction( config.extension );
  	if ( ! extension ) {
  		extension = '';
  	}

  	return filename + extension;
  };

  /**
   * Simply utility method to allow parameters to be given as a function
   *
   * @param {undefined|string|function} option Option
   * @return {null|string} Resolved value
   */
  var _stringOrFunction = function ( option )
  {
  	if ( option === null || option === undefined$1 ) {
  		return null;
  	}
  	else if ( typeof option === 'function' ) {
  		return option();
  	}
  	return option;
  };

  /**
   * Get the title for an exported file.
   *
   * @param {object} config	Button configuration
   */
  var _title = function ( config )
  {
  	var title = _stringOrFunction( config.title );

  	return title === null ?
  		null : title.indexOf( '*' ) !== -1 ?
  			title.replace( '*', $('head > title').text() || 'Exported data' ) :
  			title;
  };

  var _message = function ( dt, option, position )
  {
  	var message = _stringOrFunction( option );
  	if ( message === null ) {
  		return null;
  	}

  	var caption = $('caption', dt.table().container()).eq(0);
  	if ( message === '*' ) {
  		var side = caption.css( 'caption-side' );
  		if ( side !== position ) {
  			return null;
  		}

  		return caption.length ?
  			caption.text() :
  			'';
  	}

  	return message;
  };







  var _exportTextarea = $('<textarea/>')[0];
  var _exportData = function ( dt, inOpts )
  {
  	var config = $.extend( true, {}, {
  		rows:           null,
  		columns:        '',
  		modifier:       {
  			search: 'applied',
  			order:  'applied'
  		},
  		orthogonal:     'display',
  		stripHtml:      true,
  		stripNewlines:  true,
  		decodeEntities: true,
  		trim:           true,
  		format:         {
  			header: function ( d ) {
  				return strip( d );
  			},
  			footer: function ( d ) {
  				return strip( d );
  			},
  			body: function ( d ) {
  				return strip( d );
  			}
  		},
  		customizeData: null
  	}, inOpts );

  	var strip = function ( str ) {
  		if ( typeof str !== 'string' ) {
  			return str;
  		}

  		// Always remove script tags
  		str = str.replace( /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '' );

  		// Always remove comments
  		str = str.replace( /<!\-\-.*?\-\->/g, '' );

  		if ( config.stripHtml ) {
  			str = str.replace( /<([^>'"]*('[^']*'|"[^"]*")?)*>/g, '' );
  		}

  		if ( config.trim ) {
  			str = str.replace( /^\s+|\s+$/g, '' );
  		}

  		if ( config.stripNewlines ) {
  			str = str.replace( /\n/g, ' ' );
  		}

  		if ( config.decodeEntities ) {
  			_exportTextarea.innerHTML = str;
  			str = _exportTextarea.value;
  		}

  		return str;
  	};


  	var header = dt.columns( config.columns ).indexes().map( function (idx) {
  		var el = dt.column( idx ).header();
  		return config.format.header( el.innerHTML, idx, el );
  	} ).toArray();

  	var footer = dt.table().footer() ?
  		dt.columns( config.columns ).indexes().map( function (idx) {
  			var el = dt.column( idx ).footer();
  			return config.format.footer( el ? el.innerHTML : '', idx, el );
  		} ).toArray() :
  		null;
  	
  	// If Select is available on this table, and any rows are selected, limit the export
  	// to the selected rows. If no rows are selected, all rows will be exported. Specify
  	// a `selected` modifier to control directly.
  	var modifier = $.extend( {}, config.modifier );
  	if ( dt.select && typeof dt.select.info === 'function' && modifier.selected === undefined$1 ) {
  		if ( dt.rows( config.rows, $.extend( { selected: true }, modifier ) ).any() ) {
  			$.extend( modifier, { selected: true } );
  		}
  	}

  	var rowIndexes = dt.rows( config.rows, modifier ).indexes().toArray();
  	var selectedCells = dt.cells( rowIndexes, config.columns );
  	var cells = selectedCells
  		.render( config.orthogonal )
  		.toArray();
  	var cellNodes = selectedCells
  		.nodes()
  		.toArray();

  	var columns = header.length;
  	var rows = columns > 0 ? cells.length / columns : 0;
  	var body = [];
  	var cellCounter = 0;

  	for ( var i=0, ien=rows ; i<ien ; i++ ) {
  		var row = [ columns ];

  		for ( var j=0 ; j<columns ; j++ ) {
  			row[j] = config.format.body( cells[ cellCounter ], i, j, cellNodes[ cellCounter ] );
  			cellCounter++;
  		}

  		body[i] = row;
  	}

  	var data = {
  		header: header,
  		footer: footer,
  		body:   body
  	};

  	if ( config.customizeData ) {
  		config.customizeData( data );
  	}

  	return data;
  };


  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   * DataTables interface
   */

  // Attach to DataTables objects for global access
  $.fn.dataTable.Buttons = Buttons;
  $.fn.DataTable.Buttons = Buttons;



  // DataTables creation - check if the buttons have been defined for this table,
  // they will have been if the `B` option was used in `dom`, otherwise we should
  // create the buttons instance here so they can be inserted into the document
  // using the API. Listen for `init` for compatibility with pre 1.10.10, but to
  // be removed in future.
  $(document).on( 'init.dt plugin-init.dt', function (e, settings) {
  	if ( e.namespace !== 'dt' ) {
  		return;
  	}

  	var opts = settings.oInit.buttons || DataTable.defaults.buttons;

  	if ( opts && ! settings._buttons ) {
  		new Buttons( settings, opts ).container();
  	}
  } );

  function _init ( settings, options ) {
  	var api = new DataTable.Api( settings );
  	var opts = options
  		? options
  		: api.init().buttons || DataTable.defaults.buttons;

  	return new Buttons( api, opts ).container();
  }

  // DataTables `dom` feature option
  DataTable.ext.feature.push( {
  	fnInit: _init,
  	cFeature: "B"
  } );

  // DataTables 2 layout feature
  if ( DataTable.ext.features ) {
  	DataTable.ext.features.register( 'buttons', _init );
  }


  return Buttons;
  }));
  });

  var dataTables_buttons$1 = createCommonjsModule(function (module, exports) {
  /*! Buttons for DataTables 1.6.2
   * ©2016-2020 SpryMedia Ltd - datatables.net/license
   */

  (function( factory ){
  	{
  		// CommonJS
  		module.exports = function (root, $) {
  			if ( ! root ) {
  				root = window;
  			}

  			if ( ! $ || ! $.fn.dataTable ) {
  				$ = jquery_dataTables(root, $).$;
  			}

  			return factory( $, root, root.document );
  		};
  	}
  }(function( $, window, document, undefined$1 ) {
  var DataTable = $.fn.dataTable;


  // Used for namespacing events added to the document by each instance, so they
  // can be removed on destroy
  var _instCounter = 0;

  // Button namespacing counter for namespacing events on individual buttons
  var _buttonCounter = 0;

  var _dtButtons = DataTable.ext.buttons;

  // Allow for jQuery slim
  function _fadeIn(el, duration, fn) {
  	if ($.fn.animate) {
  		el
  			.stop()
  			.fadeIn( duration, fn );
  	}
  	else {
  		el.css('display', 'block');

  		if (fn) {
  			fn.call(el);
  		}
  	}
  }

  function _fadeOut(el, duration, fn) {
  	if ($.fn.animate) {
  		el
  			.stop()
  			.fadeOut( duration, fn );
  	}
  	else {
  		el.css('display', 'none');
  		
  		if (fn) {
  			fn.call(el);
  		}
  	}
  }

  /**
   * [Buttons description]
   * @param {[type]}
   * @param {[type]}
   */
  var Buttons = function( dt, config )
  {
  	// If not created with a `new` keyword then we return a wrapper function that
  	// will take the settings object for a DT. This allows easy use of new instances
  	// with the `layout` option - e.g. `topLeft: $.fn.dataTable.Buttons( ... )`.
  	if ( !(this instanceof Buttons) ) {
  		return function (settings) {
  			return new Buttons( settings, dt ).container();
  		};
  	}

  	// If there is no config set it to an empty object
  	if ( typeof( config ) === 'undefined' ) {
  		config = {};	
  	}
  	
  	// Allow a boolean true for defaults
  	if ( config === true ) {
  		config = {};
  	}

  	// For easy configuration of buttons an array can be given
  	if ( $.isArray( config ) ) {
  		config = { buttons: config };
  	}

  	this.c = $.extend( true, {}, Buttons.defaults, config );

  	// Don't want a deep copy for the buttons
  	if ( config.buttons ) {
  		this.c.buttons = config.buttons;
  	}

  	this.s = {
  		dt: new DataTable.Api( dt ),
  		buttons: [],
  		listenKeys: '',
  		namespace: 'dtb'+(_instCounter++)
  	};

  	this.dom = {
  		container: $('<'+this.c.dom.container.tag+'/>')
  			.addClass( this.c.dom.container.className )
  	};

  	this._constructor();
  };


  $.extend( Buttons.prototype, {
  	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  	 * Public methods
  	 */

  	/**
  	 * Get the action of a button
  	 * @param  {int|string} Button index
  	 * @return {function}
  	 *//**
  	 * Set the action of a button
  	 * @param  {node} node Button element
  	 * @param  {function} action Function to set
  	 * @return {Buttons} Self for chaining
  	 */
  	action: function ( node, action )
  	{
  		var button = this._nodeToButton( node );

  		if ( action === undefined$1 ) {
  			return button.conf.action;
  		}

  		button.conf.action = action;

  		return this;
  	},

  	/**
  	 * Add an active class to the button to make to look active or get current
  	 * active state.
  	 * @param  {node} node Button element
  	 * @param  {boolean} [flag] Enable / disable flag
  	 * @return {Buttons} Self for chaining or boolean for getter
  	 */
  	active: function ( node, flag ) {
  		var button = this._nodeToButton( node );
  		var klass = this.c.dom.button.active;
  		var jqNode = $(button.node);

  		if ( flag === undefined$1 ) {
  			return jqNode.hasClass( klass );
  		}

  		jqNode.toggleClass( klass, flag === undefined$1 ? true : flag );

  		return this;
  	},

  	/**
  	 * Add a new button
  	 * @param {object} config Button configuration object, base string name or function
  	 * @param {int|string} [idx] Button index for where to insert the button
  	 * @return {Buttons} Self for chaining
  	 */
  	add: function ( config, idx )
  	{
  		var buttons = this.s.buttons;

  		if ( typeof idx === 'string' ) {
  			var split = idx.split('-');
  			var base = this.s;

  			for ( var i=0, ien=split.length-1 ; i<ien ; i++ ) {
  				base = base.buttons[ split[i]*1 ];
  			}

  			buttons = base.buttons;
  			idx = split[ split.length-1 ]*1;
  		}

  		this._expandButton( buttons, config, base !== undefined$1, idx );
  		this._draw();

  		return this;
  	},

  	/**
  	 * Get the container node for the buttons
  	 * @return {jQuery} Buttons node
  	 */
  	container: function ()
  	{
  		return this.dom.container;
  	},

  	/**
  	 * Disable a button
  	 * @param  {node} node Button node
  	 * @return {Buttons} Self for chaining
  	 */
  	disable: function ( node ) {
  		var button = this._nodeToButton( node );

  		$(button.node)
  			.addClass( this.c.dom.button.disabled )
  			.attr('disabled', true);

  		return this;
  	},

  	/**
  	 * Destroy the instance, cleaning up event handlers and removing DOM
  	 * elements
  	 * @return {Buttons} Self for chaining
  	 */
  	destroy: function ()
  	{
  		// Key event listener
  		$('body').off( 'keyup.'+this.s.namespace );

  		// Individual button destroy (so they can remove their own events if
  		// needed). Take a copy as the array is modified by `remove`
  		var buttons = this.s.buttons.slice();
  		var i, ien;
  		
  		for ( i=0, ien=buttons.length ; i<ien ; i++ ) {
  			this.remove( buttons[i].node );
  		}

  		// Container
  		this.dom.container.remove();

  		// Remove from the settings object collection
  		var buttonInsts = this.s.dt.settings()[0];

  		for ( i=0, ien=buttonInsts.length ; i<ien ; i++ ) {
  			if ( buttonInsts.inst === this ) {
  				buttonInsts.splice( i, 1 );
  				break;
  			}
  		}

  		return this;
  	},

  	/**
  	 * Enable / disable a button
  	 * @param  {node} node Button node
  	 * @param  {boolean} [flag=true] Enable / disable flag
  	 * @return {Buttons} Self for chaining
  	 */
  	enable: function ( node, flag )
  	{
  		if ( flag === false ) {
  			return this.disable( node );
  		}

  		var button = this._nodeToButton( node );
  		$(button.node)
  			.removeClass( this.c.dom.button.disabled )
  			.removeAttr('disabled');

  		return this;
  	},

  	/**
  	 * Get the instance name for the button set selector
  	 * @return {string} Instance name
  	 */
  	name: function ()
  	{
  		return this.c.name;
  	},

  	/**
  	 * Get a button's node of the buttons container if no button is given
  	 * @param  {node} [node] Button node
  	 * @return {jQuery} Button element, or container
  	 */
  	node: function ( node )
  	{
  		if ( ! node ) {
  			return this.dom.container;
  		}

  		var button = this._nodeToButton( node );
  		return $(button.node);
  	},

  	/**
  	 * Set / get a processing class on the selected button
  	 * @param {element} node Triggering button node
  	 * @param  {boolean} flag true to add, false to remove, undefined to get
  	 * @return {boolean|Buttons} Getter value or this if a setter.
  	 */
  	processing: function ( node, flag )
  	{
  		var dt = this.s.dt;
  		var button = this._nodeToButton( node );

  		if ( flag === undefined$1 ) {
  			return $(button.node).hasClass( 'processing' );
  		}

  		$(button.node).toggleClass( 'processing', flag );

  		$(dt.table().node()).triggerHandler( 'buttons-processing.dt', [
  			flag, dt.button( node ), dt, $(node), button.conf
  		] );

  		return this;
  	},

  	/**
  	 * Remove a button.
  	 * @param  {node} node Button node
  	 * @return {Buttons} Self for chaining
  	 */
  	remove: function ( node )
  	{
  		var button = this._nodeToButton( node );
  		var host = this._nodeToHost( node );
  		var dt = this.s.dt;

  		// Remove any child buttons first
  		if ( button.buttons.length ) {
  			for ( var i=button.buttons.length-1 ; i>=0 ; i-- ) {
  				this.remove( button.buttons[i].node );
  			}
  		}

  		// Allow the button to remove event handlers, etc
  		if ( button.conf.destroy ) {
  			button.conf.destroy.call( dt.button(node), dt, $(node), button.conf );
  		}

  		this._removeKey( button.conf );

  		$(button.node).remove();

  		var idx = $.inArray( button, host );
  		host.splice( idx, 1 );

  		return this;
  	},

  	/**
  	 * Get the text for a button
  	 * @param  {int|string} node Button index
  	 * @return {string} Button text
  	 *//**
  	 * Set the text for a button
  	 * @param  {int|string|function} node Button index
  	 * @param  {string} label Text
  	 * @return {Buttons} Self for chaining
  	 */
  	text: function ( node, label )
  	{
  		var button = this._nodeToButton( node );
  		var buttonLiner = this.c.dom.collection.buttonLiner;
  		var linerTag = button.inCollection && buttonLiner && buttonLiner.tag ?
  			buttonLiner.tag :
  			this.c.dom.buttonLiner.tag;
  		var dt = this.s.dt;
  		var jqNode = $(button.node);
  		var text = function ( opt ) {
  			return typeof opt === 'function' ?
  				opt( dt, jqNode, button.conf ) :
  				opt;
  		};

  		if ( label === undefined$1 ) {
  			return text( button.conf.text );
  		}

  		button.conf.text = label;

  		if ( linerTag ) {
  			jqNode.children( linerTag ).html( text(label) );
  		}
  		else {
  			jqNode.html( text(label) );
  		}

  		return this;
  	},


  	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  	 * Constructor
  	 */

  	/**
  	 * Buttons constructor
  	 * @private
  	 */
  	_constructor: function ()
  	{
  		var that = this;
  		var dt = this.s.dt;
  		var dtSettings = dt.settings()[0];
  		var buttons =  this.c.buttons;

  		if ( ! dtSettings._buttons ) {
  			dtSettings._buttons = [];
  		}

  		dtSettings._buttons.push( {
  			inst: this,
  			name: this.c.name
  		} );

  		for ( var i=0, ien=buttons.length ; i<ien ; i++ ) {
  			this.add( buttons[i] );
  		}

  		dt.on( 'destroy', function ( e, settings ) {
  			if ( settings === dtSettings ) {
  				that.destroy();
  			}
  		} );

  		// Global key event binding to listen for button keys
  		$('body').on( 'keyup.'+this.s.namespace, function ( e ) {
  			if ( ! document.activeElement || document.activeElement === document.body ) {
  				// SUse a string of characters for fast lookup of if we need to
  				// handle this
  				var character = String.fromCharCode(e.keyCode).toLowerCase();

  				if ( that.s.listenKeys.toLowerCase().indexOf( character ) !== -1 ) {
  					that._keypress( character, e );
  				}
  			}
  		} );
  	},


  	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  	 * Private methods
  	 */

  	/**
  	 * Add a new button to the key press listener
  	 * @param {object} conf Resolved button configuration object
  	 * @private
  	 */
  	_addKey: function ( conf )
  	{
  		if ( conf.key ) {
  			this.s.listenKeys += $.isPlainObject( conf.key ) ?
  				conf.key.key :
  				conf.key;
  		}
  	},

  	/**
  	 * Insert the buttons into the container. Call without parameters!
  	 * @param  {node} [container] Recursive only - Insert point
  	 * @param  {array} [buttons] Recursive only - Buttons array
  	 * @private
  	 */
  	_draw: function ( container, buttons )
  	{
  		if ( ! container ) {
  			container = this.dom.container;
  			buttons = this.s.buttons;
  		}

  		container.children().detach();

  		for ( var i=0, ien=buttons.length ; i<ien ; i++ ) {
  			container.append( buttons[i].inserter );
  			container.append( ' ' );

  			if ( buttons[i].buttons && buttons[i].buttons.length ) {
  				this._draw( buttons[i].collection, buttons[i].buttons );
  			}
  		}
  	},

  	/**
  	 * Create buttons from an array of buttons
  	 * @param  {array} attachTo Buttons array to attach to
  	 * @param  {object} button Button definition
  	 * @param  {boolean} inCollection true if the button is in a collection
  	 * @private
  	 */
  	_expandButton: function ( attachTo, button, inCollection, attachPoint )
  	{
  		var dt = this.s.dt;
  		var buttons = ! $.isArray( button ) ?
  			[ button ] :
  			button;

  		for ( var i=0, ien=buttons.length ; i<ien ; i++ ) {
  			var conf = this._resolveExtends( buttons[i] );

  			if ( ! conf ) {
  				continue;
  			}

  			// If the configuration is an array, then expand the buttons at this
  			// point
  			if ( $.isArray( conf ) ) {
  				this._expandButton( attachTo, conf, inCollection, attachPoint );
  				continue;
  			}

  			var built = this._buildButton( conf, inCollection );
  			if ( ! built ) {
  				continue;
  			}

  			if ( attachPoint !== undefined$1 && attachPoint !== null ) {
  				attachTo.splice( attachPoint, 0, built );
  				attachPoint++;
  			}
  			else {
  				attachTo.push( built );
  			}

  			if ( built.conf.buttons ) {
  				built.collection = $('<'+this.c.dom.collection.tag+'/>');

  				built.conf._collection = built.collection;

  				this._expandButton( built.buttons, built.conf.buttons, true, attachPoint );
  			}

  			// init call is made here, rather than buildButton as it needs to
  			// be selectable, and for that it needs to be in the buttons array
  			if ( conf.init ) {
  				conf.init.call( dt.button( built.node ), dt, $(built.node), conf );
  			}
  		}
  	},

  	/**
  	 * Create an individual button
  	 * @param  {object} config            Resolved button configuration
  	 * @param  {boolean} inCollection `true` if a collection button
  	 * @return {jQuery} Created button node (jQuery)
  	 * @private
  	 */
  	_buildButton: function ( config, inCollection )
  	{
  		var buttonDom = this.c.dom.button;
  		var linerDom = this.c.dom.buttonLiner;
  		var collectionDom = this.c.dom.collection;
  		var dt = this.s.dt;
  		var text = function ( opt ) {
  			return typeof opt === 'function' ?
  				opt( dt, button, config ) :
  				opt;
  		};

  		if ( inCollection && collectionDom.button ) {
  			buttonDom = collectionDom.button;
  		}

  		if ( inCollection && collectionDom.buttonLiner ) {
  			linerDom = collectionDom.buttonLiner;
  		}

  		// Make sure that the button is available based on whatever requirements
  		// it has. For example, Flash buttons require Flash
  		if ( config.available && ! config.available( dt, config ) ) {
  			return false;
  		}

  		var action = function ( e, dt, button, config ) {
  			config.action.call( dt.button( button ), e, dt, button, config );

  			$(dt.table().node()).triggerHandler( 'buttons-action.dt', [
  				dt.button( button ), dt, button, config 
  			] );
  		};

  		var tag = config.tag || buttonDom.tag;
  		var clickBlurs = config.clickBlurs === undefined$1 ? true : config.clickBlurs;
  		var button = $('<'+tag+'/>')
  			.addClass( buttonDom.className )
  			.attr( 'tabindex', this.s.dt.settings()[0].iTabIndex )
  			.attr( 'aria-controls', this.s.dt.table().node().id )
  			.on( 'click.dtb', function (e) {
  				e.preventDefault();

  				if ( ! button.hasClass( buttonDom.disabled ) && config.action ) {
  					action( e, dt, button, config );
  				}
  				if( clickBlurs ) {
  					button.trigger('blur');
  				}
  			} )
  			.on( 'keyup.dtb', function (e) {
  				if ( e.keyCode === 13 ) {
  					if ( ! button.hasClass( buttonDom.disabled ) && config.action ) {
  						action( e, dt, button, config );
  					}
  				}
  			} );

  		// Make `a` tags act like a link
  		if ( tag.toLowerCase() === 'a' ) {
  			button.attr( 'href', '#' );
  		}

  		// Button tags should have `type=button` so they don't have any default behaviour
  		if ( tag.toLowerCase() === 'button' ) {
  			button.attr( 'type', 'button' );
  		}

  		if ( linerDom.tag ) {
  			var liner = $('<'+linerDom.tag+'/>')
  				.html( text( config.text ) )
  				.addClass( linerDom.className );

  			if ( linerDom.tag.toLowerCase() === 'a' ) {
  				liner.attr( 'href', '#' );
  			}

  			button.append( liner );
  		}
  		else {
  			button.html( text( config.text ) );
  		}

  		if ( config.enabled === false ) {
  			button.addClass( buttonDom.disabled );
  		}

  		if ( config.className ) {
  			button.addClass( config.className );
  		}

  		if ( config.titleAttr ) {
  			button.attr( 'title', text( config.titleAttr ) );
  		}

  		if ( config.attr ) {
  			button.attr( config.attr );
  		}

  		if ( ! config.namespace ) {
  			config.namespace = '.dt-button-'+(_buttonCounter++);
  		}

  		var buttonContainer = this.c.dom.buttonContainer;
  		var inserter;
  		if ( buttonContainer && buttonContainer.tag ) {
  			inserter = $('<'+buttonContainer.tag+'/>')
  				.addClass( buttonContainer.className )
  				.append( button );
  		}
  		else {
  			inserter = button;
  		}

  		this._addKey( config );

  		// Style integration callback for DOM manipulation
  		// Note that this is _not_ documented. It is currently
  		// for style integration only
  		if( this.c.buttonCreated ) {
  			inserter = this.c.buttonCreated( config, inserter );
  		}

  		return {
  			conf:         config,
  			node:         button.get(0),
  			inserter:     inserter,
  			buttons:      [],
  			inCollection: inCollection,
  			collection:   null
  		};
  	},

  	/**
  	 * Get the button object from a node (recursive)
  	 * @param  {node} node Button node
  	 * @param  {array} [buttons] Button array, uses base if not defined
  	 * @return {object} Button object
  	 * @private
  	 */
  	_nodeToButton: function ( node, buttons )
  	{
  		if ( ! buttons ) {
  			buttons = this.s.buttons;
  		}

  		for ( var i=0, ien=buttons.length ; i<ien ; i++ ) {
  			if ( buttons[i].node === node ) {
  				return buttons[i];
  			}

  			if ( buttons[i].buttons.length ) {
  				var ret = this._nodeToButton( node, buttons[i].buttons );

  				if ( ret ) {
  					return ret;
  				}
  			}
  		}
  	},

  	/**
  	 * Get container array for a button from a button node (recursive)
  	 * @param  {node} node Button node
  	 * @param  {array} [buttons] Button array, uses base if not defined
  	 * @return {array} Button's host array
  	 * @private
  	 */
  	_nodeToHost: function ( node, buttons )
  	{
  		if ( ! buttons ) {
  			buttons = this.s.buttons;
  		}

  		for ( var i=0, ien=buttons.length ; i<ien ; i++ ) {
  			if ( buttons[i].node === node ) {
  				return buttons;
  			}

  			if ( buttons[i].buttons.length ) {
  				var ret = this._nodeToHost( node, buttons[i].buttons );

  				if ( ret ) {
  					return ret;
  				}
  			}
  		}
  	},

  	/**
  	 * Handle a key press - determine if any button's key configured matches
  	 * what was typed and trigger the action if so.
  	 * @param  {string} character The character pressed
  	 * @param  {object} e Key event that triggered this call
  	 * @private
  	 */
  	_keypress: function ( character, e )
  	{
  		// Check if this button press already activated on another instance of Buttons
  		if ( e._buttonsHandled ) {
  			return;
  		}

  		var run = function ( conf, node ) {
  			if ( ! conf.key ) {
  				return;
  			}

  			if ( conf.key === character ) {
  				e._buttonsHandled = true;
  				$(node).click();
  			}
  			else if ( $.isPlainObject( conf.key ) ) {
  				if ( conf.key.key !== character ) {
  					return;
  				}

  				if ( conf.key.shiftKey && ! e.shiftKey ) {
  					return;
  				}

  				if ( conf.key.altKey && ! e.altKey ) {
  					return;
  				}

  				if ( conf.key.ctrlKey && ! e.ctrlKey ) {
  					return;
  				}

  				if ( conf.key.metaKey && ! e.metaKey ) {
  					return;
  				}

  				// Made it this far - it is good
  				e._buttonsHandled = true;
  				$(node).click();
  			}
  		};

  		var recurse = function ( a ) {
  			for ( var i=0, ien=a.length ; i<ien ; i++ ) {
  				run( a[i].conf, a[i].node );

  				if ( a[i].buttons.length ) {
  					recurse( a[i].buttons );
  				}
  			}
  		};

  		recurse( this.s.buttons );
  	},

  	/**
  	 * Remove a key from the key listener for this instance (to be used when a
  	 * button is removed)
  	 * @param  {object} conf Button configuration
  	 * @private
  	 */
  	_removeKey: function ( conf )
  	{
  		if ( conf.key ) {
  			var character = $.isPlainObject( conf.key ) ?
  				conf.key.key :
  				conf.key;

  			// Remove only one character, as multiple buttons could have the
  			// same listening key
  			var a = this.s.listenKeys.split('');
  			var idx = $.inArray( character, a );
  			a.splice( idx, 1 );
  			this.s.listenKeys = a.join('');
  		}
  	},

  	/**
  	 * Resolve a button configuration
  	 * @param  {string|function|object} conf Button config to resolve
  	 * @return {object} Button configuration
  	 * @private
  	 */
  	_resolveExtends: function ( conf )
  	{
  		var dt = this.s.dt;
  		var i, ien;
  		var toConfObject = function ( base ) {
  			var loop = 0;

  			// Loop until we have resolved to a button configuration, or an
  			// array of button configurations (which will be iterated
  			// separately)
  			while ( ! $.isPlainObject(base) && ! $.isArray(base) ) {
  				if ( base === undefined$1 ) {
  					return;
  				}

  				if ( typeof base === 'function' ) {
  					base = base( dt, conf );

  					if ( ! base ) {
  						return false;
  					}
  				}
  				else if ( typeof base === 'string' ) {
  					if ( ! _dtButtons[ base ] ) {
  						throw 'Unknown button type: '+base;
  					}

  					base = _dtButtons[ base ];
  				}

  				loop++;
  				if ( loop > 30 ) {
  					// Protect against misconfiguration killing the browser
  					throw 'Buttons: Too many iterations';
  				}
  			}

  			return $.isArray( base ) ?
  				base :
  				$.extend( {}, base );
  		};

  		conf = toConfObject( conf );

  		while ( conf && conf.extend ) {
  			// Use `toConfObject` in case the button definition being extended
  			// is itself a string or a function
  			if ( ! _dtButtons[ conf.extend ] ) {
  				throw 'Cannot extend unknown button type: '+conf.extend;
  			}

  			var objArray = toConfObject( _dtButtons[ conf.extend ] );
  			if ( $.isArray( objArray ) ) {
  				return objArray;
  			}
  			else if ( ! objArray ) {
  				// This is a little brutal as it might be possible to have a
  				// valid button without the extend, but if there is no extend
  				// then the host button would be acting in an undefined state
  				return false;
  			}

  			// Stash the current class name
  			var originalClassName = objArray.className;

  			conf = $.extend( {}, objArray, conf );

  			// The extend will have overwritten the original class name if the
  			// `conf` object also assigned a class, but we want to concatenate
  			// them so they are list that is combined from all extended buttons
  			if ( originalClassName && conf.className !== originalClassName ) {
  				conf.className = originalClassName+' '+conf.className;
  			}

  			// Buttons to be added to a collection  -gives the ability to define
  			// if buttons should be added to the start or end of a collection
  			var postfixButtons = conf.postfixButtons;
  			if ( postfixButtons ) {
  				if ( ! conf.buttons ) {
  					conf.buttons = [];
  				}

  				for ( i=0, ien=postfixButtons.length ; i<ien ; i++ ) {
  					conf.buttons.push( postfixButtons[i] );
  				}

  				conf.postfixButtons = null;
  			}

  			var prefixButtons = conf.prefixButtons;
  			if ( prefixButtons ) {
  				if ( ! conf.buttons ) {
  					conf.buttons = [];
  				}

  				for ( i=0, ien=prefixButtons.length ; i<ien ; i++ ) {
  					conf.buttons.splice( i, 0, prefixButtons[i] );
  				}

  				conf.prefixButtons = null;
  			}

  			// Although we want the `conf` object to overwrite almost all of
  			// the properties of the object being extended, the `extend`
  			// property should come from the object being extended
  			conf.extend = objArray.extend;
  		}

  		return conf;
  	},

  	/**
  	 * Display (and replace if there is an existing one) a popover attached to a button
  	 * @param {string|node} content Content to show
  	 * @param {DataTable.Api} hostButton DT API instance of the button
  	 * @param {object} inOpts Options (see object below for all options)
  	 */
  	_popover: function ( content, hostButton, inOpts ) {
  		var dt = hostButton;
  		var buttonsSettings = this.c;
  		var options = $.extend( {
  			align: 'button-left', // button-right, dt-container
  			autoClose: false,
  			background: true,
  			backgroundClassName: 'dt-button-background',
  			contentClassName: buttonsSettings.dom.collection.className,
  			collectionLayout: '',
  			collectionTitle: '',
  			dropup: false,
  			fade: 400,
  			rightAlignClassName: 'dt-button-right',
  			tag: buttonsSettings.dom.collection.tag
  		}, inOpts );
  		var hostNode = hostButton.node();

  		var close = function () {
  			_fadeOut(
  				$('.dt-button-collection'),
  				options.fade,
  				function () {
  					$(this).detach();
  				}
  			);

  			$(dt.buttons( '[aria-haspopup="true"][aria-expanded="true"]' ).nodes())
  				.attr('aria-expanded', 'false');

  			$('div.dt-button-background').off( 'click.dtb-collection' );
  			Buttons.background( false, options.backgroundClassName, options.fade, hostNode );

  			$('body').off( '.dtb-collection' );
  			dt.off( 'buttons-action.b-internal' );
  		};

  		if (content === false) {
  			close();
  		}

  		var existingExpanded = $(dt.buttons( '[aria-haspopup="true"][aria-expanded="true"]' ).nodes());
  		if ( existingExpanded.length ) {
  			hostNode = existingExpanded.eq(0);

  			close();
  		}

  		var display = $('<div/>')
  			.addClass('dt-button-collection')
  			.addClass(options.collectionLayout)
  			.css('display', 'none');

  		content = $(content)
  			.addClass(options.contentClassName)
  			.attr('role', 'menu')
  			.appendTo(display);

  		hostNode.attr( 'aria-expanded', 'true' );

  		if ( hostNode.parents('body')[0] !== document.body ) {
  			hostNode = document.body.lastChild;
  		}

  		if ( options.collectionTitle ) {
  			display.prepend('<div class="dt-button-collection-title">'+options.collectionTitle+'</div>');
  		}

  		_fadeIn( display.insertAfter( hostNode ) );

  		var tableContainer = $( hostButton.table().container() );
  		var position = display.css( 'position' );

  		if ( options.align === 'dt-container' ) {
  			hostNode = hostNode.parent();
  			display.css('width', tableContainer.width());
  		}

  		if ( position === 'absolute' ) {

  			var hostPosition = hostNode.position();

  			display.css( {
  				top: hostPosition.top + hostNode.outerHeight(),
  				left: hostPosition.left
  			} );

  			// calculate overflow when positioned beneath
  			var collectionHeight = display.outerHeight();
  			var collectionWidth = display.outerWidth();
  			var tableBottom = tableContainer.offset().top + tableContainer.height();
  			var listBottom = hostPosition.top + hostNode.outerHeight() + collectionHeight;
  			var bottomOverflow = listBottom - tableBottom;

  			// calculate overflow when positioned above
  			var listTop = hostPosition.top - collectionHeight;
  			var tableTop = tableContainer.offset().top;
  			var topOverflow = tableTop - listTop;

  			// if bottom overflow is larger, move to the top because it fits better, or if dropup is requested
  			var moveTop = hostPosition.top - collectionHeight - 5;
  			if ( (bottomOverflow > topOverflow || options.dropup) && -moveTop < tableTop ) {
  				display.css( 'top', moveTop);
  			}

  			// Get the size of the container (left and width - and thus also right)
  			var tableLeft = tableContainer.offset().left;
  			var tableWidth = tableContainer.width();
  			var tableRight = tableLeft + tableWidth;

  			// Get the size of the popover (left and width - and ...)
  			var popoverLeft = display.offset().left;
  			var popoverWidth = display.width();
  			var popoverRight = popoverLeft + popoverWidth;

  			// Get the size of the host buttons (left and width - and ...)
  			var buttonsLeft = hostNode.offset().left;
  			var buttonsWidth = hostNode.outerWidth();
  			var buttonsRight = buttonsLeft + buttonsWidth;
  			
  			// You've then got all the numbers you need to do some calculations and if statements,
  			//  so we can do some quick JS maths and apply it only once
  			// If it has the right align class OR the buttons are right aligned,
  			//  then calculate left position for the popover to align the popover to the right hand
  			//  side of the button - check to see if the left of the popover is inside the table container.
  			// If not, move the popover so it is, but not more than it means that the popover is to the right of the table container
  			var popoverShuffle = 0;
  			if ( display.hasClass( options.rightAlignClassName ) || options.align === 'button-right' ) {
  				popoverShuffle = buttonsRight - popoverRight;
  				if(tableLeft > (popoverLeft + popoverShuffle)){
  					var leftGap = tableLeft - (popoverLeft + popoverShuffle);
  					var rightGap = tableRight - (popoverRight + popoverShuffle);
  	
  					if(leftGap > rightGap){
  						popoverShuffle += rightGap; 
  					}
  					else {
  						popoverShuffle += leftGap;
  					}
  				}
  			}
  			// else attempt to left align the popover to the button. Similar to above, if the popover's right goes past the table container's right,
  			//  then move it back, but not so much that it goes past the left of the table container
  			else {
  				popoverShuffle = tableLeft - popoverLeft;

  				if(tableRight < (popoverRight + popoverShuffle)){
  					var leftGap = tableLeft - (popoverLeft + popoverShuffle);
  					var rightGap = tableRight - (popoverRight + popoverShuffle);

  					if(leftGap > rightGap ){
  						popoverShuffle += rightGap;
  					}
  					else {
  						popoverShuffle += leftGap;
  					}

  				}
  			}

  			display.css('left', display.position().left + popoverShuffle);
  			
  		}
  		else {
  			// Fix position - centre on screen
  			var top = display.height() / 2;
  			if ( top > $(window).height() / 2 ) {
  				top = $(window).height() / 2;
  			}

  			display.css( 'marginTop', top*-1 );
  		}

  		if ( options.background ) {
  			Buttons.background( true, options.backgroundClassName, options.fade, hostNode );
  		}

  		// This is bonkers, but if we don't have a click listener on the
  		// background element, iOS Safari will ignore the body click
  		// listener below. An empty function here is all that is
  		// required to make it work...
  		$('div.dt-button-background').on( 'click.dtb-collection', function () {} );

  		$('body')
  			.on( 'click.dtb-collection', function (e) {
  				// andSelf is deprecated in jQ1.8, but we want 1.7 compat
  				var back = $.fn.addBack ? 'addBack' : 'andSelf';

  				if ( ! $(e.target).parents()[back]().filter( content ).length ) {
  					close();
  				}
  			} )
  			.on( 'keyup.dtb-collection', function (e) {
  				if ( e.keyCode === 27 ) {
  					close();
  				}
  			} );

  		if ( options.autoClose ) {
  			setTimeout( function () {
  				dt.on( 'buttons-action.b-internal', function (e, btn, dt, node) {
  					if ( node[0] === hostNode[0] ) {
  						return;
  					}
  					close();
  				} );
  			}, 0);
  		}

  		$(display).trigger('buttons-popover.dt');
  	}
  } );



  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   * Statics
   */

  /**
   * Show / hide a background layer behind a collection
   * @param  {boolean} Flag to indicate if the background should be shown or
   *   hidden 
   * @param  {string} Class to assign to the background
   * @static
   */
  Buttons.background = function ( show, className, fade, insertPoint ) {
  	if ( fade === undefined$1 ) {
  		fade = 400;
  	}
  	if ( ! insertPoint ) {
  		insertPoint = document.body;
  	}

  	if ( show ) {
  		_fadeIn(
  			$('<div/>')
  				.addClass( className )
  				.css( 'display', 'none' )
  				.insertAfter( insertPoint ),
  			fade
  		);
  	}
  	else {
  		_fadeOut(
  			$('div.'+className),
  			fade,
  			function () {
  				$(this)
  					.removeClass( className )
  					.remove();
  			}
  		);
  	}
  };

  /**
   * Instance selector - select Buttons instances based on an instance selector
   * value from the buttons assigned to a DataTable. This is only useful if
   * multiple instances are attached to a DataTable.
   * @param  {string|int|array} Instance selector - see `instance-selector`
   *   documentation on the DataTables site
   * @param  {array} Button instance array that was attached to the DataTables
   *   settings object
   * @return {array} Buttons instances
   * @static
   */
  Buttons.instanceSelector = function ( group, buttons )
  {
  	if ( group === undefined$1 || group === null ) {
  		return $.map( buttons, function ( v ) {
  			return v.inst;
  		} );
  	}

  	var ret = [];
  	var names = $.map( buttons, function ( v ) {
  		return v.name;
  	} );

  	// Flatten the group selector into an array of single options
  	var process = function ( input ) {
  		if ( $.isArray( input ) ) {
  			for ( var i=0, ien=input.length ; i<ien ; i++ ) {
  				process( input[i] );
  			}
  			return;
  		}

  		if ( typeof input === 'string' ) {
  			if ( input.indexOf( ',' ) !== -1 ) {
  				// String selector, list of names
  				process( input.split(',') );
  			}
  			else {
  				// String selector individual name
  				var idx = $.inArray( $.trim(input), names );

  				if ( idx !== -1 ) {
  					ret.push( buttons[ idx ].inst );
  				}
  			}
  		}
  		else if ( typeof input === 'number' ) {
  			// Index selector
  			ret.push( buttons[ input ].inst );
  		}
  	};
  	
  	process( group );

  	return ret;
  };

  /**
   * Button selector - select one or more buttons from a selector input so some
   * operation can be performed on them.
   * @param  {array} Button instances array that the selector should operate on
   * @param  {string|int|node|jQuery|array} Button selector - see
   *   `button-selector` documentation on the DataTables site
   * @return {array} Array of objects containing `inst` and `idx` properties of
   *   the selected buttons so you know which instance each button belongs to.
   * @static
   */
  Buttons.buttonSelector = function ( insts, selector )
  {
  	var ret = [];
  	var nodeBuilder = function ( a, buttons, baseIdx ) {
  		var button;
  		var idx;

  		for ( var i=0, ien=buttons.length ; i<ien ; i++ ) {
  			button = buttons[i];

  			if ( button ) {
  				idx = baseIdx !== undefined$1 ?
  					baseIdx+i :
  					i+'';

  				a.push( {
  					node: button.node,
  					name: button.conf.name,
  					idx:  idx
  				} );

  				if ( button.buttons ) {
  					nodeBuilder( a, button.buttons, idx+'-' );
  				}
  			}
  		}
  	};

  	var run = function ( selector, inst ) {
  		var i, ien;
  		var buttons = [];
  		nodeBuilder( buttons, inst.s.buttons );

  		var nodes = $.map( buttons, function (v) {
  			return v.node;
  		} );

  		if ( $.isArray( selector ) || selector instanceof $ ) {
  			for ( i=0, ien=selector.length ; i<ien ; i++ ) {
  				run( selector[i], inst );
  			}
  			return;
  		}

  		if ( selector === null || selector === undefined$1 || selector === '*' ) {
  			// Select all
  			for ( i=0, ien=buttons.length ; i<ien ; i++ ) {
  				ret.push( {
  					inst: inst,
  					node: buttons[i].node
  				} );
  			}
  		}
  		else if ( typeof selector === 'number' ) {
  			// Main button index selector
  			ret.push( {
  				inst: inst,
  				node: inst.s.buttons[ selector ].node
  			} );
  		}
  		else if ( typeof selector === 'string' ) {
  			if ( selector.indexOf( ',' ) !== -1 ) {
  				// Split
  				var a = selector.split(',');

  				for ( i=0, ien=a.length ; i<ien ; i++ ) {
  					run( $.trim(a[i]), inst );
  				}
  			}
  			else if ( selector.match( /^\d+(\-\d+)*$/ ) ) {
  				// Sub-button index selector
  				var indexes = $.map( buttons, function (v) {
  					return v.idx;
  				} );

  				ret.push( {
  					inst: inst,
  					node: buttons[ $.inArray( selector, indexes ) ].node
  				} );
  			}
  			else if ( selector.indexOf( ':name' ) !== -1 ) {
  				// Button name selector
  				var name = selector.replace( ':name', '' );

  				for ( i=0, ien=buttons.length ; i<ien ; i++ ) {
  					if ( buttons[i].name === name ) {
  						ret.push( {
  							inst: inst,
  							node: buttons[i].node
  						} );
  					}
  				}
  			}
  			else {
  				// jQuery selector on the nodes
  				$( nodes ).filter( selector ).each( function () {
  					ret.push( {
  						inst: inst,
  						node: this
  					} );
  				} );
  			}
  		}
  		else if ( typeof selector === 'object' && selector.nodeName ) {
  			// Node selector
  			var idx = $.inArray( selector, nodes );

  			if ( idx !== -1 ) {
  				ret.push( {
  					inst: inst,
  					node: nodes[ idx ]
  				} );
  			}
  		}
  	};


  	for ( var i=0, ien=insts.length ; i<ien ; i++ ) {
  		var inst = insts[i];

  		run( selector, inst );
  	}

  	return ret;
  };


  /**
   * Buttons defaults. For full documentation, please refer to the docs/option
   * directory or the DataTables site.
   * @type {Object}
   * @static
   */
  Buttons.defaults = {
  	buttons: [ 'copy', 'excel', 'csv', 'pdf', 'print' ],
  	name: 'main',
  	tabIndex: 0,
  	dom: {
  		container: {
  			tag: 'div',
  			className: 'dt-buttons'
  		},
  		collection: {
  			tag: 'div',
  			className: ''
  		},
  		button: {
  			// Flash buttons will not work with `<button>` in IE - it has to be `<a>`
  			tag: 'ActiveXObject' in window ?
  				'a' :
  				'button',
  			className: 'dt-button',
  			active: 'active',
  			disabled: 'disabled'
  		},
  		buttonLiner: {
  			tag: 'span',
  			className: ''
  		}
  	}
  };

  /**
   * Version information
   * @type {string}
   * @static
   */
  Buttons.version = '1.6.2';


  $.extend( _dtButtons, {
  	collection: {
  		text: function ( dt ) {
  			return dt.i18n( 'buttons.collection', 'Collection' );
  		},
  		className: 'buttons-collection',
  		init: function ( dt, button, config ) {
  			button.attr( 'aria-expanded', false );
  		},
  		action: function ( e, dt, button, config ) {
  			e.stopPropagation();

  			if ( config._collection.parents('body').length ) {
  				this.popover(false, config);
  			}
  			else {
  				this.popover(config._collection, config);
  			}
  		},
  		attr: {
  			'aria-haspopup': true
  		}
  		// Also the popover options, defined in Buttons.popover
  	},
  	copy: function ( dt, conf ) {
  		if ( _dtButtons.copyHtml5 ) {
  			return 'copyHtml5';
  		}
  		if ( _dtButtons.copyFlash && _dtButtons.copyFlash.available( dt, conf ) ) {
  			return 'copyFlash';
  		}
  	},
  	csv: function ( dt, conf ) {
  		// Common option that will use the HTML5 or Flash export buttons
  		if ( _dtButtons.csvHtml5 && _dtButtons.csvHtml5.available( dt, conf ) ) {
  			return 'csvHtml5';
  		}
  		if ( _dtButtons.csvFlash && _dtButtons.csvFlash.available( dt, conf ) ) {
  			return 'csvFlash';
  		}
  	},
  	excel: function ( dt, conf ) {
  		// Common option that will use the HTML5 or Flash export buttons
  		if ( _dtButtons.excelHtml5 && _dtButtons.excelHtml5.available( dt, conf ) ) {
  			return 'excelHtml5';
  		}
  		if ( _dtButtons.excelFlash && _dtButtons.excelFlash.available( dt, conf ) ) {
  			return 'excelFlash';
  		}
  	},
  	pdf: function ( dt, conf ) {
  		// Common option that will use the HTML5 or Flash export buttons
  		if ( _dtButtons.pdfHtml5 && _dtButtons.pdfHtml5.available( dt, conf ) ) {
  			return 'pdfHtml5';
  		}
  		if ( _dtButtons.pdfFlash && _dtButtons.pdfFlash.available( dt, conf ) ) {
  			return 'pdfFlash';
  		}
  	},
  	pageLength: function ( dt ) {
  		var lengthMenu = dt.settings()[0].aLengthMenu;
  		var vals = $.isArray( lengthMenu[0] ) ? lengthMenu[0] : lengthMenu;
  		var lang = $.isArray( lengthMenu[0] ) ? lengthMenu[1] : lengthMenu;
  		var text = function ( dt ) {
  			return dt.i18n( 'buttons.pageLength', {
  				"-1": 'Show all rows',
  				_:    'Show %d rows'
  			}, dt.page.len() );
  		};

  		return {
  			extend: 'collection',
  			text: text,
  			className: 'buttons-page-length',
  			autoClose: true,
  			buttons: $.map( vals, function ( val, i ) {
  				return {
  					text: lang[i],
  					className: 'button-page-length',
  					action: function ( e, dt ) {
  						dt.page.len( val ).draw();
  					},
  					init: function ( dt, node, conf ) {
  						var that = this;
  						var fn = function () {
  							that.active( dt.page.len() === val );
  						};

  						dt.on( 'length.dt'+conf.namespace, fn );
  						fn();
  					},
  					destroy: function ( dt, node, conf ) {
  						dt.off( 'length.dt'+conf.namespace );
  					}
  				};
  			} ),
  			init: function ( dt, node, conf ) {
  				var that = this;
  				dt.on( 'length.dt'+conf.namespace, function () {
  					that.text( conf.text );
  				} );
  			},
  			destroy: function ( dt, node, conf ) {
  				dt.off( 'length.dt'+conf.namespace );
  			}
  		};
  	}
  } );


  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   * DataTables API
   *
   * For complete documentation, please refer to the docs/api directory or the
   * DataTables site
   */

  // Buttons group and individual button selector
  DataTable.Api.register( 'buttons()', function ( group, selector ) {
  	// Argument shifting
  	if ( selector === undefined$1 ) {
  		selector = group;
  		group = undefined$1;
  	}

  	this.selector.buttonGroup = group;

  	var res = this.iterator( true, 'table', function ( ctx ) {
  		if ( ctx._buttons ) {
  			return Buttons.buttonSelector(
  				Buttons.instanceSelector( group, ctx._buttons ),
  				selector
  			);
  		}
  	}, true );

  	res._groupSelector = group;
  	return res;
  } );

  // Individual button selector
  DataTable.Api.register( 'button()', function ( group, selector ) {
  	// just run buttons() and truncate
  	var buttons = this.buttons( group, selector );

  	if ( buttons.length > 1 ) {
  		buttons.splice( 1, buttons.length );
  	}

  	return buttons;
  } );

  // Active buttons
  DataTable.Api.registerPlural( 'buttons().active()', 'button().active()', function ( flag ) {
  	if ( flag === undefined$1 ) {
  		return this.map( function ( set ) {
  			return set.inst.active( set.node );
  		} );
  	}

  	return this.each( function ( set ) {
  		set.inst.active( set.node, flag );
  	} );
  } );

  // Get / set button action
  DataTable.Api.registerPlural( 'buttons().action()', 'button().action()', function ( action ) {
  	if ( action === undefined$1 ) {
  		return this.map( function ( set ) {
  			return set.inst.action( set.node );
  		} );
  	}

  	return this.each( function ( set ) {
  		set.inst.action( set.node, action );
  	} );
  } );

  // Enable / disable buttons
  DataTable.Api.register( ['buttons().enable()', 'button().enable()'], function ( flag ) {
  	return this.each( function ( set ) {
  		set.inst.enable( set.node, flag );
  	} );
  } );

  // Disable buttons
  DataTable.Api.register( ['buttons().disable()', 'button().disable()'], function () {
  	return this.each( function ( set ) {
  		set.inst.disable( set.node );
  	} );
  } );

  // Get button nodes
  DataTable.Api.registerPlural( 'buttons().nodes()', 'button().node()', function () {
  	var jq = $();

  	// jQuery will automatically reduce duplicates to a single entry
  	$( this.each( function ( set ) {
  		jq = jq.add( set.inst.node( set.node ) );
  	} ) );

  	return jq;
  } );

  // Get / set button processing state
  DataTable.Api.registerPlural( 'buttons().processing()', 'button().processing()', function ( flag ) {
  	if ( flag === undefined$1 ) {
  		return this.map( function ( set ) {
  			return set.inst.processing( set.node );
  		} );
  	}

  	return this.each( function ( set ) {
  		set.inst.processing( set.node, flag );
  	} );
  } );

  // Get / set button text (i.e. the button labels)
  DataTable.Api.registerPlural( 'buttons().text()', 'button().text()', function ( label ) {
  	if ( label === undefined$1 ) {
  		return this.map( function ( set ) {
  			return set.inst.text( set.node );
  		} );
  	}

  	return this.each( function ( set ) {
  		set.inst.text( set.node, label );
  	} );
  } );

  // Trigger a button's action
  DataTable.Api.registerPlural( 'buttons().trigger()', 'button().trigger()', function () {
  	return this.each( function ( set ) {
  		set.inst.node( set.node ).trigger( 'click' );
  	} );
  } );

  // Button resolver to the popover
  DataTable.Api.register( 'button().popover()', function (content, options) {
  	return this.map( function ( set ) {
  		return set.inst._popover( content, this.button(this[0].node), options );
  	} );
  } );

  // Get the container elements
  DataTable.Api.register( 'buttons().containers()', function () {
  	var jq = $();
  	var groupSelector = this._groupSelector;

  	// We need to use the group selector directly, since if there are no buttons
  	// the result set will be empty
  	this.iterator( true, 'table', function ( ctx ) {
  		if ( ctx._buttons ) {
  			var insts = Buttons.instanceSelector( groupSelector, ctx._buttons );

  			for ( var i=0, ien=insts.length ; i<ien ; i++ ) {
  				jq = jq.add( insts[i].container() );
  			}
  		}
  	} );

  	return jq;
  } );

  DataTable.Api.register( 'buttons().container()', function () {
  	// API level of nesting is `buttons()` so we can zip into the containers method
  	return this.containers().eq(0);
  } );

  // Add a new button
  DataTable.Api.register( 'button().add()', function ( idx, conf ) {
  	var ctx = this.context;

  	// Don't use `this` as it could be empty - select the instances directly
  	if ( ctx.length ) {
  		var inst = Buttons.instanceSelector( this._groupSelector, ctx[0]._buttons );

  		if ( inst.length ) {
  			inst[0].add( conf, idx );
  		}
  	}

  	return this.button( this._groupSelector, idx );
  } );

  // Destroy the button sets selected
  DataTable.Api.register( 'buttons().destroy()', function () {
  	this.pluck( 'inst' ).unique().each( function ( inst ) {
  		inst.destroy();
  	} );

  	return this;
  } );

  // Remove a button
  DataTable.Api.registerPlural( 'buttons().remove()', 'buttons().remove()', function () {
  	this.each( function ( set ) {
  		set.inst.remove( set.node );
  	} );

  	return this;
  } );

  // Information box that can be used by buttons
  var _infoTimer;
  DataTable.Api.register( 'buttons.info()', function ( title, message, time ) {
  	var that = this;

  	if ( title === false ) {
  		this.off('destroy.btn-info');
  		_fadeOut(
  			$('#datatables_buttons_info'),
  			400,
  			function () {
  				$(this).remove();
  			}
  		);
  		clearTimeout( _infoTimer );
  		_infoTimer = null;

  		return this;
  	}

  	if ( _infoTimer ) {
  		clearTimeout( _infoTimer );
  	}

  	if ( $('#datatables_buttons_info').length ) {
  		$('#datatables_buttons_info').remove();
  	}

  	title = title ? '<h2>'+title+'</h2>' : '';

  	_fadeIn(
  		$('<div id="datatables_buttons_info" class="dt-button-info"/>')
  			.html( title )
  			.append( $('<div/>')[ typeof message === 'string' ? 'html' : 'append' ]( message ) )
  			.css( 'display', 'none' )
  			.appendTo( 'body' )
  	);

  	if ( time !== undefined$1 && time !== 0 ) {
  		_infoTimer = setTimeout( function () {
  			that.buttons.info( false );
  		}, time );
  	}

  	this.on('destroy.btn-info', function () {
  		that.buttons.info(false);
  	});

  	return this;
  } );

  // Get data from the table for export - this is common to a number of plug-in
  // buttons so it is included in the Buttons core library
  DataTable.Api.register( 'buttons.exportData()', function ( options ) {
  	if ( this.context.length ) {
  		return _exportData( new DataTable.Api( this.context[0] ), options );
  	}
  } );

  // Get information about the export that is common to many of the export data
  // types (DRY)
  DataTable.Api.register( 'buttons.exportInfo()', function ( conf ) {
  	if ( ! conf ) {
  		conf = {};
  	}

  	return {
  		filename: _filename( conf ),
  		title: _title( conf ),
  		messageTop: _message(this, conf.message || conf.messageTop, 'top'),
  		messageBottom: _message(this, conf.messageBottom, 'bottom')
  	};
  } );



  /**
   * Get the file name for an exported file.
   *
   * @param {object}	config Button configuration
   * @param {boolean} incExtension Include the file name extension
   */
  var _filename = function ( config )
  {
  	// Backwards compatibility
  	var filename = config.filename === '*' && config.title !== '*' && config.title !== undefined$1 && config.title !== null && config.title !== '' ?
  		config.title :
  		config.filename;

  	if ( typeof filename === 'function' ) {
  		filename = filename();
  	}

  	if ( filename === undefined$1 || filename === null ) {
  		return null;
  	}

  	if ( filename.indexOf( '*' ) !== -1 ) {
  		filename = $.trim( filename.replace( '*', $('head > title').text() ) );
  	}

  	// Strip characters which the OS will object to
  	filename = filename.replace(/[^a-zA-Z0-9_\u00A1-\uFFFF\.,\-_ !\(\)]/g, "");

  	var extension = _stringOrFunction( config.extension );
  	if ( ! extension ) {
  		extension = '';
  	}

  	return filename + extension;
  };

  /**
   * Simply utility method to allow parameters to be given as a function
   *
   * @param {undefined|string|function} option Option
   * @return {null|string} Resolved value
   */
  var _stringOrFunction = function ( option )
  {
  	if ( option === null || option === undefined$1 ) {
  		return null;
  	}
  	else if ( typeof option === 'function' ) {
  		return option();
  	}
  	return option;
  };

  /**
   * Get the title for an exported file.
   *
   * @param {object} config	Button configuration
   */
  var _title = function ( config )
  {
  	var title = _stringOrFunction( config.title );

  	return title === null ?
  		null : title.indexOf( '*' ) !== -1 ?
  			title.replace( '*', $('head > title').text() || 'Exported data' ) :
  			title;
  };

  var _message = function ( dt, option, position )
  {
  	var message = _stringOrFunction( option );
  	if ( message === null ) {
  		return null;
  	}

  	var caption = $('caption', dt.table().container()).eq(0);
  	if ( message === '*' ) {
  		var side = caption.css( 'caption-side' );
  		if ( side !== position ) {
  			return null;
  		}

  		return caption.length ?
  			caption.text() :
  			'';
  	}

  	return message;
  };







  var _exportTextarea = $('<textarea/>')[0];
  var _exportData = function ( dt, inOpts )
  {
  	var config = $.extend( true, {}, {
  		rows:           null,
  		columns:        '',
  		modifier:       {
  			search: 'applied',
  			order:  'applied'
  		},
  		orthogonal:     'display',
  		stripHtml:      true,
  		stripNewlines:  true,
  		decodeEntities: true,
  		trim:           true,
  		format:         {
  			header: function ( d ) {
  				return strip( d );
  			},
  			footer: function ( d ) {
  				return strip( d );
  			},
  			body: function ( d ) {
  				return strip( d );
  			}
  		},
  		customizeData: null
  	}, inOpts );

  	var strip = function ( str ) {
  		if ( typeof str !== 'string' ) {
  			return str;
  		}

  		// Always remove script tags
  		str = str.replace( /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '' );

  		// Always remove comments
  		str = str.replace( /<!\-\-.*?\-\->/g, '' );

  		if ( config.stripHtml ) {
  			str = str.replace( /<[^>]*>/g, '' );
  		}

  		if ( config.trim ) {
  			str = str.replace( /^\s+|\s+$/g, '' );
  		}

  		if ( config.stripNewlines ) {
  			str = str.replace( /\n/g, ' ' );
  		}

  		if ( config.decodeEntities ) {
  			_exportTextarea.innerHTML = str;
  			str = _exportTextarea.value;
  		}

  		return str;
  	};


  	var header = dt.columns( config.columns ).indexes().map( function (idx) {
  		var el = dt.column( idx ).header();
  		return config.format.header( el.innerHTML, idx, el );
  	} ).toArray();

  	var footer = dt.table().footer() ?
  		dt.columns( config.columns ).indexes().map( function (idx) {
  			var el = dt.column( idx ).footer();
  			return config.format.footer( el ? el.innerHTML : '', idx, el );
  		} ).toArray() :
  		null;
  	
  	// If Select is available on this table, and any rows are selected, limit the export
  	// to the selected rows. If no rows are selected, all rows will be exported. Specify
  	// a `selected` modifier to control directly.
  	var modifier = $.extend( {}, config.modifier );
  	if ( dt.select && typeof dt.select.info === 'function' && modifier.selected === undefined$1 ) {
  		if ( dt.rows( config.rows, $.extend( { selected: true }, modifier ) ).any() ) {
  			$.extend( modifier, { selected: true } );
  		}
  	}

  	var rowIndexes = dt.rows( config.rows, modifier ).indexes().toArray();
  	var selectedCells = dt.cells( rowIndexes, config.columns );
  	var cells = selectedCells
  		.render( config.orthogonal )
  		.toArray();
  	var cellNodes = selectedCells
  		.nodes()
  		.toArray();

  	var columns = header.length;
  	var rows = columns > 0 ? cells.length / columns : 0;
  	var body = [];
  	var cellCounter = 0;

  	for ( var i=0, ien=rows ; i<ien ; i++ ) {
  		var row = [ columns ];

  		for ( var j=0 ; j<columns ; j++ ) {
  			row[j] = config.format.body( cells[ cellCounter ], i, j, cellNodes[ cellCounter ] );
  			cellCounter++;
  		}

  		body[i] = row;
  	}

  	var data = {
  		header: header,
  		footer: footer,
  		body:   body
  	};

  	if ( config.customizeData ) {
  		config.customizeData( data );
  	}

  	return data;
  };


  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   * DataTables interface
   */

  // Attach to DataTables objects for global access
  $.fn.dataTable.Buttons = Buttons;
  $.fn.DataTable.Buttons = Buttons;



  // DataTables creation - check if the buttons have been defined for this table,
  // they will have been if the `B` option was used in `dom`, otherwise we should
  // create the buttons instance here so they can be inserted into the document
  // using the API. Listen for `init` for compatibility with pre 1.10.10, but to
  // be removed in future.
  $(document).on( 'init.dt plugin-init.dt', function (e, settings) {
  	if ( e.namespace !== 'dt' ) {
  		return;
  	}

  	var opts = settings.oInit.buttons || DataTable.defaults.buttons;

  	if ( opts && ! settings._buttons ) {
  		new Buttons( settings, opts ).container();
  	}
  } );

  function _init ( settings, options ) {
  	var api = new DataTable.Api( settings );
  	var opts = options
  		? options
  		: api.init().buttons || DataTable.defaults.buttons;

  	return new Buttons( api, opts ).container();
  }

  // DataTables `dom` feature option
  DataTable.ext.feature.push( {
  	fnInit: _init,
  	cFeature: "B"
  } );

  // DataTables 2 layout feature
  if ( DataTable.ext.features ) {
  	DataTable.ext.features.register( 'buttons', _init );
  }


  return Buttons;
  }));
  });

  var buttons_bootstrap = createCommonjsModule(function (module, exports) {
  /*! Bootstrap integration for DataTables' Buttons
   * ©2016 SpryMedia Ltd - datatables.net/license
   */

  (function( factory ){
  	{
  		// CommonJS
  		module.exports = function (root, $) {
  			if ( ! root ) {
  				root = window;
  			}

  			if ( ! $ || ! $.fn.dataTable ) {
  				$ = dataTables_bootstrap(root, $).$;
  			}

  			if ( ! $.fn.dataTable.Buttons ) {
  				dataTables_buttons$1(root, $);
  			}

  			return factory( $, root, root.document );
  		};
  	}
  }(function( $, window, document, undefined$1 ) {
  var DataTable = $.fn.dataTable;


  $.extend( true, DataTable.Buttons.defaults, {
  	dom: {
  		container: {
  			className: 'dt-buttons btn-group'
  		},
  		button: {
  			className: 'btn btn-default'
  		},
  		collection: {
  			tag: 'ul',
  			className: 'dropdown-menu',
  			button: {
  				tag: 'li',
  				className: 'dt-button',
  				active: 'active',
  				disabled: 'disabled'
  			},
  			buttonLiner: {
  				tag: 'a',
  				className: ''
  			}
  		}
  	}
  } );

  DataTable.ext.buttons.collection.text = function ( dt ) {
  	return dt.i18n('buttons.collection', 'Collection <span class="caret"/>');
  };


  return DataTable.Buttons;
  }));
  });

  var buttons_colVis = createCommonjsModule(function (module, exports) {
  /*!
   * Column visibility buttons for Buttons and DataTables.
   * 2016 SpryMedia Ltd - datatables.net/license
   */

  (function( factory ){
  	{
  		// CommonJS
  		module.exports = function (root, $) {
  			if ( ! root ) {
  				root = window;
  			}

  			if ( ! $ || ! $.fn.dataTable ) {
  				$ = jquery_dataTables(root, $).$;
  			}

  			if ( ! $.fn.dataTable.Buttons ) {
  				dataTables_buttons(root, $);
  			}

  			return factory( $, root, root.document );
  		};
  	}
  }(function( $, window, document, undefined$1 ) {
  var DataTable = $.fn.dataTable;


  $.extend( DataTable.ext.buttons, {
  	// A collection of column visibility buttons
  	colvis: function ( dt, conf ) {
  		return {
  			extend: 'collection',
  			text: function ( dt ) {
  				return dt.i18n( 'buttons.colvis', 'Column visibility' );
  			},
  			className: 'buttons-colvis',
  			buttons: [ {
  				extend: 'columnsToggle',
  				columns: conf.columns,
  				columnText: conf.columnText
  			} ]
  		};
  	},

  	// Selected columns with individual buttons - toggle column visibility
  	columnsToggle: function ( dt, conf ) {
  		var columns = dt.columns( conf.columns ).indexes().map( function ( idx ) {
  			return {
  				extend: 'columnToggle',
  				columns: idx,
  				columnText: conf.columnText
  			};
  		} ).toArray();

  		return columns;
  	},

  	// Single button to toggle column visibility
  	columnToggle: function ( dt, conf ) {
  		return {
  			extend: 'columnVisibility',
  			columns: conf.columns,
  			columnText: conf.columnText
  		};
  	},

  	// Selected columns with individual buttons - set column visibility
  	columnsVisibility: function ( dt, conf ) {
  		var columns = dt.columns( conf.columns ).indexes().map( function ( idx ) {
  			return {
  				extend: 'columnVisibility',
  				columns: idx,
  				visibility: conf.visibility,
  				columnText: conf.columnText
  			};
  		} ).toArray();

  		return columns;
  	},

  	// Single button to set column visibility
  	columnVisibility: {
  		columns: undefined$1, // column selector
  		text: function ( dt, button, conf ) {
  			return conf._columnText( dt, conf );
  		},
  		className: 'buttons-columnVisibility',
  		action: function ( e, dt, button, conf ) {
  			var col = dt.columns( conf.columns );
  			var curr = col.visible();

  			col.visible( conf.visibility !== undefined$1 ?
  				conf.visibility :
  				! (curr.length ? curr[0] : false )
  			);
  		},
  		init: function ( dt, button, conf ) {
  			var that = this;
  			button.attr( 'data-cv-idx', conf.columns );

  			dt
  				.on( 'column-visibility.dt'+conf.namespace, function (e, settings) {
  					if ( ! settings.bDestroying && settings.nTable == dt.settings()[0].nTable ) {
  						that.active( dt.column( conf.columns ).visible() );
  					}
  				} )
  				.on( 'column-reorder.dt'+conf.namespace, function (e, settings, details) {
  					if ( dt.columns( conf.columns ).count() !== 1 ) {
  						return;
  					}

  					// This button controls the same column index but the text for the column has
  					// changed
  					that.text( conf._columnText( dt, conf ) );

  					// Since its a different column, we need to check its visibility
  					that.active( dt.column( conf.columns ).visible() );
  				} );

  			this.active( dt.column( conf.columns ).visible() );
  		},
  		destroy: function ( dt, button, conf ) {
  			dt
  				.off( 'column-visibility.dt'+conf.namespace )
  				.off( 'column-reorder.dt'+conf.namespace );
  		},

  		_columnText: function ( dt, conf ) {
  			// Use DataTables' internal data structure until this is presented
  			// is a public API. The other option is to use
  			// `$( column(col).node() ).text()` but the node might not have been
  			// populated when Buttons is constructed.
  			var idx = dt.column( conf.columns ).index();
  			var title = dt.settings()[0].aoColumns[ idx ].sTitle;

  			if (! title) {
  				title = dt.column(idx).header().innerHTML;
  			}

  			title = title
  				.replace(/\n/g," ")        // remove new lines
  				.replace(/<br\s*\/?>/gi, " ")  // replace line breaks with spaces
  				.replace(/<select(.*?)<\/select>/g, "") // remove select tags, including options text
  				.replace(/<!\-\-.*?\-\->/g, "") // strip HTML comments
  				.replace(/<.*?>/g, "")   // strip HTML
  				.replace(/^\s+|\s+$/g,""); // trim

  			return conf.columnText ?
  				conf.columnText( dt, idx, title ) :
  				title;
  		}
  	},


  	colvisRestore: {
  		className: 'buttons-colvisRestore',

  		text: function ( dt ) {
  			return dt.i18n( 'buttons.colvisRestore', 'Restore visibility' );
  		},

  		init: function ( dt, button, conf ) {
  			conf._visOriginal = dt.columns().indexes().map( function ( idx ) {
  				return dt.column( idx ).visible();
  			} ).toArray();
  		},

  		action: function ( e, dt, button, conf ) {
  			dt.columns().every( function ( i ) {
  				// Take into account that ColReorder might have disrupted our
  				// indexes
  				var idx = dt.colReorder && dt.colReorder.transpose ?
  					dt.colReorder.transpose( i, 'toOriginal' ) :
  					i;

  				this.visible( conf._visOriginal[ idx ] );
  			} );
  		}
  	},


  	colvisGroup: {
  		className: 'buttons-colvisGroup',

  		action: function ( e, dt, button, conf ) {
  			dt.columns( conf.show ).visible( true, false );
  			dt.columns( conf.hide ).visible( false, false );

  			dt.columns.adjust();
  		},

  		show: [],

  		hide: []
  	}
  } );


  return DataTable.Buttons;
  }));
  });

  var buttons_html5 = createCommonjsModule(function (module, exports) {
  /*!
   * HTML5 export buttons for Buttons and DataTables.
   * 2016 SpryMedia Ltd - datatables.net/license
   *
   * FileSaver.js (1.3.3) - MIT license
   * Copyright © 2016 Eli Grey - http://eligrey.com
   */

  (function( factory ){
  	{
  		// CommonJS
  		module.exports = function (root, $, jszip, pdfmake) {
  			if ( ! root ) {
  				root = window;
  			}

  			if ( ! $ || ! $.fn.dataTable ) {
  				$ = jquery_dataTables(root, $).$;
  			}

  			if ( ! $.fn.dataTable.Buttons ) {
  				dataTables_buttons(root, $);
  			}

  			return factory( $, root, root.document, jszip, pdfmake );
  		};
  	}
  }(function( $, window, document, jszip, pdfmake, undefined$1 ) {
  var DataTable = $.fn.dataTable;

  // Allow the constructor to pass in JSZip and PDFMake from external requires.
  // Otherwise, use globally defined variables, if they are available.
  function _jsZip () {
  	return jszip || window.JSZip;
  }
  function _pdfMake () {
  	return pdfmake || window.pdfMake;
  }

  DataTable.Buttons.pdfMake = function (_) {
  	if ( ! _ ) {
  		return _pdfMake();
  	}
  	pdfmake = _;
  };

  DataTable.Buttons.jszip = function (_) {
  	if ( ! _ ) {
  		return _jsZip();
  	}
  	jszip = _;
  };


  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   * FileSaver.js dependency
   */

  /*jslint bitwise: true, indent: 4, laxbreak: true, laxcomma: true, smarttabs: true, plusplus: true */

  var _saveAs = (function(view) {
  	// IE <10 is explicitly unsupported
  	if (typeof view === "undefined" || typeof navigator !== "undefined" && /MSIE [1-9]\./.test(navigator.userAgent)) {
  		return;
  	}
  	var
  		  doc = view.document
  		  // only get URL when necessary in case Blob.js hasn't overridden it yet
  		, get_URL = function() {
  			return view.URL || view.webkitURL || view;
  		}
  		, save_link = doc.createElementNS("http://www.w3.org/1999/xhtml", "a")
  		, can_use_save_link = "download" in save_link
  		, click = function(node) {
  			var event = new MouseEvent("click");
  			node.dispatchEvent(event);
  		}
  		, is_safari = /constructor/i.test(view.HTMLElement) || view.safari
  		, is_chrome_ios =/CriOS\/[\d]+/.test(navigator.userAgent)
  		, throw_outside = function(ex) {
  			(view.setImmediate || view.setTimeout)(function() {
  				throw ex;
  			}, 0);
  		}
  		, force_saveable_type = "application/octet-stream"
  		// the Blob API is fundamentally broken as there is no "downloadfinished" event to subscribe to
  		, arbitrary_revoke_timeout = 1000 * 40 // in ms
  		, revoke = function(file) {
  			var revoker = function() {
  				if (typeof file === "string") { // file is an object URL
  					get_URL().revokeObjectURL(file);
  				} else { // file is a File
  					file.remove();
  				}
  			};
  			setTimeout(revoker, arbitrary_revoke_timeout);
  		}
  		, dispatch = function(filesaver, event_types, event) {
  			event_types = [].concat(event_types);
  			var i = event_types.length;
  			while (i--) {
  				var listener = filesaver["on" + event_types[i]];
  				if (typeof listener === "function") {
  					try {
  						listener.call(filesaver, event || filesaver);
  					} catch (ex) {
  						throw_outside(ex);
  					}
  				}
  			}
  		}
  		, auto_bom = function(blob) {
  			// prepend BOM for UTF-8 XML and text/* types (including HTML)
  			// note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF
  			if (/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(blob.type)) {
  				return new Blob([String.fromCharCode(0xFEFF), blob], {type: blob.type});
  			}
  			return blob;
  		}
  		, FileSaver = function(blob, name, no_auto_bom) {
  			if (!no_auto_bom) {
  				blob = auto_bom(blob);
  			}
  			// First try a.download, then web filesystem, then object URLs
  			var
  				  filesaver = this
  				, type = blob.type
  				, force = type === force_saveable_type
  				, object_url
  				, dispatch_all = function() {
  					dispatch(filesaver, "writestart progress write writeend".split(" "));
  				}
  				// on any filesys errors revert to saving with object URLs
  				, fs_error = function() {
  					if ((is_chrome_ios || (force && is_safari)) && view.FileReader) {
  						// Safari doesn't allow downloading of blob urls
  						var reader = new FileReader();
  						reader.onloadend = function() {
  							var url = is_chrome_ios ? reader.result : reader.result.replace(/^data:[^;]*;/, 'data:attachment/file;');
  							var popup = view.open(url, '_blank');
  							if(!popup) view.location.href = url;
  							url=undefined$1; // release reference before dispatching
  							filesaver.readyState = filesaver.DONE;
  							dispatch_all();
  						};
  						reader.readAsDataURL(blob);
  						filesaver.readyState = filesaver.INIT;
  						return;
  					}
  					// don't create more object URLs than needed
  					if (!object_url) {
  						object_url = get_URL().createObjectURL(blob);
  					}
  					if (force) {
  						view.location.href = object_url;
  					} else {
  						var opened = view.open(object_url, "_blank");
  						if (!opened) {
  							// Apple does not allow window.open, see https://developer.apple.com/library/safari/documentation/Tools/Conceptual/SafariExtensionGuide/WorkingwithWindowsandTabs/WorkingwithWindowsandTabs.html
  							view.location.href = object_url;
  						}
  					}
  					filesaver.readyState = filesaver.DONE;
  					dispatch_all();
  					revoke(object_url);
  				}
  			;
  			filesaver.readyState = filesaver.INIT;

  			if (can_use_save_link) {
  				object_url = get_URL().createObjectURL(blob);
  				setTimeout(function() {
  					save_link.href = object_url;
  					save_link.download = name;
  					click(save_link);
  					dispatch_all();
  					revoke(object_url);
  					filesaver.readyState = filesaver.DONE;
  				});
  				return;
  			}

  			fs_error();
  		}
  		, FS_proto = FileSaver.prototype
  		, saveAs = function(blob, name, no_auto_bom) {
  			return new FileSaver(blob, name || blob.name || "download", no_auto_bom);
  		}
  	;
  	// IE 10+ (native saveAs)
  	if (typeof navigator !== "undefined" && navigator.msSaveOrOpenBlob) {
  		return function(blob, name, no_auto_bom) {
  			name = name || blob.name || "download";

  			if (!no_auto_bom) {
  				blob = auto_bom(blob);
  			}
  			return navigator.msSaveOrOpenBlob(blob, name);
  		};
  	}

  	FS_proto.abort = function(){};
  	FS_proto.readyState = FS_proto.INIT = 0;
  	FS_proto.WRITING = 1;
  	FS_proto.DONE = 2;

  	FS_proto.error =
  	FS_proto.onwritestart =
  	FS_proto.onprogress =
  	FS_proto.onwrite =
  	FS_proto.onabort =
  	FS_proto.onerror =
  	FS_proto.onwriteend =
  		null;

  	return saveAs;
  }(
  	   typeof self !== "undefined" && self
  	|| typeof window !== "undefined" && window
  	|| this.content
  ));


  // Expose file saver on the DataTables API. Can't attach to `DataTables.Buttons`
  // since this file can be loaded before Button's core!
  DataTable.fileSave = _saveAs;


  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   * Local (private) functions
   */

  /**
   * Get the sheet name for Excel exports.
   *
   * @param {object}	config Button configuration
   */
  var _sheetname = function ( config )
  {
  	var sheetName = 'Sheet1';

  	if ( config.sheetName ) {
  		sheetName = config.sheetName.replace(/[\[\]\*\/\\\?\:]/g, '');
  	}

  	return sheetName;
  };

  /**
   * Get the newline character(s)
   *
   * @param {object}	config Button configuration
   * @return {string}				Newline character
   */
  var _newLine = function ( config )
  {
  	return config.newline ?
  		config.newline :
  		navigator.userAgent.match(/Windows/) ?
  			'\r\n' :
  			'\n';
  };

  /**
   * Combine the data from the `buttons.exportData` method into a string that
   * will be used in the export file.
   *
   * @param	{DataTable.Api} dt		 DataTables API instance
   * @param	{object}				config Button configuration
   * @return {object}							 The data to export
   */
  var _exportData = function ( dt, config )
  {
  	var newLine = _newLine( config );
  	var data = dt.buttons.exportData( config.exportOptions );
  	var boundary = config.fieldBoundary;
  	var separator = config.fieldSeparator;
  	var reBoundary = new RegExp( boundary, 'g' );
  	var escapeChar = config.escapeChar !== undefined$1 ?
  		config.escapeChar :
  		'\\';
  	var join = function ( a ) {
  		var s = '';

  		// If there is a field boundary, then we might need to escape it in
  		// the source data
  		for ( var i=0, ien=a.length ; i<ien ; i++ ) {
  			if ( i > 0 ) {
  				s += separator;
  			}

  			s += boundary ?
  				boundary + ('' + a[i]).replace( reBoundary, escapeChar+boundary ) + boundary :
  				a[i];
  		}

  		return s;
  	};

  	var header = config.header ? join( data.header )+newLine : '';
  	var footer = config.footer && data.footer ? newLine+join( data.footer ) : '';
  	var body = [];

  	for ( var i=0, ien=data.body.length ; i<ien ; i++ ) {
  		body.push( join( data.body[i] ) );
  	}

  	return {
  		str: header + body.join( newLine ) + footer,
  		rows: body.length
  	};
  };

  /**
   * Older versions of Safari (prior to tech preview 18) don't support the
   * download option required.
   *
   * @return {Boolean} `true` if old Safari
   */
  var _isDuffSafari = function ()
  {
  	var safari = navigator.userAgent.indexOf('Safari') !== -1 &&
  		navigator.userAgent.indexOf('Chrome') === -1 &&
  		navigator.userAgent.indexOf('Opera') === -1;

  	if ( ! safari ) {
  		return false;
  	}

  	var version = navigator.userAgent.match( /AppleWebKit\/(\d+\.\d+)/ );
  	if ( version && version.length > 1 && version[1]*1 < 603.1 ) {
  		return true;
  	}

  	return false;
  };

  /**
   * Convert from numeric position to letter for column names in Excel
   * @param  {int} n Column number
   * @return {string} Column letter(s) name
   */
  function createCellPos( n ){
  	var ordA = 'A'.charCodeAt(0);
  	var ordZ = 'Z'.charCodeAt(0);
  	var len = ordZ - ordA + 1;
  	var s = "";

  	while( n >= 0 ) {
  		s = String.fromCharCode(n % len + ordA) + s;
  		n = Math.floor(n / len) - 1;
  	}

  	return s;
  }

  try {
  	var _serialiser = new XMLSerializer();
  	var _ieExcel;
  }
  catch (t) {}

  /**
   * Recursively add XML files from an object's structure to a ZIP file. This
   * allows the XSLX file to be easily defined with an object's structure matching
   * the files structure.
   *
   * @param {JSZip} zip ZIP package
   * @param {object} obj Object to add (recursive)
   */
  function _addToZip( zip, obj ) {
  	if ( _ieExcel === undefined$1 ) {
  		// Detect if we are dealing with IE's _awful_ serialiser by seeing if it
  		// drop attributes
  		_ieExcel = _serialiser
  			.serializeToString(
  				( new window.DOMParser() ).parseFromString( excelStrings['xl/worksheets/sheet1.xml'], 'text/xml' )
  			)
  			.indexOf( 'xmlns:r' ) === -1;
  	}

  	$.each( obj, function ( name, val ) {
  		if ( $.isPlainObject( val ) ) {
  			var newDir = zip.folder( name );
  			_addToZip( newDir, val );
  		}
  		else {
  			if ( _ieExcel ) {
  				// IE's XML serialiser will drop some name space attributes from
  				// from the root node, so we need to save them. Do this by
  				// replacing the namespace nodes with a regular attribute that
  				// we convert back when serialised. Edge does not have this
  				// issue
  				var worksheet = val.childNodes[0];
  				var i, ien;
  				var attrs = [];

  				for ( i=worksheet.attributes.length-1 ; i>=0 ; i-- ) {
  					var attrName = worksheet.attributes[i].nodeName;
  					var attrValue = worksheet.attributes[i].nodeValue;

  					if ( attrName.indexOf( ':' ) !== -1 ) {
  						attrs.push( { name: attrName, value: attrValue } );

  						worksheet.removeAttribute( attrName );
  					}
  				}

  				for ( i=0, ien=attrs.length ; i<ien ; i++ ) {
  					var attr = val.createAttribute( attrs[i].name.replace( ':', '_dt_b_namespace_token_' ) );
  					attr.value = attrs[i].value;
  					worksheet.setAttributeNode( attr );
  				}
  			}

  			var str = _serialiser.serializeToString(val);

  			// Fix IE's XML
  			if ( _ieExcel ) {
  				// IE doesn't include the XML declaration
  				if ( str.indexOf( '<?xml' ) === -1 ) {
  					str = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>'+str;
  				}

  				// Return namespace attributes to being as such
  				str = str.replace( /_dt_b_namespace_token_/g, ':' );

  				// Remove testing name space that IE puts into the space preserve attr
  				str = str.replace( /xmlns:NS[\d]+="" NS[\d]+:/g, '' );
  			}

  			// Safari, IE and Edge will put empty name space attributes onto
  			// various elements making them useless. This strips them out
  			str = str.replace( /<([^<>]*?) xmlns=""([^<>]*?)>/g, '<$1 $2>' );

  			zip.file( name, str );
  		}
  	} );
  }

  /**
   * Create an XML node and add any children, attributes, etc without needing to
   * be verbose in the DOM.
   *
   * @param  {object} doc      XML document
   * @param  {string} nodeName Node name
   * @param  {object} opts     Options - can be `attr` (attributes), `children`
   *   (child nodes) and `text` (text content)
   * @return {node}            Created node
   */
  function _createNode( doc, nodeName, opts ) {
  	var tempNode = doc.createElement( nodeName );

  	if ( opts ) {
  		if ( opts.attr ) {
  			$(tempNode).attr( opts.attr );
  		}

  		if ( opts.children ) {
  			$.each( opts.children, function ( key, value ) {
  				tempNode.appendChild( value );
  			} );
  		}

  		if ( opts.text !== null && opts.text !== undefined$1 ) {
  			tempNode.appendChild( doc.createTextNode( opts.text ) );
  		}
  	}

  	return tempNode;
  }

  /**
   * Get the width for an Excel column based on the contents of that column
   * @param  {object} data Data for export
   * @param  {int}    col  Column index
   * @return {int}         Column width
   */
  function _excelColWidth( data, col ) {
  	var max = data.header[col].length;
  	var len, lineSplit, str;

  	if ( data.footer && data.footer[col].length > max ) {
  		max = data.footer[col].length;
  	}

  	for ( var i=0, ien=data.body.length ; i<ien ; i++ ) {
  		var point = data.body[i][col];
  		str = point !== null && point !== undefined$1 ?
  			point.toString() :
  			'';

  		// If there is a newline character, workout the width of the column
  		// based on the longest line in the string
  		if ( str.indexOf('\n') !== -1 ) {
  			lineSplit = str.split('\n');
  			lineSplit.sort( function (a, b) {
  				return b.length - a.length;
  			} );

  			len = lineSplit[0].length;
  		}
  		else {
  			len = str.length;
  		}

  		if ( len > max ) {
  			max = len;
  		}

  		// Max width rather than having potentially massive column widths
  		if ( max > 40 ) {
  			return 54; // 40 * 1.35
  		}
  	}

  	max *= 1.35;

  	// And a min width
  	return max > 6 ? max : 6;
  }

  // Excel - Pre-defined strings to build a basic XLSX file
  var excelStrings = {
  	"_rels/.rels":
  		'<?xml version="1.0" encoding="UTF-8" standalone="yes"?>'+
  		'<Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">'+
  			'<Relationship Id="rId1" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument" Target="xl/workbook.xml"/>'+
  		'</Relationships>',

  	"xl/_rels/workbook.xml.rels":
  		'<?xml version="1.0" encoding="UTF-8" standalone="yes"?>'+
  		'<Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">'+
  			'<Relationship Id="rId1" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet" Target="worksheets/sheet1.xml"/>'+
  			'<Relationship Id="rId2" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles" Target="styles.xml"/>'+
  		'</Relationships>',

  	"[Content_Types].xml":
  		'<?xml version="1.0" encoding="UTF-8" standalone="yes"?>'+
  		'<Types xmlns="http://schemas.openxmlformats.org/package/2006/content-types">'+
  			'<Default Extension="xml" ContentType="application/xml" />'+
  			'<Default Extension="rels" ContentType="application/vnd.openxmlformats-package.relationships+xml" />'+
  			'<Default Extension="jpeg" ContentType="image/jpeg" />'+
  			'<Override PartName="/xl/workbook.xml" ContentType="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml" />'+
  			'<Override PartName="/xl/worksheets/sheet1.xml" ContentType="application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml" />'+
  			'<Override PartName="/xl/styles.xml" ContentType="application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml" />'+
  		'</Types>',

  	"xl/workbook.xml":
  		'<?xml version="1.0" encoding="UTF-8" standalone="yes"?>'+
  		'<workbook xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main" xmlns:r="http://schemas.openxmlformats.org/officeDocument/2006/relationships">'+
  			'<fileVersion appName="xl" lastEdited="5" lowestEdited="5" rupBuild="24816"/>'+
  			'<workbookPr showInkAnnotation="0" autoCompressPictures="0"/>'+
  			'<bookViews>'+
  				'<workbookView xWindow="0" yWindow="0" windowWidth="25600" windowHeight="19020" tabRatio="500"/>'+
  			'</bookViews>'+
  			'<sheets>'+
  				'<sheet name="Sheet1" sheetId="1" r:id="rId1"/>'+
  			'</sheets>'+
  			'<definedNames/>'+
  		'</workbook>',

  	"xl/worksheets/sheet1.xml":
  		'<?xml version="1.0" encoding="UTF-8" standalone="yes"?>'+
  		'<worksheet xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main" xmlns:r="http://schemas.openxmlformats.org/officeDocument/2006/relationships" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="x14ac" xmlns:x14ac="http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac">'+
  			'<sheetData/>'+
  			'<mergeCells count="0"/>'+
  		'</worksheet>',

  	"xl/styles.xml":
  		'<?xml version="1.0" encoding="UTF-8"?>'+
  		'<styleSheet xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="x14ac" xmlns:x14ac="http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac">'+
  			'<numFmts count="6">'+
  				'<numFmt numFmtId="164" formatCode="#,##0.00_-\ [$$-45C]"/>'+
  				'<numFmt numFmtId="165" formatCode="&quot;£&quot;#,##0.00"/>'+
  				'<numFmt numFmtId="166" formatCode="[$€-2]\ #,##0.00"/>'+
  				'<numFmt numFmtId="167" formatCode="0.0%"/>'+
  				'<numFmt numFmtId="168" formatCode="#,##0;(#,##0)"/>'+
  				'<numFmt numFmtId="169" formatCode="#,##0.00;(#,##0.00)"/>'+
  			'</numFmts>'+
  			'<fonts count="5" x14ac:knownFonts="1">'+
  				'<font>'+
  					'<sz val="11" />'+
  					'<name val="Calibri" />'+
  				'</font>'+
  				'<font>'+
  					'<sz val="11" />'+
  					'<name val="Calibri" />'+
  					'<color rgb="FFFFFFFF" />'+
  				'</font>'+
  				'<font>'+
  					'<sz val="11" />'+
  					'<name val="Calibri" />'+
  					'<b />'+
  				'</font>'+
  				'<font>'+
  					'<sz val="11" />'+
  					'<name val="Calibri" />'+
  					'<i />'+
  				'</font>'+
  				'<font>'+
  					'<sz val="11" />'+
  					'<name val="Calibri" />'+
  					'<u />'+
  				'</font>'+
  			'</fonts>'+
  			'<fills count="6">'+
  				'<fill>'+
  					'<patternFill patternType="none" />'+
  				'</fill>'+
  				'<fill>'+ // Excel appears to use this as a dotted background regardless of values but
  					'<patternFill patternType="none" />'+ // to be valid to the schema, use a patternFill
  				'</fill>'+
  				'<fill>'+
  					'<patternFill patternType="solid">'+
  						'<fgColor rgb="FFD9D9D9" />'+
  						'<bgColor indexed="64" />'+
  					'</patternFill>'+
  				'</fill>'+
  				'<fill>'+
  					'<patternFill patternType="solid">'+
  						'<fgColor rgb="FFD99795" />'+
  						'<bgColor indexed="64" />'+
  					'</patternFill>'+
  				'</fill>'+
  				'<fill>'+
  					'<patternFill patternType="solid">'+
  						'<fgColor rgb="ffc6efce" />'+
  						'<bgColor indexed="64" />'+
  					'</patternFill>'+
  				'</fill>'+
  				'<fill>'+
  					'<patternFill patternType="solid">'+
  						'<fgColor rgb="ffc6cfef" />'+
  						'<bgColor indexed="64" />'+
  					'</patternFill>'+
  				'</fill>'+
  			'</fills>'+
  			'<borders count="2">'+
  				'<border>'+
  					'<left />'+
  					'<right />'+
  					'<top />'+
  					'<bottom />'+
  					'<diagonal />'+
  				'</border>'+
  				'<border diagonalUp="false" diagonalDown="false">'+
  					'<left style="thin">'+
  						'<color auto="1" />'+
  					'</left>'+
  					'<right style="thin">'+
  						'<color auto="1" />'+
  					'</right>'+
  					'<top style="thin">'+
  						'<color auto="1" />'+
  					'</top>'+
  					'<bottom style="thin">'+
  						'<color auto="1" />'+
  					'</bottom>'+
  					'<diagonal />'+
  				'</border>'+
  			'</borders>'+
  			'<cellStyleXfs count="1">'+
  				'<xf numFmtId="0" fontId="0" fillId="0" borderId="0" />'+
  			'</cellStyleXfs>'+
  			'<cellXfs count="68">'+
  				'<xf numFmtId="0" fontId="0" fillId="0" borderId="0" applyFont="1" applyFill="1" applyBorder="1"/>'+
  				'<xf numFmtId="0" fontId="1" fillId="0" borderId="0" applyFont="1" applyFill="1" applyBorder="1"/>'+
  				'<xf numFmtId="0" fontId="2" fillId="0" borderId="0" applyFont="1" applyFill="1" applyBorder="1"/>'+
  				'<xf numFmtId="0" fontId="3" fillId="0" borderId="0" applyFont="1" applyFill="1" applyBorder="1"/>'+
  				'<xf numFmtId="0" fontId="4" fillId="0" borderId="0" applyFont="1" applyFill="1" applyBorder="1"/>'+
  				'<xf numFmtId="0" fontId="0" fillId="2" borderId="0" applyFont="1" applyFill="1" applyBorder="1"/>'+
  				'<xf numFmtId="0" fontId="1" fillId="2" borderId="0" applyFont="1" applyFill="1" applyBorder="1"/>'+
  				'<xf numFmtId="0" fontId="2" fillId="2" borderId="0" applyFont="1" applyFill="1" applyBorder="1"/>'+
  				'<xf numFmtId="0" fontId="3" fillId="2" borderId="0" applyFont="1" applyFill="1" applyBorder="1"/>'+
  				'<xf numFmtId="0" fontId="4" fillId="2" borderId="0" applyFont="1" applyFill="1" applyBorder="1"/>'+
  				'<xf numFmtId="0" fontId="0" fillId="3" borderId="0" applyFont="1" applyFill="1" applyBorder="1"/>'+
  				'<xf numFmtId="0" fontId="1" fillId="3" borderId="0" applyFont="1" applyFill="1" applyBorder="1"/>'+
  				'<xf numFmtId="0" fontId="2" fillId="3" borderId="0" applyFont="1" applyFill="1" applyBorder="1"/>'+
  				'<xf numFmtId="0" fontId="3" fillId="3" borderId="0" applyFont="1" applyFill="1" applyBorder="1"/>'+
  				'<xf numFmtId="0" fontId="4" fillId="3" borderId="0" applyFont="1" applyFill="1" applyBorder="1"/>'+
  				'<xf numFmtId="0" fontId="0" fillId="4" borderId="0" applyFont="1" applyFill="1" applyBorder="1"/>'+
  				'<xf numFmtId="0" fontId="1" fillId="4" borderId="0" applyFont="1" applyFill="1" applyBorder="1"/>'+
  				'<xf numFmtId="0" fontId="2" fillId="4" borderId="0" applyFont="1" applyFill="1" applyBorder="1"/>'+
  				'<xf numFmtId="0" fontId="3" fillId="4" borderId="0" applyFont="1" applyFill="1" applyBorder="1"/>'+
  				'<xf numFmtId="0" fontId="4" fillId="4" borderId="0" applyFont="1" applyFill="1" applyBorder="1"/>'+
  				'<xf numFmtId="0" fontId="0" fillId="5" borderId="0" applyFont="1" applyFill="1" applyBorder="1"/>'+
  				'<xf numFmtId="0" fontId="1" fillId="5" borderId="0" applyFont="1" applyFill="1" applyBorder="1"/>'+
  				'<xf numFmtId="0" fontId="2" fillId="5" borderId="0" applyFont="1" applyFill="1" applyBorder="1"/>'+
  				'<xf numFmtId="0" fontId="3" fillId="5" borderId="0" applyFont="1" applyFill="1" applyBorder="1"/>'+
  				'<xf numFmtId="0" fontId="4" fillId="5" borderId="0" applyFont="1" applyFill="1" applyBorder="1"/>'+
  				'<xf numFmtId="0" fontId="0" fillId="0" borderId="1" applyFont="1" applyFill="1" applyBorder="1"/>'+
  				'<xf numFmtId="0" fontId="1" fillId="0" borderId="1" applyFont="1" applyFill="1" applyBorder="1"/>'+
  				'<xf numFmtId="0" fontId="2" fillId="0" borderId="1" applyFont="1" applyFill="1" applyBorder="1"/>'+
  				'<xf numFmtId="0" fontId="3" fillId="0" borderId="1" applyFont="1" applyFill="1" applyBorder="1"/>'+
  				'<xf numFmtId="0" fontId="4" fillId="0" borderId="1" applyFont="1" applyFill="1" applyBorder="1"/>'+
  				'<xf numFmtId="0" fontId="0" fillId="2" borderId="1" applyFont="1" applyFill="1" applyBorder="1"/>'+
  				'<xf numFmtId="0" fontId="1" fillId="2" borderId="1" applyFont="1" applyFill="1" applyBorder="1"/>'+
  				'<xf numFmtId="0" fontId="2" fillId="2" borderId="1" applyFont="1" applyFill="1" applyBorder="1"/>'+
  				'<xf numFmtId="0" fontId="3" fillId="2" borderId="1" applyFont="1" applyFill="1" applyBorder="1"/>'+
  				'<xf numFmtId="0" fontId="4" fillId="2" borderId="1" applyFont="1" applyFill="1" applyBorder="1"/>'+
  				'<xf numFmtId="0" fontId="0" fillId="3" borderId="1" applyFont="1" applyFill="1" applyBorder="1"/>'+
  				'<xf numFmtId="0" fontId="1" fillId="3" borderId="1" applyFont="1" applyFill="1" applyBorder="1"/>'+
  				'<xf numFmtId="0" fontId="2" fillId="3" borderId="1" applyFont="1" applyFill="1" applyBorder="1"/>'+
  				'<xf numFmtId="0" fontId="3" fillId="3" borderId="1" applyFont="1" applyFill="1" applyBorder="1"/>'+
  				'<xf numFmtId="0" fontId="4" fillId="3" borderId="1" applyFont="1" applyFill="1" applyBorder="1"/>'+
  				'<xf numFmtId="0" fontId="0" fillId="4" borderId="1" applyFont="1" applyFill="1" applyBorder="1"/>'+
  				'<xf numFmtId="0" fontId="1" fillId="4" borderId="1" applyFont="1" applyFill="1" applyBorder="1"/>'+
  				'<xf numFmtId="0" fontId="2" fillId="4" borderId="1" applyFont="1" applyFill="1" applyBorder="1"/>'+
  				'<xf numFmtId="0" fontId="3" fillId="4" borderId="1" applyFont="1" applyFill="1" applyBorder="1"/>'+
  				'<xf numFmtId="0" fontId="4" fillId="4" borderId="1" applyFont="1" applyFill="1" applyBorder="1"/>'+
  				'<xf numFmtId="0" fontId="0" fillId="5" borderId="1" applyFont="1" applyFill="1" applyBorder="1"/>'+
  				'<xf numFmtId="0" fontId="1" fillId="5" borderId="1" applyFont="1" applyFill="1" applyBorder="1"/>'+
  				'<xf numFmtId="0" fontId="2" fillId="5" borderId="1" applyFont="1" applyFill="1" applyBorder="1"/>'+
  				'<xf numFmtId="0" fontId="3" fillId="5" borderId="1" applyFont="1" applyFill="1" applyBorder="1"/>'+
  				'<xf numFmtId="0" fontId="4" fillId="5" borderId="1" applyFont="1" applyFill="1" applyBorder="1"/>'+
  				'<xf numFmtId="0" fontId="0" fillId="0" borderId="0" applyFont="1" applyFill="1" applyBorder="1" xfId="0" applyAlignment="1">'+
  					'<alignment horizontal="left"/>'+
  				'</xf>'+
  				'<xf numFmtId="0" fontId="0" fillId="0" borderId="0" applyFont="1" applyFill="1" applyBorder="1" xfId="0" applyAlignment="1">'+
  					'<alignment horizontal="center"/>'+
  				'</xf>'+
  				'<xf numFmtId="0" fontId="0" fillId="0" borderId="0" applyFont="1" applyFill="1" applyBorder="1" xfId="0" applyAlignment="1">'+
  					'<alignment horizontal="right"/>'+
  				'</xf>'+
  				'<xf numFmtId="0" fontId="0" fillId="0" borderId="0" applyFont="1" applyFill="1" applyBorder="1" xfId="0" applyAlignment="1">'+
  					'<alignment horizontal="fill"/>'+
  				'</xf>'+
  				'<xf numFmtId="0" fontId="0" fillId="0" borderId="0" applyFont="1" applyFill="1" applyBorder="1" xfId="0" applyAlignment="1">'+
  					'<alignment textRotation="90"/>'+
  				'</xf>'+
  				'<xf numFmtId="0" fontId="0" fillId="0" borderId="0" applyFont="1" applyFill="1" applyBorder="1" xfId="0" applyAlignment="1">'+
  					'<alignment wrapText="1"/>'+
  				'</xf>'+
  				'<xf numFmtId="9"   fontId="0" fillId="0" borderId="0" applyFont="1" applyFill="1" applyBorder="1" xfId="0" applyNumberFormat="1"/>'+
  				'<xf numFmtId="164" fontId="0" fillId="0" borderId="0" applyFont="1" applyFill="1" applyBorder="1" xfId="0" applyNumberFormat="1"/>'+
  				'<xf numFmtId="165" fontId="0" fillId="0" borderId="0" applyFont="1" applyFill="1" applyBorder="1" xfId="0" applyNumberFormat="1"/>'+
  				'<xf numFmtId="166" fontId="0" fillId="0" borderId="0" applyFont="1" applyFill="1" applyBorder="1" xfId="0" applyNumberFormat="1"/>'+
  				'<xf numFmtId="167" fontId="0" fillId="0" borderId="0" applyFont="1" applyFill="1" applyBorder="1" xfId="0" applyNumberFormat="1"/>'+
  				'<xf numFmtId="168" fontId="0" fillId="0" borderId="0" applyFont="1" applyFill="1" applyBorder="1" xfId="0" applyNumberFormat="1"/>'+
  				'<xf numFmtId="169" fontId="0" fillId="0" borderId="0" applyFont="1" applyFill="1" applyBorder="1" xfId="0" applyNumberFormat="1"/>'+
  				'<xf numFmtId="3" fontId="0" fillId="0" borderId="0" applyFont="1" applyFill="1" applyBorder="1" xfId="0" applyNumberFormat="1"/>'+
  				'<xf numFmtId="4" fontId="0" fillId="0" borderId="0" applyFont="1" applyFill="1" applyBorder="1" xfId="0" applyNumberFormat="1"/>'+
  				'<xf numFmtId="1" fontId="0" fillId="0" borderId="0" applyFont="1" applyFill="1" applyBorder="1" xfId="0" applyNumberFormat="1"/>'+
  				'<xf numFmtId="2" fontId="0" fillId="0" borderId="0" applyFont="1" applyFill="1" applyBorder="1" xfId="0" applyNumberFormat="1"/>'+
  				'<xf numFmtId="14" fontId="0" fillId="0" borderId="0" applyFont="1" applyFill="1" applyBorder="1" xfId="0" applyNumberFormat="1"/>'+
  			'</cellXfs>'+
  			'<cellStyles count="1">'+
  				'<cellStyle name="Normal" xfId="0" builtinId="0" />'+
  			'</cellStyles>'+
  			'<dxfs count="0" />'+
  			'<tableStyles count="0" defaultTableStyle="TableStyleMedium9" defaultPivotStyle="PivotStyleMedium4" />'+
  		'</styleSheet>'
  };
  // Note we could use 3 `for` loops for the styles, but when gzipped there is
  // virtually no difference in size, since the above can be easily compressed

  // Pattern matching for special number formats. Perhaps this should be exposed
  // via an API in future?
  // Ref: section 3.8.30 - built in formatters in open spreadsheet
  //   https://www.ecma-international.org/news/TC45_current_work/Office%20Open%20XML%20Part%204%20-%20Markup%20Language%20Reference.pdf
  var _excelSpecials = [
  	{ match: /^\-?\d+\.\d%$/,               style: 60, fmt: function (d) { return d/100; } }, // Precent with d.p.
  	{ match: /^\-?\d+\.?\d*%$/,             style: 56, fmt: function (d) { return d/100; } }, // Percent
  	{ match: /^\-?\$[\d,]+.?\d*$/,          style: 57 }, // Dollars
  	{ match: /^\-?£[\d,]+.?\d*$/,           style: 58 }, // Pounds
  	{ match: /^\-?€[\d,]+.?\d*$/,           style: 59 }, // Euros
  	{ match: /^\-?\d+$/,                    style: 65 }, // Numbers without thousand separators
  	{ match: /^\-?\d+\.\d{2}$/,             style: 66 }, // Numbers 2 d.p. without thousands separators
  	{ match: /^\([\d,]+\)$/,                style: 61, fmt: function (d) { return -1 * d.replace(/[\(\)]/g, ''); } },  // Negative numbers indicated by brackets
  	{ match: /^\([\d,]+\.\d{2}\)$/,         style: 62, fmt: function (d) { return -1 * d.replace(/[\(\)]/g, ''); } },  // Negative numbers indicated by brackets - 2d.p.
  	{ match: /^\-?[\d,]+$/,                 style: 63 }, // Numbers with thousand separators
  	{ match: /^\-?[\d,]+\.\d{2}$/,          style: 64 },
  	{ match: /^[\d]{4}\-[\d]{2}\-[\d]{2}$/, style: 67, fmt: function (d) {return Math.round(25569 + (Date.parse(d) / (86400 * 1000)));}} //Date yyyy-mm-dd
  ];



  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   * Buttons
   */

  //
  // Copy to clipboard
  //
  DataTable.ext.buttons.copyHtml5 = {
  	className: 'buttons-copy buttons-html5',

  	text: function ( dt ) {
  		return dt.i18n( 'buttons.copy', 'Copy' );
  	},

  	action: function ( e, dt, button, config ) {
  		this.processing( true );

  		var that = this;
  		var exportData = _exportData( dt, config );
  		var info = dt.buttons.exportInfo( config );
  		var newline = _newLine(config);
  		var output = exportData.str;
  		var hiddenDiv = $('<div/>')
  			.css( {
  				height: 1,
  				width: 1,
  				overflow: 'hidden',
  				position: 'fixed',
  				top: 0,
  				left: 0
  			} );

  		if ( info.title ) {
  			output = info.title + newline + newline + output;
  		}

  		if ( info.messageTop ) {
  			output = info.messageTop + newline + newline + output;
  		}

  		if ( info.messageBottom ) {
  			output = output + newline + newline + info.messageBottom;
  		}

  		if ( config.customize ) {
  			output = config.customize( output, config, dt );
  		}

  		var textarea = $('<textarea readonly/>')
  			.val( output )
  			.appendTo( hiddenDiv );

  		// For browsers that support the copy execCommand, try to use it
  		if ( document.queryCommandSupported('copy') ) {
  			hiddenDiv.appendTo( dt.table().container() );
  			textarea[0].focus();
  			textarea[0].select();

  			try {
  				var successful = document.execCommand( 'copy' );
  				hiddenDiv.remove();

  				if (successful) {
  					dt.buttons.info(
  						dt.i18n( 'buttons.copyTitle', 'Copy to clipboard' ),
  						dt.i18n( 'buttons.copySuccess', {
  							1: 'Copied one row to clipboard',
  							_: 'Copied %d rows to clipboard'
  						}, exportData.rows ),
  						2000
  					);

  					this.processing( false );
  					return;
  				}
  			}
  			catch (t) {}
  		}

  		// Otherwise we show the text box and instruct the user to use it
  		var message = $('<span>'+dt.i18n( 'buttons.copyKeys',
  				'Press <i>ctrl</i> or <i>\u2318</i> + <i>C</i> to copy the table data<br>to your system clipboard.<br><br>'+
  				'To cancel, click this message or press escape.' )+'</span>'
  			)
  			.append( hiddenDiv );

  		dt.buttons.info( dt.i18n( 'buttons.copyTitle', 'Copy to clipboard' ), message, 0 );

  		// Select the text so when the user activates their system clipboard
  		// it will copy that text
  		textarea[0].focus();
  		textarea[0].select();

  		// Event to hide the message when the user is done
  		var container = $(message).closest('.dt-button-info');
  		var close = function () {
  			container.off( 'click.buttons-copy' );
  			$(document).off( '.buttons-copy' );
  			dt.buttons.info( false );
  		};

  		container.on( 'click.buttons-copy', close );
  		$(document)
  			.on( 'keydown.buttons-copy', function (e) {
  				if ( e.keyCode === 27 ) { // esc
  					close();
  					that.processing( false );
  				}
  			} )
  			.on( 'copy.buttons-copy cut.buttons-copy', function () {
  				close();
  				that.processing( false );
  			} );
  	},

  	exportOptions: {},

  	fieldSeparator: '\t',

  	fieldBoundary: '',

  	header: true,

  	footer: false,

  	title: '*',

  	messageTop: '*',

  	messageBottom: '*'
  };

  //
  // CSV export
  //
  DataTable.ext.buttons.csvHtml5 = {
  	bom: false,

  	className: 'buttons-csv buttons-html5',

  	available: function () {
  		return window.FileReader !== undefined$1 && window.Blob;
  	},

  	text: function ( dt ) {
  		return dt.i18n( 'buttons.csv', 'CSV' );
  	},

  	action: function ( e, dt, button, config ) {
  		this.processing( true );

  		// Set the text
  		var output = _exportData( dt, config ).str;
  		var info = dt.buttons.exportInfo(config);
  		var charset = config.charset;

  		if ( config.customize ) {
  			output = config.customize( output, config, dt );
  		}

  		if ( charset !== false ) {
  			if ( ! charset ) {
  				charset = document.characterSet || document.charset;
  			}

  			if ( charset ) {
  				charset = ';charset='+charset;
  			}
  		}
  		else {
  			charset = '';
  		}

  		if ( config.bom ) {
  			output = '\ufeff' + output;
  		}

  		_saveAs(
  			new Blob( [output], {type: 'text/csv'+charset} ),
  			info.filename,
  			true
  		);

  		this.processing( false );
  	},

  	filename: '*',

  	extension: '.csv',

  	exportOptions: {},

  	fieldSeparator: ',',

  	fieldBoundary: '"',

  	escapeChar: '"',

  	charset: null,

  	header: true,

  	footer: false
  };

  //
  // Excel (xlsx) export
  //
  DataTable.ext.buttons.excelHtml5 = {
  	className: 'buttons-excel buttons-html5',

  	available: function () {
  		return window.FileReader !== undefined$1 && _jsZip() !== undefined$1 && ! _isDuffSafari() && _serialiser;
  	},

  	text: function ( dt ) {
  		return dt.i18n( 'buttons.excel', 'Excel' );
  	},

  	action: function ( e, dt, button, config ) {
  		this.processing( true );

  		var that = this;
  		var rowPos = 0;
  		var dataStartRow, dataEndRow;
  		var getXml = function ( type ) {
  			var str = excelStrings[ type ];

  			//str = str.replace( /xmlns:/g, 'xmlns_' ).replace( /mc:/g, 'mc_' );

  			return $.parseXML( str );
  		};
  		var rels = getXml('xl/worksheets/sheet1.xml');
  		var relsGet = rels.getElementsByTagName( "sheetData" )[0];

  		var xlsx = {
  			_rels: {
  				".rels": getXml('_rels/.rels')
  			},
  			xl: {
  				_rels: {
  					"workbook.xml.rels": getXml('xl/_rels/workbook.xml.rels')
  				},
  				"workbook.xml": getXml('xl/workbook.xml'),
  				"styles.xml": getXml('xl/styles.xml'),
  				"worksheets": {
  					"sheet1.xml": rels
  				}

  			},
  			"[Content_Types].xml": getXml('[Content_Types].xml')
  		};

  		var data = dt.buttons.exportData( config.exportOptions );
  		var currentRow, rowNode;
  		var addRow = function ( row ) {
  			currentRow = rowPos+1;
  			rowNode = _createNode( rels, "row", { attr: {r:currentRow} } );

  			for ( var i=0, ien=row.length ; i<ien ; i++ ) {
  				// Concat both the Cell Columns as a letter and the Row of the cell.
  				var cellId = createCellPos(i) + '' + currentRow;
  				var cell = null;

  				// For null, undefined of blank cell, continue so it doesn't create the _createNode
  				if ( row[i] === null || row[i] === undefined$1 || row[i] === '' ) {
  					if ( config.createEmptyCells === true ) {
  						row[i] = '';
  					}
  					else {
  						continue;
  					}
  				}

  				var originalContent = row[i];
  				row[i] = typeof row[i].trim === 'function'
  					? row[i].trim()
  					: row[i];

  				// Special number formatting options
  				for ( var j=0, jen=_excelSpecials.length ; j<jen ; j++ ) {
  					var special = _excelSpecials[j];

  					// TODO Need to provide the ability for the specials to say
  					// if they are returning a string, since at the moment it is
  					// assumed to be a number
  					if ( row[i].match && ! row[i].match(/^0\d+/) && row[i].match( special.match ) ) {
  						var val = row[i].replace(/[^\d\.\-]/g, '');

  						if ( special.fmt ) {
  							val = special.fmt( val );
  						}

  						cell = _createNode( rels, 'c', {
  							attr: {
  								r: cellId,
  								s: special.style
  							},
  							children: [
  								_createNode( rels, 'v', { text: val } )
  							]
  						} );

  						break;
  					}
  				}

  				if ( ! cell ) {
  					if ( typeof row[i] === 'number' || (
  						row[i].match &&
  						row[i].match(/^-?\d+(\.\d+)?$/) &&
  						! row[i].match(/^0\d+/) )
  					) {
  						// Detect numbers - don't match numbers with leading zeros
  						// or a negative anywhere but the start
  						cell = _createNode( rels, 'c', {
  							attr: {
  								t: 'n',
  								r: cellId
  							},
  							children: [
  								_createNode( rels, 'v', { text: row[i] } )
  							]
  						} );
  					}
  					else {
  						// String output - replace non standard characters for text output
  						var text = ! originalContent.replace ?
  							originalContent :
  							originalContent.replace(/[\x00-\x09\x0B\x0C\x0E-\x1F\x7F-\x9F]/g, '');

  						cell = _createNode( rels, 'c', {
  							attr: {
  								t: 'inlineStr',
  								r: cellId
  							},
  							children:{
  								row: _createNode( rels, 'is', {
  									children: {
  										row: _createNode( rels, 't', {
  											text: text,
  											attr: {
  												'xml:space': 'preserve'
  											}
  										} )
  									}
  								} )
  							}
  						} );
  					}
  				}

  				rowNode.appendChild( cell );
  			}

  			relsGet.appendChild(rowNode);
  			rowPos++;
  		};

  		if ( config.customizeData ) {
  			config.customizeData( data );
  		}

  		var mergeCells = function ( row, colspan ) {
  			var mergeCells = $('mergeCells', rels);

  			mergeCells[0].appendChild( _createNode( rels, 'mergeCell', {
  				attr: {
  					ref: 'A'+row+':'+createCellPos(colspan)+row
  				}
  			} ) );
  			mergeCells.attr( 'count', parseFloat(mergeCells.attr( 'count' ))+1 );
  			$('row:eq('+(row-1)+') c', rels).attr( 's', '51' ); // centre
  		};

  		// Title and top messages
  		var exportInfo = dt.buttons.exportInfo( config );
  		if ( exportInfo.title ) {
  			addRow( [exportInfo.title]);
  			mergeCells( rowPos, data.header.length-1 );
  		}

  		if ( exportInfo.messageTop ) {
  			addRow( [exportInfo.messageTop]);
  			mergeCells( rowPos, data.header.length-1 );
  		}


  		// Table itself
  		if ( config.header ) {
  			addRow( data.header);
  			$('row:last c', rels).attr( 's', '2' ); // bold
  		}
  	
  		dataStartRow = rowPos;

  		for ( var n=0, ie=data.body.length ; n<ie ; n++ ) {
  			addRow( data.body[n]);
  		}
  	
  		dataEndRow = rowPos;

  		if ( config.footer && data.footer ) {
  			addRow( data.footer);
  			$('row:last c', rels).attr( 's', '2' ); // bold
  		}

  		// Below the table
  		if ( exportInfo.messageBottom ) {
  			addRow( [exportInfo.messageBottom]);
  			mergeCells( rowPos, data.header.length-1 );
  		}

  		// Set column widths
  		var cols = _createNode( rels, 'cols' );
  		$('worksheet', rels).prepend( cols );

  		for ( var i=0, ien=data.header.length ; i<ien ; i++ ) {
  			cols.appendChild( _createNode( rels, 'col', {
  				attr: {
  					min: i+1,
  					max: i+1,
  					width: _excelColWidth( data, i ),
  					customWidth: 1
  				}
  			} ) );
  		}

  		// Workbook modifications
  		var workbook = xlsx.xl['workbook.xml'];

  		$( 'sheets sheet', workbook ).attr( 'name', _sheetname( config ) );

  		// Auto filter for columns
  		if ( config.autoFilter ) {
  			$('mergeCells', rels).before( _createNode( rels, 'autoFilter', {
  				attr: {
  					ref: 'A'+dataStartRow+':'+createCellPos(data.header.length-1)+dataEndRow
  				}
  			} ) );

  			$('definedNames', workbook).append( _createNode( workbook, 'definedName', {
  				attr: {
  					name: '_xlnm._FilterDatabase',
  					localSheetId: '0',
  					hidden: 1
  				},
  				text: _sheetname(config)+'!$A$'+dataStartRow+':'+createCellPos(data.header.length-1)+dataEndRow
  			} ) );
  		}

  		// Let the developer customise the document if they want to
  		if ( config.customize ) {
  			config.customize( xlsx, config, dt );
  		}

  		// Excel doesn't like an empty mergeCells tag
  		if ( $('mergeCells', rels).children().length === 0 ) {
  			$('mergeCells', rels).remove();
  		}

  		var jszip = _jsZip();
  		var zip = new jszip();
  		var zipConfig = {
  			type: 'blob',
  			mimeType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
  		};

  		_addToZip( zip, xlsx );

  		if ( zip.generateAsync ) {
  			// JSZip 3+
  			zip
  				.generateAsync( zipConfig )
  				.then( function ( blob ) {
  					_saveAs( blob, exportInfo.filename );
  					that.processing( false );
  				} );
  		}
  		else {
  			// JSZip 2.5
  			_saveAs(
  				zip.generate( zipConfig ),
  				exportInfo.filename
  			);
  			this.processing( false );
  		}
  	},

  	filename: '*',

  	extension: '.xlsx',

  	exportOptions: {},

  	header: true,

  	footer: false,

  	title: '*',

  	messageTop: '*',

  	messageBottom: '*',

  	createEmptyCells: false,

  	autoFilter: false,

  	sheetName: ''
  };

  //
  // PDF export - using pdfMake - http://pdfmake.org
  //
  DataTable.ext.buttons.pdfHtml5 = {
  	className: 'buttons-pdf buttons-html5',

  	available: function () {
  		return window.FileReader !== undefined$1 && _pdfMake();
  	},

  	text: function ( dt ) {
  		return dt.i18n( 'buttons.pdf', 'PDF' );
  	},

  	action: function ( e, dt, button, config ) {
  		this.processing( true );
  		var data = dt.buttons.exportData( config.exportOptions );
  		var info = dt.buttons.exportInfo( config );
  		var rows = [];

  		if ( config.header ) {
  			rows.push( $.map( data.header, function ( d ) {
  				return {
  					text: typeof d === 'string' ? d : d+'',
  					style: 'tableHeader'
  				};
  			} ) );
  		}

  		for ( var i=0, ien=data.body.length ; i<ien ; i++ ) {
  			rows.push( $.map( data.body[i], function ( d ) {
  				if ( d === null || d === undefined$1 ) {
  					d = '';
  				}
  				return {
  					text: typeof d === 'string' ? d : d+'',
  					style: i % 2 ? 'tableBodyEven' : 'tableBodyOdd'
  				};
  			} ) );
  		}

  		if ( config.footer && data.footer) {
  			rows.push( $.map( data.footer, function ( d ) {
  				return {
  					text: typeof d === 'string' ? d : d+'',
  					style: 'tableFooter'
  				};
  			} ) );
  		}

  		var doc = {
  			pageSize: config.pageSize,
  			pageOrientation: config.orientation,
  			content: [
  				{
  					table: {
  						headerRows: 1,
  						body: rows
  					},
  					layout: 'noBorders'
  				}
  			],
  			styles: {
  				tableHeader: {
  					bold: true,
  					fontSize: 11,
  					color: 'white',
  					fillColor: '#2d4154',
  					alignment: 'center'
  				},
  				tableBodyEven: {},
  				tableBodyOdd: {
  					fillColor: '#f3f3f3'
  				},
  				tableFooter: {
  					bold: true,
  					fontSize: 11,
  					color: 'white',
  					fillColor: '#2d4154'
  				},
  				title: {
  					alignment: 'center',
  					fontSize: 15
  				},
  				message: {}
  			},
  			defaultStyle: {
  				fontSize: 10
  			}
  		};

  		if ( info.messageTop ) {
  			doc.content.unshift( {
  				text: info.messageTop,
  				style: 'message',
  				margin: [ 0, 0, 0, 12 ]
  			} );
  		}

  		if ( info.messageBottom ) {
  			doc.content.push( {
  				text: info.messageBottom,
  				style: 'message',
  				margin: [ 0, 0, 0, 12 ]
  			} );
  		}

  		if ( info.title ) {
  			doc.content.unshift( {
  				text: info.title,
  				style: 'title',
  				margin: [ 0, 0, 0, 12 ]
  			} );
  		}

  		if ( config.customize ) {
  			config.customize( doc, config, dt );
  		}

  		var pdf = _pdfMake().createPdf( doc );

  		if ( config.download === 'open' && ! _isDuffSafari() ) {
  			pdf.open();
  		}
  		else {
  			pdf.download( info.filename );
  		}

  		this.processing( false );
  	},

  	title: '*',

  	filename: '*',

  	extension: '.pdf',

  	exportOptions: {},

  	orientation: 'portrait',

  	pageSize: 'A4',

  	header: true,

  	footer: false,

  	messageTop: '*',

  	messageBottom: '*',

  	customize: null,

  	download: 'download'
  };


  return DataTable.Buttons;
  }));
  });

  var dataTables_scroller = createCommonjsModule(function (module, exports) {
  /*! Scroller 2.0.2
   * ©2011-2020 SpryMedia Ltd - datatables.net/license
   */

  /**
   * @summary     Scroller
   * @description Virtual rendering for DataTables
   * @version     2.0.2
   * @file        dataTables.scroller.js
   * @author      SpryMedia Ltd (www.sprymedia.co.uk)
   * @contact     www.sprymedia.co.uk/contact
   * @copyright   Copyright 2011-2020 SpryMedia Ltd.
   *
   * This source file is free software, available under the following license:
   *   MIT license - http://datatables.net/license/mit
   *
   * This source file is distributed in the hope that it will be useful, but
   * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
   * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.
   *
   * For details please refer to: http://www.datatables.net
   */

  (function( factory ){
  	{
  		// CommonJS
  		module.exports = function (root, $) {
  			if ( ! root ) {
  				root = window;
  			}

  			if ( ! $ || ! $.fn.dataTable ) {
  				$ = jquery_dataTables(root, $).$;
  			}

  			return factory( $, root, root.document );
  		};
  	}
  }(function( $, window, document, undefined$1 ) {
  var DataTable = $.fn.dataTable;


  /**
   * Scroller is a virtual rendering plug-in for DataTables which allows large
   * datasets to be drawn on screen every quickly. What the virtual rendering means
   * is that only the visible portion of the table (and a bit to either side to make
   * the scrolling smooth) is drawn, while the scrolling container gives the
   * visual impression that the whole table is visible. This is done by making use
   * of the pagination abilities of DataTables and moving the table around in the
   * scrolling container DataTables adds to the page. The scrolling container is
   * forced to the height it would be for the full table display using an extra
   * element.
   *
   * Note that rows in the table MUST all be the same height. Information in a cell
   * which expands on to multiple lines will cause some odd behaviour in the scrolling.
   *
   * Scroller is initialised by simply including the letter 'S' in the sDom for the
   * table you want to have this feature enabled on. Note that the 'S' must come
   * AFTER the 't' parameter in `dom`.
   *
   * Key features include:
   *   <ul class="limit_length">
   *     <li>Speed! The aim of Scroller for DataTables is to make rendering large data sets fast</li>
   *     <li>Full compatibility with deferred rendering in DataTables for maximum speed</li>
   *     <li>Display millions of rows</li>
   *     <li>Integration with state saving in DataTables (scrolling position is saved)</li>
   *     <li>Easy to use</li>
   *   </ul>
   *
   *  @class
   *  @constructor
   *  @global
   *  @param {object} dt DataTables settings object or API instance
   *  @param {object} [opts={}] Configuration object for FixedColumns. Options 
   *    are defined by {@link Scroller.defaults}
   *
   *  @requires jQuery 1.7+
   *  @requires DataTables 1.10.0+
   *
   *  @example
   *    $(document).ready(function() {
   *        $('#example').DataTable( {
   *            "scrollY": "200px",
   *            "ajax": "media/dataset/large.txt",
   *            "scroller": true,
   *            "deferRender": true
   *        } );
   *    } );
   */
  var Scroller = function ( dt, opts ) {
  	/* Sanity check - you just know it will happen */
  	if ( ! (this instanceof Scroller) ) {
  		alert( "Scroller warning: Scroller must be initialised with the 'new' keyword." );
  		return;
  	}

  	if ( opts === undefined$1 ) {
  		opts = {};
  	}

  	var dtApi = $.fn.dataTable.Api( dt );

  	/**
  	 * Settings object which contains customisable information for the Scroller instance
  	 * @namespace
  	 * @private
  	 * @extends Scroller.defaults
  	 */
  	this.s = {
  		/**
  		 * DataTables settings object
  		 *  @type     object
  		 *  @default  Passed in as first parameter to constructor
  		 */
  		dt: dtApi.settings()[0],

  		/**
  		 * DataTables API instance
  		 *  @type     DataTable.Api
  		 */
  		dtApi: dtApi,

  		/**
  		 * Pixel location of the top of the drawn table in the viewport
  		 *  @type     int
  		 *  @default  0
  		 */
  		tableTop: 0,

  		/**
  		 * Pixel location of the bottom of the drawn table in the viewport
  		 *  @type     int
  		 *  @default  0
  		 */
  		tableBottom: 0,

  		/**
  		 * Pixel location of the boundary for when the next data set should be loaded and drawn
  		 * when scrolling up the way.
  		 *  @type     int
  		 *  @default  0
  		 *  @private
  		 */
  		redrawTop: 0,

  		/**
  		 * Pixel location of the boundary for when the next data set should be loaded and drawn
  		 * when scrolling down the way. Note that this is actually calculated as the offset from
  		 * the top.
  		 *  @type     int
  		 *  @default  0
  		 *  @private
  		 */
  		redrawBottom: 0,

  		/**
  		 * Auto row height or not indicator
  		 *  @type     bool
  		 *  @default  0
  		 */
  		autoHeight: true,

  		/**
  		 * Number of rows calculated as visible in the visible viewport
  		 *  @type     int
  		 *  @default  0
  		 */
  		viewportRows: 0,

  		/**
  		 * setTimeout reference for state saving, used when state saving is enabled in the DataTable
  		 * and when the user scrolls the viewport in order to stop the cookie set taking too much
  		 * CPU!
  		 *  @type     int
  		 *  @default  0
  		 */
  		stateTO: null,

  		stateSaveThrottle: function () {},

  		/**
  		 * setTimeout reference for the redraw, used when server-side processing is enabled in the
  		 * DataTables in order to prevent DoSing the server
  		 *  @type     int
  		 *  @default  null
  		 */
  		drawTO: null,

  		heights: {
  			jump: null,
  			page: null,
  			virtual: null,
  			scroll: null,

  			/**
  			 * Height of rows in the table
  			 *  @type     int
  			 *  @default  0
  			 */
  			row: null,

  			/**
  			 * Pixel height of the viewport
  			 *  @type     int
  			 *  @default  0
  			 */
  			viewport: null,
  			labelFactor: 1
  		},

  		topRowFloat: 0,
  		scrollDrawDiff: null,
  		loaderVisible: false,
  		forceReposition: false,
  		baseRowTop: 0,
  		baseScrollTop: 0,
  		mousedown: false,
  		lastScrollTop: 0
  	};

  	// @todo The defaults should extend a `c` property and the internal settings
  	// only held in the `s` property. At the moment they are mixed
  	this.s = $.extend( this.s, Scroller.oDefaults, opts );

  	// Workaround for row height being read from height object (see above comment)
  	this.s.heights.row = this.s.rowHeight;

  	/**
  	 * DOM elements used by the class instance
  	 * @private
  	 * @namespace
  	 *
  	 */
  	this.dom = {
  		"force":    document.createElement('div'),
  		"label":    $('<div class="dts_label">0</div>'),
  		"scroller": null,
  		"table":    null,
  		"loader":   null
  	};

  	// Attach the instance to the DataTables instance so it can be accessed in
  	// future. Don't initialise Scroller twice on the same table
  	if ( this.s.dt.oScroller ) {
  		return;
  	}

  	this.s.dt.oScroller = this;

  	/* Let's do it */
  	this.construct();
  };



  $.extend( Scroller.prototype, {
  	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  	 * Public methods - to be exposed via the DataTables API
  	 */

  	/**
  	 * Calculate and store information about how many rows are to be displayed
  	 * in the scrolling viewport, based on current dimensions in the browser's
  	 * rendering. This can be particularly useful if the table is initially
  	 * drawn in a hidden element - for example in a tab.
  	 *  @param {bool} [redraw=true] Redraw the table automatically after the recalculation, with
  	 *    the new dimensions forming the basis for the draw.
  	 *  @returns {void}
  	 */
  	measure: function ( redraw )
  	{
  		if ( this.s.autoHeight )
  		{
  			this._calcRowHeight();
  		}

  		var heights = this.s.heights;

  		if ( heights.row ) {
  			heights.viewport = this._parseHeight($(this.dom.scroller).css('max-height'));

  			this.s.viewportRows = parseInt( heights.viewport / heights.row, 10 )+1;
  			this.s.dt._iDisplayLength = this.s.viewportRows * this.s.displayBuffer;
  		}

  		var label = this.dom.label.outerHeight();
  		heights.labelFactor = (heights.viewport-label) / heights.scroll;

  		if ( redraw === undefined$1 || redraw )
  		{
  			this.s.dt.oInstance.fnDraw( false );
  		}
  	},

  	/**
  	 * Get information about current displayed record range. This corresponds to
  	 * the information usually displayed in the "Info" block of the table.
  	 *
  	 * @returns {object} info as an object:
  	 *  {
  	 *      start: {int}, // the 0-indexed record at the top of the viewport
  	 *      end:   {int}, // the 0-indexed record at the bottom of the viewport
  	 *  }
  	*/
  	pageInfo: function()
  	{
  		var 
  			dt = this.s.dt,
  			iScrollTop = this.dom.scroller.scrollTop,
  			iTotal = dt.fnRecordsDisplay(),
  			iPossibleEnd = Math.ceil(this.pixelsToRow(iScrollTop + this.s.heights.viewport, false, this.s.ani));

  		return {
  			start: Math.floor(this.pixelsToRow(iScrollTop, false, this.s.ani)),
  			end: iTotal < iPossibleEnd ? iTotal-1 : iPossibleEnd-1
  		};
  	},

  	/**
  	 * Calculate the row number that will be found at the given pixel position
  	 * (y-scroll).
  	 *
  	 * Please note that when the height of the full table exceeds 1 million
  	 * pixels, Scroller switches into a non-linear mode for the scrollbar to fit
  	 * all of the records into a finite area, but this function returns a linear
  	 * value (relative to the last non-linear positioning).
  	 *  @param {int} pixels Offset from top to calculate the row number of
  	 *  @param {int} [intParse=true] If an integer value should be returned
  	 *  @param {int} [virtual=false] Perform the calculations in the virtual domain
  	 *  @returns {int} Row index
  	 */
  	pixelsToRow: function ( pixels, intParse, virtual )
  	{
  		var diff = pixels - this.s.baseScrollTop;
  		var row = virtual ?
  			(this._domain( 'physicalToVirtual', this.s.baseScrollTop ) + diff) / this.s.heights.row :
  			( diff / this.s.heights.row ) + this.s.baseRowTop;

  		return intParse || intParse === undefined$1 ?
  			parseInt( row, 10 ) :
  			row;
  	},

  	/**
  	 * Calculate the pixel position from the top of the scrolling container for
  	 * a given row
  	 *  @param {int} iRow Row number to calculate the position of
  	 *  @returns {int} Pixels
  	 */
  	rowToPixels: function ( rowIdx, intParse, virtual )
  	{
  		var pixels;
  		var diff = rowIdx - this.s.baseRowTop;

  		if ( virtual ) {
  			pixels = this._domain( 'virtualToPhysical', this.s.baseScrollTop );
  			pixels += diff * this.s.heights.row;
  		}
  		else {
  			pixels = this.s.baseScrollTop;
  			pixels += diff * this.s.heights.row;
  		}

  		return intParse || intParse === undefined$1 ?
  			parseInt( pixels, 10 ) :
  			pixels;
  	},


  	/**
  	 * Calculate the row number that will be found at the given pixel position (y-scroll)
  	 *  @param {int} row Row index to scroll to
  	 *  @param {bool} [animate=true] Animate the transition or not
  	 *  @returns {void}
  	 */
  	scrollToRow: function ( row, animate )
  	{
  		var that = this;
  		var ani = false;
  		var px = this.rowToPixels( row );

  		// We need to know if the table will redraw or not before doing the
  		// scroll. If it will not redraw, then we need to use the currently
  		// displayed table, and scroll with the physical pixels. Otherwise, we
  		// need to calculate the table's new position from the virtual
  		// transform.
  		var preRows = ((this.s.displayBuffer-1)/2) * this.s.viewportRows;
  		var drawRow = row - preRows;
  		if ( drawRow < 0 ) {
  			drawRow = 0;
  		}

  		if ( (px > this.s.redrawBottom || px < this.s.redrawTop) && this.s.dt._iDisplayStart !== drawRow ) {
  			ani = true;
  			px = this._domain( 'virtualToPhysical', row * this.s.heights.row );

  			// If we need records outside the current draw region, but the new
  			// scrolling position is inside that (due to the non-linear nature
  			// for larger numbers of records), we need to force position update.
  			if ( this.s.redrawTop < px && px < this.s.redrawBottom ) {
  				this.s.forceReposition = true;
  				animate = false;
  			}
  		}

  		if ( animate === undefined$1 || animate )
  		{
  			this.s.ani = ani;
  			$(this.dom.scroller).animate( {
  				"scrollTop": px
  			}, function () {
  				// This needs to happen after the animation has completed and
  				// the final scroll event fired
  				setTimeout( function () {
  					that.s.ani = false;
  				}, 250 );
  			} );
  		}
  		else
  		{
  			$(this.dom.scroller).scrollTop( px );
  		}
  	},


  	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  	 * Constructor
  	 */

  	/**
  	 * Initialisation for Scroller
  	 *  @returns {void}
  	 *  @private
  	 */
  	construct: function ()
  	{
  		var that = this;
  		var dt = this.s.dtApi;

  		/* Sanity check */
  		if ( !this.s.dt.oFeatures.bPaginate ) {
  			this.s.dt.oApi._fnLog( this.s.dt, 0, 'Pagination must be enabled for Scroller' );
  			return;
  		}

  		/* Insert a div element that we can use to force the DT scrolling container to
  		 * the height that would be required if the whole table was being displayed
  		 */
  		this.dom.force.style.position = "relative";
  		this.dom.force.style.top = "0px";
  		this.dom.force.style.left = "0px";
  		this.dom.force.style.width = "1px";

  		this.dom.scroller = $('div.'+this.s.dt.oClasses.sScrollBody, this.s.dt.nTableWrapper)[0];
  		this.dom.scroller.appendChild( this.dom.force );
  		this.dom.scroller.style.position = "relative";

  		this.dom.table = $('>table', this.dom.scroller)[0];
  		this.dom.table.style.position = "absolute";
  		this.dom.table.style.top = "0px";
  		this.dom.table.style.left = "0px";

  		// Add class to 'announce' that we are a Scroller table
  		$(dt.table().container()).addClass('dts DTS');

  		// Add a 'loading' indicator
  		if ( this.s.loadingIndicator )
  		{
  			this.dom.loader = $('<div class="dataTables_processing dts_loading">'+this.s.dt.oLanguage.sLoadingRecords+'</div>')
  				.css('display', 'none');

  			$(this.dom.scroller.parentNode)
  				.css('position', 'relative')
  				.append( this.dom.loader );
  		}

  		this.dom.label.appendTo(this.dom.scroller);

  		/* Initial size calculations */
  		if ( this.s.heights.row && this.s.heights.row != 'auto' )
  		{
  			this.s.autoHeight = false;
  		}

  		// Scrolling callback to see if a page change is needed
  		this.s.ingnoreScroll = true;
  		$(this.dom.scroller).on( 'scroll.dt-scroller', function (e) {
  			that._scroll.call( that );
  		} );

  		// In iOS we catch the touchstart event in case the user tries to scroll
  		// while the display is already scrolling
  		$(this.dom.scroller).on('touchstart.dt-scroller', function () {
  			that._scroll.call( that );
  		} );

  		$(this.dom.scroller)
  			.on('mousedown.dt-scroller', function () {
  				that.s.mousedown = true;
  			})
  			.on('mouseup.dt-scroller', function () {
  				that.s.labelVisible = false;
  				that.s.mousedown = false;
  				that.dom.label.css('display', 'none');
  			});

  		// On resize, update the information element, since the number of rows shown might change
  		$(window).on( 'resize.dt-scroller', function () {
  			that.measure( false );
  			that._info();
  		} );

  		// Add a state saving parameter to the DT state saving so we can restore the exact
  		// position of the scrolling.
  		var initialStateSave = true;
  		var loadedState = dt.state.loaded();

  		dt.on( 'stateSaveParams.scroller', function ( e, settings, data ) {
  			if ( initialStateSave ) {
  				data.scroller = loadedState.scroller;
  				initialStateSave = false;
  			}
  			else {
  				// Need to used the saved position on init
  				data.scroller = {
  					topRow: that.s.topRowFloat,
  					baseScrollTop: that.s.baseScrollTop,
  					baseRowTop: that.s.baseRowTop,
  					scrollTop: that.s.lastScrollTop
  				};
  			}
  		} );

  		if ( loadedState && loadedState.scroller ) {
  			this.s.topRowFloat = loadedState.scroller.topRow;
  			this.s.baseScrollTop = loadedState.scroller.baseScrollTop;
  			this.s.baseRowTop = loadedState.scroller.baseRowTop;
  		}

  		this.measure( false );
  	
  		that.s.stateSaveThrottle = that.s.dt.oApi._fnThrottle( function () {
  			that.s.dtApi.state.save();
  		}, 500 );

  		dt.on( 'init.scroller', function () {
  			that.measure( false );

  			// Setting to `jump` will instruct _draw to calculate the scroll top
  			// position
  			that.s.scrollType = 'jump';
  			that._draw();

  			// Update the scroller when the DataTable is redrawn
  			dt.on( 'draw.scroller', function () {
  				that._draw();
  			});
  		} );

  		// Set height before the draw happens, allowing everything else to update
  		// on draw complete without worry for roder.
  		dt.on( 'preDraw.dt.scroller', function () {
  			that._scrollForce();
  		} );

  		// Destructor
  		dt.on( 'destroy.scroller', function () {
  			$(window).off( 'resize.dt-scroller' );
  			$(that.dom.scroller).off('.dt-scroller');
  			$(that.s.dt.nTable).off( '.scroller' );

  			$(that.s.dt.nTableWrapper).removeClass('DTS');
  			$('div.DTS_Loading', that.dom.scroller.parentNode).remove();

  			that.dom.table.style.position = "";
  			that.dom.table.style.top = "";
  			that.dom.table.style.left = "";
  		} );
  	},


  	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  	 * Private methods
  	 */

  	/**
  	 * Automatic calculation of table row height. This is just a little tricky here as using
  	 * initialisation DataTables has tale the table out of the document, so we need to create
  	 * a new table and insert it into the document, calculate the row height and then whip the
  	 * table out.
  	 *  @returns {void}
  	 *  @private
  	 */
  	_calcRowHeight: function ()
  	{
  		var dt = this.s.dt;
  		var origTable = dt.nTable;
  		var nTable = origTable.cloneNode( false );
  		var tbody = $('<tbody/>').appendTo( nTable );
  		var container = $(
  			'<div class="'+dt.oClasses.sWrapper+' DTS">'+
  				'<div class="'+dt.oClasses.sScrollWrapper+'">'+
  					'<div class="'+dt.oClasses.sScrollBody+'"></div>'+
  				'</div>'+
  			'</div>'
  		);

  		// Want 3 rows in the sizing table so :first-child and :last-child
  		// CSS styles don't come into play - take the size of the middle row
  		$('tbody tr:lt(4)', origTable).clone().appendTo( tbody );
          var rowsCount = $('tr', tbody).length;

          if ( rowsCount === 1 ) {
              tbody.prepend('<tr><td>&#160;</td></tr>');
              tbody.append('<tr><td>&#160;</td></tr>');
  		}
  		else {
              for (; rowsCount < 3; rowsCount++) {
                  tbody.append('<tr><td>&#160;</td></tr>');
              }
  		}
  	
  		$('div.'+dt.oClasses.sScrollBody, container).append( nTable );

  		// If initialised using `dom`, use the holding element as the insert point
  		var insertEl = this.s.dt.nHolding || origTable.parentNode;

  		if ( ! $(insertEl).is(':visible') ) {
  			insertEl = 'body';
  		}

  		// Remove form element links as they might select over others (particularly radio and checkboxes)
  		container.find("input").removeAttr("name");

  		container.appendTo( insertEl );
  		this.s.heights.row = $('tr', tbody).eq(1).outerHeight();

  		container.remove();
  	},

  	/**
  	 * Draw callback function which is fired when the DataTable is redrawn. The main function of
  	 * this method is to position the drawn table correctly the scrolling container for the rows
  	 * that is displays as a result of the scrolling position.
  	 *  @returns {void}
  	 *  @private
  	 */
  	_draw: function ()
  	{
  		var
  			that = this,
  			heights = this.s.heights,
  			iScrollTop = this.dom.scroller.scrollTop,
  			iTableHeight = $(this.s.dt.nTable).height(),
  			displayStart = this.s.dt._iDisplayStart,
  			displayLen = this.s.dt._iDisplayLength,
  			displayEnd = this.s.dt.fnRecordsDisplay();

  		// Disable the scroll event listener while we are updating the DOM
  		this.s.skip = true;

  		// If paging is reset
  		if ( (this.s.dt.bSorted || this.s.dt.bFiltered) && displayStart === 0 && !this.s.dt._drawHold ) {
  			this.s.topRowFloat = 0;
  		}

  		iScrollTop = this.s.scrollType === 'jump' ?
  			this._domain( 'virtualToPhysical', this.s.topRowFloat * heights.row ) :
  			iScrollTop;

  		// Store positional information so positional calculations can be based
  		// upon the current table draw position
  		this.s.baseScrollTop = iScrollTop;
  		this.s.baseRowTop = this.s.topRowFloat;

  		// Position the table in the virtual scroller
  		var tableTop = iScrollTop - ((this.s.topRowFloat - displayStart) * heights.row);
  		if ( displayStart === 0 ) {
  			tableTop = 0;
  		}
  		else if ( displayStart + displayLen >= displayEnd ) {
  			tableTop = heights.scroll - iTableHeight;
  		}

  		this.dom.table.style.top = tableTop+'px';

  		/* Cache some information for the scroller */
  		this.s.tableTop = tableTop;
  		this.s.tableBottom = iTableHeight + this.s.tableTop;

  		// Calculate the boundaries for where a redraw will be triggered by the
  		// scroll event listener
  		var boundaryPx = (iScrollTop - this.s.tableTop) * this.s.boundaryScale;
  		this.s.redrawTop = iScrollTop - boundaryPx;
  		this.s.redrawBottom = iScrollTop + boundaryPx > heights.scroll - heights.viewport - heights.row ?
  			heights.scroll - heights.viewport - heights.row :
  			iScrollTop + boundaryPx;

  		this.s.skip = false;

  		// Restore the scrolling position that was saved by DataTable's state
  		// saving Note that this is done on the second draw when data is Ajax
  		// sourced, and the first draw when DOM soured
  		if ( this.s.dt.oFeatures.bStateSave && this.s.dt.oLoadedState !== null &&
  			 typeof this.s.dt.oLoadedState.scroller != 'undefined' )
  		{
  			// A quirk of DataTables is that the draw callback will occur on an
  			// empty set if Ajax sourced, but not if server-side processing.
  			var ajaxSourced = (this.s.dt.sAjaxSource || that.s.dt.ajax) && ! this.s.dt.oFeatures.bServerSide ?
  				true :
  				false;

  			if ( ( ajaxSourced && this.s.dt.iDraw == 2) ||
  			     (!ajaxSourced && this.s.dt.iDraw == 1) )
  			{
  				setTimeout( function () {
  					$(that.dom.scroller).scrollTop( that.s.dt.oLoadedState.scroller.scrollTop );

  					// In order to prevent layout thrashing we need another
  					// small delay
  					setTimeout( function () {
  						that.s.ingnoreScroll = false;
  					}, 0 );
  				}, 0 );
  			}
  		}
  		else {
  			that.s.ingnoreScroll = false;
  		}

  		// Because of the order of the DT callbacks, the info update will
  		// take precedence over the one we want here. So a 'thread' break is
  		// needed.  Only add the thread break if bInfo is set
  		if ( this.s.dt.oFeatures.bInfo ) {
  			setTimeout( function () {
  				that._info.call( that );
  			}, 0 );
  		}

  		// Hide the loading indicator
  		if ( this.dom.loader && this.s.loaderVisible ) {
  			this.dom.loader.css( 'display', 'none' );
  			this.s.loaderVisible = false;
  		}
  	},

  	/**
  	 * Convert from one domain to another. The physical domain is the actual
  	 * pixel count on the screen, while the virtual is if we had browsers which
  	 * had scrolling containers of infinite height (i.e. the absolute value)
  	 *
  	 *  @param {string} dir Domain transform direction, `virtualToPhysical` or
  	 *    `physicalToVirtual` 
  	 *  @returns {number} Calculated transform
  	 *  @private
  	 */
  	_domain: function ( dir, val )
  	{
  		var heights = this.s.heights;
  		var diff;
  		var magic = 10000; // the point at which the non-linear calculations start to happen

  		// If the virtual and physical height match, then we use a linear
  		// transform between the two, allowing the scrollbar to be linear
  		if ( heights.virtual === heights.scroll ) {
  			return val;
  		}

  		// In the first 10k pixels and the last 10k pixels, we want the scrolling
  		// to be linear. After that it can be non-linear. It would be unusual for
  		// anyone to mouse wheel through that much.
  		if ( val < magic ) {
  			return val;
  		}
  		else if ( dir === 'virtualToPhysical' && val >= heights.virtual - magic ) {
  			diff = heights.virtual - val;
  			return heights.scroll - diff;
  		}
  		else if ( dir === 'physicalToVirtual' && val >= heights.scroll - magic ) {
  			diff = heights.scroll - val;
  			return heights.virtual - diff;
  		}

  		// Otherwise, we want a non-linear scrollbar to take account of the
  		// redrawing regions at the start and end of the table, otherwise these
  		// can stutter badly - on large tables 30px (for example) scroll might
  		// be hundreds of rows, so the table would be redrawing every few px at
  		// the start and end. Use a simple linear eq. to stop this, effectively
  		// causing a kink in the scrolling ratio. It does mean the scrollbar is
  		// non-linear, but with such massive data sets, the scrollbar is going
  		// to be a best guess anyway
  		var m = (heights.virtual - magic - magic) / (heights.scroll - magic - magic);
  		var c = magic - (m*magic);

  		return dir === 'virtualToPhysical' ?
  			(val-c) / m :
  			(m*val) + c;
  	},

  	/**
  	 * Update any information elements that are controlled by the DataTable based on the scrolling
  	 * viewport and what rows are visible in it. This function basically acts in the same way as
  	 * _fnUpdateInfo in DataTables, and effectively replaces that function.
  	 *  @returns {void}
  	 *  @private
  	 */
  	_info: function ()
  	{
  		if ( !this.s.dt.oFeatures.bInfo )
  		{
  			return;
  		}

  		var
  			dt = this.s.dt,
  			language = dt.oLanguage,
  			iScrollTop = this.dom.scroller.scrollTop,
  			iStart = Math.floor( this.pixelsToRow(iScrollTop, false, this.s.ani)+1 ),
  			iMax = dt.fnRecordsTotal(),
  			iTotal = dt.fnRecordsDisplay(),
  			iPossibleEnd = Math.ceil( this.pixelsToRow(iScrollTop+this.s.heights.viewport, false, this.s.ani) ),
  			iEnd = iTotal < iPossibleEnd ? iTotal : iPossibleEnd,
  			sStart = dt.fnFormatNumber( iStart ),
  			sEnd = dt.fnFormatNumber( iEnd ),
  			sMax = dt.fnFormatNumber( iMax ),
  			sTotal = dt.fnFormatNumber( iTotal ),
  			sOut;

  		if ( dt.fnRecordsDisplay() === 0 &&
  			   dt.fnRecordsDisplay() == dt.fnRecordsTotal() )
  		{
  			/* Empty record set */
  			sOut = language.sInfoEmpty+ language.sInfoPostFix;
  		}
  		else if ( dt.fnRecordsDisplay() === 0 )
  		{
  			/* Empty record set after filtering */
  			sOut = language.sInfoEmpty +' '+
  				language.sInfoFiltered.replace('_MAX_', sMax)+
  					language.sInfoPostFix;
  		}
  		else if ( dt.fnRecordsDisplay() == dt.fnRecordsTotal() )
  		{
  			/* Normal record set */
  			sOut = language.sInfo.
  					replace('_START_', sStart).
  					replace('_END_',   sEnd).
  					replace('_MAX_',   sMax).
  					replace('_TOTAL_', sTotal)+
  				language.sInfoPostFix;
  		}
  		else
  		{
  			/* Record set after filtering */
  			sOut = language.sInfo.
  					replace('_START_', sStart).
  					replace('_END_',   sEnd).
  					replace('_MAX_',   sMax).
  					replace('_TOTAL_', sTotal) +' '+
  				language.sInfoFiltered.replace(
  					'_MAX_',
  					dt.fnFormatNumber(dt.fnRecordsTotal())
  				)+
  				language.sInfoPostFix;
  		}

  		var callback = language.fnInfoCallback;
  		if ( callback ) {
  			sOut = callback.call( dt.oInstance,
  				dt, iStart, iEnd, iMax, iTotal, sOut
  			);
  		}

  		var n = dt.aanFeatures.i;
  		if ( typeof n != 'undefined' )
  		{
  			for ( var i=0, iLen=n.length ; i<iLen ; i++ )
  			{
  				$(n[i]).html( sOut );
  			}
  		}

  		// DT doesn't actually (yet) trigger this event, but it will in future
  		$(dt.nTable).triggerHandler( 'info.dt' );
  	},

  	/**
  	 * Parse CSS height property string as number
  	 *
  	 * An attempt is made to parse the string as a number. Currently supported units are 'px',
  	 * 'vh', and 'rem'. 'em' is partially supported; it works as long as the parent element's
  	 * font size matches the body element. Zero is returned for unrecognized strings.
  	 *  @param {string} cssHeight CSS height property string
  	 *  @returns {number} height
  	 *  @private
  	 */
  	_parseHeight: function(cssHeight) {
  		var height;
  		var matches = /^([+-]?(?:\d+(?:\.\d+)?|\.\d+))(px|em|rem|vh)$/.exec(cssHeight);

  		if (matches === null) {
  			return 0;
  		}

  		var value = parseFloat(matches[1]);
  		var unit = matches[2];

  		if ( unit === 'px' ) {
  			height = value;
  		}
  		else if ( unit === 'vh' ) {
  			height = ( value / 100 ) * $(window).height();
  		}
  		else if ( unit === 'rem' ) {
  			height = value * parseFloat($(':root').css('font-size'));
  		}
  		else if ( unit === 'em' ) {
  			height = value * parseFloat($('body').css('font-size'));
  		}

  		return height ?
  			height :
  			0;
  	},

  	/**
  	 * Scrolling function - fired whenever the scrolling position is changed.
  	 * This method needs to use the stored values to see if the table should be
  	 * redrawn as we are moving towards the end of the information that is
  	 * currently drawn or not. If needed, then it will redraw the table based on
  	 * the new position.
  	 *  @returns {void}
  	 *  @private
  	 */
  	_scroll: function ()
  	{
  		var
  			that = this,
  			heights = this.s.heights,
  			iScrollTop = this.dom.scroller.scrollTop,
  			iTopRow;

  		if ( this.s.skip ) {
  			return;
  		}

  		if ( this.s.ingnoreScroll ) {
  			return;
  		}

  		if ( iScrollTop === this.s.lastScrollTop ) {
  			return;
  		}

  		/* If the table has been sorted or filtered, then we use the redraw that
  		 * DataTables as done, rather than performing our own
  		 */
  		if ( this.s.dt.bFiltered || this.s.dt.bSorted ) {
  			this.s.lastScrollTop = 0;
  			return;
  		}

  		/* Update the table's information display for what is now in the viewport */
  		this._info();

  		/* We don't want to state save on every scroll event - that's heavy
  		 * handed, so use a timeout to update the state saving only when the
  		 * scrolling has finished
  		 */
  		clearTimeout( this.s.stateTO );
  		this.s.stateTO = setTimeout( function () {
  			that.s.dtApi.state.save();
  		}, 250 );

  		this.s.scrollType = Math.abs(iScrollTop - this.s.lastScrollTop) > heights.viewport ?
  			'jump' :
  			'cont';

  		this.s.topRowFloat = this.s.scrollType === 'cont' ?
  			this.pixelsToRow( iScrollTop, false, false ) :
  			this._domain( 'physicalToVirtual', iScrollTop ) / heights.row;

  		if ( this.s.topRowFloat < 0 ) {
  			this.s.topRowFloat = 0;
  		}

  		/* Check if the scroll point is outside the trigger boundary which would required
  		 * a DataTables redraw
  		 */
  		if ( this.s.forceReposition || iScrollTop < this.s.redrawTop || iScrollTop > this.s.redrawBottom ) {
  			var preRows = Math.ceil( ((this.s.displayBuffer-1)/2) * this.s.viewportRows );

  			iTopRow = parseInt(this.s.topRowFloat, 10) - preRows;
  			this.s.forceReposition = false;

  			if ( iTopRow <= 0 ) {
  				/* At the start of the table */
  				iTopRow = 0;
  			}
  			else if ( iTopRow + this.s.dt._iDisplayLength > this.s.dt.fnRecordsDisplay() ) {
  				/* At the end of the table */
  				iTopRow = this.s.dt.fnRecordsDisplay() - this.s.dt._iDisplayLength;
  				if ( iTopRow < 0 ) {
  					iTopRow = 0;
  				}
  			}
  			else if ( iTopRow % 2 !== 0 ) {
  				// For the row-striping classes (odd/even) we want only to start
  				// on evens otherwise the stripes will change between draws and
  				// look rubbish
  				iTopRow++;
  			}

  			// Store calcuated value, in case the following condition is not met, but so
  			// that the draw function will still use it.
  			this.s.targetTop = iTopRow;

  			if ( iTopRow != this.s.dt._iDisplayStart ) {
  				/* Cache the new table position for quick lookups */
  				this.s.tableTop = $(this.s.dt.nTable).offset().top;
  				this.s.tableBottom = $(this.s.dt.nTable).height() + this.s.tableTop;

  				var draw = function () {
  					that.s.dt._iDisplayStart = that.s.targetTop;
  					that.s.dt.oApi._fnDraw( that.s.dt );
  				};

  				/* Do the DataTables redraw based on the calculated start point - note that when
  				 * using server-side processing we introduce a small delay to not DoS the server...
  				 */
  				if ( this.s.dt.oFeatures.bServerSide ) {
  					this.s.forceReposition = true;

  					clearTimeout( this.s.drawTO );
  					this.s.drawTO = setTimeout( draw, this.s.serverWait );
  				}
  				else {
  					draw();
  				}

  				if ( this.dom.loader && ! this.s.loaderVisible ) {
  					this.dom.loader.css( 'display', 'block' );
  					this.s.loaderVisible = true;
  				}
  			}
  		}
  		else {
  			this.s.topRowFloat = this.pixelsToRow( iScrollTop, false, true );
  		}

  		this.s.lastScrollTop = iScrollTop;
  		this.s.stateSaveThrottle();

  		if ( this.s.scrollType === 'jump' && this.s.mousedown ) {
  			this.s.labelVisible = true;
  		}
  		if (this.s.labelVisible) {
  			this.dom.label
  				.html( this.s.dt.fnFormatNumber( parseInt( this.s.topRowFloat, 10 )+1 ) )
  				.css( 'top', iScrollTop + (iScrollTop * heights.labelFactor ) )
  				.css( 'display', 'block' );
  		}
  	},

  	/**
  	 * Force the scrolling container to have height beyond that of just the
  	 * table that has been drawn so the user can scroll the whole data set.
  	 *
  	 * Note that if the calculated required scrolling height exceeds a maximum
  	 * value (1 million pixels - hard-coded) the forcing element will be set
  	 * only to that maximum value and virtual / physical domain transforms will
  	 * be used to allow Scroller to display tables of any number of records.
  	 *  @returns {void}
  	 *  @private
  	 */
  	_scrollForce: function ()
  	{
  		var heights = this.s.heights;
  		var max = 1000000;

  		heights.virtual = heights.row * this.s.dt.fnRecordsDisplay();
  		heights.scroll = heights.virtual;

  		if ( heights.scroll > max ) {
  			heights.scroll = max;
  		}

  		// Minimum height so there is always a row visible (the 'no rows found'
  		// if reduced to zero filtering)
  		this.dom.force.style.height = heights.scroll > this.s.heights.row ?
  			heights.scroll+'px' :
  			this.s.heights.row+'px';
  	}
  } );



  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   * Statics
   * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */


  /**
   * Scroller default settings for initialisation
   *  @namespace
   *  @name Scroller.defaults
   *  @static
   */
  Scroller.defaults = {
  	/**
  	 * Scroller uses the boundary scaling factor to decide when to redraw the table - which it
  	 * typically does before you reach the end of the currently loaded data set (in order to
  	 * allow the data to look continuous to a user scrolling through the data). If given as 0
  	 * then the table will be redrawn whenever the viewport is scrolled, while 1 would not
  	 * redraw the table until the currently loaded data has all been shown. You will want
  	 * something in the middle - the default factor of 0.5 is usually suitable.
  	 *  @type     float
  	 *  @default  0.5
  	 *  @static
  	 */
  	boundaryScale: 0.5,

  	/**
  	 * The display buffer is what Scroller uses to calculate how many rows it should pre-fetch
  	 * for scrolling. Scroller automatically adjusts DataTables' display length to pre-fetch
  	 * rows that will be shown in "near scrolling" (i.e. just beyond the current display area).
  	 * The value is based upon the number of rows that can be displayed in the viewport (i.e.
  	 * a value of 1), and will apply the display range to records before before and after the
  	 * current viewport - i.e. a factor of 3 will allow Scroller to pre-fetch 1 viewport's worth
  	 * of rows before the current viewport, the current viewport's rows and 1 viewport's worth
  	 * of rows after the current viewport. Adjusting this value can be useful for ensuring
  	 * smooth scrolling based on your data set.
  	 *  @type     int
  	 *  @default  7
  	 *  @static
  	 */
  	displayBuffer: 9,

  	/**
  	 * Show (or not) the loading element in the background of the table. Note that you should
  	 * include the dataTables.scroller.css file for this to be displayed correctly.
  	 *  @type     boolean
  	 *  @default  false
  	 *  @static
  	 */
  	loadingIndicator: false,

  	/**
  	 * Scroller will attempt to automatically calculate the height of rows for it's internal
  	 * calculations. However the height that is used can be overridden using this parameter.
  	 *  @type     int|string
  	 *  @default  auto
  	 *  @static
  	 */
  	rowHeight: "auto",

  	/**
  	 * When using server-side processing, Scroller will wait a small amount of time to allow
  	 * the scrolling to finish before requesting more data from the server. This prevents
  	 * you from DoSing your own server! The wait time can be configured by this parameter.
  	 *  @type     int
  	 *  @default  200
  	 *  @static
  	 */
  	serverWait: 200
  };

  Scroller.oDefaults = Scroller.defaults;



  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   * Constants
   * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  /**
   * Scroller version
   *  @type      String
   *  @default   See code
   *  @name      Scroller.version
   *  @static
   */
  Scroller.version = "2.0.2";



  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   * Initialisation
   * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  // Attach a listener to the document which listens for DataTables initialisation
  // events so we can automatically initialise
  $(document).on( 'preInit.dt.dtscroller', function (e, settings) {
  	if ( e.namespace !== 'dt' ) {
  		return;
  	}

  	var init = settings.oInit.scroller;
  	var defaults = DataTable.defaults.scroller;

  	if ( init || defaults ) {
  		var opts = $.extend( {}, init, defaults );

  		if ( init !== false ) {
  			new Scroller( settings, opts  );
  		}
  	}
  } );


  // Attach Scroller to DataTables so it can be accessed as an 'extra'
  $.fn.dataTable.Scroller = Scroller;
  $.fn.DataTable.Scroller = Scroller;


  // DataTables 1.10 API method aliases
  var Api = $.fn.dataTable.Api;

  Api.register( 'scroller()', function () {
  	return this;
  } );

  // Undocumented and deprecated - is it actually useful at all?
  Api.register( 'scroller().rowToPixels()', function ( rowIdx, intParse, virtual ) {
  	var ctx = this.context;

  	if ( ctx.length && ctx[0].oScroller ) {
  		return ctx[0].oScroller.rowToPixels( rowIdx, intParse, virtual );
  	}
  	// undefined
  } );

  // Undocumented and deprecated - is it actually useful at all?
  Api.register( 'scroller().pixelsToRow()', function ( pixels, intParse, virtual ) {
  	var ctx = this.context;

  	if ( ctx.length && ctx[0].oScroller ) {
  		return ctx[0].oScroller.pixelsToRow( pixels, intParse, virtual );
  	}
  	// undefined
  } );

  // `scroller().scrollToRow()` is undocumented and deprecated. Use `scroller.toPosition()
  Api.register( ['scroller().scrollToRow()', 'scroller.toPosition()'], function ( idx, ani ) {
  	this.iterator( 'table', function ( ctx ) {
  		if ( ctx.oScroller ) {
  			ctx.oScroller.scrollToRow( idx, ani );
  		}
  	} );

  	return this;
  } );

  Api.register( 'row().scrollTo()', function ( ani ) {
  	var that = this;

  	this.iterator( 'row', function ( ctx, rowIdx ) {
  		if ( ctx.oScroller ) {
  			var displayIdx = that
  				.rows( { order: 'applied', search: 'applied' } )
  				.indexes()
  				.indexOf( rowIdx );

  			ctx.oScroller.scrollToRow( displayIdx, ani );
  		}
  	} );

  	return this;
  } );

  Api.register( 'scroller.measure()', function ( redraw ) {
  	this.iterator( 'table', function ( ctx ) {
  		if ( ctx.oScroller ) {
  			ctx.oScroller.measure( redraw );
  		}
  	} );

  	return this;
  } );

  Api.register( 'scroller.page()', function() {
  	var ctx = this.context;

  	if ( ctx.length && ctx[0].oScroller ) {
  		return ctx[0].oScroller.pageInfo();
  	}
  	// undefined
  } );

  return Scroller;
  }));
  });

  var scroller_bootstrap = createCommonjsModule(function (module, exports) {
  /*! Bootstrap 3 styling wrapper for Scroller
   * ©2018 SpryMedia Ltd - datatables.net/license
   */

  (function( factory ){
  	{
  		// CommonJS
  		module.exports = function (root, $) {
  			if ( ! root ) {
  				root = window;
  			}

  			if ( ! $ || ! $.fn.dataTable ) {
  				$ = dataTables_bootstrap(root, $).$;
  			}

  			if ( ! $.fn.dataTable.Scroller ) {
  				dataTables_scroller(root, $);
  			}

  			return factory( $, root, root.document );
  		};
  	}
  }(function( $, window, document, undefined$1 ) {

  return $.fn.dataTable;

  }));
  });

  var dataTables_searchPanes = createCommonjsModule(function (module, exports) {
  /*! SearchPanes 1.1.1
   * 2019-2020 SpryMedia Ltd - datatables.net/license
   */
  (function () {

      var $;
      var DataTable;
      function setJQuery(jq) {
          $ = jq;
          DataTable = jq.fn.dataTable;
      }
      var SearchPane = /** @class */ (function () {
          /**
           * Creates the panes, sets up the search function
           * @param paneSettings The settings for the searchPanes
           * @param opts The options for the default features
           * @param idx the index of the column for this pane
           * @returns {object} the pane that has been created, including the table and the index of the pane
           */
          function SearchPane(paneSettings, opts, idx, layout, panesContainer, panes) {
              var _this = this;
              if (panes === void 0) { panes = null; }
              // Check that the required version of DataTables is included
              if (!DataTable || !DataTable.versionCheck || !DataTable.versionCheck('1.10.0')) {
                  throw new Error('SearchPane requires DataTables 1.10 or newer');
              }
              // Check that Select is included
              if (!DataTable.select) {
                  throw new Error('SearchPane requires Select');
              }
              var table = new DataTable.Api(paneSettings);
              this.classes = $.extend(true, {}, SearchPane.classes);
              // Get options from user
              this.c = $.extend(true, {}, SearchPane.defaults, opts);
              this.customPaneSettings = panes;
              this.s = {
                  cascadeRegen: false,
                  clearing: false,
                  colOpts: [],
                  deselect: false,
                  displayed: false,
                  dt: table,
                  dtPane: undefined,
                  filteringActive: false,
                  index: idx,
                  indexes: [],
                  lastCascade: false,
                  lastSelect: false,
                  listSet: false,
                  name: undefined,
                  redraw: false,
                  rowData: {
                      arrayFilter: [],
                      arrayOriginal: [],
                      arrayTotals: [],
                      bins: {},
                      binsOriginal: {},
                      binsTotal: {},
                      filterMap: new Map(),
                      totalOptions: 0
                  },
                  scrollTop: 0,
                  searchFunction: undefined,
                  selectPresent: false,
                  serverSelect: [],
                  serverSelecting: false,
                  showFiltered: false,
                  tableLength: null,
                  updating: false
              };
              var rowLength = table.columns().eq(0).toArray().length;
              this.colExists = this.s.index < rowLength;
              // Add extra elements to DOM object including clear and hide buttons
              this.c.layout = layout;
              var layVal = parseInt(layout.split('-')[1], 10);
              this.dom = {
                  buttonGroup: $('<div/>').addClass(this.classes.buttonGroup),
                  clear: $('<button type="button">&#215;</button>')
                      .addClass(this.classes.dull)
                      .addClass(this.classes.paneButton)
                      .addClass(this.classes.clearButton),
                  container: $('<div/>').addClass(this.classes.container).addClass(this.classes.layout +
                      (layVal < 10 ? layout : layout.split('-')[0] + '-9')),
                  countButton: $('<button type="button"></button>')
                      .addClass(this.classes.paneButton)
                      .addClass(this.classes.countButton),
                  dtP: $('<table><thead><tr><th>' +
                      (this.colExists
                          ? $(table.column(this.colExists ? this.s.index : 0).header()).text()
                          : this.customPaneSettings.header || 'Custom Pane') + '</th><th/></tr></thead></table>'),
                  lower: $('<div/>').addClass(this.classes.subRow2).addClass(this.classes.narrowButton),
                  nameButton: $('<button type="button"></button>').addClass(this.classes.paneButton).addClass(this.classes.nameButton),
                  panesContainer: panesContainer,
                  searchBox: $('<input/>').addClass(this.classes.paneInputButton).addClass(this.classes.search),
                  searchButton: $('<button type = "button" class="' + this.classes.searchIcon + '"></button>')
                      .addClass(this.classes.paneButton),
                  searchCont: $('<div/>').addClass(this.classes.searchCont),
                  searchLabelCont: $('<div/>').addClass(this.classes.searchLabelCont),
                  topRow: $('<div/>').addClass(this.classes.topRow),
                  upper: $('<div/>').addClass(this.classes.subRow1).addClass(this.classes.narrowSearch)
              };
              this.s.displayed = false;
              table = this.s.dt;
              this.selections = [];
              this.s.colOpts = this.colExists ? this._getOptions() : this._getBonusOptions();
              var colOpts = this.s.colOpts;
              var clear = $('<button type="button">X</button>').addClass(this.classes.paneButton);
              $(clear).text(table.i18n('searchPanes.clearPane', 'X'));
              this.dom.container.addClass(colOpts.className);
              this.dom.container.addClass((this.customPaneSettings !== null && this.customPaneSettings.className !== undefined)
                  ? this.customPaneSettings.className
                  : '');
              // Set the value of name incase ordering is desired
              if (this.s.colOpts.name !== undefined) {
                  this.s.name = this.s.colOpts.name;
              }
              else if (this.customPaneSettings !== null && this.customPaneSettings.name !== undefined) {
                  this.s.name = this.customPaneSettings.name;
              }
              else {
                  this.s.name = this.colExists ?
                      $(table.column(this.s.index).header()).text() :
                      this.customPaneSettings.header || 'Custom Pane';
              }
              $(panesContainer).append(this.dom.container);
              var tableNode = table.table(0).node();
              // Custom search function for table
              this.s.searchFunction = function (settings, searchData, dataIndex, origData) {
                  // If no data has been selected then show all
                  if (_this.selections.length === 0) {
                      return true;
                  }
                  if (settings.nTable !== tableNode) {
                      return true;
                  }
                  var filter = '';
                  if (_this.colExists) {
                      // Get the current filtered data
                      filter = searchData[_this.s.index];
                      if (colOpts.orthogonal.filter !== 'filter') {
                          // get the filter value from the map
                          filter = _this.s.rowData.filterMap.get(dataIndex);
                          if (filter instanceof $.fn.dataTable.Api) {
                              filter = filter.toArray();
                          }
                      }
                  }
                  return _this._search(filter, dataIndex);
              };
              $.fn.dataTable.ext.search.push(this.s.searchFunction);
              // If the clear button for this pane is clicked clear the selections
              if (this.c.clear) {
                  $(clear).on('click', function () {
                      var searches = _this.dom.container.find(_this.classes.search);
                      searches.each(function () {
                          $(this).val('');
                          $(this).trigger('input');
                      });
                      _this.clearPane();
                  });
              }
              // Sometimes the top row of the panes containing the search box and ordering buttons appears
              //  weird if the width of the panes is lower than expected, this fixes the design.
              // Equally this may occur when the table is resized.
              table.on('draw.dtsp', function () {
                  _this._adjustTopRow();
              });
              table.on('buttons-action', function () {
                  _this._adjustTopRow();
              });
              $(window).on('resize.dtsp', DataTable.util.throttle(function () {
                  _this._adjustTopRow();
              }));
              // When column-reorder is present and the columns are moved, it is necessary to
              //  reassign all of the panes indexes to the new index of the column.
              table.on('column-reorder.dtsp', function (e, settings, details) {
                  _this.s.index = details.mapping[_this.s.index];
              });
              return this;
          }
          /**
           * In the case of a rebuild there is potential for new data to have been included or removed
           * so all of the rowData must be reset as a precaution.
           */
          SearchPane.prototype.clearData = function () {
              this.s.rowData = {
                  arrayFilter: [],
                  arrayOriginal: [],
                  arrayTotals: [],
                  bins: {},
                  binsOriginal: {},
                  binsTotal: {},
                  filterMap: new Map(),
                  totalOptions: 0
              };
          };
          /**
           * Clear the selections in the pane
           */
          SearchPane.prototype.clearPane = function () {
              // Deselect all rows which are selected and update the table and filter count.
              this.s.dtPane.rows({ selected: true }).deselect();
              this.updateTable();
              return this;
          };
          /**
           * Strips all of the SearchPanes elements from the document and turns all of the listeners for the buttons off
           */
          SearchPane.prototype.destroy = function () {
              $(this.s.dtPane).off('.dtsp');
              $(this.s.dt).off('.dtsp');
              $(this.dom.nameButton).off('.dtsp');
              $(this.dom.countButton).off('.dtsp');
              $(this.dom.clear).off('.dtsp');
              $(this.dom.searchButton).off('.dtsp');
              $(this.dom.container).remove();
              var searchIdx = $.fn.dataTable.ext.search.indexOf(this.s.searchFunction);
              while (searchIdx !== -1) {
                  $.fn.dataTable.ext.search.splice(searchIdx, 1);
                  searchIdx = $.fn.dataTable.ext.search.indexOf(this.s.searchFunction);
              }
              // If the datatables have been defined for the panes then also destroy these
              if (this.s.dtPane !== undefined) {
                  this.s.dtPane.destroy();
              }
              this.s.listSet = false;
          };
          /**
           * Updates the number of filters that have been applied in the title
           */
          SearchPane.prototype.getPaneCount = function () {
              return this.s.dtPane !== undefined ?
                  this.s.dtPane.rows({ selected: true }).data().toArray().length :
                  0;
          };
          /**
           * Rebuilds the panes from the start having deleted the old ones
           * @param? last boolean to indicate if this is the last pane a selection was made in
           * @param? dataIn data to be used in buildPane
           * @param? init Whether this is the initial draw or not
           * @param? maintainSelection Whether the current selections are to be maintained over rebuild
           */
          SearchPane.prototype.rebuildPane = function (last, dataIn, init, maintainSelection) {
              if (last === void 0) { last = false; }
              if (dataIn === void 0) { dataIn = null; }
              if (init === void 0) { init = null; }
              if (maintainSelection === void 0) { maintainSelection = false; }
              this.clearData();
              var selectedRows = [];
              this.s.serverSelect = [];
              var prevEl = null;
              // When rebuilding strip all of the HTML Elements out of the container and start from scratch
              if (this.s.dtPane !== undefined) {
                  if (maintainSelection) {
                      if (!this.s.dt.page.info().serverSide) {
                          selectedRows = this.s.dtPane.rows({ selected: true }).data().toArray();
                      }
                      else {
                          this.s.serverSelect = this.s.dtPane.rows({ selected: true }).data().toArray();
                      }
                  }
                  this.s.dtPane.clear().destroy();
                  prevEl = $(this.dom.container).prev();
                  this.destroy();
                  this.s.dtPane = undefined;
                  $.fn.dataTable.ext.search.push(this.s.searchFunction);
              }
              this.dom.container.removeClass(this.classes.hidden);
              this.s.displayed = false;
              this._buildPane(!this.s.dt.page.info().serverSide ?
                  selectedRows :
                  this.s.serverSelect, last, dataIn, init, prevEl);
              return this;
          };
          /**
           * removes the pane from the page and sets the displayed property to false.
           */
          SearchPane.prototype.removePane = function () {
              this.s.displayed = false;
              $(this.dom.container).hide();
          };
          /**
           * Sets the cascadeRegen property of the pane. Accessible from above because as SearchPanes.ts deals with the rebuilds.
           * @param val the boolean value that the cascadeRegen property is to be set to
           */
          SearchPane.prototype.setCascadeRegen = function (val) {
              this.s.cascadeRegen = val;
          };
          /**
           * This function allows the clearing property to be assigned. This is used when implementing cascadePane.
           * In setting this to true for the clearing of the panes selection on the deselects it forces the pane to
           * repopulate from the entire dataset not just the displayed values.
           * @param val the boolean value which the clearing property is to be assigned
           */
          SearchPane.prototype.setClear = function (val) {
              this.s.clearing = val;
          };
          /**
           * Updates the values of all of the panes
           * @param draw whether this has been triggered by a draw event or not
           */
          SearchPane.prototype.updatePane = function (draw) {
              if (draw === void 0) { draw = false; }
              this.s.updating = true;
              this._updateCommon(draw);
              this.s.updating = false;
          };
          /**
           * Updates the panes if one of the options to do so has been set to true
           *   rather than the filtered message when using viewTotal.
           */
          SearchPane.prototype.updateTable = function () {
              var selectedRows = this.s.dtPane.rows({ selected: true }).data().toArray();
              this.selections = selectedRows;
              this._searchExtras();
              // If either of the options that effect how the panes are displayed are selected then update the Panes
              if (this.c.cascadePanes || this.c.viewTotal) {
                  this.updatePane();
              }
          };
          /**
           * Sets the listeners for the pane.
           *
           * Having it in it's own function makes it easier to only set them once
           */
          SearchPane.prototype._setListeners = function () {
              var _this = this;
              var rowData = this.s.rowData;
              var t0;
              // When an item is selected on the pane, add these to the array which holds selected items.
              // Custom search will perform.
              this.s.dtPane.on('select.dtsp', function () {
                  if (_this.s.dt.page.info().serverSide && !_this.s.updating) {
                      if (!_this.s.serverSelecting) {
                          _this.s.serverSelect = _this.s.dtPane.rows({ selected: true }).data().toArray();
                          _this.s.scrollTop = $(_this.s.dtPane.table().node()).parent()[0].scrollTop;
                          _this.s.selectPresent = true;
                          _this.s.dt.draw(false);
                      }
                  }
                  else {
                      clearTimeout(t0);
                      $(_this.dom.clear).removeClass(_this.classes.dull);
                      _this.s.selectPresent = true;
                      if (!_this.s.updating) {
                          _this._makeSelection();
                      }
                      _this.s.selectPresent = false;
                  }
              });
              // When an item is deselected on the pane, re add the currently selected items to the array
              // which holds selected items. Custom search will be performed.
              this.s.dtPane.on('deselect.dtsp', function () {
                  t0 = setTimeout(function () {
                      if (_this.s.dt.page.info().serverSide && !_this.s.updating) {
                          if (!_this.s.serverSelecting) {
                              _this.s.serverSelect = _this.s.dtPane.rows({ selected: true }).data().toArray();
                              _this.s.deselect = true;
                              _this.s.dt.draw(false);
                          }
                      }
                      else {
                          _this.s.deselect = true;
                          if (_this.s.dtPane.rows({ selected: true }).data().toArray().length === 0) {
                              $(_this.dom.clear).addClass(_this.classes.dull);
                          }
                          _this._makeSelection();
                          _this.s.deselect = false;
                          _this.s.dt.state.save();
                      }
                  }, 50);
              });
              // When saving the state store all of the selected rows for preselection next time around
              this.s.dt.on('stateSaveParams.dtsp', function (e, settings, data) {
                  // If the data being passed in is empty then a state clear must have occured so clear the panes state as well
                  if ($.isEmptyObject(data)) {
                      _this.s.dtPane.state.clear();
                      return;
                  }
                  var selected = [];
                  var searchTerm;
                  var order;
                  var bins;
                  var arrayFilter;
                  // Get all of the data needed for the state save from the pane
                  if (_this.s.dtPane !== undefined) {
                      selected = _this.s.dtPane.rows({ selected: true }).data().map(function (item) { return item.filter.toString(); }).toArray();
                      searchTerm = $(_this.dom.searchBox).val();
                      order = _this.s.dtPane.order();
                      bins = rowData.binsOriginal;
                      arrayFilter = rowData.arrayOriginal;
                  }
                  if (data.searchPanes === undefined) {
                      data.searchPanes = {};
                  }
                  if (data.searchPanes.panes === undefined) {
                      data.searchPanes.panes = [];
                  }
                  // Add the panes data to the state object
                  data.searchPanes.panes.push({
                      arrayFilter: arrayFilter,
                      bins: bins,
                      id: _this.s.index,
                      order: order,
                      searchTerm: searchTerm,
                      selected: selected
                  });
              });
              this.s.dtPane.on('user-select.dtsp', function (e, _dt, type, cell, originalEvent) {
                  originalEvent.stopPropagation();
              });
              this.s.dtPane.on('draw.dtsp', function () {
                  _this._adjustTopRow();
              });
              // When the button to order by the name of the options is clicked then
              //  change the ordering to whatever it isn't currently
              $(this.dom.nameButton).on('click.dtsp', function () {
                  var currentOrder = _this.s.dtPane.order()[0][1];
                  _this.s.dtPane.order([0, currentOrder === 'asc' ? 'desc' : 'asc']).draw();
                  _this.s.dt.state.save();
              });
              // When the button to order by the number of entries in the column is clicked then
              //  change the ordering to whatever it isn't currently
              $(this.dom.countButton).on('click.dtsp', function () {
                  var currentOrder = _this.s.dtPane.order()[0][1];
                  _this.s.dtPane.order([1, currentOrder === 'asc' ? 'desc' : 'asc']).draw();
                  _this.s.dt.state.save();
              });
              // When the clear button is clicked reset the pane
              $(this.dom.clear).on('click.dtsp', function () {
                  var searches = _this.dom.container.find('.' + _this.classes.search);
                  searches.each(function () {
                      // set the value of the search box to be an empty string and then search on that, effectively reseting
                      $(this).val('');
                      $(this).trigger('input');
                  });
                  _this.clearPane();
              });
              // When the search button is clicked then draw focus to the search box
              $(this.dom.searchButton).on('click.dtsp', function () {
                  $(_this.dom.searchBox).focus();
              });
              // When a character is inputted into the searchbox search the pane for matching values.
              // Doing it this way means that no button has to be clicked to trigger a search, it is done asynchronously
              $(this.dom.searchBox).on('input.dtsp', function () {
                  _this.s.dtPane.search($(_this.dom.searchBox).val()).draw();
                  _this.s.dt.state.save();
              });
              // Make sure to save the state once the pane has been built
              this.s.dt.state.save();
              return true;
          };
          /**
           * Takes in potentially undetected rows and adds them to the array if they are not yet featured
           * @param filter the filter value of the potential row
           * @param display the display value of the potential row
           * @param sort the sort value of the potential row
           * @param type the type value of the potential row
           * @param arrayFilter the array to be populated
           * @param bins the bins to be populated
           */
          SearchPane.prototype._addOption = function (filter, display, sort, type, arrayFilter, bins) {
              // If the filter is an array then take a note of this, and add the elements to the arrayFilter array
              if (Array.isArray(filter) || filter instanceof DataTable.Api) {
                  // Convert to an array so that we can work with it
                  if (filter instanceof DataTable.Api) {
                      filter = filter.toArray();
                      display = display.toArray();
                  }
                  if (filter.length === display.length) {
                      for (var i = 0; i < filter.length; i++) {
                          // If we haven't seen this row before add it
                          if (!bins[filter[i]]) {
                              bins[filter[i]] = 1;
                              arrayFilter.push({
                                  display: display[i],
                                  filter: filter[i],
                                  sort: sort[i],
                                  type: type[i]
                              });
                          }
                          // Otherwise just increment the count
                          else {
                              bins[filter[i]]++;
                          }
                          this.s.rowData.totalOptions++;
                      }
                      return;
                  }
                  else {
                      throw new Error('display and filter not the same length');
                  }
              }
              // If the values were affected by othogonal data and are not an array then check if it is already present
              else if (typeof this.s.colOpts.orthogonal === 'string') {
                  if (!bins[filter]) {
                      bins[filter] = 1;
                      arrayFilter.push({
                          display: display,
                          filter: filter,
                          sort: sort,
                          type: type
                      });
                      this.s.rowData.totalOptions++;
                  }
                  else {
                      bins[filter]++;
                      this.s.rowData.totalOptions++;
                      return;
                  }
              }
              // Otherwise we must just be adding an option
              else {
                  arrayFilter.push({
                      display: display,
                      filter: filter,
                      sort: sort,
                      type: type
                  });
              }
          };
          /**
           * Adds a row to the panes table
           * @param display the value to be displayed to the user
           * @param filter the value to be filtered on when searchpanes is implemented
           * @param shown the number of rows in the table that are currently visible matching this criteria
           * @param total the total number of rows in the table that match this criteria
           * @param sort the value to be sorted in the pane table
           * @param type the value of which the type is to be derived from
           */
          SearchPane.prototype._addRow = function (display, filter, shown, total, sort, type) {
              var index;
              for (var _i = 0, _a = this.s.indexes; _i < _a.length; _i++) {
                  var entry = _a[_i];
                  if (entry.filter === filter) {
                      index = entry.index;
                  }
              }
              if (index === undefined) {
                  index = this.s.indexes.length;
                  this.s.indexes.push({ filter: filter, index: index });
              }
              return this.s.dtPane.row.add({
                  display: display !== '' ? display : this.c.emptyMessage,
                  filter: filter,
                  index: index,
                  shown: shown,
                  sort: sort !== '' ? sort : this.c.emptyMessage,
                  total: total,
                  type: type
              });
          };
          /**
           * Adjusts the layout of the top row when the screen is resized
           */
          SearchPane.prototype._adjustTopRow = function () {
              var subContainers = this.dom.container.find('.' + this.classes.subRowsContainer);
              var subRow1 = this.dom.container.find('.dtsp-subRow1');
              var subRow2 = this.dom.container.find('.dtsp-subRow2');
              var topRow = this.dom.container.find('.' + this.classes.topRow);
              // If the width is 0 then it is safe to assume that the pane has not yet been displayed.
              //  Even if it has, if the width is 0 it won't make a difference if it has the narrow class or not
              if (($(subContainers[0]).width() < 252 || $(topRow[0]).width() < 252) && $(subContainers[0]).width() !== 0) {
                  $(subContainers[0]).addClass(this.classes.narrow);
                  $(subRow1[0]).addClass(this.classes.narrowSub).removeClass(this.classes.narrowSearch);
                  $(subRow2[0]).addClass(this.classes.narrowSub).removeClass(this.classes.narrowButton);
              }
              else {
                  $(subContainers[0]).removeClass(this.classes.narrow);
                  $(subRow1[0]).removeClass(this.classes.narrowSub).addClass(this.classes.narrowSearch);
                  $(subRow2[0]).removeClass(this.classes.narrowSub).addClass(this.classes.narrowButton);
              }
          };
          /**
           * Method to construct the actual pane.
           * @param selectedRows previously selected Rows to be reselected
           * @last boolean to indicate whether this pane was the last one to have a selection made
           */
          SearchPane.prototype._buildPane = function (selectedRows, last, dataIn, init, prevEl) {
              var _this = this;
              if (selectedRows === void 0) { selectedRows = []; }
              if (last === void 0) { last = false; }
              if (dataIn === void 0) { dataIn = null; }
              if (init === void 0) { init = null; }
              if (prevEl === void 0) { prevEl = null; }
              // Aliases
              this.selections = [];
              var table = this.s.dt;
              var column = table.column(this.colExists ? this.s.index : 0);
              var colOpts = this.s.colOpts;
              var rowData = this.s.rowData;
              // Other Variables
              var countMessage = table.i18n('searchPanes.count', '{total}');
              var filteredMessage = table.i18n('searchPanes.countFiltered', '{shown} ({total})');
              var loadedFilter = table.state.loaded();
              // If the listeners have not been set yet then using the latest state may result in funny errors
              if (this.s.listSet) {
                  loadedFilter = table.state();
              }
              // If it is not a custom pane in place
              if (this.colExists) {
                  var idx = -1;
                  if (loadedFilter && loadedFilter.searchPanes && loadedFilter.searchPanes.panes) {
                      for (var i = 0; i < loadedFilter.searchPanes.panes.length; i++) {
                          if (loadedFilter.searchPanes.panes[i].id === this.s.index) {
                              idx = i;
                              break;
                          }
                      }
                  }
                  // Perform checks that do not require populate pane to run
                  if ((colOpts.show === false
                      || (colOpts.show !== undefined && colOpts.show !== true)) &&
                      idx === -1) {
                      this.dom.container.addClass(this.classes.hidden);
                      this.s.displayed = false;
                      return false;
                  }
                  else if (colOpts.show === true || idx !== -1) {
                      this.s.displayed = true;
                  }
                  if (!this.s.dt.page.info().serverSide) {
                      // Only run populatePane if the data has not been collected yet
                      if (rowData.arrayFilter.length === 0) {
                          this._populatePane(last);
                          this.s.rowData.totalOptions = 0;
                          this._detailsPane();
                          if (loadedFilter && loadedFilter.searchPanes && loadedFilter.searchPanes.panes) {
                              // If the index is not found then no data has been added to the state for this pane,
                              //  which will only occur if it has previously failed to meet the criteria to be
                              //  displayed, therefore we can just hide it again here
                              if (idx !== -1) {
                                  rowData.binsOriginal = loadedFilter.searchPanes.panes[idx].bins;
                                  rowData.arrayOriginal = loadedFilter.searchPanes.panes[idx].arrayFilter;
                              }
                              else {
                                  this.dom.container.addClass(this.classes.hidden);
                                  this.s.displayed = false;
                                  return;
                              }
                          }
                          else {
                              rowData.arrayOriginal = rowData.arrayTotals;
                              rowData.binsOriginal = rowData.binsTotal;
                          }
                      }
                      var binLength = Object.keys(rowData.binsOriginal).length;
                      var uniqueRatio = this._uniqueRatio(binLength, table.rows()[0].length);
                      // Don't show the pane if there isn't enough variance in the data, or there is only 1 entry for that pane
                      if (this.s.displayed === false && ((colOpts.show === undefined && colOpts.threshold === null ?
                          uniqueRatio > this.c.threshold :
                          uniqueRatio > colOpts.threshold)
                          || (colOpts.show !== true && binLength <= 1))) {
                          this.dom.container.addClass(this.classes.hidden);
                          this.s.displayed = false;
                          return;
                      }
                      // If the option viewTotal is true then find
                      // the total count for the whole table to display alongside the displayed count
                      if (this.c.viewTotal && rowData.arrayTotals.length === 0) {
                          this.s.rowData.totalOptions = 0;
                          this._detailsPane();
                      }
                      else {
                          rowData.binsTotal = rowData.bins;
                      }
                      this.dom.container.addClass(this.classes.show);
                      this.s.displayed = true;
                  }
                  else if (dataIn !== null) {
                      if (dataIn.tableLength !== undefined) {
                          this.s.tableLength = dataIn.tableLength;
                          this.s.rowData.totalOptions = this.s.tableLength;
                      }
                      else if (this.s.tableLength === null || table.rows()[0].length > this.s.tableLength) {
                          this.s.tableLength = table.rows()[0].length;
                          this.s.rowData.totalOptions = this.s.tableLength;
                      }
                      var colTitle = table.column(this.s.index).dataSrc();
                      if (dataIn[colTitle] !== undefined) {
                          for (var _i = 0, _a = dataIn[colTitle]; _i < _a.length; _i++) {
                              var dataPoint = _a[_i];
                              this.s.rowData.arrayFilter.push({
                                  display: dataPoint.label,
                                  filter: dataPoint.value,
                                  sort: dataPoint.label,
                                  type: dataPoint.label
                              });
                              this.s.rowData.bins[dataPoint.value] = this.c.viewTotal || this.c.cascadePanes ?
                                  dataPoint.count :
                                  dataPoint.total;
                              this.s.rowData.binsTotal[dataPoint.value] = dataPoint.total;
                          }
                      }
                      var binLength = Object.keys(rowData.binsTotal).length;
                      var uniqueRatio = this._uniqueRatio(binLength, this.s.tableLength);
                      // Don't show the pane if there isn't enough variance in the data, or there is only 1 entry for that pane
                      if (this.s.displayed === false && ((colOpts.show === undefined && colOpts.threshold === null ?
                          uniqueRatio > this.c.threshold :
                          uniqueRatio > colOpts.threshold)
                          || (colOpts.show !== true && binLength <= 1))) {
                          this.dom.container.addClass(this.classes.hidden);
                          this.s.displayed = false;
                          return;
                      }
                      this.s.displayed = true;
                  }
              }
              else {
                  this.s.displayed = true;
              }
              // If the variance is accceptable then display the search pane
              this._displayPane();
              if (!this.s.listSet) {
                  // Here, when the state is loaded if the data object on the original table is empty,
                  //  then a state.clear() must have occurred, so delete all of the panes tables state objects too.
                  this.dom.dtP.on('stateLoadParams.dt', function (e, settings, data) {
                      if ($.isEmptyObject(table.state.loaded())) {
                          $.each(data, function (index, value) {
                              delete data[index];
                          });
                      }
                  });
              }
              // Add the container to the document in its original location
              if (prevEl !== null && $(this.dom.panesContainer).has(prevEl).length > 0) {
                  $(this.dom.panesContainer).insertAfter(prevEl);
              }
              else {
                  $(this.dom.panesContainer).prepend(this.dom.container);
              }
              // Declare the datatable for the pane
              var errMode = $.fn.dataTable.ext.errMode;
              $.fn.dataTable.ext.errMode = 'none';
              var haveScroller = DataTable.Scroller;
              this.s.dtPane = $(this.dom.dtP).DataTable($.extend(true, {
                  columnDefs: [
                      {
                          className: 'dtsp-nameColumn',
                          data: 'display',
                          render: function (data, type, row) {
                              if (type === 'sort') {
                                  return row.sort;
                              }
                              else if (type === 'type') {
                                  return row.type;
                              }
                              var message;
                              (_this.s.filteringActive || _this.s.showFiltered) && _this.c.viewTotal
                                  ? message = filteredMessage.replace(/{total}/, row.total)
                                  : message = countMessage.replace(/{total}/, row.total);
                              message = message.replace(/{shown}/, row.shown);
                              while (message.indexOf('{total}') !== -1) {
                                  message = message.replace(/{total}/, row.total);
                              }
                              while (message.indexOf('{shown}') !== -1) {
                                  message = message.replace(/{shown}/, row.shown);
                              }
                              // We are displaying the count in the same columne as the name of the search option.
                              // This is so that there is not need to call columns.adjust(), which in turn speeds up the code
                              var displayMessage = '';
                              var pill = '<span class="' + _this.classes.pill + '">' + message + '</span>';
                              if (_this.c.hideCount || colOpts.hideCount) {
                                  pill = '';
                              }
                              if (!_this.c.dataLength) {
                                  displayMessage = '<span class="' + _this.classes.name + '">' + data + '</span>' + pill;
                              }
                              else if (data !== null && data.length > _this.c.dataLength) {
                                  displayMessage = '<span title="' + data + '" class="' + _this.classes.name + '">'
                                      + data.substr(0, _this.c.dataLength) + '...'
                                      + '</span>'
                                      + pill;
                              }
                              else {
                                  displayMessage = '<span class="' + _this.classes.name + '">' + data + '</span>' + pill;
                              }
                              return displayMessage;
                          },
                          targets: 0,
                          // Accessing the private datatables property to set type based on the original table.
                          // This is null if not defined by the user, meaning that automatic type detection would take place
                          type: table.settings()[0].aoColumns[this.s.index] !== undefined ?
                              table.settings()[0].aoColumns[this.s.index]._sManualType :
                              null
                      },
                      {
                          className: 'dtsp-countColumn ' + this.classes.badgePill,
                          data: 'total',
                          targets: 1,
                          visible: false
                      }
                  ],
                  deferRender: true,
                  dom: 't',
                  info: false,
                  paging: haveScroller ? true : false,
                  scrollY: '200px',
                  scroller: haveScroller ? true : false,
                  select: true,
                  stateSave: table.settings()[0].oFeatures.bStateSave ? true : false
              }, this.c.dtOpts, colOpts !== undefined ? colOpts.dtOpts : {}, (this.customPaneSettings !== null && this.customPaneSettings.dtOpts !== undefined)
                  ? this.customPaneSettings.dtOpts
                  : {}));
              $(this.dom.dtP).addClass(this.classes.table);
              // This is hacky but necessary for when datatables is generating the column titles automatically
              $(this.dom.searchBox).attr('placeholder', colOpts.header !== undefined
                  ? colOpts.header
                  : this.colExists
                      ? table.settings()[0].aoColumns[this.s.index].sTitle
                      : this.customPaneSettings.header || 'Custom Pane');
              // As the pane table is not in the document yet we must initialise select ourselves
              $.fn.dataTable.select.init(this.s.dtPane);
              $.fn.dataTable.ext.errMode = errMode;
              // If it is not a custom pane
              if (this.colExists) {
                  // On initialisation, do we need to set a filtering value from a
                  // saved state or init option?
                  var search = column.search();
                  search = search ? search.substr(1, search.length - 2).split('|') : [];
                  // Count the number of empty cells
                  var count_1 = 0;
                  rowData.arrayFilter.forEach(function (element) {
                      if (element.filter === '') {
                          count_1++;
                      }
                  });
                  // Add all of the search options to the pane
                  for (var i = 0, ien = rowData.arrayFilter.length; i < ien; i++) {
                      var selected = false;
                      for (var _b = 0, _c = this.s.serverSelect; _b < _c.length; _b++) {
                          var option = _c[_b];
                          if (option.filter === rowData.arrayFilter[i].filter) {
                              selected = true;
                          }
                      }
                      if (this.s.dt.page.info().serverSide &&
                          (!this.c.cascadePanes ||
                              (this.c.cascadePanes && rowData.bins[rowData.arrayFilter[i].filter] !== 0) ||
                              (this.c.cascadePanes && init !== null) ||
                              selected)) {
                          var row = this._addRow(rowData.arrayFilter[i].display, rowData.arrayFilter[i].filter, init ?
                              rowData.binsTotal[rowData.arrayFilter[i].filter] :
                              rowData.bins[rowData.arrayFilter[i].filter], this.c.viewTotal || init
                              ? String(rowData.binsTotal[rowData.arrayFilter[i].filter])
                              : rowData.bins[rowData.arrayFilter[i].filter], rowData.arrayFilter[i].sort, rowData.arrayFilter[i].type);
                          if (colOpts.preSelect !== undefined && colOpts.preSelect.indexOf(rowData.arrayFilter[i].filter) !== -1) {
                              row.select();
                          }
                          for (var _d = 0, _e = this.s.serverSelect; _d < _e.length; _d++) {
                              var option = _e[_d];
                              if (option.filter === rowData.arrayFilter[i].filter) {
                                  this.s.serverSelecting = true;
                                  row.select();
                                  this.s.serverSelecting = false;
                              }
                          }
                      }
                      else if (!this.s.dt.page.info().serverSide &&
                          rowData.arrayFilter[i] &&
                          (rowData.bins[rowData.arrayFilter[i].filter] !== undefined || !this.c.cascadePanes)) {
                          var row = this._addRow(rowData.arrayFilter[i].display, rowData.arrayFilter[i].filter, rowData.bins[rowData.arrayFilter[i].filter], rowData.binsTotal[rowData.arrayFilter[i].filter], rowData.arrayFilter[i].sort, rowData.arrayFilter[i].type);
                          if (colOpts.preSelect !== undefined && colOpts.preSelect.indexOf(rowData.arrayFilter[i].filter) !== -1) {
                              row.select();
                          }
                      }
                      else if (!this.s.dt.page.info().serverSide) {
                          this._addRow(this.c.emptyMessage, count_1, count_1, this.c.emptyMessage, this.c.emptyMessage, this.c.emptyMessage);
                      }
                  }
              }
              // If there are custom options set or it is a custom pane then get them
              if (colOpts.options !== undefined ||
                  (this.customPaneSettings !== null && this.customPaneSettings.options !== undefined)) {
                  this._getComparisonRows();
              }
              DataTable.select.init(this.s.dtPane);
              // Display the pane
              this.s.dtPane.draw();
              this._adjustTopRow();
              if (!this.s.listSet) {
                  this._setListeners();
                  this.s.listSet = true;
              }
              for (var _f = 0, selectedRows_1 = selectedRows; _f < selectedRows_1.length; _f++) {
                  var selection = selectedRows_1[_f];
                  if (selection !== undefined) {
                      for (var _g = 0, _h = this.s.dtPane.rows().indexes().toArray(); _g < _h.length; _g++) {
                          var row = _h[_g];
                          if (this.s.dtPane.row(row).data() !== undefined && selection.filter === this.s.dtPane.row(row).data().filter) {
                              // If this is happening when serverSide processing is happening then different behaviour is needed
                              if (this.s.dt.page.info().serverSide) {
                                  this.s.serverSelecting = true;
                                  this.s.dtPane.row(row).select();
                                  this.s.serverSelecting = false;
                              }
                              else {
                                  this.s.dtPane.row(row).select();
                              }
                          }
                      }
                  }
              }
              this.s.dt.draw();
              // Reload the selection, searchbox entry and ordering from the previous state
              if (loadedFilter && loadedFilter.searchPanes && loadedFilter.searchPanes.panes) {
                  if (!this.c.cascadePanes) {
                      this._reloadSelect(loadedFilter);
                  }
                  for (var _j = 0, _k = loadedFilter.searchPanes.panes; _j < _k.length; _j++) {
                      var pane = _k[_j];
                      if (pane.id === this.s.index) {
                          $(this.dom.searchBox).val(pane.searchTerm);
                          $(this.dom.searchBox).trigger('input');
                          this.s.dtPane.order(pane.order).draw();
                      }
                  }
              }
              // Make sure to save the state once the pane has been built
              this.s.dt.state.save();
              return true;
          };
          /**
           * Update the array which holds the display and filter values for the table
           */
          SearchPane.prototype._detailsPane = function () {
              var _this = this;
              var table = this.s.dt;
              this.s.rowData.arrayTotals = [];
              this.s.rowData.binsTotal = {};
              var settings = this.s.dt.settings()[0];
              table.rows().every(function (rowIdx) {
                  _this._populatePaneArray(rowIdx, _this.s.rowData.arrayTotals, settings, _this.s.rowData.binsTotal);
              });
          };
          /**
           * Appends all of the HTML elements to their relevant parent Elements
           */
          SearchPane.prototype._displayPane = function () {
              var container = this.dom.container;
              var colOpts = this.s.colOpts;
              var layVal = parseInt(this.c.layout.split('-')[1], 10);
              //  Empty everything to start again
              $(this.dom.topRow).empty();
              $(this.dom.dtP).empty();
              $(this.dom.topRow).addClass(this.classes.topRow);
              // If there are more than 3 columns defined then make there be a smaller gap between the panes
              if (layVal > 3) {
                  $(this.dom.container).addClass(this.classes.smallGap);
              }
              $(this.dom.topRow).addClass(this.classes.subRowsContainer);
              $(this.dom.upper).appendTo(this.dom.topRow);
              $(this.dom.lower).appendTo(this.dom.topRow);
              $(this.dom.searchCont).appendTo(this.dom.upper);
              $(this.dom.buttonGroup).appendTo(this.dom.lower);
              // If no selections have been made in the pane then disable the clear button
              if (this.c.dtOpts.searching === false ||
                  (colOpts.dtOpts !== undefined &&
                      colOpts.dtOpts.searching === false) ||
                  (!this.c.controls || !colOpts.controls) ||
                  (this.customPaneSettings !== null &&
                      this.customPaneSettings.dtOpts !== undefined &&
                      this.customPaneSettings.dtOpts.searching !== undefined &&
                      !this.customPaneSettings.dtOpts.searching)) {
                  $(this.dom.searchBox).attr('disabled', 'disabled')
                      .removeClass(this.classes.paneInputButton)
                      .addClass(this.classes.disabledButton);
              }
              $(this.dom.searchBox).appendTo(this.dom.searchCont);
              // Create the contents of the searchCont div. Worth noting that this function will change when using semantic ui
              this._searchContSetup();
              // If the clear button is allowed to show then display it
              if (this.c.clear && this.c.controls && colOpts.controls) {
                  $(this.dom.clear).appendTo(this.dom.buttonGroup);
              }
              if (this.c.orderable && colOpts.orderable && this.c.controls && colOpts.controls) {
                  $(this.dom.nameButton).appendTo(this.dom.buttonGroup);
              }
              // If the count column is hidden then don't display the ordering button for it
              if (!this.c.hideCount &&
                  !colOpts.hideCount &&
                  this.c.orderable &&
                  colOpts.orderable &&
                  this.c.controls &&
                  colOpts.controls) {
                  $(this.dom.countButton).appendTo(this.dom.buttonGroup);
              }
              $(this.dom.topRow).prependTo(this.dom.container);
              $(container).append(this.dom.dtP);
              $(container).show();
          };
          /**
           * Gets the options for the row for the customPanes
           * @returns {object} The options for the row extended to include the options from the user.
           */
          SearchPane.prototype._getBonusOptions = function () {
              // We need to reset the thresholds as if they have a value in colOpts then that value will be used
              var defaultMutator = {
                  orthogonal: {
                      threshold: null
                  },
                  threshold: null
              };
              return $.extend(true, {}, SearchPane.defaults, defaultMutator, this.c !== undefined ? this.c : {});
          };
          /**
           * Adds the custom options to the pane
           * @returns {Array} Returns the array of rows which have been added to the pane
           */
          SearchPane.prototype._getComparisonRows = function () {
              var colOpts = this.s.colOpts;
              // Find the appropriate options depending on whether this is a pane for a specific column or a custom pane
              var options = colOpts.options !== undefined
                  ? colOpts.options
                  : this.customPaneSettings !== null && this.customPaneSettings.options !== undefined
                      ? this.customPaneSettings.options
                      : undefined;
              if (options === undefined) {
                  return;
              }
              var tableVals = this.s.dt.rows({ search: 'applied' }).data().toArray();
              var appRows = this.s.dt.rows({ search: 'applied' });
              var tableValsTotal = this.s.dt.rows().data().toArray();
              var allRows = this.s.dt.rows();
              var rows = [];
              // Clear all of the other rows from the pane, only custom options are to be displayed when they are defined
              this.s.dtPane.clear();
              for (var _i = 0, options_1 = options; _i < options_1.length; _i++) {
                  var comp = options_1[_i];
                  // Initialise the object which is to be placed in the row
                  var insert = comp.label !== '' ? comp.label : this.c.emptyMessage;
                  var comparisonObj = {
                      display: insert,
                      filter: typeof comp.value === 'function' ? comp.value : [],
                      shown: 0,
                      sort: insert,
                      total: 0,
                      type: insert
                  };
                  // If a custom function is in place
                  if (typeof comp.value === 'function') {
                      // Count the number of times the function evaluates to true for the data currently being displayed
                      for (var tVal = 0; tVal < tableVals.length; tVal++) {
                          if (comp.value.call(this.s.dt, tableVals[tVal], appRows[0][tVal])) {
                              comparisonObj.shown++;
                          }
                      }
                      // Count the number of times the function evaluates to true for the original data in the Table
                      for (var i = 0; i < tableValsTotal.length; i++) {
                          if (comp.value.call(this.s.dt, tableValsTotal[i], allRows[0][i])) {
                              comparisonObj.total++;
                          }
                      }
                      // Update the comparisonObj
                      if (typeof comparisonObj.filter !== 'function') {
                          comparisonObj.filter.push(comp.filter);
                      }
                  }
                  // If cascadePanes is not active or if it is and the comparisonObj should be shown then add it to the pane
                  if (!this.c.cascadePanes || (this.c.cascadePanes && comparisonObj.shown !== 0)) {
                      rows.push(this._addRow(comparisonObj.display, comparisonObj.filter, comparisonObj.shown, comparisonObj.total, comparisonObj.sort, comparisonObj.type));
                  }
              }
              return rows;
          };
          /**
           * Gets the options for the row for the customPanes
           * @returns {object} The options for the row extended to include the options from the user.
           */
          SearchPane.prototype._getOptions = function () {
              var table = this.s.dt;
              // We need to reset the thresholds as if they have a value in colOpts then that value will be used
              var defaultMutator = {
                  orthogonal: {
                      threshold: null
                  },
                  threshold: null
              };
              return $.extend(true, {}, SearchPane.defaults, defaultMutator, table.settings()[0].aoColumns[this.s.index].searchPanes);
          };
          /**
           * This method allows for changes to the panes and table to be made when a selection or a deselection occurs
           * @param select Denotes whether a selection has been made or not
           */
          SearchPane.prototype._makeSelection = function () {
              this.updateTable();
              this.s.updating = true;
              this.s.dt.draw();
              this.s.updating = false;
          };
          /**
           * Fill the array with the values that are currently being displayed in the table
           * @param last boolean to indicate whether this was the last pane a selection was made in
           */
          SearchPane.prototype._populatePane = function (last) {
              if (last === void 0) { last = false; }
              var table = this.s.dt;
              this.s.rowData.arrayFilter = [];
              this.s.rowData.bins = {};
              var settings = this.s.dt.settings()[0];
              // If cascadePanes or viewTotal are active it is necessary to get the data which is currently
              //  being displayed for their functionality. Also make sure that this was not the last pane to have a selection made
              if (!this.s.dt.page.info().serverSide) {
                  var indexArray = (this.c.cascadePanes || this.c.viewTotal) && (!this.s.clearing && !last) ?
                      table.rows({ search: 'applied' }).indexes() :
                      table.rows().indexes();
                  for (var _i = 0, _a = indexArray.toArray(); _i < _a.length; _i++) {
                      var index = _a[_i];
                      this._populatePaneArray(index, this.s.rowData.arrayFilter, settings);
                  }
              }
          };
          /**
           * Populates an array with all of the data for the table
           * @param rowIdx The current row index to be compared
           * @param arrayFilter The array that is to be populated with row Details
           * @param bins The bins object that is to be populated with the row counts
           */
          SearchPane.prototype._populatePaneArray = function (rowIdx, arrayFilter, settings, bins) {
              if (bins === void 0) { bins = this.s.rowData.bins; }
              var colOpts = this.s.colOpts;
              // Retrieve the rendered data from the cell using the fnGetCellData function
              //  rather than the cell().render API method for optimisation
              if (typeof colOpts.orthogonal === 'string') {
                  var rendered = settings.oApi._fnGetCellData(settings, rowIdx, this.s.index, colOpts.orthogonal);
                  this.s.rowData.filterMap.set(rowIdx, rendered);
                  this._addOption(rendered, rendered, rendered, rendered, arrayFilter, bins);
              }
              else {
                  var filter = settings.oApi._fnGetCellData(settings, rowIdx, this.s.index, colOpts.orthogonal.search);
                  this.s.rowData.filterMap.set(rowIdx, filter);
                  if (!bins[filter]) {
                      bins[filter] = 1;
                      this._addOption(filter, settings.oApi._fnGetCellData(settings, rowIdx, this.s.index, colOpts.orthogonal.display), settings.oApi._fnGetCellData(settings, rowIdx, this.s.index, colOpts.orthogonal.sort), settings.oApi._fnGetCellData(settings, rowIdx, this.s.index, colOpts.orthogonal.type), arrayFilter, bins);
                      this.s.rowData.totalOptions++;
                  }
                  else {
                      bins[filter]++;
                      this.s.rowData.totalOptions++;
                      return;
                  }
              }
          };
          /**
           * Reloads all of the previous selects into the panes
           * @param loadedFilter The loaded filters from a previous state
           */
          SearchPane.prototype._reloadSelect = function (loadedFilter) {
              // If the state was not saved don't selected any
              if (loadedFilter === undefined) {
                  return;
              }
              var idx;
              // For each pane, check that the loadedFilter list exists and is not null,
              // find the id of each search item and set it to be selected.
              for (var i = 0; i < loadedFilter.searchPanes.panes.length; i++) {
                  if (loadedFilter.searchPanes.panes[i].id === this.s.index) {
                      idx = i;
                      break;
                  }
              }
              if (idx !== undefined) {
                  var table = this.s.dtPane;
                  var rows = table.rows({ order: 'index' }).data().map(function (item) { return item.filter !== null ?
                      item.filter.toString() :
                      null; }).toArray();
                  for (var _i = 0, _a = loadedFilter.searchPanes.panes[idx].selected; _i < _a.length; _i++) {
                      var filter = _a[_i];
                      var id = -1;
                      if (filter !== null) {
                          id = rows.indexOf(filter.toString());
                      }
                      if (id > -1) {
                          table.row(id).select();
                          this.s.dt.state.save();
                      }
                  }
              }
          };
          /**
           * This method decides whether a row should contribute to the pane or not
           * @param filter the value that the row is to be filtered on
           * @param dataIndex the row index
           */
          SearchPane.prototype._search = function (filter, dataIndex) {
              var colOpts = this.s.colOpts;
              var table = this.s.dt;
              // For each item selected in the pane, check if it is available in the cell
              for (var _i = 0, _a = this.selections; _i < _a.length; _i++) {
                  var colSelect = _a[_i];
                  // if the filter is an array then is the column present in it
                  if (Array.isArray(filter)) {
                      if (filter.indexOf(colSelect.filter) !== -1) {
                          return true;
                      }
                  }
                  // if the filter is a function then does it meet the criteria of that function or not
                  else if (typeof colSelect.filter === 'function') {
                      if (colSelect.filter.call(table, table.row(dataIndex).data(), dataIndex)) {
                          if (colOpts.combiner === 'or') {
                              return true;
                          }
                      }
                      // If the combiner is an "and" then we need to check against all possible selections
                      //  so if it fails here then the and is not met and return false
                      else if (colOpts.combiner === 'and') {
                          return false;
                      }
                  }
                  // otherwise if the two filter values are equal then return true
                  else if (filter === colSelect.filter) {
                      return true;
                  }
              }
              // If the combiner is an and then we need to check against all possible selections
              //  so return true here if so because it would have returned false earlier if it had failed
              if (colOpts.combiner === 'and') {
                  return true;
              }
              // Otherwise it hasn't matched with anything by this point so it must be false
              else {
                  return false;
              }
          };
          /**
           * Creates the contents of the searchCont div
           *
           * NOTE This is overridden when semantic ui styling in order to integrate the search button into the text box.
           */
          SearchPane.prototype._searchContSetup = function () {
              if (this.c.controls && this.s.colOpts.controls) {
                  $(this.dom.searchButton).appendTo(this.dom.searchLabelCont);
              }
              if (!(this.c.dtOpts.searching === false ||
                  this.s.colOpts.dtOpts.searching === false ||
                  (this.customPaneSettings !== null &&
                      this.customPaneSettings.dtOpts !== undefined &&
                      this.customPaneSettings.dtOpts.searching !== undefined &&
                      !this.customPaneSettings.dtOpts.searching))) {
                  $(this.dom.searchLabelCont).appendTo(this.dom.searchCont);
              }
          };
          /**
           * Adds outline to the pane when a selection has been made
           */
          SearchPane.prototype._searchExtras = function () {
              var updating = this.s.updating;
              this.s.updating = true;
              var filters = this.s.dtPane.rows({ selected: true }).data().pluck('filter').toArray();
              var nullIndex = filters.indexOf(this.c.emptyMessage);
              var container = $(this.s.dtPane.table().container());
              // If null index is found then search for empty cells as a filter.
              if (nullIndex > -1) {
                  filters[nullIndex] = '';
              }
              // If a filter has been applied then outline the respective pane, remove it when it no longer is.
              if (filters.length > 0) {
                  container.addClass(this.classes.selected);
              }
              else if (filters.length === 0) {
                  container.removeClass(this.classes.selected);
              }
              this.s.updating = updating;
          };
          /**
           * Finds the ratio of the number of different options in the table to the number of rows
           * @param bins the number of different options in the table
           * @param rowCount the total number of rows in the table
           * @returns {number} returns the ratio
           */
          SearchPane.prototype._uniqueRatio = function (bins, rowCount) {
              if (rowCount > 0 &&
                  ((this.s.rowData.totalOptions > 0 && !this.s.dt.page.info().serverSide) ||
                      (this.s.dt.page.info().serverSide && this.s.tableLength > 0))) {
                  return bins / this.s.rowData.totalOptions;
              }
              else {
                  return 1;
              }
          };
          /**
           * updates the options within the pane
           * @param draw a flag to define whether this has been called due to a draw event or not
           */
          SearchPane.prototype._updateCommon = function (draw) {
              if (draw === void 0) { draw = false; }
              // Update the panes if doing a deselect. if doing a select then
              // update all of the panes except for the one causing the change
              if (!this.s.dt.page.info().serverSide &&
                  this.s.dtPane !== undefined &&
                  (!this.s.filteringActive || this.c.cascadePanes || draw === true) &&
                  (this.c.cascadePanes !== true || this.s.selectPresent !== true) && (!this.s.lastSelect || !this.s.lastCascade)) {
                  var colOpts = this.s.colOpts;
                  var selected = this.s.dtPane.rows({ selected: true }).data().toArray();
                  var scrollTop = $(this.s.dtPane.table().node()).parent()[0].scrollTop;
                  var rowData = this.s.rowData;
                  // Clear the pane in preparation for adding the updated search options
                  this.s.dtPane.clear();
                  // If it is not a custom pane
                  if (this.colExists) {
                      // Only run populatePane if the data has not been collected yet
                      if (rowData.arrayFilter.length === 0) {
                          this._populatePane();
                      }
                      // If cascadePanes is active and the table has returned to its default state then
                      //  there is a need to update certain parts ofthe rowData.
                      else if (this.c.cascadePanes
                          && this.s.dt.rows().data().toArray().length === this.s.dt.rows({ search: 'applied' }).data().toArray().length) {
                          rowData.arrayFilter = rowData.arrayOriginal;
                          rowData.bins = rowData.binsOriginal;
                      }
                      // Otherwise if viewTotal or cascadePanes is active then the data from the table must be read.
                      else if (this.c.viewTotal || this.c.cascadePanes) {
                          this._populatePane();
                      }
                      // If the viewTotal option is selected then find the totals for the table
                      if (this.c.viewTotal) {
                          this._detailsPane();
                      }
                      else {
                          rowData.binsTotal = rowData.bins;
                      }
                      if (this.c.viewTotal && !this.c.cascadePanes) {
                          rowData.arrayFilter = rowData.arrayTotals;
                      }
                      var _loop_1 = function (dataP) {
                          // If both view Total and cascadePanes have been selected and the count of the row is not 0 then add it to pane
                          // Do this also if the viewTotal option has been selected and cascadePanes has not
                          if (dataP && ((rowData.bins[dataP.filter] !== undefined && rowData.bins[dataP.filter] !== 0 && this_1.c.cascadePanes)
                              || !this_1.c.cascadePanes
                              || this_1.s.clearing)) {
                              var row = this_1._addRow(dataP.display, dataP.filter, !this_1.c.viewTotal
                                  ? rowData.bins[dataP.filter]
                                  : rowData.bins[dataP.filter] !== undefined
                                      ? rowData.bins[dataP.filter]
                                      : 0, this_1.c.viewTotal
                                  ? String(rowData.binsTotal[dataP.filter])
                                  : rowData.bins[dataP.filter], dataP.sort, dataP.type);
                              // Find out if the filter was selected in the previous search, if so select it and remove from array.
                              var selectIndex = selected.findIndex(function (element) {
                                  return element.filter === dataP.filter;
                              });
                              if (selectIndex !== -1) {
                                  row.select();
                                  selected.splice(selectIndex, 1);
                              }
                          }
                      };
                      var this_1 = this;
                      for (var _i = 0, _a = rowData.arrayFilter; _i < _a.length; _i++) {
                          var dataP = _a[_i];
                          _loop_1(dataP);
                      }
                  }
                  if ((colOpts.searchPanes !== undefined && colOpts.searchPanes.options !== undefined) ||
                      colOpts.options !== undefined ||
                      (this.customPaneSettings !== null && this.customPaneSettings.options !== undefined)) {
                      var rows = this._getComparisonRows();
                      var _loop_2 = function (row) {
                          var selectIndex = selected.findIndex(function (element) {
                              if (element.display === row.data().display) {
                                  return true;
                              }
                          });
                          if (selectIndex !== -1) {
                              row.select();
                              selected.splice(selectIndex, 1);
                          }
                      };
                      for (var _b = 0, rows_1 = rows; _b < rows_1.length; _b++) {
                          var row = rows_1[_b];
                          _loop_2(row);
                      }
                  }
                  // Add search options which were previously selected but whos results are no
                  // longer present in the resulting data set.
                  for (var _c = 0, selected_1 = selected; _c < selected_1.length; _c++) {
                      var selectedEl = selected_1[_c];
                      var row = this._addRow(selectedEl.display, selectedEl.filter, 0, this.c.viewTotal
                          ? selectedEl.total
                          : 0, selectedEl.filter, selectedEl.filter);
                      this.s.updating = true;
                      row.select();
                      this.s.updating = false;
                  }
                  this.s.dtPane.draw();
                  this.s.dtPane.table().node().parentNode.scrollTop = scrollTop;
              }
          };
          SearchPane.version = '1.1.0';
          SearchPane.classes = {
              buttonGroup: 'dtsp-buttonGroup',
              buttonSub: 'dtsp-buttonSub',
              clear: 'dtsp-clear',
              clearAll: 'dtsp-clearAll',
              clearButton: 'clearButton',
              container: 'dtsp-searchPane',
              countButton: 'dtsp-countButton',
              disabledButton: 'dtsp-disabledButton',
              dull: 'dtsp-dull',
              hidden: 'dtsp-hidden',
              hide: 'dtsp-hide',
              layout: 'dtsp-',
              name: 'dtsp-name',
              nameButton: 'dtsp-nameButton',
              narrow: 'dtsp-narrow',
              paneButton: 'dtsp-paneButton',
              paneInputButton: 'dtsp-paneInputButton',
              pill: 'dtsp-pill',
              search: 'dtsp-search',
              searchCont: 'dtsp-searchCont',
              searchIcon: 'dtsp-searchIcon',
              searchLabelCont: 'dtsp-searchButtonCont',
              selected: 'dtsp-selected',
              smallGap: 'dtsp-smallGap',
              subRow1: 'dtsp-subRow1',
              subRow2: 'dtsp-subRow2',
              subRowsContainer: 'dtsp-subRowsContainer',
              title: 'dtsp-title',
              topRow: 'dtsp-topRow'
          };
          // Define SearchPanes default options
          SearchPane.defaults = {
              cascadePanes: false,
              clear: true,
              combiner: 'or',
              controls: true,
              container: function (dt) {
                  return dt.table().container();
              },
              dataLength: 30,
              dtOpts: {},
              emptyMessage: '<i>No Data</i>',
              hideCount: false,
              layout: 'columns-3',
              name: undefined,
              orderable: true,
              orthogonal: {
                  display: 'display',
                  hideCount: false,
                  search: 'filter',
                  show: undefined,
                  sort: 'sort',
                  threshold: 0.6,
                  type: 'type'
              },
              preSelect: [],
              threshold: 0.6,
              viewTotal: false
          };
          return SearchPane;
      }());

      var $$1;
      var DataTable$1;
      function setJQuery$1(jq) {
          $$1 = jq;
          DataTable$1 = jq.fn.dataTable;
      }
      var SearchPanes = /** @class */ (function () {
          function SearchPanes(paneSettings, opts, fromInit) {
              var _this = this;
              if (fromInit === void 0) { fromInit = false; }
              this.regenerating = false;
              // Check that the required version of DataTables is included
              if (!DataTable$1 || !DataTable$1.versionCheck || !DataTable$1.versionCheck('1.10.0')) {
                  throw new Error('SearchPane requires DataTables 1.10 or newer');
              }
              // Check that Select is included
              if (!DataTable$1.select) {
                  throw new Error('SearchPane requires Select');
              }
              var table = new DataTable$1.Api(paneSettings);
              this.classes = $$1.extend(true, {}, SearchPanes.classes);
              // Get options from user
              this.c = $$1.extend(true, {}, SearchPanes.defaults, opts);
              // Add extra elements to DOM object including clear
              this.dom = {
                  clearAll: $$1('<button type="button">Clear All</button>').addClass(this.classes.clearAll),
                  container: $$1('<div/>').addClass(this.classes.panes).text(table.i18n('searchPanes.loadMessage', 'Loading Search Panes...')),
                  emptyMessage: $$1('<div/>').addClass(this.classes.emptyMessage),
                  options: $$1('<div/>').addClass(this.classes.container),
                  panes: $$1('<div/>').addClass(this.classes.container),
                  title: $$1('<div/>').addClass(this.classes.title),
                  titleRow: $$1('<div/>').addClass(this.classes.titleRow),
                  wrapper: $$1('<div/>')
              };
              this.s = {
                  colOpts: [],
                  dt: table,
                  filterPane: -1,
                  panes: [],
                  selectionList: [],
                  serverData: {},
                  updating: false
              };
              if (table.settings()[0]._searchPanes !== undefined) {
                  return;
              }
              // We are using the xhr event to rebuild the panes if required due to viewTotal being enabled
              // If viewTotal is not enabled then we simply update the data from the server
              table.on('xhr', function (e, settings, json, xhr) {
                  if (json.searchPanes && json.searchPanes.options) {
                      _this.s.serverData = json.searchPanes.options;
                      _this.s.serverData.tableLength = json.recordsTotal;
                      if (_this.c.viewTotal || _this.c.cascadePanes) {
                          _this._serverTotals();
                      }
                  }
              });
              table.settings()[0]._searchPanes = this;
              this.dom.clearAll.text(table.i18n('searchPanes.clearMessage', 'Clear All'));
              this._getState();
              if (this.s.dt.settings()[0]._bInitComplete || fromInit) {
                  this._paneDeclare(table, paneSettings, opts);
              }
              else {
                  table.one('preInit.dt', function (settings) {
                      _this._paneDeclare(table, paneSettings, opts);
                  });
              }
          }
          /**
           * Clear the selections of all of the panes
           */
          SearchPanes.prototype.clearSelections = function () {
              // Load in all of the searchBoxes in the documents
              var searches = this.dom.container.find(this.classes.search);
              // For each searchBox set the input text to be empty and then trigger
              //  an input on them so that they no longer filter the panes
              searches.each(function () {
                  $$1(this).val('');
                  $$1(this).trigger('input');
              });
              var returnArray = [];
              // For every pane, clear the selections in the pane
              for (var _i = 0, _a = this.s.panes; _i < _a.length; _i++) {
                  var pane = _a[_i];
                  if (pane.s.dtPane !== undefined) {
                      returnArray.push(pane.clearPane());
                  }
              }
              this.s.dt.draw();
              return returnArray;
          };
          /**
           * returns the container node for the searchPanes
           */
          SearchPanes.prototype.getNode = function () {
              return this.dom.container;
          };
          /**
           * rebuilds all of the panes
           */
          SearchPanes.prototype.rebuild = function (targetIdx, maintainSelection) {
              if (targetIdx === void 0) { targetIdx = false; }
              if (maintainSelection === void 0) { maintainSelection = false; }
              $$1(this.dom.emptyMessage).remove();
              // As a rebuild from scratch is required, empty the searchpanes container.
              var returnArray = [];
              // Rebuild each pane individually, if a specific pane has been selected then only rebuild that one
              $$1(this.dom.panes).empty();
              for (var _i = 0, _a = this.s.panes; _i < _a.length; _i++) {
                  var pane = _a[_i];
                  if (targetIdx !== false && pane.s.index !== targetIdx) {
                      $$1(this.dom.panes).append(pane.dom.container);
                      continue;
                  }
                  pane.clearData();
                  returnArray.push(
                  // Pass a boolean to say whether this is the last choice made for maintaining selections when rebuilding
                  pane.rebuildPane(this.s.selectionList[this.s.selectionList.length - 1] !== undefined ?
                      pane.s.index === this.s.selectionList[this.s.selectionList.length - 1].index :
                      false, this.s.dt.page.info().serverSide ?
                      this.s.serverData :
                      undefined, null, maintainSelection));
                  $$1(this.dom.panes).append(pane.dom.container);
              }
              if (this.c.cascadePanes || this.c.viewTotal) {
                  this.redrawPanes(true);
              }
              else {
                  this._updateSelection();
              }
              // Attach panes, clear buttons, and title bar to the document
              this._updateFilterCount();
              this._attachPaneContainer();
              this.s.dt.draw();
              // If a single pane has been rebuilt then return only that pane
              if (returnArray.length === 1) {
                  return returnArray[0];
              }
              // Otherwise return all of the panes that have been rebuilt
              else {
                  return returnArray;
              }
          };
          /**
           * Redraws all of the panes
           */
          SearchPanes.prototype.redrawPanes = function (rebuild) {
              if (rebuild === void 0) { rebuild = false; }
              var table = this.s.dt;
              // Only do this if the redraw isn't being triggered by the panes updating themselves
              if (!this.s.updating && !this.s.dt.page.info().serverSide) {
                  var filterActive = true;
                  var filterPane = this.s.filterPane;
                  // If the number of rows currently visible is equal to the number of rows in the table
                  //  then there can't be any filtering taking place
                  if (table.rows({ search: 'applied' }).data().toArray().length === table.rows().data().toArray().length) {
                      filterActive = false;
                  }
                  // Otherwise if viewTotal is active then it is necessary to determine which panes a select is present in.
                  //  If there is only one pane with a selection present then it should not show the filtered message as
                  //  more selections may be made in that pane.
                  else if (this.c.viewTotal) {
                      for (var _i = 0, _a = this.s.panes; _i < _a.length; _i++) {
                          var pane = _a[_i];
                          if (pane.s.dtPane !== undefined) {
                              var selectLength = pane.s.dtPane.rows({ selected: true }).data().toArray().length;
                              if (selectLength === 0) {
                                  for (var _b = 0, _c = this.s.selectionList; _b < _c.length; _b++) {
                                      var selection = _c[_b];
                                      if (selection.index === pane.s.index && selection.rows.length !== 0) {
                                          selectLength = selection.rows.length;
                                      }
                                  }
                              }
                              // If filterPane === -1 then a pane with a selection has not been found yet, so set filterPane to that panes index
                              if (selectLength > 0 && filterPane === -1) {
                                  filterPane = pane.s.index;
                              }
                              // Then if another pane is found with a selection then set filterPane to null to
                              //  show that multiple panes have selections present
                              else if (selectLength > 0) {
                                  filterPane = null;
                              }
                          }
                      }
                  }
                  var deselectIdx = void 0;
                  var newSelectionList = [];
                  // Don't run this if it is due to the panes regenerating
                  if (!this.regenerating) {
                      for (var _d = 0, _e = this.s.panes; _d < _e.length; _d++) {
                          var pane = _e[_d];
                          // Identify the pane where a selection or deselection has been made and add it to the list.
                          if (pane.s.selectPresent) {
                              this.s.selectionList.push({ index: pane.s.index, rows: pane.s.dtPane.rows({ selected: true }).data().toArray(), protect: false });
                              table.state.save();
                              break;
                          }
                          else if (pane.s.deselect) {
                              deselectIdx = pane.s.index;
                              var selectedData = pane.s.dtPane.rows({ selected: true }).data().toArray();
                              if (selectedData.length > 0) {
                                  this.s.selectionList.push({ index: pane.s.index, rows: selectedData, protect: true });
                              }
                          }
                      }
                      if (this.s.selectionList.length > 0) {
                          var last = this.s.selectionList[this.s.selectionList.length - 1].index;
                          for (var _f = 0, _g = this.s.panes; _f < _g.length; _f++) {
                              var pane = _g[_f];
                              pane.s.lastSelect = (pane.s.index === last);
                          }
                      }
                      // Remove selections from the list from the pane where a deselect has taken place
                      for (var i = 0; i < this.s.selectionList.length; i++) {
                          if (this.s.selectionList[i].index !== deselectIdx || this.s.selectionList[i].protect === true) {
                              var further = false;
                              // Find out if this selection is the last one in the list for that pane
                              for (var j = i + 1; j < this.s.selectionList.length; j++) {
                                  if (this.s.selectionList[j].index === this.s.selectionList[i].index) {
                                      further = true;
                                  }
                              }
                              // If there are no selections for this pane in the list then just push this one
                              if (!further) {
                                  newSelectionList.push(this.s.selectionList[i]);
                                  this.s.selectionList[i].protect = false;
                              }
                          }
                      }
                      var solePane = -1;
                      if (newSelectionList.length === 1) {
                          solePane = newSelectionList[0].index;
                      }
                      // Update all of the panes to reflect the current state of the filters
                      for (var _h = 0, _j = this.s.panes; _h < _j.length; _h++) {
                          var pane = _j[_h];
                          if (pane.s.dtPane !== undefined) {
                              var tempFilter = true;
                              pane.s.filteringActive = true;
                              if ((filterPane !== -1 && filterPane !== null && filterPane === pane.s.index) ||
                                  filterActive === false ||
                                  pane.s.index === solePane) {
                                  tempFilter = false;
                                  pane.s.filteringActive = false;
                              }
                              pane.updatePane(!tempFilter ? false : filterActive);
                          }
                      }
                      // Update the label that shows how many filters are in place
                      this._updateFilterCount();
                      // If the length of the selections are different then some of them have been removed and a deselect has occured
                      if (newSelectionList.length > 0 && (newSelectionList.length < this.s.selectionList.length || rebuild)) {
                          this._cascadeRegen(newSelectionList);
                          var last = newSelectionList[newSelectionList.length - 1].index;
                          for (var _k = 0, _l = this.s.panes; _k < _l.length; _k++) {
                              var pane = _l[_k];
                              pane.s.lastSelect = (pane.s.index === last);
                          }
                      }
                      else if (newSelectionList.length > 0) {
                          // Update all of the other panes as you would just making a normal selection
                          for (var _m = 0, _o = this.s.panes; _m < _o.length; _m++) {
                              var paneUpdate = _o[_m];
                              if (paneUpdate.s.dtPane !== undefined) {
                                  var tempFilter = true;
                                  paneUpdate.s.filteringActive = true;
                                  if ((filterPane !== -1 && filterPane !== null && filterPane === paneUpdate.s.index) || filterActive === false) {
                                      tempFilter = false;
                                      paneUpdate.s.filteringActive = false;
                                  }
                                  paneUpdate.updatePane(!tempFilter ? tempFilter : filterActive);
                              }
                          }
                      }
                  }
                  else {
                      var solePane = -1;
                      if (newSelectionList.length === 1) {
                          solePane = newSelectionList[0].index;
                      }
                      for (var _p = 0, _q = this.s.panes; _p < _q.length; _p++) {
                          var pane = _q[_p];
                          if (pane.s.dtPane !== undefined) {
                              var tempFilter = true;
                              pane.s.filteringActive = true;
                              if ((filterPane !== -1 && filterPane !== null && filterPane === pane.s.index) ||
                                  filterActive === false ||
                                  pane.s.index === solePane) {
                                  tempFilter = false;
                                  pane.s.filteringActive = false;
                              }
                              pane.updatePane(!tempFilter ? tempFilter : filterActive);
                          }
                      }
                      // Update the label that shows how many filters are in place
                      this._updateFilterCount();
                  }
                  if (!filterActive) {
                      this.s.selectionList = [];
                  }
              }
          };
          /**
           * Attach the panes, buttons and title to the document
           */
          SearchPanes.prototype._attach = function () {
              var _this = this;
              $$1(this.dom.container).removeClass(this.classes.hide);
              $$1(this.dom.titleRow).removeClass(this.classes.hide);
              $$1(this.dom.titleRow).remove();
              $$1(this.dom.title).appendTo(this.dom.titleRow);
              // If the clear button is permitted attach it
              if (this.c.clear) {
                  $$1(this.dom.clearAll).appendTo(this.dom.titleRow);
                  $$1(this.dom.clearAll).on('click.dtsps', function () {
                      _this.clearSelections();
                  });
              }
              $$1(this.dom.titleRow).appendTo(this.dom.container);
              // Attach the container for each individual pane to the overall container
              for (var _i = 0, _a = this.s.panes; _i < _a.length; _i++) {
                  var pane = _a[_i];
                  $$1(pane.dom.container).appendTo(this.dom.panes);
              }
              // Attach everything to the document
              $$1(this.dom.panes).appendTo(this.dom.container);
              if ($$1('div.' + this.classes.container).length === 0) {
                  $$1(this.dom.container).prependTo(this.s.dt);
              }
              return this.dom.container;
          };
          /**
           * Attach the top row containing the filter count and clear all button
           */
          SearchPanes.prototype._attachExtras = function () {
              $$1(this.dom.container).removeClass(this.classes.hide);
              $$1(this.dom.titleRow).removeClass(this.classes.hide);
              $$1(this.dom.titleRow).remove();
              $$1(this.dom.title).appendTo(this.dom.titleRow);
              // If the clear button is permitted attach it
              if (this.c.clear) {
                  $$1(this.dom.clearAll).appendTo(this.dom.titleRow);
              }
              $$1(this.dom.titleRow).appendTo(this.dom.container);
              return this.dom.container;
          };
          /**
           * If there are no panes to display then this method is called to either
           *   display a message in their place or hide them completely.
           */
          SearchPanes.prototype._attachMessage = function () {
              // Create a message to display on the screen
              var message;
              try {
                  message = this.s.dt.i18n('searchPanes.emptyPanes', 'No SearchPanes');
              }
              catch (error) {
                  message = null;
              }
              // If the message is an empty string then searchPanes.emptyPanes is undefined,
              //  therefore the pane container should be removed from the display
              if (message === null) {
                  $$1(this.dom.container).addClass(this.classes.hide);
                  $$1(this.dom.titleRow).removeClass(this.classes.hide);
                  return;
              }
              else {
                  $$1(this.dom.container).removeClass(this.classes.hide);
                  $$1(this.dom.titleRow).addClass(this.classes.hide);
              }
              // Otherwise display the message
              $$1(this.dom.emptyMessage).text(message);
              this.dom.emptyMessage.appendTo(this.dom.container);
              return this.dom.container;
          };
          /**
           * Attaches the panes to the document and displays a message or hides if there are none
           */
          SearchPanes.prototype._attachPaneContainer = function () {
              // If a pane is to be displayed then attach the normal pane output
              for (var _i = 0, _a = this.s.panes; _i < _a.length; _i++) {
                  var pane = _a[_i];
                  if (pane.s.displayed === true) {
                      return this._attach();
                  }
              }
              // Otherwise attach the custom message or remove the container from the display
              return this._attachMessage();
          };
          /**
           * Prepares the panes for selections to be made when cascade is active and a deselect has occured
           * @param newSelectionList the list of selections which are to be made
           */
          SearchPanes.prototype._cascadeRegen = function (newSelectionList) {
              // Set this to true so that the actions taken do not cause this to run until it is finished
              this.regenerating = true;
              // If only one pane has been selected then take note of its index
              var solePane = -1;
              if (newSelectionList.length === 1) {
                  solePane = newSelectionList[0].index;
              }
              // Let the pane know that a cascadeRegen is taking place to avoid unexpected behaviour
              //  and clear all of the previous selections in the pane
              for (var _i = 0, _a = this.s.panes; _i < _a.length; _i++) {
                  var pane = _a[_i];
                  pane.setCascadeRegen(true);
                  pane.setClear(true);
                  // If this is the same as the pane with the only selection then pass it as a parameter into clearPane
                  if ((pane.s.dtPane !== undefined && pane.s.index === solePane) || pane.s.dtPane !== undefined) {
                      pane.clearPane();
                  }
                  pane.setClear(false);
              }
              // Remake Selections
              this._makeCascadeSelections(newSelectionList);
              // Set the selection list property to be the list without the selections from the deselect pane
              this.s.selectionList = newSelectionList;
              // The regeneration of selections is over so set it back to false
              for (var _b = 0, _c = this.s.panes; _b < _c.length; _b++) {
                  var pane = _c[_b];
                  pane.setCascadeRegen(false);
              }
              this.regenerating = false;
          };
          /**
           * Attaches the message to the document but does not add any panes
           */
          SearchPanes.prototype._checkMessage = function () {
              // If a pane is to be displayed then attach the normal pane output
              for (var _i = 0, _a = this.s.panes; _i < _a.length; _i++) {
                  var pane = _a[_i];
                  if (pane.s.displayed === true) {
                      return;
                  }
              }
              // Otherwise attach the custom message or remove the container from the display
              return this._attachMessage();
          };
          /**
           * Gets the selection list from the previous state and stores it in the selectionList Property
           */
          SearchPanes.prototype._getState = function () {
              var loadedFilter = this.s.dt.state.loaded();
              if (loadedFilter && loadedFilter.searchPanes && loadedFilter.searchPanes.selectionList !== undefined) {
                  this.s.selectionList = loadedFilter.searchPanes.selectionList;
              }
          };
          /**
           * Makes all of the selections when cascade is active
           * @param newSelectionList the list of selections to be made, in the order they were originally selected
           */
          SearchPanes.prototype._makeCascadeSelections = function (newSelectionList) {
              // make selections in the order they were made previously, excluding those from the pane where a deselect was made
              for (var i = 0; i < newSelectionList.length; i++) {
                  var _loop_1 = function (pane) {
                      if (pane.s.index === newSelectionList[i].index && pane.s.dtPane !== undefined) {
                          // When regenerating the cascade selections we need this flag so that the panes are only ignored if it
                          //  is the last selection and the pane for that selection
                          if (i === newSelectionList.length - 1) {
                              pane.s.lastCascade = true;
                          }
                          // if there are any selections currently in the pane then deselect them as we are about to make our new selections
                          if (pane.s.dtPane.rows({ selected: true }).data().toArray().length > 0 && pane.s.dtPane !== undefined) {
                              pane.setClear(true);
                              pane.clearPane();
                              pane.setClear(false);
                          }
                          var _loop_2 = function (row) {
                              pane.s.dtPane.rows().every(function (rowIdx) {
                                  if (pane.s.dtPane.row(rowIdx).data() !== undefined &&
                                      row !== undefined &&
                                      pane.s.dtPane.row(rowIdx).data().filter === row.filter) {
                                      pane.s.dtPane.row(rowIdx).select();
                                  }
                              });
                          };
                          // select every row in the pane that was selected previously
                          for (var _i = 0, _a = newSelectionList[i].rows; _i < _a.length; _i++) {
                              var row = _a[_i];
                              _loop_2(row);
                          }
                          // Update the label that shows how many filters are in place
                          this_1._updateFilterCount();
                          pane.s.lastCascade = false;
                      }
                  };
                  var this_1 = this;
                  // As the selections may have been made across the panes in a different order to the pane index we must identify
                  //  which pane has the index of the selection. This is also important for colreorder etc
                  for (var _i = 0, _a = this.s.panes; _i < _a.length; _i++) {
                      var pane = _a[_i];
                      _loop_1(pane);
                  }
              }
              // Make sure that the state is saved after all of these selections
              this.s.dt.state.save();
          };
          /**
           * Declares the instances of individual searchpanes dependant on the number of columns.
           * It is necessary to run this once preInit has completed otherwise no panes will be
           *  created as the column count will be 0.
           * @param table the DataTable api for the parent table
           * @param paneSettings the settings passed into the constructor
           * @param opts the options passed into the constructor
           */
          SearchPanes.prototype._paneDeclare = function (table, paneSettings, opts) {
              var _this = this;
              // Create Panes
              table
                  .columns(this.c.columns.length > 0 ? this.c.columns : undefined)
                  .eq(0)
                  .each(function (idx) {
                  _this.s.panes.push(new SearchPane(paneSettings, opts, idx, _this.c.layout, _this.dom.panes));
              });
              // If there is any extra custom panes defined then create panes for them too
              var rowLength = table.columns().eq(0).toArray().length;
              var paneLength = this.c.panes.length;
              for (var i = 0; i < paneLength; i++) {
                  var id = rowLength + i;
                  this.s.panes.push(new SearchPane(paneSettings, opts, id, this.c.layout, this.dom.panes, this.c.panes[i]));
              }
              // If a custom ordering is being used
              if (this.c.order.length > 0) {
                  // Make a new Array of panes based upon the order
                  var newPanes = this.c.order.map(function (name, index, values) {
                      return _this._findPane(name);
                  });
                  // Remove the old panes from the dom
                  this.dom.panes.empty();
                  this.s.panes = newPanes;
                  // Append the panes in the correct order
                  for (var _i = 0, _a = this.s.panes; _i < _a.length; _i++) {
                      var pane = _a[_i];
                      this.dom.panes.append(pane.dom.container);
                  }
              }
              // If this internal property is true then the DataTable has been initialised already
              if (this.s.dt.settings()[0]._bInitComplete) {
                  this._paneStartup(table);
              }
              else {
                  // Otherwise add the paneStartup function to the list of functions that are to be run when the table is initialised
                  // This will garauntee that the panes are initialised before the init event and init Complete callback is fired
                  this.s.dt.settings()[0].aoInitComplete.push({ fn: function () {
                          _this._paneStartup(table);
                      } });
              }
          };
          /**
           * Finds a pane based upon the name of that pane
           * @param name string representing the name of the pane
           * @returns SearchPane The pane which has that name
           */
          SearchPanes.prototype._findPane = function (name) {
              for (var _i = 0, _a = this.s.panes; _i < _a.length; _i++) {
                  var pane = _a[_i];
                  if (name === pane.s.name) {
                      return pane;
                  }
              }
          };
          /**
           * Runs the start up functions for the panes to enable listeners and populate panes
           * @param table the DataTable api for the parent Table
           */
          SearchPanes.prototype._paneStartup = function (table) {
              var _this = this;
              // Magic number of 500 is a guess at what will be fast
              if (this.s.dt.page.info().recordsTotal <= 500) {
                  this._startup(table);
              }
              else {
                  setTimeout(function () {
                      _this._startup(table);
                  }, 100);
              }
          };
          /**
           * Works out which panes to update when data is recieved from the server and viewTotal is active
           */
          SearchPanes.prototype._serverTotals = function () {
              var selectPresent = false;
              var deselectPresent = false;
              var table = this.s.dt;
              for (var _i = 0, _a = this.s.panes; _i < _a.length; _i++) {
                  var pane = _a[_i];
                  // Identify the pane where a selection or deselection has been made and add it to the list.
                  if (pane.s.selectPresent) {
                      this.s.selectionList.push({ index: pane.s.index, rows: pane.s.dtPane.rows({ selected: true }).data().toArray(), protect: false });
                      table.state.save();
                      pane.s.selectPresent = false;
                      selectPresent = true;
                      break;
                  }
                  else if (pane.s.deselect) {
                      var selectedData = pane.s.dtPane.rows({ selected: true }).data().toArray();
                      if (selectedData.length > 0) {
                          this.s.selectionList.push({ index: pane.s.index, rows: selectedData, protect: true });
                      }
                      selectPresent = true;
                      deselectPresent = true;
                  }
              }
              // Build an updated list based on any selections or deselections added
              if (!selectPresent) {
                  this.s.selectionList = [];
              }
              else {
                  var newSelectionList = [];
                  for (var i = 0; i < this.s.selectionList.length; i++) {
                      var further = false;
                      // Find out if this selection is the last one in the list for that pane
                      for (var j = i + 1; j < this.s.selectionList.length; j++) {
                          if (this.s.selectionList[j].index === this.s.selectionList[i].index) {
                              further = true;
                          }
                      }
                      // If there are no selections for this pane in the list then just push this one
                      if (!further &&
                          this.s.panes[this.s.selectionList[i].index].s.dtPane.rows({ selected: true }).data().toArray().length > 0) {
                          newSelectionList.push(this.s.selectionList[i]);
                      }
                  }
                  this.s.selectionList = newSelectionList;
              }
              var initIdx = -1;
              // If there has been a deselect and only one pane has a selection then update everything
              if (deselectPresent && this.s.selectionList.length === 1) {
                  for (var _b = 0, _c = this.s.panes; _b < _c.length; _b++) {
                      var pane = _c[_b];
                      pane.s.lastSelect = false;
                      pane.s.deselect = false;
                      if (pane.s.dtPane !== undefined && pane.s.dtPane.rows({ selected: true }).data().toArray().length > 0) {
                          initIdx = pane.s.index;
                      }
                  }
              }
              // Otherwise if there are more 1 selections then find the last one and set it to not update that pane
              else if (this.s.selectionList.length > 0) {
                  var last = this.s.selectionList[this.s.selectionList.length - 1].index;
                  for (var _d = 0, _e = this.s.panes; _d < _e.length; _d++) {
                      var pane = _e[_d];
                      pane.s.lastSelect = (pane.s.index === last);
                      pane.s.deselect = false;
                  }
              }
              // Otherwise if there are no selections then find where that took place and do not update to maintain scrolling
              else if (this.s.selectionList.length === 0) {
                  for (var _f = 0, _g = this.s.panes; _f < _g.length; _f++) {
                      var pane = _g[_f];
                      // pane.s.lastSelect = (pane.s.deselect === true);
                      pane.s.lastSelect = false;
                      pane.s.deselect = false;
                  }
              }
              $$1(this.dom.panes).empty();
              // Rebuild the desired panes
              for (var _h = 0, _j = this.s.panes; _h < _j.length; _h++) {
                  var pane = _j[_h];
                  if (!pane.s.lastSelect) {
                      pane.rebuildPane(undefined, this.s.dt.page.info().serverSide ? this.s.serverData : undefined, pane.s.index === initIdx ? true : null, true);
                  }
                  else {
                      pane._setListeners();
                  }
                  // append all of the panes and enable select
                  $$1(this.dom.panes).append(pane.dom.container);
                  if (pane.s.dtPane !== undefined) {
                      $$1(pane.s.dtPane.table().node()).parent()[0].scrollTop = pane.s.scrollTop;
                      $$1.fn.dataTable.select.init(pane.s.dtPane);
                  }
              }
          };
          /**
           * Initialises the tables previous/preset selections and initialises callbacks for events
           * @param table the parent table for which the searchPanes are being created
           */
          SearchPanes.prototype._startup = function (table) {
              var _this = this;
              $$1(this.dom.container).text('');
              // Attach clear button and title bar to the document
              this._attachExtras();
              $$1(this.dom.container).append(this.dom.panes);
              $$1(this.dom.panes).empty();
              if (this.c.viewTotal && !this.c.cascadePanes) {
                  var loadedFilter = this.s.dt.state.loaded();
                  if (loadedFilter !== null &&
                      loadedFilter !== undefined &&
                      loadedFilter.searchPanes !== undefined &&
                      loadedFilter.searchPanes.panes !== undefined) {
                      var filterActive = false;
                      for (var _i = 0, _a = loadedFilter.searchPanes.panes; _i < _a.length; _i++) {
                          var pane = _a[_i];
                          if (pane.selected.length > 0) {
                              filterActive = true;
                              break;
                          }
                      }
                      if (filterActive) {
                          for (var _b = 0, _c = this.s.panes; _b < _c.length; _b++) {
                              var pane = _c[_b];
                              pane.s.showFiltered = true;
                          }
                      }
                  }
              }
              for (var _d = 0, _e = this.s.panes; _d < _e.length; _d++) {
                  var pane = _e[_d];
                  pane.rebuildPane(undefined, this.s.dt.page.info().serverSide ? this.s.serverData : undefined);
                  $$1(this.dom.panes).append(pane.dom.container);
              }
              if (this.c.viewTotal && !this.c.cascadePanes) {
                  for (var _f = 0, _g = this.s.panes; _f < _g.length; _f++) {
                      var pane = _g[_f];
                      pane.updatePane();
                  }
              }
              this._updateFilterCount();
              this._checkMessage();
              // When a draw is called on the DataTable, update all of the panes incase the data in the DataTable has changed
              table.on('draw.dtsps', function () {
                  _this._updateFilterCount();
                  if ((_this.c.cascadePanes || _this.c.viewTotal) && !_this.s.dt.page.info().serverSide) {
                      _this.redrawPanes();
                  }
                  else {
                      _this._updateSelection();
                  }
                  _this.s.filterPane = -1;
              });
              // Whenever a state save occurs store the selection list in the state object
              this.s.dt.on('stateSaveParams.dtsp', function (e, settings, data) {
                  if (data.searchPanes === undefined) {
                      data.searchPanes = {};
                  }
                  data.searchPanes.selectionList = _this.s.selectionList;
              });
              // If the data is reloaded from the server then it is possible that it has changed completely,
              // so we need to rebuild the panes
              this.s.dt.on('xhr', function () {
                  var processing = false;
                  if (!_this.s.dt.page.info().serverSide) {
                      _this.s.dt.one('draw', function () {
                          if (processing) {
                              return;
                          }
                          processing = true;
                          $$1(_this.dom.panes).empty();
                          for (var _i = 0, _a = _this.s.panes; _i < _a.length; _i++) {
                              var pane = _a[_i];
                              pane.clearData(); // Clears all of the bins and will mean that the data has to be re-read
                              // Pass a boolean to say whether this is the last choice made for maintaining selections when rebuilding
                              pane.rebuildPane(_this.s.selectionList[_this.s.selectionList.length - 1] !== undefined ?
                                  pane.s.index === _this.s.selectionList[_this.s.selectionList.length - 1].index :
                                  false, undefined, undefined, true);
                              $$1(_this.dom.panes).append(pane.dom.container);
                          }
                          if (_this.c.cascadePanes || _this.c.viewTotal) {
                              _this.redrawPanes(_this.c.cascadePanes);
                          }
                          else {
                              _this._updateSelection();
                          }
                          _this._checkMessage();
                      });
                  }
              });
              if (this.s.selectionList !== undefined && this.s.selectionList.length > 0) {
                  var last = this.s.selectionList[this.s.selectionList.length - 1].index;
                  for (var _h = 0, _j = this.s.panes; _h < _j.length; _h++) {
                      var pane = _j[_h];
                      pane.s.lastSelect = (pane.s.index === last);
                  }
              }
              // If cascadePanes is active then make the previous selections in the order they were previously
              if (this.s.selectionList.length > 0 && this.c.cascadePanes) {
                  this._cascadeRegen(this.s.selectionList);
              }
              // PreSelect any selections which have been defined using the preSelect option
              table
                  .columns(this.c.columns.length > 0 ? this.c.columns : undefined)
                  .eq(0)
                  .each(function (idx) {
                  if (_this.s.panes[idx] !== undefined &&
                      _this.s.panes[idx].s.dtPane !== undefined &&
                      _this.s.panes[idx].s.colOpts.preSelect !== undefined) {
                      var tableLength = _this.s.panes[idx].s.dtPane.rows().data().toArray().length;
                      for (var i = 0; i < tableLength; i++) {
                          if (_this.s.panes[idx].s.colOpts.preSelect.indexOf(_this.s.panes[idx].s.dtPane.cell(i, 0).data()) !== -1) {
                              _this.s.panes[idx].s.dtPane.row(i).select();
                              _this.s.panes[idx].updateTable();
                          }
                      }
                  }
              });
              // Update the title bar to show how many filters have been selected
              this._updateFilterCount();
              // If the table is destroyed and restarted then clear the selections so that they do not persist.
              table.on('destroy.dtsps', function () {
                  for (var _i = 0, _a = _this.s.panes; _i < _a.length; _i++) {
                      var pane = _a[_i];
                      pane.destroy();
                  }
                  table.off('.dtsps');
                  $$1(_this.dom.clearAll).off('.dtsps');
                  $$1(_this.dom.container).remove();
                  _this.clearSelections();
              });
              // When the clear All button has been pressed clear all of the selections in the panes
              if (this.c.clear) {
                  $$1(this.dom.clearAll).on('click.dtsps', function () {
                      _this.clearSelections();
                  });
              }
              if (this.s.dt.page.info().serverSide) {
                  table.on('preXhr.dt', function (e, settings, data) {
                      if (data.searchPanes === undefined) {
                          data.searchPanes = {};
                      }
                      for (var _i = 0, _a = _this.s.panes; _i < _a.length; _i++) {
                          var pane = _a[_i];
                          var src = _this.s.dt.column(pane.s.index).dataSrc();
                          if (data.searchPanes[src] === undefined) {
                              data.searchPanes[src] = {};
                          }
                          if (pane.s.dtPane !== undefined) {
                              var rowData = pane.s.dtPane.rows({ selected: true }).data().toArray();
                              for (var i = 0; i < rowData.length; i++) {
                                  data.searchPanes[src][i] = rowData[i].display;
                              }
                          }
                      }
                      if (_this.c.viewTotal) {
                          _this._prepViewTotal();
                      }
                  });
              }
              else {
                  table.on('preXhr.dt', function (e, settings, data) {
                      for (var _i = 0, _a = _this.s.panes; _i < _a.length; _i++) {
                          var pane = _a[_i];
                          pane.clearData();
                      }
                  });
              }
              table.settings()[0]._searchPanes = this;
          };
          SearchPanes.prototype._prepViewTotal = function () {
              var filterPane = this.s.filterPane;
              var filterActive = false;
              for (var _i = 0, _a = this.s.panes; _i < _a.length; _i++) {
                  var pane = _a[_i];
                  if (pane.s.dtPane !== undefined) {
                      var selectLength = pane.s.dtPane.rows({ selected: true }).data().toArray().length;
                      // If filterPane === -1 then a pane with a selection has not been found yet, so set filterPane to that panes index
                      if (selectLength > 0 && filterPane === -1) {
                          filterPane = pane.s.index;
                          filterActive = true;
                      }
                      // Then if another pane is found with a selection then set filterPane to null to
                      //  show that multiple panes have selections present
                      else if (selectLength > 0) {
                          filterPane = null;
                      }
                  }
              }
              // Update all of the panes to reflect the current state of the filters
              for (var _b = 0, _c = this.s.panes; _b < _c.length; _b++) {
                  var pane = _c[_b];
                  if (pane.s.dtPane !== undefined) {
                      pane.s.filteringActive = true;
                      if ((filterPane !== -1 && filterPane !== null && filterPane === pane.s.index) || filterActive === false) {
                          pane.s.filteringActive = false;
                      }
                  }
              }
          };
          /**
           * Updates the number of filters that have been applied in the title
           */
          SearchPanes.prototype._updateFilterCount = function () {
              var filterCount = 0;
              // Add the number of all of the filters throughout the panes
              for (var _i = 0, _a = this.s.panes; _i < _a.length; _i++) {
                  var pane = _a[_i];
                  if (pane.s.dtPane !== undefined) {
                      filterCount += pane.getPaneCount();
                  }
              }
              // Run the message through the internationalisation method to improve readability
              var message = this.s.dt.i18n('searchPanes.title', 'Filters Active - %d', filterCount);
              $$1(this.dom.title).text(message);
              if (this.c.filterChanged !== undefined && typeof this.c.filterChanged === 'function') {
                  this.c.filterChanged(filterCount);
              }
          };
          /**
           * Updates the selectionList when cascade is not in place
           */
          SearchPanes.prototype._updateSelection = function () {
              this.s.selectionList = [];
              for (var _i = 0, _a = this.s.panes; _i < _a.length; _i++) {
                  var pane = _a[_i];
                  if (pane.s.dtPane !== undefined) {
                      this.s.selectionList.push({ index: pane.s.index, rows: pane.s.dtPane.rows({ selected: true }).data().toArray(), protect: false });
                  }
              }
              this.s.dt.state.save();
          };
          SearchPanes.version = '1.1.1';
          SearchPanes.classes = {
              clear: 'dtsp-clear',
              clearAll: 'dtsp-clearAll',
              container: 'dtsp-searchPanes',
              emptyMessage: 'dtsp-emptyMessage',
              hide: 'dtsp-hidden',
              panes: 'dtsp-panesContainer',
              search: 'dtsp-search',
              title: 'dtsp-title',
              titleRow: 'dtsp-titleRow'
          };
          // Define SearchPanes default options
          SearchPanes.defaults = {
              cascadePanes: false,
              clear: true,
              container: function (dt) {
                  return dt.table().container();
              },
              columns: [],
              filterChanged: undefined,
              layout: 'columns-3',
              order: [],
              panes: [],
              viewTotal: false
          };
          return SearchPanes;
      }());

      /*! SearchPanes 1.1.1
       * 2019-2020 SpryMedia Ltd - datatables.net/license
       */
      // DataTables extensions common UMD. Note that this allows for AMD, CommonJS
      // (with window and jQuery being allowed as parameters to the returned
      // function) or just default browser loading.
      (function (factory) {
          {
              // CommonJS
              module.exports = function (root, $) {
                  if (!root) {
                      root = window;
                  }
                  if (!$ || !$.fn.dataTable) {
                      $ = jquery_dataTables(root, $).$;
                  }
                  return factory($, root, root.document);
              };
          }
      }(function ($, window, document) {
          setJQuery($);
          setJQuery$1($);
          var DataTable = $.fn.dataTable;
          $.fn.dataTable.SearchPanes = SearchPanes;
          $.fn.DataTable.SearchPanes = SearchPanes;
          $.fn.dataTable.SearchPane = SearchPane;
          $.fn.DataTable.SearchPane = SearchPane;
          DataTable.Api.register('searchPanes.rebuild()', function () {
              return this.iterator('table', function () {
                  if (this.searchPanes) {
                      this.searchPanes.rebuild();
                  }
              });
          });
          DataTable.Api.register('column().paneOptions()', function (options) {
              return this.iterator('column', function (idx) {
                  var col = this.aoColumns[idx];
                  if (!col.searchPanes) {
                      col.searchPanes = {};
                  }
                  col.searchPanes.values = options;
                  if (this.searchPanes) {
                      this.searchPanes.rebuild();
                  }
              });
          });
          var apiRegister = $.fn.dataTable.Api.register;
          apiRegister('searchPanes()', function () {
              return this;
          });
          apiRegister('searchPanes.clearSelections()', function () {
              var ctx = this.context[0];
              ctx._searchPanes.clearSelections();
              return this;
          });
          apiRegister('searchPanes.rebuildPane()', function (targetIdx, maintainSelections) {
              var ctx = this.context[0];
              ctx._searchPanes.rebuild(targetIdx, maintainSelections);
              return this;
          });
          apiRegister('searchPanes.container()', function () {
              var ctx = this.context[0];
              return ctx._searchPanes.getNode();
          });
          $.fn.dataTable.ext.buttons.searchPanesClear = {
              text: 'Clear Panes',
              action: function (e, dt, node, config) {
                  dt.searchPanes.clearSelections();
              }
          };
          $.fn.dataTable.ext.buttons.searchPanes = {
              action: function (e, dt, node, config) {
                  e.stopPropagation();
                  this.popover(config._panes.getNode(), {
                      align: 'dt-container'
                  });
              },
              config: {},
              init: function (dt, node, config) {
                  var panes = new $.fn.dataTable.SearchPanes(dt, $.extend({
                      filterChanged: function (count) {
                          dt.button(node).text(dt.i18n('searchPanes.collapse', { 0: 'SearchPanes', _: 'SearchPanes (%d)' }, count));
                      }
                  }, config.config));
                  var message = dt.i18n('searchPanes.collapse', 'SearchPanes', 0);
                  dt.button(node).text(message);
                  config._panes = panes;
              },
              text: 'Search Panes'
          };
          function _init(settings, fromPre) {
              if (fromPre === void 0) { fromPre = false; }
              var api = new DataTable.Api(settings);
              var opts = api.init().searchPanes || DataTable.defaults.searchPanes;
              var searchPanes = new SearchPanes(api, opts, fromPre);
              var node = searchPanes.getNode();
              return node;
          }
          // Attach a listener to the document which listens for DataTables initialisation
          // events so we can automatically initialise
          $(document).on('preInit.dt.dtsp', function (e, settings, json) {
              if (e.namespace !== 'dt') {
                  return;
              }
              if (settings.oInit.searchPanes ||
                  DataTable.defaults.searchPanes) {
                  if (!settings._searchPanes) {
                      _init(settings, true);
                  }
              }
          });
          // DataTables `dom` feature option
          DataTable.ext.feature.push({
              cFeature: 'P',
              fnInit: _init
          });
          // DataTables 2 layout feature
          if (DataTable.ext.features) {
              DataTable.ext.features.register('searchPanes', _init);
          }
      }));

  }());
  });

  var searchPanes_bootstrap = createCommonjsModule(function (module, exports) {
  (function (factory) {
      {
          // CommonJS
          module.exports = function (root, $) {
              if (!root) {
                  root = window;
              }
              if (!$ || !$.fn.dataTable) {
                  $ = dataTables_bootstrap(root, $).$;
              }
              if (!$.fn.dataTable.searchPanes) {
                  dataTables_searchPanes(root, $);
              }
              return factory($, root, root.document);
          };
      }
  }(function ($, window, document) {
      var DataTable = $.fn.dataTable;
      $.extend(true, DataTable.SearchPane.classes, {
          buttonGroup: 'btn-group',
          disabledButton: 'disabled',
          dull: 'disabled',
          narrow: 'col narrow',
          narrowSub: 'row',
          pane: {
              container: 'table'
          },
          paneButton: 'btn btn-light',
          pill: 'badge badge-pill badge-light pill',
          search: 'col-sm form-control search',
          searchCont: 'input-group dtsp-searchCont',
          searchLabelCont: 'input-group-btn',
          show: 'col',
          subRow1: 'dtsp-subRow1 text-right',
          subRow2: 'dtsp-subRow2 text-right',
          table: 'table table-condensed',
          topRow: 'dtsp-topRow'
      });
      $.extend(true, DataTable.SearchPanes.classes, {
          clearAll: 'dtsp-clearAll col-1 btn btn-light',
          container: 'dtsp-searchPanes row',
          panes: 'dtsp-panesContainer',
          title: 'dtsp-title col-10',
          titleRow: 'row'
      });
      return DataTable.searchPanes;
  }));
  });

  var dataTables_select = createCommonjsModule(function (module, exports) {
  /*! Select for DataTables 1.3.1
   * 2015-2019 SpryMedia Ltd - datatables.net/license/mit
   */

  /**
   * @summary     Select for DataTables
   * @description A collection of API methods, events and buttons for DataTables
   *   that provides selection options of the items in a DataTable
   * @version     1.3.1
   * @file        dataTables.select.js
   * @author      SpryMedia Ltd (www.sprymedia.co.uk)
   * @contact     datatables.net/forums
   * @copyright   Copyright 2015-2019 SpryMedia Ltd.
   *
   * This source file is free software, available under the following license:
   *   MIT license - http://datatables.net/license/mit
   *
   * This source file is distributed in the hope that it will be useful, but
   * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
   * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.
   *
   * For details please refer to: http://www.datatables.net/extensions/select
   */
  (function( factory ){
  	{
  		// CommonJS
  		module.exports = function (root, $) {
  			if ( ! root ) {
  				root = window;
  			}

  			if ( ! $ || ! $.fn.dataTable ) {
  				$ = jquery_dataTables(root, $).$;
  			}

  			return factory( $, root, root.document );
  		};
  	}
  }(function( $, window, document, undefined$1 ) {
  var DataTable = $.fn.dataTable;


  // Version information for debugger
  DataTable.select = {};

  DataTable.select.version = '1.3.1';

  DataTable.select.init = function ( dt ) {
  	var ctx = dt.settings()[0];
  	var init = ctx.oInit.select;
  	var defaults = DataTable.defaults.select;
  	var opts = init === undefined$1 ?
  		defaults :
  		init;

  	// Set defaults
  	var items = 'row';
  	var style = 'api';
  	var blurable = false;
  	var toggleable = true;
  	var info = true;
  	var selector = 'td, th';
  	var className = 'selected';
  	var setStyle = false;

  	ctx._select = {};

  	// Initialisation customisations
  	if ( opts === true ) {
  		style = 'os';
  		setStyle = true;
  	}
  	else if ( typeof opts === 'string' ) {
  		style = opts;
  		setStyle = true;
  	}
  	else if ( $.isPlainObject( opts ) ) {
  		if ( opts.blurable !== undefined$1 ) {
  			blurable = opts.blurable;
  		}
  		
  		if ( opts.toggleable !== undefined$1 ) {
  			toggleable = opts.toggleable;
  		}

  		if ( opts.info !== undefined$1 ) {
  			info = opts.info;
  		}

  		if ( opts.items !== undefined$1 ) {
  			items = opts.items;
  		}

  		if ( opts.style !== undefined$1 ) {
  			style = opts.style;
  			setStyle = true;
  		}
  		else {
  			style = 'os';
  			setStyle = true;
  		}

  		if ( opts.selector !== undefined$1 ) {
  			selector = opts.selector;
  		}

  		if ( opts.className !== undefined$1 ) {
  			className = opts.className;
  		}
  	}

  	dt.select.selector( selector );
  	dt.select.items( items );
  	dt.select.style( style );
  	dt.select.blurable( blurable );
  	dt.select.toggleable( toggleable );
  	dt.select.info( info );
  	ctx._select.className = className;


  	// Sort table based on selected rows. Requires Select Datatables extension
  	$.fn.dataTable.ext.order['select-checkbox'] = function ( settings, col ) {
  		return this.api().column( col, {order: 'index'} ).nodes().map( function ( td ) {
  			if ( settings._select.items === 'row' ) {
  				return $( td ).parent().hasClass( settings._select.className );
  			} else if ( settings._select.items === 'cell' ) {
  				return $( td ).hasClass( settings._select.className );
  			}
  			return false;
  		});
  	};

  	// If the init options haven't enabled select, but there is a selectable
  	// class name, then enable
  	if ( ! setStyle && $( dt.table().node() ).hasClass( 'selectable' ) ) {
  		dt.select.style( 'os' );
  	}
  };

  /*

  Select is a collection of API methods, event handlers, event emitters and
  buttons (for the `Buttons` extension) for DataTables. It provides the following
  features, with an overview of how they are implemented:

  ## Selection of rows, columns and cells. Whether an item is selected or not is
     stored in:

  * rows: a `_select_selected` property which contains a boolean value of the
    DataTables' `aoData` object for each row
  * columns: a `_select_selected` property which contains a boolean value of the
    DataTables' `aoColumns` object for each column
  * cells: a `_selected_cells` property which contains an array of boolean values
    of the `aoData` object for each row. The array is the same length as the
    columns array, with each element of it representing a cell.

  This method of using boolean flags allows Select to operate when nodes have not
  been created for rows / cells (DataTables' defer rendering feature).

  ## API methods

  A range of API methods are available for triggering selection and de-selection
  of rows. Methods are also available to configure the selection events that can
  be triggered by an end user (such as which items are to be selected). To a large
  extent, these of API methods *is* Select. It is basically a collection of helper
  functions that can be used to select items in a DataTable.

  Configuration of select is held in the object `_select` which is attached to the
  DataTables settings object on initialisation. Select being available on a table
  is not optional when Select is loaded, but its default is for selection only to
  be available via the API - so the end user wouldn't be able to select rows
  without additional configuration.

  The `_select` object contains the following properties:

  ```
  {
  	items:string       - Can be `rows`, `columns` or `cells`. Defines what item 
  	                     will be selected if the user is allowed to activate row
  	                     selection using the mouse.
  	style:string       - Can be `none`, `single`, `multi` or `os`. Defines the
  	                     interaction style when selecting items
  	blurable:boolean   - If row selection can be cleared by clicking outside of
  	                     the table
  	toggleable:boolean - If row selection can be cancelled by repeated clicking
  	                     on the row
  	info:boolean       - If the selection summary should be shown in the table
  	                     information elements
  }
  ```

  In addition to the API methods, Select also extends the DataTables selector
  options for rows, columns and cells adding a `selected` option to the selector
  options object, allowing the developer to select only selected items or
  unselected items.

  ## Mouse selection of items

  Clicking on items can be used to select items. This is done by a simple event
  handler that will select the items using the API methods.

   */


  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   * Local functions
   */

  /**
   * Add one or more cells to the selection when shift clicking in OS selection
   * style cell selection.
   *
   * Cell range is more complicated than row and column as we want to select
   * in the visible grid rather than by index in sequence. For example, if you
   * click first in cell 1-1 and then shift click in 2-2 - cells 1-2 and 2-1
   * should also be selected (and not 1-3, 1-4. etc)
   * 
   * @param  {DataTable.Api} dt   DataTable
   * @param  {object}        idx  Cell index to select to
   * @param  {object}        last Cell index to select from
   * @private
   */
  function cellRange( dt, idx, last )
  {
  	var indexes;
  	var columnIndexes;
  	var rowIndexes;
  	var selectColumns = function ( start, end ) {
  		if ( start > end ) {
  			var tmp = end;
  			end = start;
  			start = tmp;
  		}
  		
  		var record = false;
  		return dt.columns( ':visible' ).indexes().filter( function (i) {
  			if ( i === start ) {
  				record = true;
  			}
  			
  			if ( i === end ) { // not else if, as start might === end
  				record = false;
  				return true;
  			}

  			return record;
  		} );
  	};

  	var selectRows = function ( start, end ) {
  		var indexes = dt.rows( { search: 'applied' } ).indexes();

  		// Which comes first - might need to swap
  		if ( indexes.indexOf( start ) > indexes.indexOf( end ) ) {
  			var tmp = end;
  			end = start;
  			start = tmp;
  		}

  		var record = false;
  		return indexes.filter( function (i) {
  			if ( i === start ) {
  				record = true;
  			}
  			
  			if ( i === end ) {
  				record = false;
  				return true;
  			}

  			return record;
  		} );
  	};

  	if ( ! dt.cells( { selected: true } ).any() && ! last ) {
  		// select from the top left cell to this one
  		columnIndexes = selectColumns( 0, idx.column );
  		rowIndexes = selectRows( 0 , idx.row );
  	}
  	else {
  		// Get column indexes between old and new
  		columnIndexes = selectColumns( last.column, idx.column );
  		rowIndexes = selectRows( last.row , idx.row );
  	}

  	indexes = dt.cells( rowIndexes, columnIndexes ).flatten();

  	if ( ! dt.cells( idx, { selected: true } ).any() ) {
  		// Select range
  		dt.cells( indexes ).select();
  	}
  	else {
  		// Deselect range
  		dt.cells( indexes ).deselect();
  	}
  }

  /**
   * Disable mouse selection by removing the selectors
   *
   * @param {DataTable.Api} dt DataTable to remove events from
   * @private
   */
  function disableMouseSelection( dt )
  {
  	var ctx = dt.settings()[0];
  	var selector = ctx._select.selector;

  	$( dt.table().container() )
  		.off( 'mousedown.dtSelect', selector )
  		.off( 'mouseup.dtSelect', selector )
  		.off( 'click.dtSelect', selector );

  	$('body').off( 'click.dtSelect' + _safeId(dt.table().node()) );
  }

  /**
   * Attach mouse listeners to the table to allow mouse selection of items
   *
   * @param {DataTable.Api} dt DataTable to remove events from
   * @private
   */
  function enableMouseSelection ( dt )
  {
  	var container = $( dt.table().container() );
  	var ctx = dt.settings()[0];
  	var selector = ctx._select.selector;
  	var matchSelection;

  	container
  		.on( 'mousedown.dtSelect', selector, function(e) {
  			// Disallow text selection for shift clicking on the table so multi
  			// element selection doesn't look terrible!
  			if ( e.shiftKey || e.metaKey || e.ctrlKey ) {
  				container
  					.css( '-moz-user-select', 'none' )
  					.one('selectstart.dtSelect', selector, function () {
  						return false;
  					} );
  			}

  			if ( window.getSelection ) {
  				matchSelection = window.getSelection();
  			}
  		} )
  		.on( 'mouseup.dtSelect', selector, function() {
  			// Allow text selection to occur again, Mozilla style (tested in FF
  			// 35.0.1 - still required)
  			container.css( '-moz-user-select', '' );
  		} )
  		.on( 'click.dtSelect', selector, function ( e ) {
  			var items = dt.select.items();
  			var idx;

  			// If text was selected (click and drag), then we shouldn't change
  			// the row's selected state
  			if ( matchSelection ) {
  				var selection = window.getSelection();

  				// If the element that contains the selection is not in the table, we can ignore it
  				// This can happen if the developer selects text from the click event
  				if ( ! selection.anchorNode || $(selection.anchorNode).closest('table')[0] === dt.table().node() ) {
  					if ( selection !== matchSelection ) {
  						return;
  					}
  				}
  			}

  			var ctx = dt.settings()[0];
  			var wrapperClass = $.trim(dt.settings()[0].oClasses.sWrapper).replace(/ +/g, '.');

  			// Ignore clicks inside a sub-table
  			if ( $(e.target).closest('div.'+wrapperClass)[0] != dt.table().container() ) {
  				return;
  			}

  			var cell = dt.cell( $(e.target).closest('td, th') );

  			// Check the cell actually belongs to the host DataTable (so child
  			// rows, etc, are ignored)
  			if ( ! cell.any() ) {
  				return;
  			}

  			var event = $.Event('user-select.dt');
  			eventTrigger( dt, event, [ items, cell, e ] );

  			if ( event.isDefaultPrevented() ) {
  				return;
  			}

  			var cellIndex = cell.index();
  			if ( items === 'row' ) {
  				idx = cellIndex.row;
  				typeSelect( e, dt, ctx, 'row', idx );
  			}
  			else if ( items === 'column' ) {
  				idx = cell.index().column;
  				typeSelect( e, dt, ctx, 'column', idx );
  			}
  			else if ( items === 'cell' ) {
  				idx = cell.index();
  				typeSelect( e, dt, ctx, 'cell', idx );
  			}

  			ctx._select_lastCell = cellIndex;
  		} );

  	// Blurable
  	$('body').on( 'click.dtSelect' + _safeId(dt.table().node()), function ( e ) {
  		if ( ctx._select.blurable ) {
  			// If the click was inside the DataTables container, don't blur
  			if ( $(e.target).parents().filter( dt.table().container() ).length ) {
  				return;
  			}

  			// Ignore elements which have been removed from the DOM (i.e. paging
  			// buttons)
  			if ( $(e.target).parents('html').length === 0 ) {
  			 	return;
  			}

  			// Don't blur in Editor form
  			if ( $(e.target).parents('div.DTE').length ) {
  				return;
  			}

  			clear( ctx, true );
  		}
  	} );
  }

  /**
   * Trigger an event on a DataTable
   *
   * @param {DataTable.Api} api      DataTable to trigger events on
   * @param  {boolean}      selected true if selected, false if deselected
   * @param  {string}       type     Item type acting on
   * @param  {boolean}      any      Require that there are values before
   *     triggering
   * @private
   */
  function eventTrigger ( api, type, args, any )
  {
  	if ( any && ! api.flatten().length ) {
  		return;
  	}

  	if ( typeof type === 'string' ) {
  		type = type +'.dt';
  	}

  	args.unshift( api );

  	$(api.table().node()).trigger( type, args );
  }

  /**
   * Update the information element of the DataTable showing information about the
   * items selected. This is done by adding tags to the existing text
   * 
   * @param {DataTable.Api} api DataTable to update
   * @private
   */
  function info ( api )
  {
  	var ctx = api.settings()[0];

  	if ( ! ctx._select.info || ! ctx.aanFeatures.i ) {
  		return;
  	}

  	if ( api.select.style() === 'api' ) {
  		return;
  	}

  	var rows    = api.rows( { selected: true } ).flatten().length;
  	var columns = api.columns( { selected: true } ).flatten().length;
  	var cells   = api.cells( { selected: true } ).flatten().length;

  	var add = function ( el, name, num ) {
  		el.append( $('<span class="select-item"/>').append( api.i18n(
  			'select.'+name+'s',
  			{ _: '%d '+name+'s selected', 0: '', 1: '1 '+name+' selected' },
  			num
  		) ) );
  	};

  	// Internal knowledge of DataTables to loop over all information elements
  	$.each( ctx.aanFeatures.i, function ( i, el ) {
  		el = $(el);

  		var output  = $('<span class="select-info"/>');
  		add( output, 'row', rows );
  		add( output, 'column', columns );
  		add( output, 'cell', cells  );

  		var exisiting = el.children('span.select-info');
  		if ( exisiting.length ) {
  			exisiting.remove();
  		}

  		if ( output.text() !== '' ) {
  			el.append( output );
  		}
  	} );
  }

  /**
   * Initialisation of a new table. Attach event handlers and callbacks to allow
   * Select to operate correctly.
   *
   * This will occur _after_ the initial DataTables initialisation, although
   * before Ajax data is rendered, if there is ajax data
   *
   * @param  {DataTable.settings} ctx Settings object to operate on
   * @private
   */
  function init ( ctx ) {
  	var api = new DataTable.Api( ctx );

  	// Row callback so that classes can be added to rows and cells if the item
  	// was selected before the element was created. This will happen with the
  	// `deferRender` option enabled.
  	// 
  	// This method of attaching to `aoRowCreatedCallback` is a hack until
  	// DataTables has proper events for row manipulation If you are reviewing
  	// this code to create your own plug-ins, please do not do this!
  	ctx.aoRowCreatedCallback.push( {
  		fn: function ( row, data, index ) {
  			var i, ien;
  			var d = ctx.aoData[ index ];

  			// Row
  			if ( d._select_selected ) {
  				$( row ).addClass( ctx._select.className );
  			}

  			// Cells and columns - if separated out, we would need to do two
  			// loops, so it makes sense to combine them into a single one
  			for ( i=0, ien=ctx.aoColumns.length ; i<ien ; i++ ) {
  				if ( ctx.aoColumns[i]._select_selected || (d._selected_cells && d._selected_cells[i]) ) {
  					$(d.anCells[i]).addClass( ctx._select.className );
  				}
  			}
  		},
  		sName: 'select-deferRender'
  	} );

  	// On Ajax reload we want to reselect all rows which are currently selected,
  	// if there is an rowId (i.e. a unique value to identify each row with)
  	api.on( 'preXhr.dt.dtSelect', function () {
  		// note that column selection doesn't need to be cached and then
  		// reselected, as they are already selected
  		var rows = api.rows( { selected: true } ).ids( true ).filter( function ( d ) {
  			return d !== undefined$1;
  		} );

  		var cells = api.cells( { selected: true } ).eq(0).map( function ( cellIdx ) {
  			var id = api.row( cellIdx.row ).id( true );
  			return id ?
  				{ row: id, column: cellIdx.column } :
  				undefined$1;
  		} ).filter( function ( d ) {
  			return d !== undefined$1;
  		} );

  		// On the next draw, reselect the currently selected items
  		api.one( 'draw.dt.dtSelect', function () {
  			api.rows( rows ).select();

  			// `cells` is not a cell index selector, so it needs a loop
  			if ( cells.any() ) {
  				cells.each( function ( id ) {
  					api.cells( id.row, id.column ).select();
  				} );
  			}
  		} );
  	} );

  	// Update the table information element with selected item summary
  	api.on( 'draw.dtSelect.dt select.dtSelect.dt deselect.dtSelect.dt info.dt', function () {
  		info( api );
  	} );

  	// Clean up and release
  	api.on( 'destroy.dtSelect', function () {
  		disableMouseSelection( api );
  		api.off( '.dtSelect' );
  	} );
  }

  /**
   * Add one or more items (rows or columns) to the selection when shift clicking
   * in OS selection style
   *
   * @param  {DataTable.Api} dt   DataTable
   * @param  {string}        type Row or column range selector
   * @param  {object}        idx  Item index to select to
   * @param  {object}        last Item index to select from
   * @private
   */
  function rowColumnRange( dt, type, idx, last )
  {
  	// Add a range of rows from the last selected row to this one
  	var indexes = dt[type+'s']( { search: 'applied' } ).indexes();
  	var idx1 = $.inArray( last, indexes );
  	var idx2 = $.inArray( idx, indexes );

  	if ( ! dt[type+'s']( { selected: true } ).any() && idx1 === -1 ) {
  		// select from top to here - slightly odd, but both Windows and Mac OS
  		// do this
  		indexes.splice( $.inArray( idx, indexes )+1, indexes.length );
  	}
  	else {
  		// reverse so we can shift click 'up' as well as down
  		if ( idx1 > idx2 ) {
  			var tmp = idx2;
  			idx2 = idx1;
  			idx1 = tmp;
  		}

  		indexes.splice( idx2+1, indexes.length );
  		indexes.splice( 0, idx1 );
  	}

  	if ( ! dt[type]( idx, { selected: true } ).any() ) {
  		// Select range
  		dt[type+'s']( indexes ).select();
  	}
  	else {
  		// Deselect range - need to keep the clicked on row selected
  		indexes.splice( $.inArray( idx, indexes ), 1 );
  		dt[type+'s']( indexes ).deselect();
  	}
  }

  /**
   * Clear all selected items
   *
   * @param  {DataTable.settings} ctx Settings object of the host DataTable
   * @param  {boolean} [force=false] Force the de-selection to happen, regardless
   *     of selection style
   * @private
   */
  function clear( ctx, force )
  {
  	if ( force || ctx._select.style === 'single' ) {
  		var api = new DataTable.Api( ctx );
  		
  		api.rows( { selected: true } ).deselect();
  		api.columns( { selected: true } ).deselect();
  		api.cells( { selected: true } ).deselect();
  	}
  }

  /**
   * Select items based on the current configuration for style and items.
   *
   * @param  {object}             e    Mouse event object
   * @param  {DataTables.Api}     dt   DataTable
   * @param  {DataTable.settings} ctx  Settings object of the host DataTable
   * @param  {string}             type Items to select
   * @param  {int|object}         idx  Index of the item to select
   * @private
   */
  function typeSelect ( e, dt, ctx, type, idx )
  {
  	var style = dt.select.style();
  	var toggleable = dt.select.toggleable();
  	var isSelected = dt[type]( idx, { selected: true } ).any();
  	
  	if ( isSelected && ! toggleable ) {
  		return;
  	}

  	if ( style === 'os' ) {
  		if ( e.ctrlKey || e.metaKey ) {
  			// Add or remove from the selection
  			dt[type]( idx ).select( ! isSelected );
  		}
  		else if ( e.shiftKey ) {
  			if ( type === 'cell' ) {
  				cellRange( dt, idx, ctx._select_lastCell || null );
  			}
  			else {
  				rowColumnRange( dt, type, idx, ctx._select_lastCell ?
  					ctx._select_lastCell[type] :
  					null
  				);
  			}
  		}
  		else {
  			// No cmd or shift click - deselect if selected, or select
  			// this row only
  			var selected = dt[type+'s']( { selected: true } );

  			if ( isSelected && selected.flatten().length === 1 ) {
  				dt[type]( idx ).deselect();
  			}
  			else {
  				selected.deselect();
  				dt[type]( idx ).select();
  			}
  		}
  	} else if ( style == 'multi+shift' ) {
  		if ( e.shiftKey ) {
  			if ( type === 'cell' ) {
  				cellRange( dt, idx, ctx._select_lastCell || null );
  			}
  			else {
  				rowColumnRange( dt, type, idx, ctx._select_lastCell ?
  					ctx._select_lastCell[type] :
  					null
  				);
  			}
  		}
  		else {
  			dt[ type ]( idx ).select( ! isSelected );
  		}
  	}
  	else {
  		dt[ type ]( idx ).select( ! isSelected );
  	}
  }

  function _safeId( node ) {
  	return node.id.replace(/[^a-zA-Z0-9\-\_]/g, '-');
  }



  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   * DataTables selectors
   */

  // row and column are basically identical just assigned to different properties
  // and checking a different array, so we can dynamically create the functions to
  // reduce the code size
  $.each( [
  	{ type: 'row', prop: 'aoData' },
  	{ type: 'column', prop: 'aoColumns' }
  ], function ( i, o ) {
  	DataTable.ext.selector[ o.type ].push( function ( settings, opts, indexes ) {
  		var selected = opts.selected;
  		var data;
  		var out = [];

  		if ( selected !== true && selected !== false ) {
  			return indexes;
  		}

  		for ( var i=0, ien=indexes.length ; i<ien ; i++ ) {
  			data = settings[ o.prop ][ indexes[i] ];

  			if ( (selected === true && data._select_selected === true) ||
  			     (selected === false && ! data._select_selected )
  			) {
  				out.push( indexes[i] );
  			}
  		}

  		return out;
  	} );
  } );

  DataTable.ext.selector.cell.push( function ( settings, opts, cells ) {
  	var selected = opts.selected;
  	var rowData;
  	var out = [];

  	if ( selected === undefined$1 ) {
  		return cells;
  	}

  	for ( var i=0, ien=cells.length ; i<ien ; i++ ) {
  		rowData = settings.aoData[ cells[i].row ];

  		if ( (selected === true && rowData._selected_cells && rowData._selected_cells[ cells[i].column ] === true) ||
  		     (selected === false && ( ! rowData._selected_cells || ! rowData._selected_cells[ cells[i].column ] ) )
  		) {
  			out.push( cells[i] );
  		}
  	}

  	return out;
  } );



  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   * DataTables API
   *
   * For complete documentation, please refer to the docs/api directory or the
   * DataTables site
   */

  // Local variables to improve compression
  var apiRegister = DataTable.Api.register;
  var apiRegisterPlural = DataTable.Api.registerPlural;

  apiRegister( 'select()', function () {
  	return this.iterator( 'table', function ( ctx ) {
  		DataTable.select.init( new DataTable.Api( ctx ) );
  	} );
  } );

  apiRegister( 'select.blurable()', function ( flag ) {
  	if ( flag === undefined$1 ) {
  		return this.context[0]._select.blurable;
  	}

  	return this.iterator( 'table', function ( ctx ) {
  		ctx._select.blurable = flag;
  	} );
  } );

  apiRegister( 'select.toggleable()', function ( flag ) {
  	if ( flag === undefined$1 ) {
  		return this.context[0]._select.toggleable;
  	}

  	return this.iterator( 'table', function ( ctx ) {
  		ctx._select.toggleable = flag;
  	} );
  } );

  apiRegister( 'select.info()', function ( flag ) {
  	if ( info === undefined$1 ) {
  		return this.context[0]._select.info;
  	}

  	return this.iterator( 'table', function ( ctx ) {
  		ctx._select.info = flag;
  	} );
  } );

  apiRegister( 'select.items()', function ( items ) {
  	if ( items === undefined$1 ) {
  		return this.context[0]._select.items;
  	}

  	return this.iterator( 'table', function ( ctx ) {
  		ctx._select.items = items;

  		eventTrigger( new DataTable.Api( ctx ), 'selectItems', [ items ] );
  	} );
  } );

  // Takes effect from the _next_ selection. None disables future selection, but
  // does not clear the current selection. Use the `deselect` methods for that
  apiRegister( 'select.style()', function ( style ) {
  	if ( style === undefined$1 ) {
  		return this.context[0]._select.style;
  	}

  	return this.iterator( 'table', function ( ctx ) {
  		ctx._select.style = style;

  		if ( ! ctx._select_init ) {
  			init( ctx );
  		}

  		// Add / remove mouse event handlers. They aren't required when only
  		// API selection is available
  		var dt = new DataTable.Api( ctx );
  		disableMouseSelection( dt );
  		
  		if ( style !== 'api' ) {
  			enableMouseSelection( dt );
  		}

  		eventTrigger( new DataTable.Api( ctx ), 'selectStyle', [ style ] );
  	} );
  } );

  apiRegister( 'select.selector()', function ( selector ) {
  	if ( selector === undefined$1 ) {
  		return this.context[0]._select.selector;
  	}

  	return this.iterator( 'table', function ( ctx ) {
  		disableMouseSelection( new DataTable.Api( ctx ) );

  		ctx._select.selector = selector;

  		if ( ctx._select.style !== 'api' ) {
  			enableMouseSelection( new DataTable.Api( ctx ) );
  		}
  	} );
  } );



  apiRegisterPlural( 'rows().select()', 'row().select()', function ( select ) {
  	var api = this;

  	if ( select === false ) {
  		return this.deselect();
  	}

  	this.iterator( 'row', function ( ctx, idx ) {
  		clear( ctx );

  		ctx.aoData[ idx ]._select_selected = true;
  		$( ctx.aoData[ idx ].nTr ).addClass( ctx._select.className );
  	} );

  	this.iterator( 'table', function ( ctx, i ) {
  		eventTrigger( api, 'select', [ 'row', api[i] ], true );
  	} );

  	return this;
  } );

  apiRegisterPlural( 'columns().select()', 'column().select()', function ( select ) {
  	var api = this;

  	if ( select === false ) {
  		return this.deselect();
  	}

  	this.iterator( 'column', function ( ctx, idx ) {
  		clear( ctx );

  		ctx.aoColumns[ idx ]._select_selected = true;

  		var column = new DataTable.Api( ctx ).column( idx );

  		$( column.header() ).addClass( ctx._select.className );
  		$( column.footer() ).addClass( ctx._select.className );

  		column.nodes().to$().addClass( ctx._select.className );
  	} );

  	this.iterator( 'table', function ( ctx, i ) {
  		eventTrigger( api, 'select', [ 'column', api[i] ], true );
  	} );

  	return this;
  } );

  apiRegisterPlural( 'cells().select()', 'cell().select()', function ( select ) {
  	var api = this;

  	if ( select === false ) {
  		return this.deselect();
  	}

  	this.iterator( 'cell', function ( ctx, rowIdx, colIdx ) {
  		clear( ctx );

  		var data = ctx.aoData[ rowIdx ];

  		if ( data._selected_cells === undefined$1 ) {
  			data._selected_cells = [];
  		}

  		data._selected_cells[ colIdx ] = true;

  		if ( data.anCells ) {
  			$( data.anCells[ colIdx ] ).addClass( ctx._select.className );
  		}
  	} );

  	this.iterator( 'table', function ( ctx, i ) {
  		eventTrigger( api, 'select', [ 'cell', api[i] ], true );
  	} );

  	return this;
  } );


  apiRegisterPlural( 'rows().deselect()', 'row().deselect()', function () {
  	var api = this;

  	this.iterator( 'row', function ( ctx, idx ) {
  		ctx.aoData[ idx ]._select_selected = false;
  		$( ctx.aoData[ idx ].nTr ).removeClass( ctx._select.className );
  	} );

  	this.iterator( 'table', function ( ctx, i ) {
  		eventTrigger( api, 'deselect', [ 'row', api[i] ], true );
  	} );

  	return this;
  } );

  apiRegisterPlural( 'columns().deselect()', 'column().deselect()', function () {
  	var api = this;

  	this.iterator( 'column', function ( ctx, idx ) {
  		ctx.aoColumns[ idx ]._select_selected = false;

  		var api = new DataTable.Api( ctx );
  		var column = api.column( idx );

  		$( column.header() ).removeClass( ctx._select.className );
  		$( column.footer() ).removeClass( ctx._select.className );

  		// Need to loop over each cell, rather than just using
  		// `column().nodes()` as cells which are individually selected should
  		// not have the `selected` class removed from them
  		api.cells( null, idx ).indexes().each( function (cellIdx) {
  			var data = ctx.aoData[ cellIdx.row ];
  			var cellSelected = data._selected_cells;

  			if ( data.anCells && (! cellSelected || ! cellSelected[ cellIdx.column ]) ) {
  				$( data.anCells[ cellIdx.column  ] ).removeClass( ctx._select.className );
  			}
  		} );
  	} );

  	this.iterator( 'table', function ( ctx, i ) {
  		eventTrigger( api, 'deselect', [ 'column', api[i] ], true );
  	} );

  	return this;
  } );

  apiRegisterPlural( 'cells().deselect()', 'cell().deselect()', function () {
  	var api = this;

  	this.iterator( 'cell', function ( ctx, rowIdx, colIdx ) {
  		var data = ctx.aoData[ rowIdx ];

  		data._selected_cells[ colIdx ] = false;

  		// Remove class only if the cells exist, and the cell is not column
  		// selected, in which case the class should remain (since it is selected
  		// in the column)
  		if ( data.anCells && ! ctx.aoColumns[ colIdx ]._select_selected ) {
  			$( data.anCells[ colIdx ] ).removeClass( ctx._select.className );
  		}
  	} );

  	this.iterator( 'table', function ( ctx, i ) {
  		eventTrigger( api, 'deselect', [ 'cell', api[i] ], true );
  	} );

  	return this;
  } );



  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   * Buttons
   */
  function i18n( label, def ) {
  	return function (dt) {
  		return dt.i18n( 'buttons.'+label, def );
  	};
  }

  // Common events with suitable namespaces
  function namespacedEvents ( config ) {
  	var unique = config._eventNamespace;

  	return 'draw.dt.DT'+unique+' select.dt.DT'+unique+' deselect.dt.DT'+unique;
  }

  function enabled ( dt, config ) {
  	if ( $.inArray( 'rows', config.limitTo ) !== -1 && dt.rows( { selected: true } ).any() ) {
  		return true;
  	}

  	if ( $.inArray( 'columns', config.limitTo ) !== -1 && dt.columns( { selected: true } ).any() ) {
  		return true;
  	}

  	if ( $.inArray( 'cells', config.limitTo ) !== -1 && dt.cells( { selected: true } ).any() ) {
  		return true;
  	}

  	return false;
  }

  var _buttonNamespace = 0;

  $.extend( DataTable.ext.buttons, {
  	selected: {
  		text: i18n( 'selected', 'Selected' ),
  		className: 'buttons-selected',
  		limitTo: [ 'rows', 'columns', 'cells' ],
  		init: function ( dt, node, config ) {
  			var that = this;
  			config._eventNamespace = '.select'+(_buttonNamespace++);

  			// .DT namespace listeners are removed by DataTables automatically
  			// on table destroy
  			dt.on( namespacedEvents(config), function () {
  				that.enable( enabled(dt, config) );
  			} );

  			this.disable();
  		},
  		destroy: function ( dt, node, config ) {
  			dt.off( config._eventNamespace );
  		}
  	},
  	selectedSingle: {
  		text: i18n( 'selectedSingle', 'Selected single' ),
  		className: 'buttons-selected-single',
  		init: function ( dt, node, config ) {
  			var that = this;
  			config._eventNamespace = '.select'+(_buttonNamespace++);

  			dt.on( namespacedEvents(config), function () {
  				var count = dt.rows( { selected: true } ).flatten().length +
  				            dt.columns( { selected: true } ).flatten().length +
  				            dt.cells( { selected: true } ).flatten().length;

  				that.enable( count === 1 );
  			} );

  			this.disable();
  		},
  		destroy: function ( dt, node, config ) {
  			dt.off( config._eventNamespace );
  		}
  	},
  	selectAll: {
  		text: i18n( 'selectAll', 'Select all' ),
  		className: 'buttons-select-all',
  		action: function () {
  			var items = this.select.items();
  			this[ items+'s' ]().select();
  		}
  	},
  	selectNone: {
  		text: i18n( 'selectNone', 'Deselect all' ),
  		className: 'buttons-select-none',
  		action: function () {
  			clear( this.settings()[0], true );
  		},
  		init: function ( dt, node, config ) {
  			var that = this;
  			config._eventNamespace = '.select'+(_buttonNamespace++);

  			dt.on( namespacedEvents(config), function () {
  				var count = dt.rows( { selected: true } ).flatten().length +
  				            dt.columns( { selected: true } ).flatten().length +
  				            dt.cells( { selected: true } ).flatten().length;

  				that.enable( count > 0 );
  			} );

  			this.disable();
  		},
  		destroy: function ( dt, node, config ) {
  			dt.off( config._eventNamespace );
  		}
  	}
  } );

  $.each( [ 'Row', 'Column', 'Cell' ], function ( i, item ) {
  	var lc = item.toLowerCase();

  	DataTable.ext.buttons[ 'select'+item+'s' ] = {
  		text: i18n( 'select'+item+'s', 'Select '+lc+'s' ),
  		className: 'buttons-select-'+lc+'s',
  		action: function () {
  			this.select.items( lc );
  		},
  		init: function ( dt ) {
  			var that = this;

  			dt.on( 'selectItems.dt.DT', function ( e, ctx, items ) {
  				that.active( items === lc );
  			} );
  		}
  	};
  } );



  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   * Initialisation
   */

  // DataTables creation - check if select has been defined in the options. Note
  // this required that the table be in the document! If it isn't then something
  // needs to trigger this method unfortunately. The next major release of
  // DataTables will rework the events and address this.
  $(document).on( 'preInit.dt.dtSelect', function (e, ctx) {
  	if ( e.namespace !== 'dt' ) {
  		return;
  	}

  	DataTable.select.init( new DataTable.Api( ctx ) );
  } );


  return DataTable.select;
  }));
  });

  var select_bootstrap = createCommonjsModule(function (module, exports) {
  /*! Bootstrap 3 styling wrapper for Select
   * ©2018 SpryMedia Ltd - datatables.net/license
   */

  (function( factory ){
  	{
  		// CommonJS
  		module.exports = function (root, $) {
  			if ( ! root ) {
  				root = window;
  			}

  			if ( ! $ || ! $.fn.dataTable ) {
  				$ = dataTables_bootstrap(root, $).$;
  			}

  			if ( ! $.fn.dataTable.select ) {
  				dataTables_select(root, $);
  			}

  			return factory( $, root, root.document );
  		};
  	}
  }(function( $, window, document, undefined$1 ) {

  return $.fn.dataTable;

  }));
  });

  // import loadMetadata from './data-config'

  window.jQuery = window.$ = $;
  dataTables_bootstrap(window, $);
  dataTables_buttons(window, $);
  buttons_bootstrap(window, $);
  buttons_colVis(window, $);
  buttons_html5(window, $);
  scroller_bootstrap(window, $);
  searchPanes_bootstrap(window, $);
  select_bootstrap(window, $);

  function loadMetadata() {
    return {
      djornl_node: {
        user_notes: { title: 'User Notes', type: 'string', examples: ['flowering time related'] },
        go_terms: {
          type: 'array',
          uniqueItems: true,
          items: { $ref: '#/definitions/go_term' },
          definitions: {
            go_term: {
              examples: ['GO:0003700', 'GO:0005515'],
              type: 'string',
              format: 'regex',
              pattern: '^GO:\\d{7}$',
            },
          },
          title: 'GO term IDs',
        },
        mapman_name: {
          examples: ['.RNA biosynthesis.transcriptional regulation.transcription factor (NAC)'],
          type: 'string',
          title: 'Mapman name',
        },
        tair_computational_description: {
          title: 'TAIR computational description',
          type: 'string',
          examples: ['NAC domain containing protein 1;(source:Araport11)'],
        },
        transcript: { title: 'Transcript', type: 'string', examples: ['AT1G01010.1'] },
        pheno_ref: {
          title: 'Phenotype reference',
          type: 'string',
          examples: ['Atwell et. al, Nature 2010'],
        },
        clusters: {
          items: { $ref: '#/definitions/cluster_id' },
          description: 'Clusters to which the node has been assigned',
          title: 'Clusters',
          definitions: {
            cluster_id: {
              format: 'regex',
              pattern: '^\\w+:\\d+$',
              examples: ['markov_i2:1', 'markov_i4:5', 'markov_i6:3'],
              type: 'string',
            },
          },
          uniqueItems: true,
          type: 'array',
          examples: [['markov_i2:1', 'markov_i4:5'], ['markov_i6:3']],
        },
        tair_curator_summary: {
          title: 'TAIR curator summary',
          examples: [
            'Encodes a plasma membrane-localized amino acid transporter likely involved in amino acid export in the developing seed.',
          ],
          type: 'string',
        },
        gene_symbol: { examples: ['NTL10'], type: 'string', title: 'Gene symbol' },
        gene_full_name: {
          examples: ['NAC domain containing protein 1'],
          type: 'string',
          title: 'Gene full name',
        },
        pheno_description: {
          type: 'string',
          examples: [
            'Arsenic concentrations in leaves, grown in soil. Elemental analysis was performed with an ICP-MS (PerkinElmer). Sample normalized to calculated weights as described in Baxter et al., 2008',
          ],
          title: 'Phenotype description',
        },
        _key: { title: 'Key', type: 'string', examples: ['AT1G01010', 'As2'] },
        gene_model_type: { type: 'string', examples: ['protein_coding'], title: 'Gene model type' },
        node_type: {
          name: 'node_type',
          examples: ['gene', 'phenotype'],
          oneOf: [
            { const: 'gene', title: 'Gene' },
            { title: 'Phenotype', const: 'pheno' },
          ],
          type: 'string',
          title: 'Node Type',
          $schema: 'http://json-schema.org/draft-07/schema#',
          description: 'Node types in Dan Jacobson Exascale dataset',
        },
        mapman_bin: { title: 'Mapman bin', examples: ['15.5.17'], type: 'string' },
        pheno_aragwas_id: {
          title: 'AraGWAS ID',
          type: 'string',
          examples: ['10.21958/phenotype:67'],
        },
        mapman_description: {
          title: 'Mapman description',
          type: 'string',
          examples: [
            'transcription factor (NAC) (original description: pep chromosome:TAIR10:1:3631:5899:1 gene:AT1G01010 transcript:AT1G01010.1 gene_biotype:protein_coding transcript_biotype:protein_coding gene_symbol:NAC001 description:NAC domain-containing protein 1 [Source:UniProtKB/Swiss-Prot;Acc:Q0WV96])',
          ],
        },
        go_description: {
          type: 'string',
          examples: ['DNA-binding transcription factor activity'],
          title: 'GO descriptions',
        },
        tair_short_description: {
          type: 'string',
          examples: ['NAC domain containing protein 1'],
          title: 'TAIR short description',
        },
        pheno_pto_description: {
          title: 'PTO description',
          description: 'Plant Trait Ontology description',
          examples: [
            'A mineral and ion content related trait (TO:0000465) which is the concentration of arsenic (CHEBI:22632) in some plant structure (PO:0009011). [GR:Karthik]',
          ],
          type: 'string',
        },
        pheno_pto_name: {
          examples: ['arsenic concentration'],
          type: 'string',
          title: 'PTO name',
          description: 'Plant Trait Ontology name',
        },
      },
      djornl_edge: {
        _key: { type: 'string', pattern: '^(\\S+__){3}(\\S+)$', format: 'regex', title: 'Key' },
        _from: { type: 'string', title: 'Gene ID' },
        edge_type: {
          description: 'Edge types in Dan Jacobson Arabidopsis Exascale dataset',
          title: 'Edge Type',
          $schema: 'http://json-schema.org/draft-07/schema#',
          oneOf: [
            {
              description:
                'GWAS associations produced by analyzing a subset of phenotypes and SNPs in the Arabidopsis 1001 Genomes database. Edge values are significant association scores after FDR correction.',
              title: 'AraGWAS phenotype associations',
              const: 'phenotype-association_AraGWAS',
            },
            {
              const: 'pairwise-gene-coexpression_AraNet_v2',
              description:
                'A subset of pairwise gene coexpression values from the Arabidopsis AraNetv2 database. The LLS scores that serve as edge values were calculated from Pearson correlation coefficients to normalize the data for comparison across studies and different types of data layers (Lee et al, 2015).',
              title: 'AraNetv2 pairwise gene coexpression',
            },
            {
              description:
                'A layer of protein domain co-occurrence values from the Arabidopsis AraNetv2 database. The LLS scores that serve as edge values were calculated from weighted mutual information scores to normalize the data for comparison across studies and different types of data layers (Lee et al, 2015).',
              title: 'AraNetv2 domain co-occurrence',
              const: 'domain-co-occurrence_AraNet_v2',
            },
            {
              const: 'protein-protein-interaction_high-throughput_AraNet_v2',
              description:
                'Log likelihood score. A layer of protein-protein interaction values derived from four high-throughput PPI screening experiments; from the Arabidopsis AraNetv2 database. The LLS scores that serve as edge values were calculated to normalize the data for comparison across studies and different types of data layers (Lee et al, 2015).',
              title: 'AraNetv2 high-throughput protein-protein interaction',
            },
            {
              const: 'protein-protein-interaction_literature-curation_AraNet_v2',
              title: 'AraNetv2 literature-curated protein-protein interaction',
              description:
                'A layer of protein-protein interaction values from literature-curated small- to medium-scale experimental data; from the Arabidopsis AraNetv2 database. The LLS scores that serve as edge values were calculated to normalize the data for comparison across studies and different types of data layers (Lee et al, 2015).',
            },
          ],
          type: 'string',
          name: 'edge_type',
        },
        score: { title: 'Edge Score (Weight)', type: 'number' },
        _to: { type: 'string', title: 'Gene or Phenotype ID' },
      },
    };
  }

  /**
   * given a column name, supplies the appropriate column header
   *
   * @param {string} colName
   * @returns {string} entitledNames[colName] or colName if it does not exist
   */
  function entitle(colName) {
    const metadata = loadMetadata();

    if (metadata[colName]) {
      return metadata[colName];
    }

    const entitledNames = {
      source: 'Source',
      target: 'Target',
      type: 'Type',
      score: 'Score',
      id: 'ID',
      node_type: 'Node type',
      edges: 'Edges',
      transcript: 'Transcript',
      gene_symbol: 'Gene symbol',
      gene_full_name: 'Gene full name',
      gene_model_type: 'Gene model type',
      cluster_i2: 'Cluster I2',
      cluster_i4: 'Cluster I4',
      cluster_i6: 'Cluster I6',
      tair_computational_desc: 'TAIR computational description',
      tair_curator_summary: 'TAIR curator summary',
      tair_short_desc: 'TAIR short description',
      go_terms: 'GO terms',
      go_desc: 'GO description',
      mapman_bin: 'Mapman bin',
      mapman_name: 'Mapman name',
      mapman_desc: 'Mapman description',
      pheno_aragwas_id: 'Pheno AraGWAS ID',
      pheno_scoring: 'Pheno description 1',
      pheno_pto_name: 'Pheno description 2',
      pheno_pto_desc: 'Pheno description 3',
      pheno_ref: 'Pheno ref',
      user_notes: 'User notes',
    };

    return entitledNames[colName] || colName;
  }

  /**
   * get the button configuration for the given button type
   *
   * @param {string} type
   * @returns {object[]} array containing the button configuration for the button or group of buttons
   */
  function buttonConfig(type) {
    const buttonArr = {
      download: [
        {
          text: 'Downloads',
          className: 'disabled',
          enabled: false,
        },
        {
          extend: 'csv',
          text: 'CSV',
          extension: '.csv',
        },
        {
          extend: 'csv',
          text: 'TSV',
          fieldSeparator: '\t',
          extension: '.tsv',
        },
        {
          text: 'JSON',
          // action: function (e, dt, button, config) {
          action: function () {
            $.fn.dataTable.fileSave(
              new Blob([JSON.stringify(dataTables_bootstrap.buttons.exportData())]),
              'Export.json'
            );
          },
        },
      ],
      nodeCollect: [
        {
          text: 'Collect...',
          className: 'disabled',
          enabled: false,
        },
        {
          name: 'addToCollection',
          text: 'Add selected nodes',
          action: function (e, _dt) {
            return window.kbase.collection.collectSelectedTableNodes(_dt);
          },
        },
        {
          name: 'removeFromCollection',
          text: 'Remove selected nodes',
          action: function (e, _dt) {
            return window.kbase.collection.discardSelectedTableNodes(_dt);
          },
        },
      ],
      edgeCollect: [
        {
          text: 'Collect...',
          className: 'disabled',
          enabled: false,
        },
        {
          name: 'addToCollection',
          text: 'Add nodes in selected edges',
          action: function (e, _dt) {
            return window.kbase.collection.collectSelectedTableEdges(_dt);
          },
        },
        {
          name: 'removeFromCollection',
          text: 'Remove nodes in selected edges',
          action: function (e, _dt) {
            return window.kbase.collection.discardSelectedTableEdges(_dt);
          },
        },
      ],
      select: [
        {
          text: 'Select...',
          className: 'disabled',
          enabled: false,
        },
        {
          extend: 'selectAll',
          text: 'All',
        },
        {
          extend: 'selectNone',
          text: 'None',
        },
        {
          name: 'selectFilter',
          text: 'Filtered',
          action: function (e, _dt) {
            _dt.rows({ search: 'applied' }).select();
          },
        },
      ],
      colvis: [
        {
          extend: 'colvis',
          columns: ':gt(0)',
        },
      ],
      searchPane: [
        {
          extend: 'searchPanes',
          text: 'Faceted search',
        },
      ],
    };

    return buttonArr[type];
  }

  /**
   * get the list of columns in a table
   *
   * @param {string} type - table type
   * @returns {array} column list
   */
  function columnList(type) {
    // const metadata = loadMetadata();
    //   node_meta = Object.keys(metadata.djornl_node);
    const cols = {
      collection: ['select', 'id', 'node_type', 'transcript', 'gene_symbol'],
      edge: ['select', 'id', 'source', 'target', 'type', 'score'],
      node: [
        'select',
        'id',
        'node_type',
        'transcript',
        'gene_symbol',
        'gene_full_name',
        'edges',
        'view',
      ],
      nodeMetadata: [
        'select',
        'id',
        'node_type',
        'transcript',
        'gene_symbol',
        'gene_full_name',
        'edges',
        'gene_model_type',
        'clusters',
        'tair_computational_desc',
        'tair_curator_summary',
        'tair_short_desc',
        'go_terms',
        'go_desc',
        'mapman_bin',
        'mapman_name',
        'mapman_desc',
        'pheno_aragwas_id',
        'pheno_scoring',
        'pheno_pto_name',
        'pheno_pto_desc',
        'pheno_ref',
        'user_notes',
        'view',
      ],
    };
    return cols[type];
  }

  /**
   * set up the dataTables configuration for each column in the table
   *
   * @param {string} type
   * @returns {object[]} array of objects with column config information
   */
  function columnConfig(type) {
    const columns =
      type === 'collection' || type === 'node' ? columnList('nodeMetadata') : columnList(type);

    let visibleCols;
    // 'node' and 'collection' pages have all the metadata but it is initially hidden
    if (type === 'collection' || type === 'node') {
      visibleCols = columnList(type);
    }

    const predefinedCols = {
      view: {
        className: 'view',
        data: 'id',
        defaultContent: '',
        orderable: false,
        render: (data, _type) => {
          if (_type === 'display') {
            return '<button class="view_button">Show</button>';
          }
          return '';
        },
        searchable: false,
        title: 'Details',
      },
      select: {
        className: 'select-checkbox', // automatically provided by dataTables css
        data: null,
        defaultContent: '',
        orderable: false,
        targets: 0,
        title: 'Select',
      },
    };

    return columns.map((colName) => {
      let rtnObj = predefinedCols[colName]
        ? predefinedCols[colName]
        : {
            data: colName,
            className: colName,
            title: entitle(colName),
            defaultContent: '',
          };

      // hide the extra metadata columns initially
      if ((type === 'collection' || type === 'node') && visibleCols.indexOf(colName) === -1) {
        rtnObj.visible = false;
      }
      // custom renderer for edges column
      if (colName === 'edges') {
        rtnObj['render'] = (data, _type) => {
          if (!data) {
            return;
          }
          if (_type === 'display') {
            return data.join(', ');
          }
          return data;
        };
      }
      return rtnObj;
    });
  }

  /**
   * format data for display in the expandable section of a table row
   * gene and phenotype objects have different pieces of data provided, so only the relevant fields should be displayed
   *
   * @param {object} d - row data
   * @returns {string} HTML string with data formatted according to what it contains
   */
  function formatData(d) {
    const propertyList = {
        gene: [
          'gene_model_type',
          'clusters',
          'tair_computational_desc',
          'tair_curator_summary',
          'tair_short_desc',
          'go_terms',
          'go_desc',
          'mapman_bin',
          'mapman_name',
          'mapman_desc',
        ],
        pheno: ['pheno_aragwas_id', 'pheno_scoring', 'pheno_pto_name', 'pheno_pto_desc', 'pheno_ref'],
        all: ['user_notes'],
      },
      objProperties = propertyList[d.node_type].concat(propertyList.all);

    let str = '';
    objProperties.forEach((prop) => {
      let name = entitle(prop);
      if (d[prop]) {
        str += `<dt>${name}</dt><dd>${d[prop]}</dd>`;
      }
    });
    if (str !== '') {
      return `<dl class="something">${str}</dl>`;
    }
    return '<p>No information available</p>';
  }

  /**
   * compile the table configuration for a given table type (node, edge, or collection)
   *
   * @param {string} type
   * @returns {object} tableConfig, ready to initialise a DataTables table!
   */
  function tableConfig(type) {
    if (type === 'collection') {
      return {
        columns: columnConfig(type),
        dom: '<"table-top clearfix"fiB>rt<"table-bottom clearfix"l>',
        scrollY: 500,
        order: [[1, 'desc']],
        scrollCollapse: true,
        scroller: true,
        buttons: buttonConfig('colvis').concat(buttonConfig('download')),
      };
    }

    const buttonArr =
      type === 'edge'
        ? buttonConfig('select').concat(buttonConfig('edgeCollect'))
        : buttonConfig('colvis').concat(buttonConfig('select')).concat(buttonConfig('nodeCollect'));

    return {
      columns: columnConfig(type),
      // l - length changing input control
      // f - filtering input
      // t - The table!
      // i - Table information summary
      // p - pagination control
      // r - processing display element
      dom: '<"table-top clearfix"fiB>rt<"table-bottom clearfix"lp>',
      scrollX: true,
      order: [[1, 'desc']],
      paging: true,
      lengthMenu: [
        [25, 50, 100],
        [25, 50, 100],
      ],
      deferRender: true,
      //     searchPanes: searchPaneConfig(type),
      select: {
        style: 'os',
        selector: 'td:first-child',
      },
      rowId: 'id',
      buttons: buttonArr,
    };
  }

  window.jQuery = window.$ = $;
  dataTables_bootstrap(window, $);
  dataTables_buttons(window, $);
  buttons_bootstrap(window, $);
  buttons_colVis(window, $);
  buttons_html5(window, $);
  scroller_bootstrap(window, $);
  searchPanes_bootstrap(window, $);
  select_bootstrap(window, $);

  /**
   * refreshTable(tableID)
   *
   * populate table(s) with the data in the corresponding window.kbase.data[tableID] data store
   * if a tableID is supplied, only refresh the data in that table; otherwise, refresh all tables
   * also updates the table row count in the `${tableID}_count` element
   *
   * @param {string} tableID (optional)
   * @returns - nothing
   */
  function refreshTable(tableID) {
    Object.keys(window.kbase.tableIx).forEach((k) => {
      if (!tableID || k === tableID) {
        let thisTable = window.kbase.tableIx[k].DataTable();
        thisTable.clear().rows.add(Object.values(window.kbase.data[k])).draw();
        // update the count of number of rows in the table
        $(`#${k}_count`).text(Object.values(window.kbase.data[k]).length);
        thisTable.order([1, 'asc']).draw();
        thisTable.columns.adjust().draw();
      }
    });
  }

  /**
   * @function addButtonListener
   * add a listener to the table body to detect clicks on the details button
   * when these events are detected, details of the row data will be displayed
   *
   * @param {string} tableID
   * @returns - nothing, but the table 'tbody' DOM element will have an event listener attached
   */
  function addButtonListener(tableID) {
    // Show / Hide metadata details
    const table = $(`#${tableID}_table`).DataTable();
    $(`#${tableID}_table tbody`)
      .off()
      .on('click', '.view_button', (e) => {
        let tr = $(e.target).closest('tr'),
          row = table.row(tr);
        if (row.child.isShown()) {
          // This row is already open - close it
          row.child.hide();
          tr.removeClass('shown');
          $(e.target).text('Show');
        } else {
          // Open this row
          const str = formatData(row.data());
          row.child(str).show();
          tr.addClass('shown');
          $(e.target).text('Hide');
        }
      });
  }

  /**
   * initialise the 'edge', 'node', and 'collection' tables with the table config generated in table-config.js
   * sets the table data to an empty array
   *
   * @returns {object} tableIx, in the form { tableKey: $jQueryTableDOMElement }
   */
  function initTables() {
    const tableIDs = ['edge', 'node', 'collection'];
    let tableIx = {};

    tableIDs.forEach((tableID) => {
      let config = tableConfig(tableID);
      config.data = [];
      // initialise the table
      $(`#${tableID}_table`).DataTable(config);
      addButtonListener(tableID);
      tableIx[tableID] = $(`#${tableID}_table`);
    });

    window.kbase.tableIx = tableIx;
    return tableIx;
  }

  class Collection {
    /**
     * Creates an instance of Collection.
     * @param {*} graphObject
     * @param {*} dataObject
     * @memberof Collection
     */
    constructor(graphObject, dataObject) {
      this._graph = graphObject;
      this._data = dataObject || null;
      this._collection = graphObject.collection();
    }

    /**
     * get or set the data object used by the Collection
     *
     * @param {object} dataObject
     * @returns {object} current value of this._data
     * @memberof Collection
     */
    data(dataObject) {
      if (dataObject) {
        this._data = dataObject;
      }
      return this._data;
    }

    /**
     * collectSelectedGraphNodes( dt )
     *
     * adds the nodes currently selected in this._graph to the collection.
     * updates the graph nodes to reflect that they are 'collected'
     * updates the contents of this._data.collection with the selected nodes
     * triggers a refresh of the collection table
     * @memberof Collection
     */
    collectSelectedGraphNodes() {
      const selectedNodes = this._graph.collectSelectedNodes();
      this._collection = this._collection.union(selectedNodes);

      // ensure all node data is populated
      this._collection.forEach((c) => {
        if (!this._data.collection[c.id()]) {
          this._data.collection[c.id()] = this._data.node[c.id()];
        }
      });
      refreshTable('collection');
    }

    /**
     * collectSelectedTableNodes( dt )
     *
     * adds the selected nodes in table dt to the collection
     * updates the graph nodes to reflect that they are 'collected'
     * updates the contents of this._data.collection with the selected nodes
     * triggers a refresh of the collection table
     * @param DataTable dt - table to take the node data from
     * @memberof Collection
     */
    collectSelectedTableNodes(dt) {
      // extract the ids
      dt.rows({ selected: true })
        .data()
        .each((d) => {
          let id = d.id;
          this._data.collection[id] = this._data.node[id];

          let node = this._graph.collectNode(id);
          if (node) {
            this._collection = this._collection.union(node);
          }
        });
      refreshTable('collection');
    }

    /**
     * collectSelectedTableEdges( dt )
     *
     * adds the nodes from the selected edges in table dt to the collection
     * updates the graph nodes to reflect that they are 'collected'
     * updates the contents of this._data.collection with the selected nodes
     * triggers a refresh of the collection table
     * @param DataTable dt - table to take the edge data from
     * @memberof Collection
     */
    collectSelectedTableEdges(dt) {
      dt.rows({ selected: true })
        .data()
        .each((d) => {
          // extract the source and target
          let id_arr = [d.source, d.target];
          id_arr.forEach((id) => {
            this._data.collection[id] = this._data.node[id];
            let node = this._graph.collectNode(id);
            if (node) {
              this._collection = this._collection.union(node);
            }
          });
        });
      refreshTable('collection');
    }

    /**
     * discardSelectedGraphNodes()
     *
     * removes the nodes currently selected in this._graph from the collection.
     * updates the graph nodes to remove the 'collected' state
     * updates the contents of this._data.collection to discard the selected nodes
     * triggers a refresh of the collection table
     * @memberof Collection
     */
    discardSelectedGraphNodes() {
      const selectedNodes = this._graph.discardSelectedNodes();
      this._collection = this._collection.difference(selectedNodes);

      this._collection.forEach((c) => delete this._data.collection[c.id()]);
      refreshTable('collection');
    }

    /**
     * discardSelectedTableNodes()
     *
     * removes the nodes currently selected in dataTable dt from the collection.
     * updates the graph nodes to remove the 'collected' state
     * updates the contents of this._data.collection to discard the selected nodes
     * triggers a refresh of the collection table
     * @param DataTable dt - table to take the edge data from
     * @memberof Collection
     */
    discardSelectedTableNodes(dt) {
      // extract the ids
      dt.rows({ selected: true })
        .data()
        .each((d) => {
          let id = d.id;
          delete this._data.collection[id];
          let node = this._graph.discardNode(id);
          if (node) {
            this._collection = this._collection.difference(node);
          }
        });
      refreshTable('collection');
    }

    /**
     * discardSelectedTableEdges( dt )
     *
     * removes the nodes from the selected edges in table dt from the collection
     * updates the graph nodes to remove the 'collected' state
     * updates the contents of this._data.collection to discard the selected nodes
     * triggers a refresh of the collection table
     * @param DataTable dt - table to take the edge data from
     * @memberof Collection
     */
    discardSelectedTableEdges(dt) {
      dt.rows({ selected: true })
        .data()
        .each((d) => {
          // extract the source and target
          let id_arr = [d.source, d.target];
          id_arr.forEach((id) => {
            delete this._data.collection[id];
            let node = this._graph.discardNode(id);
            if (node) {
              this._collection = this._collection.difference(node);
            }
          });
        });
      refreshTable('collection');
    }
  }

  /**
   * lodash (Custom Build) <https://lodash.com/>
   * Build: `lodash modularize exports="npm" -o ./`
   * Copyright jQuery Foundation and other contributors <https://jquery.org/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   */

  /** Used as the `TypeError` message for "Functions" methods. */
  var FUNC_ERROR_TEXT = 'Expected a function';

  /** Used as references for various `Number` constants. */
  var NAN = 0 / 0;

  /** `Object#toString` result references. */
  var symbolTag = '[object Symbol]';

  /** Used to match leading and trailing whitespace. */
  var reTrim = /^\s+|\s+$/g;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Built-in method references without a dependency on `root`. */
  var freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Used for built-in method references. */
  var objectProto = Object.prototype;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var objectToString = objectProto.toString;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeMax = Math.max,
      nativeMin = Math.min;

  /**
   * Gets the timestamp of the number of milliseconds that have elapsed since
   * the Unix epoch (1 January 1970 00:00:00 UTC).
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Date
   * @returns {number} Returns the timestamp.
   * @example
   *
   * _.defer(function(stamp) {
   *   console.log(_.now() - stamp);
   * }, _.now());
   * // => Logs the number of milliseconds it took for the deferred invocation.
   */
  var now = function() {
    return root.Date.now();
  };

  /**
   * Creates a debounced function that delays invoking `func` until after `wait`
   * milliseconds have elapsed since the last time the debounced function was
   * invoked. The debounced function comes with a `cancel` method to cancel
   * delayed `func` invocations and a `flush` method to immediately invoke them.
   * Provide `options` to indicate whether `func` should be invoked on the
   * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
   * with the last arguments provided to the debounced function. Subsequent
   * calls to the debounced function return the result of the last `func`
   * invocation.
   *
   * **Note:** If `leading` and `trailing` options are `true`, `func` is
   * invoked on the trailing edge of the timeout only if the debounced function
   * is invoked more than once during the `wait` timeout.
   *
   * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
   * until to the next tick, similar to `setTimeout` with a timeout of `0`.
   *
   * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
   * for details over the differences between `_.debounce` and `_.throttle`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to debounce.
   * @param {number} [wait=0] The number of milliseconds to delay.
   * @param {Object} [options={}] The options object.
   * @param {boolean} [options.leading=false]
   *  Specify invoking on the leading edge of the timeout.
   * @param {number} [options.maxWait]
   *  The maximum time `func` is allowed to be delayed before it's invoked.
   * @param {boolean} [options.trailing=true]
   *  Specify invoking on the trailing edge of the timeout.
   * @returns {Function} Returns the new debounced function.
   * @example
   *
   * // Avoid costly calculations while the window size is in flux.
   * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
   *
   * // Invoke `sendMail` when clicked, debouncing subsequent calls.
   * jQuery(element).on('click', _.debounce(sendMail, 300, {
   *   'leading': true,
   *   'trailing': false
   * }));
   *
   * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
   * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
   * var source = new EventSource('/stream');
   * jQuery(source).on('message', debounced);
   *
   * // Cancel the trailing debounced invocation.
   * jQuery(window).on('popstate', debounced.cancel);
   */
  function debounce(func, wait, options) {
    var lastArgs,
        lastThis,
        maxWait,
        result,
        timerId,
        lastCallTime,
        lastInvokeTime = 0,
        leading = false,
        maxing = false,
        trailing = true;

    if (typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    wait = toNumber(wait) || 0;
    if (isObject(options)) {
      leading = !!options.leading;
      maxing = 'maxWait' in options;
      maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
      trailing = 'trailing' in options ? !!options.trailing : trailing;
    }

    function invokeFunc(time) {
      var args = lastArgs,
          thisArg = lastThis;

      lastArgs = lastThis = undefined;
      lastInvokeTime = time;
      result = func.apply(thisArg, args);
      return result;
    }

    function leadingEdge(time) {
      // Reset any `maxWait` timer.
      lastInvokeTime = time;
      // Start the timer for the trailing edge.
      timerId = setTimeout(timerExpired, wait);
      // Invoke the leading edge.
      return leading ? invokeFunc(time) : result;
    }

    function remainingWait(time) {
      var timeSinceLastCall = time - lastCallTime,
          timeSinceLastInvoke = time - lastInvokeTime,
          result = wait - timeSinceLastCall;

      return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
    }

    function shouldInvoke(time) {
      var timeSinceLastCall = time - lastCallTime,
          timeSinceLastInvoke = time - lastInvokeTime;

      // Either this is the first call, activity has stopped and we're at the
      // trailing edge, the system time has gone backwards and we're treating
      // it as the trailing edge, or we've hit the `maxWait` limit.
      return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
        (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
    }

    function timerExpired() {
      var time = now();
      if (shouldInvoke(time)) {
        return trailingEdge(time);
      }
      // Restart the timer.
      timerId = setTimeout(timerExpired, remainingWait(time));
    }

    function trailingEdge(time) {
      timerId = undefined;

      // Only invoke if we have `lastArgs` which means `func` has been
      // debounced at least once.
      if (trailing && lastArgs) {
        return invokeFunc(time);
      }
      lastArgs = lastThis = undefined;
      return result;
    }

    function cancel() {
      if (timerId !== undefined) {
        clearTimeout(timerId);
      }
      lastInvokeTime = 0;
      lastArgs = lastCallTime = lastThis = timerId = undefined;
    }

    function flush() {
      return timerId === undefined ? result : trailingEdge(now());
    }

    function debounced() {
      var time = now(),
          isInvoking = shouldInvoke(time);

      lastArgs = arguments;
      lastThis = this;
      lastCallTime = time;

      if (isInvoking) {
        if (timerId === undefined) {
          return leadingEdge(lastCallTime);
        }
        if (maxing) {
          // Handle invocations in a tight loop.
          timerId = setTimeout(timerExpired, wait);
          return invokeFunc(lastCallTime);
        }
      }
      if (timerId === undefined) {
        timerId = setTimeout(timerExpired, wait);
      }
      return result;
    }
    debounced.cancel = cancel;
    debounced.flush = flush;
    return debounced;
  }

  /**
   * Checks if `value` is the
   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an object, else `false`.
   * @example
   *
   * _.isObject({});
   * // => true
   *
   * _.isObject([1, 2, 3]);
   * // => true
   *
   * _.isObject(_.noop);
   * // => true
   *
   * _.isObject(null);
   * // => false
   */
  function isObject(value) {
    var type = typeof value;
    return !!value && (type == 'object' || type == 'function');
  }

  /**
   * Checks if `value` is object-like. A value is object-like if it's not `null`
   * and has a `typeof` result of "object".
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   * @example
   *
   * _.isObjectLike({});
   * // => true
   *
   * _.isObjectLike([1, 2, 3]);
   * // => true
   *
   * _.isObjectLike(_.noop);
   * // => false
   *
   * _.isObjectLike(null);
   * // => false
   */
  function isObjectLike(value) {
    return !!value && typeof value == 'object';
  }

  /**
   * Checks if `value` is classified as a `Symbol` primitive or object.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
   * @example
   *
   * _.isSymbol(Symbol.iterator);
   * // => true
   *
   * _.isSymbol('abc');
   * // => false
   */
  function isSymbol(value) {
    return typeof value == 'symbol' ||
      (isObjectLike(value) && objectToString.call(value) == symbolTag);
  }

  /**
   * Converts `value` to a number.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to process.
   * @returns {number} Returns the number.
   * @example
   *
   * _.toNumber(3.2);
   * // => 3.2
   *
   * _.toNumber(Number.MIN_VALUE);
   * // => 5e-324
   *
   * _.toNumber(Infinity);
   * // => Infinity
   *
   * _.toNumber('3.2');
   * // => 3.2
   */
  function toNumber(value) {
    if (typeof value == 'number') {
      return value;
    }
    if (isSymbol(value)) {
      return NAN;
    }
    if (isObject(value)) {
      var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
      value = isObject(other) ? (other + '') : other;
    }
    if (typeof value != 'string') {
      return value === 0 ? value : +value;
    }
    value = value.replace(reTrim, '');
    var isBinary = reIsBinary.test(value);
    return (isBinary || reIsOctal.test(value))
      ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
      : (reIsBadHex.test(value) ? NAN : +value);
  }

  var lodash_debounce = debounce;

  var heap = createCommonjsModule(function (module, exports) {
  // Generated by CoffeeScript 1.8.0
  (function() {
    var Heap, defaultCmp, floor, heapify, heappop, heappush, heappushpop, heapreplace, insort, min, nlargest, nsmallest, updateItem, _siftdown, _siftup;

    floor = Math.floor, min = Math.min;


    /*
    Default comparison function to be used
     */

    defaultCmp = function(x, y) {
      if (x < y) {
        return -1;
      }
      if (x > y) {
        return 1;
      }
      return 0;
    };


    /*
    Insert item x in list a, and keep it sorted assuming a is sorted.
    
    If x is already in a, insert it to the right of the rightmost x.
    
    Optional args lo (default 0) and hi (default a.length) bound the slice
    of a to be searched.
     */

    insort = function(a, x, lo, hi, cmp) {
      var mid;
      if (lo == null) {
        lo = 0;
      }
      if (cmp == null) {
        cmp = defaultCmp;
      }
      if (lo < 0) {
        throw new Error('lo must be non-negative');
      }
      if (hi == null) {
        hi = a.length;
      }
      while (lo < hi) {
        mid = floor((lo + hi) / 2);
        if (cmp(x, a[mid]) < 0) {
          hi = mid;
        } else {
          lo = mid + 1;
        }
      }
      return ([].splice.apply(a, [lo, lo - lo].concat(x)), x);
    };


    /*
    Push item onto heap, maintaining the heap invariant.
     */

    heappush = function(array, item, cmp) {
      if (cmp == null) {
        cmp = defaultCmp;
      }
      array.push(item);
      return _siftdown(array, 0, array.length - 1, cmp);
    };


    /*
    Pop the smallest item off the heap, maintaining the heap invariant.
     */

    heappop = function(array, cmp) {
      var lastelt, returnitem;
      if (cmp == null) {
        cmp = defaultCmp;
      }
      lastelt = array.pop();
      if (array.length) {
        returnitem = array[0];
        array[0] = lastelt;
        _siftup(array, 0, cmp);
      } else {
        returnitem = lastelt;
      }
      return returnitem;
    };


    /*
    Pop and return the current smallest value, and add the new item.
    
    This is more efficient than heappop() followed by heappush(), and can be
    more appropriate when using a fixed size heap. Note that the value
    returned may be larger than item! That constrains reasonable use of
    this routine unless written as part of a conditional replacement:
        if item > array[0]
          item = heapreplace(array, item)
     */

    heapreplace = function(array, item, cmp) {
      var returnitem;
      if (cmp == null) {
        cmp = defaultCmp;
      }
      returnitem = array[0];
      array[0] = item;
      _siftup(array, 0, cmp);
      return returnitem;
    };


    /*
    Fast version of a heappush followed by a heappop.
     */

    heappushpop = function(array, item, cmp) {
      var _ref;
      if (cmp == null) {
        cmp = defaultCmp;
      }
      if (array.length && cmp(array[0], item) < 0) {
        _ref = [array[0], item], item = _ref[0], array[0] = _ref[1];
        _siftup(array, 0, cmp);
      }
      return item;
    };


    /*
    Transform list into a heap, in-place, in O(array.length) time.
     */

    heapify = function(array, cmp) {
      var i, _i, _len, _ref1, _results, _results1;
      if (cmp == null) {
        cmp = defaultCmp;
      }
      _ref1 = (function() {
        _results1 = [];
        for (var _j = 0, _ref = floor(array.length / 2); 0 <= _ref ? _j < _ref : _j > _ref; 0 <= _ref ? _j++ : _j--){ _results1.push(_j); }
        return _results1;
      }).apply(this).reverse();
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        i = _ref1[_i];
        _results.push(_siftup(array, i, cmp));
      }
      return _results;
    };


    /*
    Update the position of the given item in the heap.
    This function should be called every time the item is being modified.
     */

    updateItem = function(array, item, cmp) {
      var pos;
      if (cmp == null) {
        cmp = defaultCmp;
      }
      pos = array.indexOf(item);
      if (pos === -1) {
        return;
      }
      _siftdown(array, 0, pos, cmp);
      return _siftup(array, pos, cmp);
    };


    /*
    Find the n largest elements in a dataset.
     */

    nlargest = function(array, n, cmp) {
      var elem, result, _i, _len, _ref;
      if (cmp == null) {
        cmp = defaultCmp;
      }
      result = array.slice(0, n);
      if (!result.length) {
        return result;
      }
      heapify(result, cmp);
      _ref = array.slice(n);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        elem = _ref[_i];
        heappushpop(result, elem, cmp);
      }
      return result.sort(cmp).reverse();
    };


    /*
    Find the n smallest elements in a dataset.
     */

    nsmallest = function(array, n, cmp) {
      var elem, i, los, result, _i, _j, _len, _ref, _ref1, _results;
      if (cmp == null) {
        cmp = defaultCmp;
      }
      if (n * 10 <= array.length) {
        result = array.slice(0, n).sort(cmp);
        if (!result.length) {
          return result;
        }
        los = result[result.length - 1];
        _ref = array.slice(n);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          elem = _ref[_i];
          if (cmp(elem, los) < 0) {
            insort(result, elem, 0, null, cmp);
            result.pop();
            los = result[result.length - 1];
          }
        }
        return result;
      }
      heapify(array, cmp);
      _results = [];
      for (i = _j = 0, _ref1 = min(n, array.length); 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
        _results.push(heappop(array, cmp));
      }
      return _results;
    };

    _siftdown = function(array, startpos, pos, cmp) {
      var newitem, parent, parentpos;
      if (cmp == null) {
        cmp = defaultCmp;
      }
      newitem = array[pos];
      while (pos > startpos) {
        parentpos = (pos - 1) >> 1;
        parent = array[parentpos];
        if (cmp(newitem, parent) < 0) {
          array[pos] = parent;
          pos = parentpos;
          continue;
        }
        break;
      }
      return array[pos] = newitem;
    };

    _siftup = function(array, pos, cmp) {
      var childpos, endpos, newitem, rightpos, startpos;
      if (cmp == null) {
        cmp = defaultCmp;
      }
      endpos = array.length;
      startpos = pos;
      newitem = array[pos];
      childpos = 2 * pos + 1;
      while (childpos < endpos) {
        rightpos = childpos + 1;
        if (rightpos < endpos && !(cmp(array[childpos], array[rightpos]) < 0)) {
          childpos = rightpos;
        }
        array[pos] = array[childpos];
        pos = childpos;
        childpos = 2 * pos + 1;
      }
      array[pos] = newitem;
      return _siftdown(array, startpos, pos, cmp);
    };

    Heap = (function() {
      Heap.push = heappush;

      Heap.pop = heappop;

      Heap.replace = heapreplace;

      Heap.pushpop = heappushpop;

      Heap.heapify = heapify;

      Heap.updateItem = updateItem;

      Heap.nlargest = nlargest;

      Heap.nsmallest = nsmallest;

      function Heap(cmp) {
        this.cmp = cmp != null ? cmp : defaultCmp;
        this.nodes = [];
      }

      Heap.prototype.push = function(x) {
        return heappush(this.nodes, x, this.cmp);
      };

      Heap.prototype.pop = function() {
        return heappop(this.nodes, this.cmp);
      };

      Heap.prototype.peek = function() {
        return this.nodes[0];
      };

      Heap.prototype.contains = function(x) {
        return this.nodes.indexOf(x) !== -1;
      };

      Heap.prototype.replace = function(x) {
        return heapreplace(this.nodes, x, this.cmp);
      };

      Heap.prototype.pushpop = function(x) {
        return heappushpop(this.nodes, x, this.cmp);
      };

      Heap.prototype.heapify = function() {
        return heapify(this.nodes, this.cmp);
      };

      Heap.prototype.updateItem = function(x) {
        return updateItem(this.nodes, x, this.cmp);
      };

      Heap.prototype.clear = function() {
        return this.nodes = [];
      };

      Heap.prototype.empty = function() {
        return this.nodes.length === 0;
      };

      Heap.prototype.size = function() {
        return this.nodes.length;
      };

      Heap.prototype.clone = function() {
        var heap;
        heap = new Heap();
        heap.nodes = this.nodes.slice(0);
        return heap;
      };

      Heap.prototype.toArray = function() {
        return this.nodes.slice(0);
      };

      Heap.prototype.insert = Heap.prototype.push;

      Heap.prototype.top = Heap.prototype.peek;

      Heap.prototype.front = Heap.prototype.peek;

      Heap.prototype.has = Heap.prototype.contains;

      Heap.prototype.copy = Heap.prototype.clone;

      return Heap;

    })();

    (function(root, factory) {
      {
        return module.exports = factory();
      }
    })(this, function() {
      return Heap;
    });

  }).call(commonjsGlobal);
  });

  var heap$1 = heap;

  function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

  var util = _interopDefault(lodash_debounce);
  var Heap = _interopDefault(heap$1);

  function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArrayLimit(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance");
  }

  var window$1 = typeof window === 'undefined' ? null : window; // eslint-disable-line no-undef

  var navigator$1 = window$1 ? window$1.navigator : null;
  var document$1 = window$1 ? window$1.document : null;

  var typeofstr = _typeof('');

  var typeofobj = _typeof({});

  var typeoffn = _typeof(function () {});

  var typeofhtmlele = typeof HTMLElement === "undefined" ? "undefined" : _typeof(HTMLElement);

  var instanceStr = function instanceStr(obj) {
    return obj && obj.instanceString && fn(obj.instanceString) ? obj.instanceString() : null;
  };

  var string = function string(obj) {
    return obj != null && _typeof(obj) == typeofstr;
  };
  var fn = function fn(obj) {
    return obj != null && _typeof(obj) === typeoffn;
  };
  var array = function array(obj) {
    return Array.isArray ? Array.isArray(obj) : obj != null && obj instanceof Array;
  };
  var plainObject = function plainObject(obj) {
    return obj != null && _typeof(obj) === typeofobj && !array(obj) && obj.constructor === Object;
  };
  var object = function object(obj) {
    return obj != null && _typeof(obj) === typeofobj;
  };
  var number = function number(obj) {
    return obj != null && _typeof(obj) === _typeof(1) && !isNaN(obj);
  };
  var integer = function integer(obj) {
    return number(obj) && Math.floor(obj) === obj;
  };
  var htmlElement = function htmlElement(obj) {
    if ('undefined' === typeofhtmlele) {
      return undefined;
    } else {
      return null != obj && obj instanceof HTMLElement;
    }
  };
  var elementOrCollection = function elementOrCollection(obj) {
    return element(obj) || collection(obj);
  };
  var element = function element(obj) {
    return instanceStr(obj) === 'collection' && obj._private.single;
  };
  var collection = function collection(obj) {
    return instanceStr(obj) === 'collection' && !obj._private.single;
  };
  var core = function core(obj) {
    return instanceStr(obj) === 'core';
  };
  var stylesheet = function stylesheet(obj) {
    return instanceStr(obj) === 'stylesheet';
  };
  var event = function event(obj) {
    return instanceStr(obj) === 'event';
  };
  var emptyString = function emptyString(obj) {
    if (obj === undefined || obj === null) {
      // null is empty
      return true;
    } else if (obj === '' || obj.match(/^\s+$/)) {
      return true; // empty string is empty
    }

    return false; // otherwise, we don't know what we've got
  };
  var domElement = function domElement(obj) {
    if (typeof HTMLElement === 'undefined') {
      return false; // we're not in a browser so it doesn't matter
    } else {
      return obj instanceof HTMLElement;
    }
  };
  var boundingBox = function boundingBox(obj) {
    return plainObject(obj) && number(obj.x1) && number(obj.x2) && number(obj.y1) && number(obj.y2);
  };
  var promise = function promise(obj) {
    return object(obj) && fn(obj.then);
  };
  var ms = function ms() {
    return navigator$1 && navigator$1.userAgent.match(/msie|trident|edge/i);
  }; // probably a better way to detect this...

  var memoize = function memoize(fn, keyFn) {
    if (!keyFn) {
      keyFn = function keyFn() {
        if (arguments.length === 1) {
          return arguments[0];
        } else if (arguments.length === 0) {
          return 'undefined';
        }

        var args = [];

        for (var i = 0; i < arguments.length; i++) {
          args.push(arguments[i]);
        }

        return args.join('$');
      };
    }

    var memoizedFn = function memoizedFn() {
      var self = this;
      var args = arguments;
      var ret;
      var k = keyFn.apply(self, args);
      var cache = memoizedFn.cache;

      if (!(ret = cache[k])) {
        ret = cache[k] = fn.apply(self, args);
      }

      return ret;
    };

    memoizedFn.cache = {};
    return memoizedFn;
  };

  var camel2dash = memoize(function (str) {
    return str.replace(/([A-Z])/g, function (v) {
      return '-' + v.toLowerCase();
    });
  });
  var dash2camel = memoize(function (str) {
    return str.replace(/(-\w)/g, function (v) {
      return v[1].toUpperCase();
    });
  });
  var prependCamel = memoize(function (prefix, str) {
    return prefix + str[0].toUpperCase() + str.substring(1);
  }, function (prefix, str) {
    return prefix + '$' + str;
  });
  var capitalize = function capitalize(str) {
    if (emptyString(str)) {
      return str;
    }

    return str.charAt(0).toUpperCase() + str.substring(1);
  };

  var number$1 = '(?:[-+]?(?:(?:\\d+|\\d*\\.\\d+)(?:[Ee][+-]?\\d+)?))';
  var rgba = 'rgb[a]?\\((' + number$1 + '[%]?)\\s*,\\s*(' + number$1 + '[%]?)\\s*,\\s*(' + number$1 + '[%]?)(?:\\s*,\\s*(' + number$1 + '))?\\)';
  var rgbaNoBackRefs = 'rgb[a]?\\((?:' + number$1 + '[%]?)\\s*,\\s*(?:' + number$1 + '[%]?)\\s*,\\s*(?:' + number$1 + '[%]?)(?:\\s*,\\s*(?:' + number$1 + '))?\\)';
  var hsla = 'hsl[a]?\\((' + number$1 + ')\\s*,\\s*(' + number$1 + '[%])\\s*,\\s*(' + number$1 + '[%])(?:\\s*,\\s*(' + number$1 + '))?\\)';
  var hslaNoBackRefs = 'hsl[a]?\\((?:' + number$1 + ')\\s*,\\s*(?:' + number$1 + '[%])\\s*,\\s*(?:' + number$1 + '[%])(?:\\s*,\\s*(?:' + number$1 + '))?\\)';
  var hex3 = '\\#[0-9a-fA-F]{3}';
  var hex6 = '\\#[0-9a-fA-F]{6}';

  var ascending = function ascending(a, b) {
    if (a < b) {
      return -1;
    } else if (a > b) {
      return 1;
    } else {
      return 0;
    }
  };
  var descending = function descending(a, b) {
    return -1 * ascending(a, b);
  };

  var extend = Object.assign != null ? Object.assign.bind(Object) : function (tgt) {
    var args = arguments;

    for (var i = 1; i < args.length; i++) {
      var obj = args[i];

      if (obj == null) {
        continue;
      }

      var keys = Object.keys(obj);

      for (var j = 0; j < keys.length; j++) {
        var k = keys[j];
        tgt[k] = obj[k];
      }
    }

    return tgt;
  };

  var hex2tuple = function hex2tuple(hex) {
    if (!(hex.length === 4 || hex.length === 7) || hex[0] !== '#') {
      return;
    }

    var shortHex = hex.length === 4;
    var r, g, b;
    var base = 16;

    if (shortHex) {
      r = parseInt(hex[1] + hex[1], base);
      g = parseInt(hex[2] + hex[2], base);
      b = parseInt(hex[3] + hex[3], base);
    } else {
      r = parseInt(hex[1] + hex[2], base);
      g = parseInt(hex[3] + hex[4], base);
      b = parseInt(hex[5] + hex[6], base);
    }

    return [r, g, b];
  }; // get [r, g, b, a] from hsl(0, 0, 0) or hsla(0, 0, 0, 0)

  var hsl2tuple = function hsl2tuple(hsl) {
    var ret;
    var h, s, l, a, r, g, b;

    function hue2rgb(p, q, t) {
      if (t < 0) t += 1;
      if (t > 1) t -= 1;
      if (t < 1 / 6) return p + (q - p) * 6 * t;
      if (t < 1 / 2) return q;
      if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
      return p;
    }

    var m = new RegExp('^' + hsla + '$').exec(hsl);

    if (m) {
      // get hue
      h = parseInt(m[1]);

      if (h < 0) {
        h = (360 - -1 * h % 360) % 360;
      } else if (h > 360) {
        h = h % 360;
      }

      h /= 360; // normalise on [0, 1]

      s = parseFloat(m[2]);

      if (s < 0 || s > 100) {
        return;
      } // saturation is [0, 100]


      s = s / 100; // normalise on [0, 1]

      l = parseFloat(m[3]);

      if (l < 0 || l > 100) {
        return;
      } // lightness is [0, 100]


      l = l / 100; // normalise on [0, 1]

      a = m[4];

      if (a !== undefined) {
        a = parseFloat(a);

        if (a < 0 || a > 1) {
          return;
        } // alpha is [0, 1]

      } // now, convert to rgb
      // code from http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript


      if (s === 0) {
        r = g = b = Math.round(l * 255); // achromatic
      } else {
        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        var p = 2 * l - q;
        r = Math.round(255 * hue2rgb(p, q, h + 1 / 3));
        g = Math.round(255 * hue2rgb(p, q, h));
        b = Math.round(255 * hue2rgb(p, q, h - 1 / 3));
      }

      ret = [r, g, b, a];
    }

    return ret;
  }; // get [r, g, b, a] from rgb(0, 0, 0) or rgba(0, 0, 0, 0)

  var rgb2tuple = function rgb2tuple(rgb) {
    var ret;
    var m = new RegExp('^' + rgba + '$').exec(rgb);

    if (m) {
      ret = [];
      var isPct = [];

      for (var i = 1; i <= 3; i++) {
        var channel = m[i];

        if (channel[channel.length - 1] === '%') {
          isPct[i] = true;
        }

        channel = parseFloat(channel);

        if (isPct[i]) {
          channel = channel / 100 * 255; // normalise to [0, 255]
        }

        if (channel < 0 || channel > 255) {
          return;
        } // invalid channel value


        ret.push(Math.floor(channel));
      }

      var atLeastOneIsPct = isPct[1] || isPct[2] || isPct[3];
      var allArePct = isPct[1] && isPct[2] && isPct[3];

      if (atLeastOneIsPct && !allArePct) {
        return;
      } // must all be percent values if one is


      var alpha = m[4];

      if (alpha !== undefined) {
        alpha = parseFloat(alpha);

        if (alpha < 0 || alpha > 1) {
          return;
        } // invalid alpha value


        ret.push(alpha);
      }
    }

    return ret;
  };
  var colorname2tuple = function colorname2tuple(color) {
    return colors[color.toLowerCase()];
  };
  var color2tuple = function color2tuple(color) {
    return (array(color) ? color : null) || colorname2tuple(color) || hex2tuple(color) || rgb2tuple(color) || hsl2tuple(color);
  };
  var colors = {
    // special colour names
    transparent: [0, 0, 0, 0],
    // NB alpha === 0
    // regular colours
    aliceblue: [240, 248, 255],
    antiquewhite: [250, 235, 215],
    aqua: [0, 255, 255],
    aquamarine: [127, 255, 212],
    azure: [240, 255, 255],
    beige: [245, 245, 220],
    bisque: [255, 228, 196],
    black: [0, 0, 0],
    blanchedalmond: [255, 235, 205],
    blue: [0, 0, 255],
    blueviolet: [138, 43, 226],
    brown: [165, 42, 42],
    burlywood: [222, 184, 135],
    cadetblue: [95, 158, 160],
    chartreuse: [127, 255, 0],
    chocolate: [210, 105, 30],
    coral: [255, 127, 80],
    cornflowerblue: [100, 149, 237],
    cornsilk: [255, 248, 220],
    crimson: [220, 20, 60],
    cyan: [0, 255, 255],
    darkblue: [0, 0, 139],
    darkcyan: [0, 139, 139],
    darkgoldenrod: [184, 134, 11],
    darkgray: [169, 169, 169],
    darkgreen: [0, 100, 0],
    darkgrey: [169, 169, 169],
    darkkhaki: [189, 183, 107],
    darkmagenta: [139, 0, 139],
    darkolivegreen: [85, 107, 47],
    darkorange: [255, 140, 0],
    darkorchid: [153, 50, 204],
    darkred: [139, 0, 0],
    darksalmon: [233, 150, 122],
    darkseagreen: [143, 188, 143],
    darkslateblue: [72, 61, 139],
    darkslategray: [47, 79, 79],
    darkslategrey: [47, 79, 79],
    darkturquoise: [0, 206, 209],
    darkviolet: [148, 0, 211],
    deeppink: [255, 20, 147],
    deepskyblue: [0, 191, 255],
    dimgray: [105, 105, 105],
    dimgrey: [105, 105, 105],
    dodgerblue: [30, 144, 255],
    firebrick: [178, 34, 34],
    floralwhite: [255, 250, 240],
    forestgreen: [34, 139, 34],
    fuchsia: [255, 0, 255],
    gainsboro: [220, 220, 220],
    ghostwhite: [248, 248, 255],
    gold: [255, 215, 0],
    goldenrod: [218, 165, 32],
    gray: [128, 128, 128],
    grey: [128, 128, 128],
    green: [0, 128, 0],
    greenyellow: [173, 255, 47],
    honeydew: [240, 255, 240],
    hotpink: [255, 105, 180],
    indianred: [205, 92, 92],
    indigo: [75, 0, 130],
    ivory: [255, 255, 240],
    khaki: [240, 230, 140],
    lavender: [230, 230, 250],
    lavenderblush: [255, 240, 245],
    lawngreen: [124, 252, 0],
    lemonchiffon: [255, 250, 205],
    lightblue: [173, 216, 230],
    lightcoral: [240, 128, 128],
    lightcyan: [224, 255, 255],
    lightgoldenrodyellow: [250, 250, 210],
    lightgray: [211, 211, 211],
    lightgreen: [144, 238, 144],
    lightgrey: [211, 211, 211],
    lightpink: [255, 182, 193],
    lightsalmon: [255, 160, 122],
    lightseagreen: [32, 178, 170],
    lightskyblue: [135, 206, 250],
    lightslategray: [119, 136, 153],
    lightslategrey: [119, 136, 153],
    lightsteelblue: [176, 196, 222],
    lightyellow: [255, 255, 224],
    lime: [0, 255, 0],
    limegreen: [50, 205, 50],
    linen: [250, 240, 230],
    magenta: [255, 0, 255],
    maroon: [128, 0, 0],
    mediumaquamarine: [102, 205, 170],
    mediumblue: [0, 0, 205],
    mediumorchid: [186, 85, 211],
    mediumpurple: [147, 112, 219],
    mediumseagreen: [60, 179, 113],
    mediumslateblue: [123, 104, 238],
    mediumspringgreen: [0, 250, 154],
    mediumturquoise: [72, 209, 204],
    mediumvioletred: [199, 21, 133],
    midnightblue: [25, 25, 112],
    mintcream: [245, 255, 250],
    mistyrose: [255, 228, 225],
    moccasin: [255, 228, 181],
    navajowhite: [255, 222, 173],
    navy: [0, 0, 128],
    oldlace: [253, 245, 230],
    olive: [128, 128, 0],
    olivedrab: [107, 142, 35],
    orange: [255, 165, 0],
    orangered: [255, 69, 0],
    orchid: [218, 112, 214],
    palegoldenrod: [238, 232, 170],
    palegreen: [152, 251, 152],
    paleturquoise: [175, 238, 238],
    palevioletred: [219, 112, 147],
    papayawhip: [255, 239, 213],
    peachpuff: [255, 218, 185],
    peru: [205, 133, 63],
    pink: [255, 192, 203],
    plum: [221, 160, 221],
    powderblue: [176, 224, 230],
    purple: [128, 0, 128],
    red: [255, 0, 0],
    rosybrown: [188, 143, 143],
    royalblue: [65, 105, 225],
    saddlebrown: [139, 69, 19],
    salmon: [250, 128, 114],
    sandybrown: [244, 164, 96],
    seagreen: [46, 139, 87],
    seashell: [255, 245, 238],
    sienna: [160, 82, 45],
    silver: [192, 192, 192],
    skyblue: [135, 206, 235],
    slateblue: [106, 90, 205],
    slategray: [112, 128, 144],
    slategrey: [112, 128, 144],
    snow: [255, 250, 250],
    springgreen: [0, 255, 127],
    steelblue: [70, 130, 180],
    tan: [210, 180, 140],
    teal: [0, 128, 128],
    thistle: [216, 191, 216],
    tomato: [255, 99, 71],
    turquoise: [64, 224, 208],
    violet: [238, 130, 238],
    wheat: [245, 222, 179],
    white: [255, 255, 255],
    whitesmoke: [245, 245, 245],
    yellow: [255, 255, 0],
    yellowgreen: [154, 205, 50]
  };

  var setMap = function setMap(options) {
    var obj = options.map;
    var keys = options.keys;
    var l = keys.length;

    for (var i = 0; i < l; i++) {
      var key = keys[i];

      if (plainObject(key)) {
        throw Error('Tried to set map with object key');
      }

      if (i < keys.length - 1) {
        // extend the map if necessary
        if (obj[key] == null) {
          obj[key] = {};
        }

        obj = obj[key];
      } else {
        // set the value
        obj[key] = options.value;
      }
    }
  }; // gets the value in a map even if it's not built in places

  var getMap = function getMap(options) {
    var obj = options.map;
    var keys = options.keys;
    var l = keys.length;

    for (var i = 0; i < l; i++) {
      var key = keys[i];

      if (plainObject(key)) {
        throw Error('Tried to get map with object key');
      }

      obj = obj[key];

      if (obj == null) {
        return obj;
      }
    }

    return obj;
  }; // deletes the entry in the map

  var performance = window$1 ? window$1.performance : null;
  var pnow = performance && performance.now ? function () {
    return performance.now();
  } : function () {
    return Date.now();
  };

  var raf = function () {
    if (window$1) {
      if (window$1.requestAnimationFrame) {
        return function (fn) {
          window$1.requestAnimationFrame(fn);
        };
      } else if (window$1.mozRequestAnimationFrame) {
        return function (fn) {
          window$1.mozRequestAnimationFrame(fn);
        };
      } else if (window$1.webkitRequestAnimationFrame) {
        return function (fn) {
          window$1.webkitRequestAnimationFrame(fn);
        };
      } else if (window$1.msRequestAnimationFrame) {
        return function (fn) {
          window$1.msRequestAnimationFrame(fn);
        };
      }
    }

    return function (fn) {
      if (fn) {
        setTimeout(function () {
          fn(pnow());
        }, 1000 / 60);
      }
    };
  }();

  var requestAnimationFrame = function requestAnimationFrame(fn) {
    return raf(fn);
  };
  var performanceNow = pnow;

  var DEFAULT_HASH_SEED = 9261;
  var K = 65599; // 37 also works pretty well

  var DEFAULT_HASH_SEED_ALT = 5381;
  var hashIterableInts = function hashIterableInts(iterator) {
    var seed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_HASH_SEED;
    // sdbm/string-hash
    var hash = seed;
    var entry;

    for (;;) {
      entry = iterator.next();

      if (entry.done) {
        break;
      }

      hash = hash * K + entry.value | 0;
    }

    return hash;
  };
  var hashInt = function hashInt(num) {
    var seed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_HASH_SEED;
    // sdbm/string-hash
    return seed * K + num | 0;
  };
  var hashIntAlt = function hashIntAlt(num) {
    var seed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_HASH_SEED_ALT;
    // djb2/string-hash
    return (seed << 5) + seed + num | 0;
  };
  var combineHashes = function combineHashes(hash1, hash2) {
    return hash1 * 0x200000 + hash2;
  };
  var combineHashesArray = function combineHashesArray(hashes) {
    return hashes[0] * 0x200000 + hashes[1];
  };
  var hashArrays = function hashArrays(hashes1, hashes2) {
    return [hashInt(hashes1[0], hashes2[0]), hashIntAlt(hashes1[1], hashes2[1])];
  };
  var hashIntsArray = function hashIntsArray(ints, seed) {
    var entry = {
      value: 0,
      done: false
    };
    var i = 0;
    var length = ints.length;
    var iterator = {
      next: function next() {
        if (i < length) {
          entry.value = ints[i++];
        } else {
          entry.done = true;
        }

        return entry;
      }
    };
    return hashIterableInts(iterator, seed);
  };
  var hashString = function hashString(str, seed) {
    var entry = {
      value: 0,
      done: false
    };
    var i = 0;
    var length = str.length;
    var iterator = {
      next: function next() {
        if (i < length) {
          entry.value = str.charCodeAt(i++);
        } else {
          entry.done = true;
        }

        return entry;
      }
    };
    return hashIterableInts(iterator, seed);
  };
  var hashStrings = function hashStrings() {
    return hashStringsArray(arguments);
  };
  var hashStringsArray = function hashStringsArray(strs) {
    var hash;

    for (var i = 0; i < strs.length; i++) {
      var str = strs[i];

      if (i === 0) {
        hash = hashString(str);
      } else {
        hash = hashString(str, hash);
      }
    }

    return hash;
  };

  /*global console */
  var warningsEnabled = true;
  var warnSupported = console.warn != null; // eslint-disable-line no-console

  var traceSupported = console.trace != null; // eslint-disable-line no-console

  var MAX_INT = Number.MAX_SAFE_INTEGER || 9007199254740991;
  var trueify = function trueify() {
    return true;
  };
  var falsify = function falsify() {
    return false;
  };
  var zeroify = function zeroify() {
    return 0;
  };
  var noop = function noop() {};
  var error = function error(msg) {
    throw new Error(msg);
  };
  var warnings = function warnings(enabled) {
    if (enabled !== undefined) {
      warningsEnabled = !!enabled;
    } else {
      return warningsEnabled;
    }
  };
  var warn = function warn(msg) {
    /* eslint-disable no-console */
    if (!warnings()) {
      return;
    }

    if (warnSupported) {
      console.warn(msg);
    } else {
      console.log(msg);

      if (traceSupported) {
        console.trace();
      }
    }
  };
  /* eslint-enable */

  var clone = function clone(obj) {
    return extend({}, obj);
  }; // gets a shallow copy of the argument

  var copy = function copy(obj) {
    if (obj == null) {
      return obj;
    }

    if (array(obj)) {
      return obj.slice();
    } else if (plainObject(obj)) {
      return clone(obj);
    } else {
      return obj;
    }
  };
  var copyArray = function copyArray(arr) {
    return arr.slice();
  };
  var uuid = function uuid(a, b
  /* placeholders */
  ) {
    for ( // loop :)
    b = a = ''; // b - result , a - numeric letiable
    a++ < 36; //
    b += a * 51 & 52 // if "a" is not 9 or 14 or 19 or 24
    ? //  return a random number or 4
    (a ^ 15 // if "a" is not 15
    ? // genetate a random number from 0 to 15
    8 ^ Math.random() * (a ^ 20 ? 16 : 4) // unless "a" is 20, in which case a random number from 8 to 11
    : 4 //  otherwise 4
    ).toString(16) : '-' //  in other cases (if "a" is 9,14,19,24) insert "-"
    ) {
    }

    return b;
  };
  var _staticEmptyObject = {};
  var staticEmptyObject = function staticEmptyObject() {
    return _staticEmptyObject;
  };
  var defaults = function defaults(_defaults) {
    var keys = Object.keys(_defaults);
    return function (opts) {
      var filledOpts = {};

      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        var optVal = opts == null ? undefined : opts[key];
        filledOpts[key] = optVal === undefined ? _defaults[key] : optVal;
      }

      return filledOpts;
    };
  };
  var removeFromArray = function removeFromArray(arr, ele, manyCopies) {
    for (var i = arr.length; i >= 0; i--) {
      if (arr[i] === ele) {
        arr.splice(i, 1);

        if (!manyCopies) {
          break;
        }
      }
    }
  };
  var clearArray = function clearArray(arr) {
    arr.splice(0, arr.length);
  };
  var push = function push(arr, otherArr) {
    for (var i = 0; i < otherArr.length; i++) {
      var el = otherArr[i];
      arr.push(el);
    }
  };
  var getPrefixedProperty = function getPrefixedProperty(obj, propName, prefix) {
    if (prefix) {
      propName = prependCamel(prefix, propName); // e.g. (labelWidth, source) => sourceLabelWidth
    }

    return obj[propName];
  };
  var setPrefixedProperty = function setPrefixedProperty(obj, propName, prefix, value) {
    if (prefix) {
      propName = prependCamel(prefix, propName); // e.g. (labelWidth, source) => sourceLabelWidth
    }

    obj[propName] = value;
  };

  /* global Map */
  var ObjectMap =
  /*#__PURE__*/
  function () {
    function ObjectMap() {
      _classCallCheck(this, ObjectMap);

      this._obj = {};
    }

    _createClass(ObjectMap, [{
      key: "set",
      value: function set(key, val) {
        this._obj[key] = val;
        return this;
      }
    }, {
      key: "delete",
      value: function _delete(key) {
        this._obj[key] = undefined;
        return this;
      }
    }, {
      key: "clear",
      value: function clear() {
        this._obj = {};
      }
    }, {
      key: "has",
      value: function has(key) {
        return this._obj[key] !== undefined;
      }
    }, {
      key: "get",
      value: function get(key) {
        return this._obj[key];
      }
    }]);

    return ObjectMap;
  }();

  var Map$1 = typeof Map !== 'undefined' ? Map : ObjectMap;

  /* global Set */
  var undef =  "undefined" ;

  var ObjectSet =
  /*#__PURE__*/
  function () {
    function ObjectSet(arrayOrObjectSet) {
      _classCallCheck(this, ObjectSet);

      this._obj = Object.create(null);
      this.size = 0;

      if (arrayOrObjectSet != null) {
        var arr;

        if (arrayOrObjectSet.instanceString != null && arrayOrObjectSet.instanceString() === this.instanceString()) {
          arr = arrayOrObjectSet.toArray();
        } else {
          arr = arrayOrObjectSet;
        }

        for (var i = 0; i < arr.length; i++) {
          this.add(arr[i]);
        }
      }
    }

    _createClass(ObjectSet, [{
      key: "instanceString",
      value: function instanceString() {
        return 'set';
      }
    }, {
      key: "add",
      value: function add(val) {
        var o = this._obj;

        if (o[val] !== 1) {
          o[val] = 1;
          this.size++;
        }
      }
    }, {
      key: "delete",
      value: function _delete(val) {
        var o = this._obj;

        if (o[val] === 1) {
          o[val] = 0;
          this.size--;
        }
      }
    }, {
      key: "clear",
      value: function clear() {
        this._obj = Object.create(null);
      }
    }, {
      key: "has",
      value: function has(val) {
        return this._obj[val] === 1;
      }
    }, {
      key: "toArray",
      value: function toArray() {
        var _this = this;

        return Object.keys(this._obj).filter(function (key) {
          return _this.has(key);
        });
      }
    }, {
      key: "forEach",
      value: function forEach(callback, thisArg) {
        return this.toArray().forEach(callback, thisArg);
      }
    }]);

    return ObjectSet;
  }();

  var Set$1 = (typeof Set === "undefined" ? "undefined" : _typeof(Set)) !== undef ? Set : ObjectSet;

  var Element = function Element(cy, params, restore) {
    restore = restore === undefined || restore ? true : false;

    if (cy === undefined || params === undefined || !core(cy)) {
      error('An element must have a core reference and parameters set');
      return;
    }

    var group = params.group; // try to automatically infer the group if unspecified

    if (group == null) {
      if (params.data && params.data.source != null && params.data.target != null) {
        group = 'edges';
      } else {
        group = 'nodes';
      }
    } // validate group


    if (group !== 'nodes' && group !== 'edges') {
      error('An element must be of type `nodes` or `edges`; you specified `' + group + '`');
      return;
    } // make the element array-like, just like a collection


    this.length = 1;
    this[0] = this; // NOTE: when something is added here, add also to ele.json()

    var _p = this._private = {
      cy: cy,
      single: true,
      // indicates this is an element
      data: params.data || {},
      // data object
      position: params.position || {
        x: 0,
        y: 0
      },
      // (x, y) position pair
      autoWidth: undefined,
      // width and height of nodes calculated by the renderer when set to special 'auto' value
      autoHeight: undefined,
      autoPadding: undefined,
      compoundBoundsClean: false,
      // whether the compound dimensions need to be recalculated the next time dimensions are read
      listeners: [],
      // array of bound listeners
      group: group,
      // string; 'nodes' or 'edges'
      style: {},
      // properties as set by the style
      rstyle: {},
      // properties for style sent from the renderer to the core
      styleCxts: [],
      // applied style contexts from the styler
      styleKeys: {},
      // per-group keys of style property values
      removed: true,
      // whether it's inside the vis; true if removed (set true here since we call restore)
      selected: params.selected ? true : false,
      // whether it's selected
      selectable: params.selectable === undefined ? true : params.selectable ? true : false,
      // whether it's selectable
      locked: params.locked ? true : false,
      // whether the element is locked (cannot be moved)
      grabbed: false,
      // whether the element is grabbed by the mouse; renderer sets this privately
      grabbable: params.grabbable === undefined ? true : params.grabbable ? true : false,
      // whether the element can be grabbed
      pannable: params.pannable === undefined ? group === 'edges' ? true : false : params.pannable ? true : false,
      // whether the element has passthrough panning enabled
      active: false,
      // whether the element is active from user interaction
      classes: new Set$1(),
      // map ( className => true )
      animation: {
        // object for currently-running animations
        current: [],
        queue: []
      },
      rscratch: {},
      // object in which the renderer can store information
      scratch: params.scratch || {},
      // scratch objects
      edges: [],
      // array of connected edges
      children: [],
      // array of children
      parent: null,
      // parent ref
      traversalCache: {},
      // cache of output of traversal functions
      backgrounding: false,
      // whether background images are loading
      bbCache: null,
      // cache of the current bounding box
      bbCacheShift: {
        x: 0,
        y: 0
      },
      // shift applied to cached bb to be applied on next get
      bodyBounds: null,
      // bounds cache of element body, w/o overlay
      overlayBounds: null,
      // bounds cache of element body, including overlay
      labelBounds: {
        // bounds cache of labels
        all: null,
        source: null,
        target: null,
        main: null
      },
      arrowBounds: {
        // bounds cache of edge arrows
        source: null,
        target: null,
        'mid-source': null,
        'mid-target': null
      }
    };

    if (_p.position.x == null) {
      _p.position.x = 0;
    }

    if (_p.position.y == null) {
      _p.position.y = 0;
    } // renderedPosition overrides if specified


    if (params.renderedPosition) {
      var rpos = params.renderedPosition;
      var pan = cy.pan();
      var zoom = cy.zoom();
      _p.position = {
        x: (rpos.x - pan.x) / zoom,
        y: (rpos.y - pan.y) / zoom
      };
    }

    var classes = [];

    if (array(params.classes)) {
      classes = params.classes;
    } else if (string(params.classes)) {
      classes = params.classes.split(/\s+/);
    }

    for (var i = 0, l = classes.length; i < l; i++) {
      var cls = classes[i];

      if (!cls || cls === '') {
        continue;
      }

      _p.classes.add(cls);
    }

    this.createEmitter();
    var bypass = params.style || params.css;

    if (bypass) {
      warn('Setting a `style` bypass at element creation is deprecated');
      this.style(bypass);
    }

    if (restore === undefined || restore) {
      this.restore();
    }
  };

  var defineSearch = function defineSearch(params) {
    params = {
      bfs: params.bfs || !params.dfs,
      dfs: params.dfs || !params.bfs
    }; // from pseudocode on wikipedia

    return function searchFn(roots, fn$1, directed) {
      var options;

      if (plainObject(roots) && !elementOrCollection(roots)) {
        options = roots;
        roots = options.roots || options.root;
        fn$1 = options.visit;
        directed = options.directed;
      }

      directed = arguments.length === 2 && !fn(fn$1) ? fn$1 : directed;
      fn$1 = fn(fn$1) ? fn$1 : function () {};
      var cy = this._private.cy;
      var v = roots = string(roots) ? this.filter(roots) : roots;
      var Q = [];
      var connectedNodes = [];
      var connectedBy = {};
      var id2depth = {};
      var V = {};
      var j = 0;
      var found;

      var _this$byGroup = this.byGroup(),
          nodes = _this$byGroup.nodes,
          edges = _this$byGroup.edges; // enqueue v


      for (var i = 0; i < v.length; i++) {
        var vi = v[i];
        var viId = vi.id();

        if (vi.isNode()) {
          Q.unshift(vi);

          if (params.bfs) {
            V[viId] = true;
            connectedNodes.push(vi);
          }

          id2depth[viId] = 0;
        }
      }

      var _loop2 = function _loop2() {
        var v = params.bfs ? Q.shift() : Q.pop();
        var vId = v.id();

        if (params.dfs) {
          if (V[vId]) {
            return "continue";
          }

          V[vId] = true;
          connectedNodes.push(v);
        }

        var depth = id2depth[vId];
        var prevEdge = connectedBy[vId];
        var src = prevEdge != null ? prevEdge.source() : null;
        var tgt = prevEdge != null ? prevEdge.target() : null;
        var prevNode = prevEdge == null ? undefined : v.same(src) ? tgt[0] : src[0];
        var ret = void 0;
        ret = fn$1(v, prevEdge, prevNode, j++, depth);

        if (ret === true) {
          found = v;
          return "break";
        }

        if (ret === false) {
          return "break";
        }

        var vwEdges = v.connectedEdges().filter(function (e) {
          return (!directed || e.source().same(v)) && edges.has(e);
        });

        for (var _i2 = 0; _i2 < vwEdges.length; _i2++) {
          var e = vwEdges[_i2];
          var w = e.connectedNodes().filter(function (n) {
            return !n.same(v) && nodes.has(n);
          });
          var wId = w.id();

          if (w.length !== 0 && !V[wId]) {
            w = w[0];
            Q.push(w);

            if (params.bfs) {
              V[wId] = true;
              connectedNodes.push(w);
            }

            connectedBy[wId] = e;
            id2depth[wId] = id2depth[vId] + 1;
          }
        }
      };

      _loop: while (Q.length !== 0) {
        var _ret = _loop2();

        switch (_ret) {
          case "continue":
            continue;

          case "break":
            break _loop;
        }
      }

      var connectedEles = cy.collection();

      for (var _i = 0; _i < connectedNodes.length; _i++) {
        var node = connectedNodes[_i];
        var edge = connectedBy[node.id()];

        if (edge != null) {
          connectedEles.merge(edge);
        }

        connectedEles.merge(node);
      }

      return {
        path: cy.collection(connectedEles),
        found: cy.collection(found)
      };
    };
  }; // search, spanning trees, etc


  var elesfn = {
    breadthFirstSearch: defineSearch({
      bfs: true
    }),
    depthFirstSearch: defineSearch({
      dfs: true
    })
  }; // nice, short mathemathical alias

  elesfn.bfs = elesfn.breadthFirstSearch;
  elesfn.dfs = elesfn.depthFirstSearch;

  var dijkstraDefaults = defaults({
    root: null,
    weight: function weight(edge) {
      return 1;
    },
    directed: false
  });
  var elesfn$1 = {
    dijkstra: function dijkstra(options) {
      if (!plainObject(options)) {
        var args = arguments;
        options = {
          root: args[0],
          weight: args[1],
          directed: args[2]
        };
      }

      var _dijkstraDefaults = dijkstraDefaults(options),
          root = _dijkstraDefaults.root,
          weight = _dijkstraDefaults.weight,
          directed = _dijkstraDefaults.directed;

      var eles = this;
      var weightFn = weight;
      var source = string(root) ? this.filter(root)[0] : root[0];
      var dist = {};
      var prev = {};
      var knownDist = {};

      var _this$byGroup = this.byGroup(),
          nodes = _this$byGroup.nodes,
          edges = _this$byGroup.edges;

      edges.unmergeBy(function (ele) {
        return ele.isLoop();
      });

      var getDist = function getDist(node) {
        return dist[node.id()];
      };

      var setDist = function setDist(node, d) {
        dist[node.id()] = d;
        Q.updateItem(node);
      };

      var Q = new Heap(function (a, b) {
        return getDist(a) - getDist(b);
      });

      for (var i = 0; i < nodes.length; i++) {
        var node = nodes[i];
        dist[node.id()] = node.same(source) ? 0 : Infinity;
        Q.push(node);
      }

      var distBetween = function distBetween(u, v) {
        var uvs = (directed ? u.edgesTo(v) : u.edgesWith(v)).intersect(edges);
        var smallestDistance = Infinity;
        var smallestEdge;

        for (var _i = 0; _i < uvs.length; _i++) {
          var edge = uvs[_i];

          var _weight = weightFn(edge);

          if (_weight < smallestDistance || !smallestEdge) {
            smallestDistance = _weight;
            smallestEdge = edge;
          }
        }

        return {
          edge: smallestEdge,
          dist: smallestDistance
        };
      };

      while (Q.size() > 0) {
        var u = Q.pop();
        var smalletsDist = getDist(u);
        var uid = u.id();
        knownDist[uid] = smalletsDist;

        if (smalletsDist === Infinity) {
          continue;
        }

        var neighbors = u.neighborhood().intersect(nodes);

        for (var _i2 = 0; _i2 < neighbors.length; _i2++) {
          var v = neighbors[_i2];
          var vid = v.id();
          var vDist = distBetween(u, v);
          var alt = smalletsDist + vDist.dist;

          if (alt < getDist(v)) {
            setDist(v, alt);
            prev[vid] = {
              node: u,
              edge: vDist.edge
            };
          }
        } // for

      } // while


      return {
        distanceTo: function distanceTo(node) {
          var target = string(node) ? nodes.filter(node)[0] : node[0];
          return knownDist[target.id()];
        },
        pathTo: function pathTo(node) {
          var target = string(node) ? nodes.filter(node)[0] : node[0];
          var S = [];
          var u = target;
          var uid = u.id();

          if (target.length > 0) {
            S.unshift(target);

            while (prev[uid]) {
              var p = prev[uid];
              S.unshift(p.edge);
              S.unshift(p.node);
              u = p.node;
              uid = u.id();
            }
          }

          return eles.spawn(S);
        }
      };
    }
  };

  var elesfn$2 = {
    // kruskal's algorithm (finds min spanning tree, assuming undirected graph)
    // implemented from pseudocode from wikipedia
    kruskal: function kruskal(weightFn) {
      weightFn = weightFn || function (edge) {
        return 1;
      };

      var _this$byGroup = this.byGroup(),
          nodes = _this$byGroup.nodes,
          edges = _this$byGroup.edges;

      var numNodes = nodes.length;
      var forest = new Array(numNodes);
      var A = nodes; // assumes byGroup() creates new collections that can be safely mutated

      var findSetIndex = function findSetIndex(ele) {
        for (var i = 0; i < forest.length; i++) {
          var eles = forest[i];

          if (eles.has(ele)) {
            return i;
          }
        }
      }; // start with one forest per node


      for (var i = 0; i < numNodes; i++) {
        forest[i] = this.spawn(nodes[i]);
      }

      var S = edges.sort(function (a, b) {
        return weightFn(a) - weightFn(b);
      });

      for (var _i = 0; _i < S.length; _i++) {
        var edge = S[_i];
        var u = edge.source()[0];
        var v = edge.target()[0];
        var setUIndex = findSetIndex(u);
        var setVIndex = findSetIndex(v);
        var setU = forest[setUIndex];
        var setV = forest[setVIndex];

        if (setUIndex !== setVIndex) {
          A.merge(edge); // combine forests for u and v

          setU.merge(setV);
          forest.splice(setVIndex, 1);
        }
      }

      return A;
    }
  };

  var aStarDefaults = defaults({
    root: null,
    goal: null,
    weight: function weight(edge) {
      return 1;
    },
    heuristic: function heuristic(edge) {
      return 0;
    },
    directed: false
  });
  var elesfn$3 = {
    // Implemented from pseudocode from wikipedia
    aStar: function aStar(options) {
      var cy = this.cy();

      var _aStarDefaults = aStarDefaults(options),
          root = _aStarDefaults.root,
          goal = _aStarDefaults.goal,
          heuristic = _aStarDefaults.heuristic,
          directed = _aStarDefaults.directed,
          weight = _aStarDefaults.weight;

      root = cy.collection(root)[0];
      goal = cy.collection(goal)[0];
      var sid = root.id();
      var tid = goal.id();
      var gScore = {};
      var fScore = {};
      var closedSetIds = {};
      var openSet = new Heap(function (a, b) {
        return fScore[a.id()] - fScore[b.id()];
      });
      var openSetIds = new Set$1();
      var cameFrom = {};
      var cameFromEdge = {};

      var addToOpenSet = function addToOpenSet(ele, id) {
        openSet.push(ele);
        openSetIds.add(id);
      };

      var cMin, cMinId;

      var popFromOpenSet = function popFromOpenSet() {
        cMin = openSet.pop();
        cMinId = cMin.id();
        openSetIds["delete"](cMinId);
      };

      var isInOpenSet = function isInOpenSet(id) {
        return openSetIds.has(id);
      };

      addToOpenSet(root, sid);
      gScore[sid] = 0;
      fScore[sid] = heuristic(root); // Counter

      var steps = 0; // Main loop

      while (openSet.size() > 0) {
        popFromOpenSet();
        steps++; // If we've found our goal, then we are done

        if (cMinId === tid) {
          var path = [];
          var pathNode = goal;
          var pathNodeId = tid;
          var pathEdge = cameFromEdge[pathNodeId];

          for (;;) {
            path.unshift(pathNode);

            if (pathEdge != null) {
              path.unshift(pathEdge);
            }

            pathNode = cameFrom[pathNodeId];

            if (pathNode == null) {
              break;
            }

            pathNodeId = pathNode.id();
            pathEdge = cameFromEdge[pathNodeId];
          }

          return {
            found: true,
            distance: gScore[cMinId],
            path: this.spawn(path),
            steps: steps
          };
        } // Add cMin to processed nodes


        closedSetIds[cMinId] = true; // Update scores for neighbors of cMin
        // Take into account if graph is directed or not

        var vwEdges = cMin._private.edges;

        for (var i = 0; i < vwEdges.length; i++) {
          var e = vwEdges[i]; // edge must be in set of calling eles

          if (!this.hasElementWithId(e.id())) {
            continue;
          } // cMin must be the source of edge if directed


          if (directed && e.data('source') !== cMinId) {
            continue;
          }

          var wSrc = e.source();
          var wTgt = e.target();
          var w = wSrc.id() !== cMinId ? wSrc : wTgt;
          var wid = w.id(); // node must be in set of calling eles

          if (!this.hasElementWithId(wid)) {
            continue;
          } // if node is in closedSet, ignore it


          if (closedSetIds[wid]) {
            continue;
          } // New tentative score for node w


          var tempScore = gScore[cMinId] + weight(e); // Update gScore for node w if:
          //   w not present in openSet
          // OR
          //   tentative gScore is less than previous value
          // w not in openSet

          if (!isInOpenSet(wid)) {
            gScore[wid] = tempScore;
            fScore[wid] = tempScore + heuristic(w);
            addToOpenSet(w, wid);
            cameFrom[wid] = cMin;
            cameFromEdge[wid] = e;
            continue;
          } // w already in openSet, but with greater gScore


          if (tempScore < gScore[wid]) {
            gScore[wid] = tempScore;
            fScore[wid] = tempScore + heuristic(w);
            cameFrom[wid] = cMin;
          }
        } // End of neighbors update

      } // End of main loop
      // If we've reached here, then we've not reached our goal


      return {
        found: false,
        distance: undefined,
        path: undefined,
        steps: steps
      };
    }
  }; // elesfn

  var floydWarshallDefaults = defaults({
    weight: function weight(edge) {
      return 1;
    },
    directed: false
  });
  var elesfn$4 = {
    // Implemented from pseudocode from wikipedia
    floydWarshall: function floydWarshall(options) {
      var cy = this.cy();

      var _floydWarshallDefault = floydWarshallDefaults(options),
          weight = _floydWarshallDefault.weight,
          directed = _floydWarshallDefault.directed;

      var weightFn = weight;

      var _this$byGroup = this.byGroup(),
          nodes = _this$byGroup.nodes,
          edges = _this$byGroup.edges;

      var N = nodes.length;
      var Nsq = N * N;

      var indexOf = function indexOf(node) {
        return nodes.indexOf(node);
      };

      var atIndex = function atIndex(i) {
        return nodes[i];
      }; // Initialize distance matrix


      var dist = new Array(Nsq);

      for (var n = 0; n < Nsq; n++) {
        var j = n % N;
        var i = (n - j) / N;

        if (i === j) {
          dist[n] = 0;
        } else {
          dist[n] = Infinity;
        }
      } // Initialize matrix used for path reconstruction
      // Initialize distance matrix


      var next = new Array(Nsq);
      var edgeNext = new Array(Nsq); // Process edges

      for (var _i = 0; _i < edges.length; _i++) {
        var edge = edges[_i];
        var src = edge.source()[0];
        var tgt = edge.target()[0];

        if (src === tgt) {
          continue;
        } // exclude loops


        var s = indexOf(src);
        var t = indexOf(tgt);
        var st = s * N + t; // source to target index

        var _weight = weightFn(edge); // Check if already process another edge between same 2 nodes


        if (dist[st] > _weight) {
          dist[st] = _weight;
          next[st] = t;
          edgeNext[st] = edge;
        } // If undirected graph, process 'reversed' edge


        if (!directed) {
          var ts = t * N + s; // target to source index

          if (!directed && dist[ts] > _weight) {
            dist[ts] = _weight;
            next[ts] = s;
            edgeNext[ts] = edge;
          }
        }
      } // Main loop


      for (var k = 0; k < N; k++) {
        for (var _i2 = 0; _i2 < N; _i2++) {
          var ik = _i2 * N + k;

          for (var _j = 0; _j < N; _j++) {
            var ij = _i2 * N + _j;
            var kj = k * N + _j;

            if (dist[ik] + dist[kj] < dist[ij]) {
              dist[ij] = dist[ik] + dist[kj];
              next[ij] = next[ik];
            }
          }
        }
      }

      var getArgEle = function getArgEle(ele) {
        return (string(ele) ? cy.filter(ele) : ele)[0];
      };

      var indexOfArgEle = function indexOfArgEle(ele) {
        return indexOf(getArgEle(ele));
      };

      var res = {
        distance: function distance(from, to) {
          var i = indexOfArgEle(from);
          var j = indexOfArgEle(to);
          return dist[i * N + j];
        },
        path: function path(from, to) {
          var i = indexOfArgEle(from);
          var j = indexOfArgEle(to);
          var fromNode = atIndex(i);

          if (i === j) {
            return fromNode.collection();
          }

          if (next[i * N + j] == null) {
            return cy.collection();
          }

          var path = cy.collection();
          var prev = i;
          var edge;
          path.merge(fromNode);

          while (i !== j) {
            prev = i;
            i = next[i * N + j];
            edge = edgeNext[prev * N + i];
            path.merge(edge);
            path.merge(atIndex(i));
          }

          return path;
        }
      };
      return res;
    } // floydWarshall

  }; // elesfn

  var bellmanFordDefaults = defaults({
    weight: function weight(edge) {
      return 1;
    },
    directed: false,
    root: null
  });
  var elesfn$5 = {
    // Implemented from pseudocode from wikipedia
    bellmanFord: function bellmanFord(options) {
      var _this = this;

      var _bellmanFordDefaults = bellmanFordDefaults(options),
          weight = _bellmanFordDefaults.weight,
          directed = _bellmanFordDefaults.directed,
          root = _bellmanFordDefaults.root;

      var weightFn = weight;
      var eles = this;
      var cy = this.cy();

      var _this$byGroup = this.byGroup(),
          edges = _this$byGroup.edges,
          nodes = _this$byGroup.nodes;

      var numNodes = nodes.length;
      var infoMap = new Map$1();
      var hasNegativeWeightCycle = false;
      var negativeWeightCycles = [];
      root = cy.collection(root)[0]; // in case selector passed

      edges.unmergeBy(function (edge) {
        return edge.isLoop();
      });
      var numEdges = edges.length;

      var getInfo = function getInfo(node) {
        var obj = infoMap.get(node.id());

        if (!obj) {
          obj = {};
          infoMap.set(node.id(), obj);
        }

        return obj;
      };

      var getNodeFromTo = function getNodeFromTo(to) {
        return (string(to) ? cy.$(to) : to)[0];
      };

      var distanceTo = function distanceTo(to) {
        return getInfo(getNodeFromTo(to)).dist;
      };

      var pathTo = function pathTo(to) {
        var thisStart = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : root;
        var end = getNodeFromTo(to);
        var path = [];
        var node = end;

        for (;;) {
          if (node == null) {
            return _this.spawn();
          }

          var _getInfo = getInfo(node),
              edge = _getInfo.edge,
              pred = _getInfo.pred;

          path.unshift(node[0]);

          if (node.same(thisStart) && path.length > 0) {
            break;
          }

          if (edge != null) {
            path.unshift(edge);
          }

          node = pred;
        }

        return eles.spawn(path);
      }; // Initializations { dist, pred, edge }


      for (var i = 0; i < numNodes; i++) {
        var node = nodes[i];
        var info = getInfo(node);

        if (node.same(root)) {
          info.dist = 0;
        } else {
          info.dist = Infinity;
        }

        info.pred = null;
        info.edge = null;
      } // Edges relaxation


      var replacedEdge = false;

      var checkForEdgeReplacement = function checkForEdgeReplacement(node1, node2, edge, info1, info2, weight) {
        var dist = info1.dist + weight;

        if (dist < info2.dist && !edge.same(info1.edge)) {
          info2.dist = dist;
          info2.pred = node1;
          info2.edge = edge;
          replacedEdge = true;
        }
      };

      for (var _i = 1; _i < numNodes; _i++) {
        replacedEdge = false;

        for (var e = 0; e < numEdges; e++) {
          var edge = edges[e];
          var src = edge.source();
          var tgt = edge.target();

          var _weight = weightFn(edge);

          var srcInfo = getInfo(src);
          var tgtInfo = getInfo(tgt);
          checkForEdgeReplacement(src, tgt, edge, srcInfo, tgtInfo, _weight); // If undirected graph, we need to take into account the 'reverse' edge

          if (!directed) {
            checkForEdgeReplacement(tgt, src, edge, tgtInfo, srcInfo, _weight);
          }
        }

        if (!replacedEdge) {
          break;
        }
      }

      if (replacedEdge) {
        // Check for negative weight cycles
        for (var _e = 0; _e < numEdges; _e++) {
          var _edge = edges[_e];

          var _src = _edge.source();

          var _tgt = _edge.target();

          var _weight2 = weightFn(_edge);

          var srcDist = getInfo(_src).dist;
          var tgtDist = getInfo(_tgt).dist;

          if (srcDist + _weight2 < tgtDist || !directed && tgtDist + _weight2 < srcDist) {
            warn('Graph contains a negative weight cycle for Bellman-Ford');
            hasNegativeWeightCycle = true;
            break;
          }
        }
      }

      return {
        distanceTo: distanceTo,
        pathTo: pathTo,
        hasNegativeWeightCycle: hasNegativeWeightCycle,
        negativeWeightCycles: negativeWeightCycles
      };
    } // bellmanFord

  }; // elesfn

  var sqrt2 = Math.sqrt(2); // Function which colapses 2 (meta) nodes into one
  // Updates the remaining edge lists
  // Receives as a paramater the edge which causes the collapse

  var collapse = function collapse(edgeIndex, nodeMap, remainingEdges) {
    if (remainingEdges.length === 0) {
      error("Karger-Stein must be run on a connected (sub)graph");
    }

    var edgeInfo = remainingEdges[edgeIndex];
    var sourceIn = edgeInfo[1];
    var targetIn = edgeInfo[2];
    var partition1 = nodeMap[sourceIn];
    var partition2 = nodeMap[targetIn];
    var newEdges = remainingEdges; // re-use array
    // Delete all edges between partition1 and partition2

    for (var i = newEdges.length - 1; i >= 0; i--) {
      var edge = newEdges[i];
      var src = edge[1];
      var tgt = edge[2];

      if (nodeMap[src] === partition1 && nodeMap[tgt] === partition2 || nodeMap[src] === partition2 && nodeMap[tgt] === partition1) {
        newEdges.splice(i, 1);
      }
    } // All edges pointing to partition2 should now point to partition1


    for (var _i = 0; _i < newEdges.length; _i++) {
      var _edge = newEdges[_i];

      if (_edge[1] === partition2) {
        // Check source
        newEdges[_i] = _edge.slice(); // copy

        newEdges[_i][1] = partition1;
      } else if (_edge[2] === partition2) {
        // Check target
        newEdges[_i] = _edge.slice(); // copy

        newEdges[_i][2] = partition1;
      }
    } // Move all nodes from partition2 to partition1


    for (var _i2 = 0; _i2 < nodeMap.length; _i2++) {
      if (nodeMap[_i2] === partition2) {
        nodeMap[_i2] = partition1;
      }
    }

    return newEdges;
  }; // Contracts a graph until we reach a certain number of meta nodes


  var contractUntil = function contractUntil(metaNodeMap, remainingEdges, size, sizeLimit) {
    while (size > sizeLimit) {
      // Choose an edge randomly
      var edgeIndex = Math.floor(Math.random() * remainingEdges.length); // Collapse graph based on edge

      remainingEdges = collapse(edgeIndex, metaNodeMap, remainingEdges);
      size--;
    }

    return remainingEdges;
  };

  var elesfn$6 = {
    // Computes the minimum cut of an undirected graph
    // Returns the correct answer with high probability
    kargerStein: function kargerStein() {
      var _this = this;

      var _this$byGroup = this.byGroup(),
          nodes = _this$byGroup.nodes,
          edges = _this$byGroup.edges;

      edges.unmergeBy(function (edge) {
        return edge.isLoop();
      });
      var numNodes = nodes.length;
      var numEdges = edges.length;
      var numIter = Math.ceil(Math.pow(Math.log(numNodes) / Math.LN2, 2));
      var stopSize = Math.floor(numNodes / sqrt2);

      if (numNodes < 2) {
        error('At least 2 nodes are required for Karger-Stein algorithm');
        return undefined;
      } // Now store edge destination as indexes
      // Format for each edge (edge index, source node index, target node index)


      var edgeIndexes = [];

      for (var i = 0; i < numEdges; i++) {
        var e = edges[i];
        edgeIndexes.push([i, nodes.indexOf(e.source()), nodes.indexOf(e.target())]);
      } // We will store the best cut found here


      var minCutSize = Infinity;
      var minCutEdgeIndexes = [];
      var minCutNodeMap = new Array(numNodes); // Initial meta node partition

      var metaNodeMap = new Array(numNodes);
      var metaNodeMap2 = new Array(numNodes);

      var copyNodesMap = function copyNodesMap(from, to) {
        for (var _i3 = 0; _i3 < numNodes; _i3++) {
          to[_i3] = from[_i3];
        }
      }; // Main loop


      for (var iter = 0; iter <= numIter; iter++) {
        // Reset meta node partition
        for (var _i4 = 0; _i4 < numNodes; _i4++) {
          metaNodeMap[_i4] = _i4;
        } // Contract until stop point (stopSize nodes)


        var edgesState = contractUntil(metaNodeMap, edgeIndexes.slice(), numNodes, stopSize);
        var edgesState2 = edgesState.slice(); // copy
        // Create a copy of the colapsed nodes state

        copyNodesMap(metaNodeMap, metaNodeMap2); // Run 2 iterations starting in the stop state

        var res1 = contractUntil(metaNodeMap, edgesState, stopSize, 2);
        var res2 = contractUntil(metaNodeMap2, edgesState2, stopSize, 2); // Is any of the 2 results the best cut so far?

        if (res1.length <= res2.length && res1.length < minCutSize) {
          minCutSize = res1.length;
          minCutEdgeIndexes = res1;
          copyNodesMap(metaNodeMap, minCutNodeMap);
        } else if (res2.length <= res1.length && res2.length < minCutSize) {
          minCutSize = res2.length;
          minCutEdgeIndexes = res2;
          copyNodesMap(metaNodeMap2, minCutNodeMap);
        }
      } // end of main loop
      // Construct result


      var cut = this.spawn(minCutEdgeIndexes.map(function (e) {
        return edges[e[0]];
      }));
      var partition1 = this.spawn();
      var partition2 = this.spawn(); // traverse metaNodeMap for best cut

      var witnessNodePartition = minCutNodeMap[0];

      for (var _i5 = 0; _i5 < minCutNodeMap.length; _i5++) {
        var partitionId = minCutNodeMap[_i5];
        var node = nodes[_i5];

        if (partitionId === witnessNodePartition) {
          partition1.merge(node);
        } else {
          partition2.merge(node);
        }
      } // construct components corresponding to each disjoint subset of nodes


      var constructComponent = function constructComponent(subset) {
        var component = _this.spawn();

        subset.forEach(function (node) {
          component.merge(node);
          node.connectedEdges().forEach(function (edge) {
            // ensure edge is within calling collection and edge is not in cut
            if (_this.contains(edge) && !cut.contains(edge)) {
              component.merge(edge);
            }
          });
        });
        return component;
      };

      var components = [constructComponent(partition1), constructComponent(partition2)];
      var ret = {
        cut: cut,
        components: components,
        // n.b. partitions are included to be compatible with the old api spec
        // (could be removed in a future major version)
        partition1: partition1,
        partition2: partition2
      };
      return ret;
    }
  }; // elesfn

  var copyPosition = function copyPosition(p) {
    return {
      x: p.x,
      y: p.y
    };
  };
  var modelToRenderedPosition = function modelToRenderedPosition(p, zoom, pan) {
    return {
      x: p.x * zoom + pan.x,
      y: p.y * zoom + pan.y
    };
  };
  var renderedToModelPosition = function renderedToModelPosition(p, zoom, pan) {
    return {
      x: (p.x - pan.x) / zoom,
      y: (p.y - pan.y) / zoom
    };
  };
  var array2point = function array2point(arr) {
    return {
      x: arr[0],
      y: arr[1]
    };
  };
  var min = function min(arr) {
    var begin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : arr.length;
    var min = Infinity;

    for (var i = begin; i < end; i++) {
      var val = arr[i];

      if (isFinite(val)) {
        min = Math.min(val, min);
      }
    }

    return min;
  };
  var max = function max(arr) {
    var begin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : arr.length;
    var max = -Infinity;

    for (var i = begin; i < end; i++) {
      var val = arr[i];

      if (isFinite(val)) {
        max = Math.max(val, max);
      }
    }

    return max;
  };
  var mean = function mean(arr) {
    var begin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : arr.length;
    var total = 0;
    var n = 0;

    for (var i = begin; i < end; i++) {
      var val = arr[i];

      if (isFinite(val)) {
        total += val;
        n++;
      }
    }

    return total / n;
  };
  var median = function median(arr) {
    var begin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : arr.length;
    var copy = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
    var sort = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
    var includeHoles = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;

    if (copy) {
      arr = arr.slice(begin, end);
    } else {
      if (end < arr.length) {
        arr.splice(end, arr.length - end);
      }

      if (begin > 0) {
        arr.splice(0, begin);
      }
    } // all non finite (e.g. Infinity, NaN) elements must be -Infinity so they go to the start


    var off = 0; // offset from non-finite values

    for (var i = arr.length - 1; i >= 0; i--) {
      var v = arr[i];

      if (includeHoles) {
        if (!isFinite(v)) {
          arr[i] = -Infinity;
          off++;
        }
      } else {
        // just remove it if we don't want to consider holes
        arr.splice(i, 1);
      }
    }

    if (sort) {
      arr.sort(function (a, b) {
        return a - b;
      }); // requires copy = true if you don't want to change the orig
    }

    var len = arr.length;
    var mid = Math.floor(len / 2);

    if (len % 2 !== 0) {
      return arr[mid + 1 + off];
    } else {
      return (arr[mid - 1 + off] + arr[mid + off]) / 2;
    }
  };
  var deg2rad = function deg2rad(deg) {
    return Math.PI * deg / 180;
  };
  var getAngleFromDisp = function getAngleFromDisp(dispX, dispY) {
    return Math.atan2(dispY, dispX) - Math.PI / 2;
  };
  var log2 = Math.log2 || function (n) {
    return Math.log(n) / Math.log(2);
  };
  var signum = function signum(x) {
    if (x > 0) {
      return 1;
    } else if (x < 0) {
      return -1;
    } else {
      return 0;
    }
  };
  var dist = function dist(p1, p2) {
    return Math.sqrt(sqdist(p1, p2));
  };
  var sqdist = function sqdist(p1, p2) {
    var dx = p2.x - p1.x;
    var dy = p2.y - p1.y;
    return dx * dx + dy * dy;
  };
  var inPlaceSumNormalize = function inPlaceSumNormalize(v) {
    var length = v.length; // First, get sum of all elements

    var total = 0;

    for (var i = 0; i < length; i++) {
      total += v[i];
    } // Now, divide each by the sum of all elements


    for (var _i = 0; _i < length; _i++) {
      v[_i] = v[_i] / total;
    }

    return v;
  };

  var qbezierAt = function qbezierAt(p0, p1, p2, t) {
    return (1 - t) * (1 - t) * p0 + 2 * (1 - t) * t * p1 + t * t * p2;
  };
  var qbezierPtAt = function qbezierPtAt(p0, p1, p2, t) {
    return {
      x: qbezierAt(p0.x, p1.x, p2.x, t),
      y: qbezierAt(p0.y, p1.y, p2.y, t)
    };
  };
  var lineAt = function lineAt(p0, p1, t, d) {
    var vec = {
      x: p1.x - p0.x,
      y: p1.y - p0.y
    };
    var vecDist = dist(p0, p1);
    var normVec = {
      x: vec.x / vecDist,
      y: vec.y / vecDist
    };
    t = t == null ? 0 : t;
    d = d != null ? d : t * vecDist;
    return {
      x: p0.x + normVec.x * d,
      y: p0.y + normVec.y * d
    };
  };
  var bound = function bound(min, val, max) {
    return Math.max(min, Math.min(max, val));
  }; // makes a full bb (x1, y1, x2, y2, w, h) from implicit params

  var makeBoundingBox = function makeBoundingBox(bb) {
    if (bb == null) {
      return {
        x1: Infinity,
        y1: Infinity,
        x2: -Infinity,
        y2: -Infinity,
        w: 0,
        h: 0
      };
    } else if (bb.x1 != null && bb.y1 != null) {
      if (bb.x2 != null && bb.y2 != null && bb.x2 >= bb.x1 && bb.y2 >= bb.y1) {
        return {
          x1: bb.x1,
          y1: bb.y1,
          x2: bb.x2,
          y2: bb.y2,
          w: bb.x2 - bb.x1,
          h: bb.y2 - bb.y1
        };
      } else if (bb.w != null && bb.h != null && bb.w >= 0 && bb.h >= 0) {
        return {
          x1: bb.x1,
          y1: bb.y1,
          x2: bb.x1 + bb.w,
          y2: bb.y1 + bb.h,
          w: bb.w,
          h: bb.h
        };
      }
    }
  };
  var copyBoundingBox = function copyBoundingBox(bb) {
    return {
      x1: bb.x1,
      x2: bb.x2,
      w: bb.w,
      y1: bb.y1,
      y2: bb.y2,
      h: bb.h
    };
  };
  var clearBoundingBox = function clearBoundingBox(bb) {
    bb.x1 = Infinity;
    bb.y1 = Infinity;
    bb.x2 = -Infinity;
    bb.y2 = -Infinity;
    bb.w = 0;
    bb.h = 0;
  };
  var updateBoundingBox = function updateBoundingBox(bb1, bb2) {
    // update bb1 with bb2 bounds
    bb1.x1 = Math.min(bb1.x1, bb2.x1);
    bb1.x2 = Math.max(bb1.x2, bb2.x2);
    bb1.w = bb1.x2 - bb1.x1;
    bb1.y1 = Math.min(bb1.y1, bb2.y1);
    bb1.y2 = Math.max(bb1.y2, bb2.y2);
    bb1.h = bb1.y2 - bb1.y1;
  };
  var expandBoundingBoxByPoint = function expandBoundingBoxByPoint(bb, x, y) {
    bb.x1 = Math.min(bb.x1, x);
    bb.x2 = Math.max(bb.x2, x);
    bb.w = bb.x2 - bb.x1;
    bb.y1 = Math.min(bb.y1, y);
    bb.y2 = Math.max(bb.y2, y);
    bb.h = bb.y2 - bb.y1;
  };
  var expandBoundingBox = function expandBoundingBox(bb) {
    var padding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    bb.x1 -= padding;
    bb.x2 += padding;
    bb.y1 -= padding;
    bb.y2 += padding;
    bb.w = bb.x2 - bb.x1;
    bb.h = bb.y2 - bb.y1;
    return bb;
  };
  var expandBoundingBoxSides = function expandBoundingBoxSides(bb) {
    var padding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0];
    var top, right, bottom, left;

    if (padding.length === 1) {
      top = right = bottom = left = padding[0];
    } else if (padding.length === 2) {
      top = bottom = padding[0];
      left = right = padding[1];
    } else if (padding.length === 4) {
      var _padding = _slicedToArray(padding, 4);

      top = _padding[0];
      right = _padding[1];
      bottom = _padding[2];
      left = _padding[3];
    }

    bb.x1 -= left;
    bb.x2 += right;
    bb.y1 -= top;
    bb.y2 += bottom;
    bb.w = bb.x2 - bb.x1;
    bb.h = bb.y2 - bb.y1;
    return bb;
  };

  var assignBoundingBox = function assignBoundingBox(bb1, bb2) {
    bb1.x1 = bb2.x1;
    bb1.y1 = bb2.y1;
    bb1.x2 = bb2.x2;
    bb1.y2 = bb2.y2;
    bb1.w = bb1.x2 - bb1.x1;
    bb1.h = bb1.y2 - bb1.y1;
  };
  var assignShiftToBoundingBox = function assignShiftToBoundingBox(bb, delta) {
    bb.x1 += delta.x;
    bb.x2 += delta.x;
    bb.y1 += delta.y;
    bb.y2 += delta.y;
  };
  var boundingBoxesIntersect = function boundingBoxesIntersect(bb1, bb2) {
    // case: one bb to right of other
    if (bb1.x1 > bb2.x2) {
      return false;
    }

    if (bb2.x1 > bb1.x2) {
      return false;
    } // case: one bb to left of other


    if (bb1.x2 < bb2.x1) {
      return false;
    }

    if (bb2.x2 < bb1.x1) {
      return false;
    } // case: one bb above other


    if (bb1.y2 < bb2.y1) {
      return false;
    }

    if (bb2.y2 < bb1.y1) {
      return false;
    } // case: one bb below other


    if (bb1.y1 > bb2.y2) {
      return false;
    }

    if (bb2.y1 > bb1.y2) {
      return false;
    } // otherwise, must have some overlap


    return true;
  };
  var inBoundingBox = function inBoundingBox(bb, x, y) {
    return bb.x1 <= x && x <= bb.x2 && bb.y1 <= y && y <= bb.y2;
  };
  var pointInBoundingBox = function pointInBoundingBox(bb, pt) {
    return inBoundingBox(bb, pt.x, pt.y);
  };
  var boundingBoxInBoundingBox = function boundingBoxInBoundingBox(bb1, bb2) {
    return inBoundingBox(bb1, bb2.x1, bb2.y1) && inBoundingBox(bb1, bb2.x2, bb2.y2);
  };
  var roundRectangleIntersectLine = function roundRectangleIntersectLine(x, y, nodeX, nodeY, width, height, padding) {
    var cornerRadius = getRoundRectangleRadius(width, height);
    var halfWidth = width / 2;
    var halfHeight = height / 2; // Check intersections with straight line segments

    var straightLineIntersections; // Top segment, left to right

    {
      var topStartX = nodeX - halfWidth + cornerRadius - padding;
      var topStartY = nodeY - halfHeight - padding;
      var topEndX = nodeX + halfWidth - cornerRadius + padding;
      var topEndY = topStartY;
      straightLineIntersections = finiteLinesIntersect(x, y, nodeX, nodeY, topStartX, topStartY, topEndX, topEndY, false);

      if (straightLineIntersections.length > 0) {
        return straightLineIntersections;
      }
    } // Right segment, top to bottom

    {
      var rightStartX = nodeX + halfWidth + padding;
      var rightStartY = nodeY - halfHeight + cornerRadius - padding;
      var rightEndX = rightStartX;
      var rightEndY = nodeY + halfHeight - cornerRadius + padding;
      straightLineIntersections = finiteLinesIntersect(x, y, nodeX, nodeY, rightStartX, rightStartY, rightEndX, rightEndY, false);

      if (straightLineIntersections.length > 0) {
        return straightLineIntersections;
      }
    } // Bottom segment, left to right

    {
      var bottomStartX = nodeX - halfWidth + cornerRadius - padding;
      var bottomStartY = nodeY + halfHeight + padding;
      var bottomEndX = nodeX + halfWidth - cornerRadius + padding;
      var bottomEndY = bottomStartY;
      straightLineIntersections = finiteLinesIntersect(x, y, nodeX, nodeY, bottomStartX, bottomStartY, bottomEndX, bottomEndY, false);

      if (straightLineIntersections.length > 0) {
        return straightLineIntersections;
      }
    } // Left segment, top to bottom

    {
      var leftStartX = nodeX - halfWidth - padding;
      var leftStartY = nodeY - halfHeight + cornerRadius - padding;
      var leftEndX = leftStartX;
      var leftEndY = nodeY + halfHeight - cornerRadius + padding;
      straightLineIntersections = finiteLinesIntersect(x, y, nodeX, nodeY, leftStartX, leftStartY, leftEndX, leftEndY, false);

      if (straightLineIntersections.length > 0) {
        return straightLineIntersections;
      }
    } // Check intersections with arc segments

    var arcIntersections; // Top Left

    {
      var topLeftCenterX = nodeX - halfWidth + cornerRadius;
      var topLeftCenterY = nodeY - halfHeight + cornerRadius;
      arcIntersections = intersectLineCircle(x, y, nodeX, nodeY, topLeftCenterX, topLeftCenterY, cornerRadius + padding); // Ensure the intersection is on the desired quarter of the circle

      if (arcIntersections.length > 0 && arcIntersections[0] <= topLeftCenterX && arcIntersections[1] <= topLeftCenterY) {
        return [arcIntersections[0], arcIntersections[1]];
      }
    } // Top Right

    {
      var topRightCenterX = nodeX + halfWidth - cornerRadius;
      var topRightCenterY = nodeY - halfHeight + cornerRadius;
      arcIntersections = intersectLineCircle(x, y, nodeX, nodeY, topRightCenterX, topRightCenterY, cornerRadius + padding); // Ensure the intersection is on the desired quarter of the circle

      if (arcIntersections.length > 0 && arcIntersections[0] >= topRightCenterX && arcIntersections[1] <= topRightCenterY) {
        return [arcIntersections[0], arcIntersections[1]];
      }
    } // Bottom Right

    {
      var bottomRightCenterX = nodeX + halfWidth - cornerRadius;
      var bottomRightCenterY = nodeY + halfHeight - cornerRadius;
      arcIntersections = intersectLineCircle(x, y, nodeX, nodeY, bottomRightCenterX, bottomRightCenterY, cornerRadius + padding); // Ensure the intersection is on the desired quarter of the circle

      if (arcIntersections.length > 0 && arcIntersections[0] >= bottomRightCenterX && arcIntersections[1] >= bottomRightCenterY) {
        return [arcIntersections[0], arcIntersections[1]];
      }
    } // Bottom Left

    {
      var bottomLeftCenterX = nodeX - halfWidth + cornerRadius;
      var bottomLeftCenterY = nodeY + halfHeight - cornerRadius;
      arcIntersections = intersectLineCircle(x, y, nodeX, nodeY, bottomLeftCenterX, bottomLeftCenterY, cornerRadius + padding); // Ensure the intersection is on the desired quarter of the circle

      if (arcIntersections.length > 0 && arcIntersections[0] <= bottomLeftCenterX && arcIntersections[1] >= bottomLeftCenterY) {
        return [arcIntersections[0], arcIntersections[1]];
      }
    }
    return []; // if nothing
  };
  var inLineVicinity = function inLineVicinity(x, y, lx1, ly1, lx2, ly2, tolerance) {
    var t = tolerance;
    var x1 = Math.min(lx1, lx2);
    var x2 = Math.max(lx1, lx2);
    var y1 = Math.min(ly1, ly2);
    var y2 = Math.max(ly1, ly2);
    return x1 - t <= x && x <= x2 + t && y1 - t <= y && y <= y2 + t;
  };
  var inBezierVicinity = function inBezierVicinity(x, y, x1, y1, x2, y2, x3, y3, tolerance) {
    var bb = {
      x1: Math.min(x1, x3, x2) - tolerance,
      x2: Math.max(x1, x3, x2) + tolerance,
      y1: Math.min(y1, y3, y2) - tolerance,
      y2: Math.max(y1, y3, y2) + tolerance
    }; // if outside the rough bounding box for the bezier, then it can't be a hit

    if (x < bb.x1 || x > bb.x2 || y < bb.y1 || y > bb.y2) {
      // console.log('bezier out of rough bb')
      return false;
    } else {
      // console.log('do more expensive check');
      return true;
    }
  };
  var solveQuadratic = function solveQuadratic(a, b, c, val) {
    c -= val;
    var r = b * b - 4 * a * c;

    if (r < 0) {
      return [];
    }

    var sqrtR = Math.sqrt(r);
    var denom = 2 * a;
    var root1 = (-b + sqrtR) / denom;
    var root2 = (-b - sqrtR) / denom;
    return [root1, root2];
  };
  var solveCubic = function solveCubic(a, b, c, d, result) {
    // Solves a cubic function, returns root in form [r1, i1, r2, i2, r3, i3], where
    // r is the real component, i is the imaginary component
    // An implementation of the Cardano method from the year 1545
    // http://en.wikipedia.org/wiki/Cubic_function#The_nature_of_the_roots
    var epsilon = 0.00001; // avoid division by zero while keeping the overall expression close in value

    if (a === 0) {
      a = epsilon;
    }

    b /= a;
    c /= a;
    d /= a;
    var discriminant, q, r, dum1, s, t, term1, r13;
    q = (3.0 * c - b * b) / 9.0;
    r = -(27.0 * d) + b * (9.0 * c - 2.0 * (b * b));
    r /= 54.0;
    discriminant = q * q * q + r * r;
    result[1] = 0;
    term1 = b / 3.0;

    if (discriminant > 0) {
      s = r + Math.sqrt(discriminant);
      s = s < 0 ? -Math.pow(-s, 1.0 / 3.0) : Math.pow(s, 1.0 / 3.0);
      t = r - Math.sqrt(discriminant);
      t = t < 0 ? -Math.pow(-t, 1.0 / 3.0) : Math.pow(t, 1.0 / 3.0);
      result[0] = -term1 + s + t;
      term1 += (s + t) / 2.0;
      result[4] = result[2] = -term1;
      term1 = Math.sqrt(3.0) * (-t + s) / 2;
      result[3] = term1;
      result[5] = -term1;
      return;
    }

    result[5] = result[3] = 0;

    if (discriminant === 0) {
      r13 = r < 0 ? -Math.pow(-r, 1.0 / 3.0) : Math.pow(r, 1.0 / 3.0);
      result[0] = -term1 + 2.0 * r13;
      result[4] = result[2] = -(r13 + term1);
      return;
    }

    q = -q;
    dum1 = q * q * q;
    dum1 = Math.acos(r / Math.sqrt(dum1));
    r13 = 2.0 * Math.sqrt(q);
    result[0] = -term1 + r13 * Math.cos(dum1 / 3.0);
    result[2] = -term1 + r13 * Math.cos((dum1 + 2.0 * Math.PI) / 3.0);
    result[4] = -term1 + r13 * Math.cos((dum1 + 4.0 * Math.PI) / 3.0);
    return;
  };
  var sqdistToQuadraticBezier = function sqdistToQuadraticBezier(x, y, x1, y1, x2, y2, x3, y3) {
    // Find minimum distance by using the minimum of the distance
    // function between the given point and the curve
    // This gives the coefficients of the resulting cubic equation
    // whose roots tell us where a possible minimum is
    // (Coefficients are divided by 4)
    var a = 1.0 * x1 * x1 - 4 * x1 * x2 + 2 * x1 * x3 + 4 * x2 * x2 - 4 * x2 * x3 + x3 * x3 + y1 * y1 - 4 * y1 * y2 + 2 * y1 * y3 + 4 * y2 * y2 - 4 * y2 * y3 + y3 * y3;
    var b = 1.0 * 9 * x1 * x2 - 3 * x1 * x1 - 3 * x1 * x3 - 6 * x2 * x2 + 3 * x2 * x3 + 9 * y1 * y2 - 3 * y1 * y1 - 3 * y1 * y3 - 6 * y2 * y2 + 3 * y2 * y3;
    var c = 1.0 * 3 * x1 * x1 - 6 * x1 * x2 + x1 * x3 - x1 * x + 2 * x2 * x2 + 2 * x2 * x - x3 * x + 3 * y1 * y1 - 6 * y1 * y2 + y1 * y3 - y1 * y + 2 * y2 * y2 + 2 * y2 * y - y3 * y;
    var d = 1.0 * x1 * x2 - x1 * x1 + x1 * x - x2 * x + y1 * y2 - y1 * y1 + y1 * y - y2 * y; // debug("coefficients: " + a / a + ", " + b / a + ", " + c / a + ", " + d / a);

    var roots = []; // Use the cubic solving algorithm

    solveCubic(a, b, c, d, roots);
    var zeroThreshold = 0.0000001;
    var params = [];

    for (var index = 0; index < 6; index += 2) {
      if (Math.abs(roots[index + 1]) < zeroThreshold && roots[index] >= 0 && roots[index] <= 1.0) {
        params.push(roots[index]);
      }
    }

    params.push(1.0);
    params.push(0.0);
    var minDistanceSquared = -1;
    var curX, curY, distSquared;

    for (var i = 0; i < params.length; i++) {
      curX = Math.pow(1.0 - params[i], 2.0) * x1 + 2.0 * (1 - params[i]) * params[i] * x2 + params[i] * params[i] * x3;
      curY = Math.pow(1 - params[i], 2.0) * y1 + 2 * (1.0 - params[i]) * params[i] * y2 + params[i] * params[i] * y3;
      distSquared = Math.pow(curX - x, 2) + Math.pow(curY - y, 2); // debug('distance for param ' + params[i] + ": " + Math.sqrt(distSquared));

      if (minDistanceSquared >= 0) {
        if (distSquared < minDistanceSquared) {
          minDistanceSquared = distSquared;
        }
      } else {
        minDistanceSquared = distSquared;
      }
    }

    return minDistanceSquared;
  };
  var sqdistToFiniteLine = function sqdistToFiniteLine(x, y, x1, y1, x2, y2) {
    var offset = [x - x1, y - y1];
    var line = [x2 - x1, y2 - y1];
    var lineSq = line[0] * line[0] + line[1] * line[1];
    var hypSq = offset[0] * offset[0] + offset[1] * offset[1];
    var dotProduct = offset[0] * line[0] + offset[1] * line[1];
    var adjSq = dotProduct * dotProduct / lineSq;

    if (dotProduct < 0) {
      return hypSq;
    }

    if (adjSq > lineSq) {
      return (x - x2) * (x - x2) + (y - y2) * (y - y2);
    }

    return hypSq - adjSq;
  };
  var pointInsidePolygonPoints = function pointInsidePolygonPoints(x, y, points) {
    var x1, y1, x2, y2;
    var y3; // Intersect with vertical line through (x, y)

    var up = 0; // let down = 0;

    for (var i = 0; i < points.length / 2; i++) {
      x1 = points[i * 2];
      y1 = points[i * 2 + 1];

      if (i + 1 < points.length / 2) {
        x2 = points[(i + 1) * 2];
        y2 = points[(i + 1) * 2 + 1];
      } else {
        x2 = points[(i + 1 - points.length / 2) * 2];
        y2 = points[(i + 1 - points.length / 2) * 2 + 1];
      }

      if (x1 == x && x2 == x) ; else if (x1 >= x && x >= x2 || x1 <= x && x <= x2) {
        y3 = (x - x1) / (x2 - x1) * (y2 - y1) + y1;

        if (y3 > y) {
          up++;
        } // if( y3 < y ){
        // down++;
        // }

      } else {
        continue;
      }
    }

    if (up % 2 === 0) {
      return false;
    } else {
      return true;
    }
  };
  var pointInsidePolygon = function pointInsidePolygon(x, y, basePoints, centerX, centerY, width, height, direction, padding) {
    var transformedPoints = new Array(basePoints.length); // Gives negative angle

    var angle;

    if (direction[0] != null) {
      angle = Math.atan(direction[1] / direction[0]);

      if (direction[0] < 0) {
        angle = angle + Math.PI / 2;
      } else {
        angle = -angle - Math.PI / 2;
      }
    } else {
      angle = direction;
    }

    var cos = Math.cos(-angle);
    var sin = Math.sin(-angle); //    console.log("base: " + basePoints);

    for (var i = 0; i < transformedPoints.length / 2; i++) {
      transformedPoints[i * 2] = width / 2 * (basePoints[i * 2] * cos - basePoints[i * 2 + 1] * sin);
      transformedPoints[i * 2 + 1] = height / 2 * (basePoints[i * 2 + 1] * cos + basePoints[i * 2] * sin);
      transformedPoints[i * 2] += centerX;
      transformedPoints[i * 2 + 1] += centerY;
    }

    var points;

    if (padding > 0) {
      var expandedLineSet = expandPolygon(transformedPoints, -padding);
      points = joinLines(expandedLineSet);
    } else {
      points = transformedPoints;
    }

    return pointInsidePolygonPoints(x, y, points);
  };
  var pointInsideRoundPolygon = function pointInsideRoundPolygon(x, y, basePoints, centerX, centerY, width, height) {
    var cutPolygonPoints = new Array(basePoints.length);
    var halfW = width / 2;
    var halfH = height / 2;
    var cornerRadius = getRoundPolygonRadius(width, height);
    var squaredCornerRadius = cornerRadius * cornerRadius;

    for (var i = 0; i < basePoints.length / 4; i++) {
      var sourceUv = void 0,
          destUv = void 0;

      if (i === 0) {
        sourceUv = basePoints.length - 2;
      } else {
        sourceUv = i * 4 - 2;
      }

      destUv = i * 4 + 2;
      var px = centerX + halfW * basePoints[i * 4];
      var py = centerY + halfH * basePoints[i * 4 + 1];
      var cosTheta = -basePoints[sourceUv] * basePoints[destUv] - basePoints[sourceUv + 1] * basePoints[destUv + 1];
      var offset = cornerRadius / Math.tan(Math.acos(cosTheta) / 2);
      var cp0x = px - offset * basePoints[sourceUv];
      var cp0y = py - offset * basePoints[sourceUv + 1];
      var cp1x = px + offset * basePoints[destUv];
      var cp1y = py + offset * basePoints[destUv + 1];
      cutPolygonPoints[i * 4] = cp0x;
      cutPolygonPoints[i * 4 + 1] = cp0y;
      cutPolygonPoints[i * 4 + 2] = cp1x;
      cutPolygonPoints[i * 4 + 3] = cp1y;
      var orthx = basePoints[sourceUv + 1];
      var orthy = -basePoints[sourceUv];
      var cosAlpha = orthx * basePoints[destUv] + orthy * basePoints[destUv + 1];

      if (cosAlpha < 0) {
        orthx *= -1;
        orthy *= -1;
      }

      var cx = cp0x + orthx * cornerRadius;
      var cy = cp0y + orthy * cornerRadius;
      var squaredDistance = Math.pow(cx - x, 2) + Math.pow(cy - y, 2);

      if (squaredDistance <= squaredCornerRadius) {
        return true;
      }
    }

    return pointInsidePolygonPoints(x, y, cutPolygonPoints);
  };
  var joinLines = function joinLines(lineSet) {
    var vertices = new Array(lineSet.length / 2);
    var currentLineStartX, currentLineStartY, currentLineEndX, currentLineEndY;
    var nextLineStartX, nextLineStartY, nextLineEndX, nextLineEndY;

    for (var i = 0; i < lineSet.length / 4; i++) {
      currentLineStartX = lineSet[i * 4];
      currentLineStartY = lineSet[i * 4 + 1];
      currentLineEndX = lineSet[i * 4 + 2];
      currentLineEndY = lineSet[i * 4 + 3];

      if (i < lineSet.length / 4 - 1) {
        nextLineStartX = lineSet[(i + 1) * 4];
        nextLineStartY = lineSet[(i + 1) * 4 + 1];
        nextLineEndX = lineSet[(i + 1) * 4 + 2];
        nextLineEndY = lineSet[(i + 1) * 4 + 3];
      } else {
        nextLineStartX = lineSet[0];
        nextLineStartY = lineSet[1];
        nextLineEndX = lineSet[2];
        nextLineEndY = lineSet[3];
      }

      var intersection = finiteLinesIntersect(currentLineStartX, currentLineStartY, currentLineEndX, currentLineEndY, nextLineStartX, nextLineStartY, nextLineEndX, nextLineEndY, true);
      vertices[i * 2] = intersection[0];
      vertices[i * 2 + 1] = intersection[1];
    }

    return vertices;
  };
  var expandPolygon = function expandPolygon(points, pad) {
    var expandedLineSet = new Array(points.length * 2);
    var currentPointX, currentPointY, nextPointX, nextPointY;

    for (var i = 0; i < points.length / 2; i++) {
      currentPointX = points[i * 2];
      currentPointY = points[i * 2 + 1];

      if (i < points.length / 2 - 1) {
        nextPointX = points[(i + 1) * 2];
        nextPointY = points[(i + 1) * 2 + 1];
      } else {
        nextPointX = points[0];
        nextPointY = points[1];
      } // Current line: [currentPointX, currentPointY] to [nextPointX, nextPointY]
      // Assume CCW polygon winding


      var offsetX = nextPointY - currentPointY;
      var offsetY = -(nextPointX - currentPointX); // Normalize

      var offsetLength = Math.sqrt(offsetX * offsetX + offsetY * offsetY);
      var normalizedOffsetX = offsetX / offsetLength;
      var normalizedOffsetY = offsetY / offsetLength;
      expandedLineSet[i * 4] = currentPointX + normalizedOffsetX * pad;
      expandedLineSet[i * 4 + 1] = currentPointY + normalizedOffsetY * pad;
      expandedLineSet[i * 4 + 2] = nextPointX + normalizedOffsetX * pad;
      expandedLineSet[i * 4 + 3] = nextPointY + normalizedOffsetY * pad;
    }

    return expandedLineSet;
  };
  var intersectLineEllipse = function intersectLineEllipse(x, y, centerX, centerY, ellipseWradius, ellipseHradius) {
    var dispX = centerX - x;
    var dispY = centerY - y;
    dispX /= ellipseWradius;
    dispY /= ellipseHradius;
    var len = Math.sqrt(dispX * dispX + dispY * dispY);
    var newLength = len - 1;

    if (newLength < 0) {
      return [];
    }

    var lenProportion = newLength / len;
    return [(centerX - x) * lenProportion + x, (centerY - y) * lenProportion + y];
  };
  var checkInEllipse = function checkInEllipse(x, y, width, height, centerX, centerY, padding) {
    x -= centerX;
    y -= centerY;
    x /= width / 2 + padding;
    y /= height / 2 + padding;
    return x * x + y * y <= 1;
  }; // Returns intersections of increasing distance from line's start point

  var intersectLineCircle = function intersectLineCircle(x1, y1, x2, y2, centerX, centerY, radius) {
    // Calculate d, direction vector of line
    var d = [x2 - x1, y2 - y1]; // Direction vector of line

    var f = [x1 - centerX, y1 - centerY];
    var a = d[0] * d[0] + d[1] * d[1];
    var b = 2 * (f[0] * d[0] + f[1] * d[1]);
    var c = f[0] * f[0] + f[1] * f[1] - radius * radius;
    var discriminant = b * b - 4 * a * c;

    if (discriminant < 0) {
      return [];
    }

    var t1 = (-b + Math.sqrt(discriminant)) / (2 * a);
    var t2 = (-b - Math.sqrt(discriminant)) / (2 * a);
    var tMin = Math.min(t1, t2);
    var tMax = Math.max(t1, t2);
    var inRangeParams = [];

    if (tMin >= 0 && tMin <= 1) {
      inRangeParams.push(tMin);
    }

    if (tMax >= 0 && tMax <= 1) {
      inRangeParams.push(tMax);
    }

    if (inRangeParams.length === 0) {
      return [];
    }

    var nearIntersectionX = inRangeParams[0] * d[0] + x1;
    var nearIntersectionY = inRangeParams[0] * d[1] + y1;

    if (inRangeParams.length > 1) {
      if (inRangeParams[0] == inRangeParams[1]) {
        return [nearIntersectionX, nearIntersectionY];
      } else {
        var farIntersectionX = inRangeParams[1] * d[0] + x1;
        var farIntersectionY = inRangeParams[1] * d[1] + y1;
        return [nearIntersectionX, nearIntersectionY, farIntersectionX, farIntersectionY];
      }
    } else {
      return [nearIntersectionX, nearIntersectionY];
    }
  };
  var midOfThree = function midOfThree(a, b, c) {
    if (b <= a && a <= c || c <= a && a <= b) {
      return a;
    } else if (a <= b && b <= c || c <= b && b <= a) {
      return b;
    } else {
      return c;
    }
  }; // (x1,y1)=>(x2,y2) intersect with (x3,y3)=>(x4,y4)

  var finiteLinesIntersect = function finiteLinesIntersect(x1, y1, x2, y2, x3, y3, x4, y4, infiniteLines) {
    var dx13 = x1 - x3;
    var dx21 = x2 - x1;
    var dx43 = x4 - x3;
    var dy13 = y1 - y3;
    var dy21 = y2 - y1;
    var dy43 = y4 - y3;
    var ua_t = dx43 * dy13 - dy43 * dx13;
    var ub_t = dx21 * dy13 - dy21 * dx13;
    var u_b = dy43 * dx21 - dx43 * dy21;

    if (u_b !== 0) {
      var ua = ua_t / u_b;
      var ub = ub_t / u_b;
      var flptThreshold = 0.001;

      var _min = 0 - flptThreshold;

      var _max = 1 + flptThreshold;

      if (_min <= ua && ua <= _max && _min <= ub && ub <= _max) {
        return [x1 + ua * dx21, y1 + ua * dy21];
      } else {
        if (!infiniteLines) {
          return [];
        } else {
          return [x1 + ua * dx21, y1 + ua * dy21];
        }
      }
    } else {
      if (ua_t === 0 || ub_t === 0) {
        // Parallel, coincident lines. Check if overlap
        // Check endpoint of second line
        if (midOfThree(x1, x2, x4) === x4) {
          return [x4, y4];
        } // Check start point of second line


        if (midOfThree(x1, x2, x3) === x3) {
          return [x3, y3];
        } // Endpoint of first line


        if (midOfThree(x3, x4, x2) === x2) {
          return [x2, y2];
        }

        return [];
      } else {
        // Parallel, non-coincident
        return [];
      }
    }
  }; // math.polygonIntersectLine( x, y, basePoints, centerX, centerY, width, height, padding )
  // intersect a node polygon (pts transformed)
  //
  // math.polygonIntersectLine( x, y, basePoints, centerX, centerY )
  // intersect the points (no transform)

  var polygonIntersectLine = function polygonIntersectLine(x, y, basePoints, centerX, centerY, width, height, padding) {
    var intersections = [];
    var intersection;
    var transformedPoints = new Array(basePoints.length);
    var doTransform = true;

    if (width == null) {
      doTransform = false;
    }

    var points;

    if (doTransform) {
      for (var i = 0; i < transformedPoints.length / 2; i++) {
        transformedPoints[i * 2] = basePoints[i * 2] * width + centerX;
        transformedPoints[i * 2 + 1] = basePoints[i * 2 + 1] * height + centerY;
      }

      if (padding > 0) {
        var expandedLineSet = expandPolygon(transformedPoints, -padding);
        points = joinLines(expandedLineSet);
      } else {
        points = transformedPoints;
      }
    } else {
      points = basePoints;
    }

    var currentX, currentY, nextX, nextY;

    for (var _i2 = 0; _i2 < points.length / 2; _i2++) {
      currentX = points[_i2 * 2];
      currentY = points[_i2 * 2 + 1];

      if (_i2 < points.length / 2 - 1) {
        nextX = points[(_i2 + 1) * 2];
        nextY = points[(_i2 + 1) * 2 + 1];
      } else {
        nextX = points[0];
        nextY = points[1];
      }

      intersection = finiteLinesIntersect(x, y, centerX, centerY, currentX, currentY, nextX, nextY);

      if (intersection.length !== 0) {
        intersections.push(intersection[0], intersection[1]);
      }
    }

    return intersections;
  };
  var roundPolygonIntersectLine = function roundPolygonIntersectLine(x, y, basePoints, centerX, centerY, width, height, padding) {
    var intersections = [];
    var intersection;
    var lines = new Array(basePoints.length);
    var halfW = width / 2;
    var halfH = height / 2;
    var cornerRadius = getRoundPolygonRadius(width, height);

    for (var i = 0; i < basePoints.length / 4; i++) {
      var sourceUv = void 0,
          destUv = void 0;

      if (i === 0) {
        sourceUv = basePoints.length - 2;
      } else {
        sourceUv = i * 4 - 2;
      }

      destUv = i * 4 + 2;
      var px = centerX + halfW * basePoints[i * 4];
      var py = centerY + halfH * basePoints[i * 4 + 1];
      var cosTheta = -basePoints[sourceUv] * basePoints[destUv] - basePoints[sourceUv + 1] * basePoints[destUv + 1];
      var offset = cornerRadius / Math.tan(Math.acos(cosTheta) / 2);
      var cp0x = px - offset * basePoints[sourceUv];
      var cp0y = py - offset * basePoints[sourceUv + 1];
      var cp1x = px + offset * basePoints[destUv];
      var cp1y = py + offset * basePoints[destUv + 1];

      if (i === 0) {
        lines[basePoints.length - 2] = cp0x;
        lines[basePoints.length - 1] = cp0y;
      } else {
        lines[i * 4 - 2] = cp0x;
        lines[i * 4 - 1] = cp0y;
      }

      lines[i * 4] = cp1x;
      lines[i * 4 + 1] = cp1y;
      var orthx = basePoints[sourceUv + 1];
      var orthy = -basePoints[sourceUv];
      var cosAlpha = orthx * basePoints[destUv] + orthy * basePoints[destUv + 1];

      if (cosAlpha < 0) {
        orthx *= -1;
        orthy *= -1;
      }

      var cx = cp0x + orthx * cornerRadius;
      var cy = cp0y + orthy * cornerRadius;
      intersection = intersectLineCircle(x, y, centerX, centerY, cx, cy, cornerRadius);

      if (intersection.length !== 0) {
        intersections.push(intersection[0], intersection[1]);
      }
    }

    for (var _i3 = 0; _i3 < lines.length / 4; _i3++) {
      intersection = finiteLinesIntersect(x, y, centerX, centerY, lines[_i3 * 4], lines[_i3 * 4 + 1], lines[_i3 * 4 + 2], lines[_i3 * 4 + 3], false);

      if (intersection.length !== 0) {
        intersections.push(intersection[0], intersection[1]);
      }
    }

    if (intersections.length > 2) {
      var lowestIntersection = [intersections[0], intersections[1]];
      var lowestSquaredDistance = Math.pow(lowestIntersection[0] - x, 2) + Math.pow(lowestIntersection[1] - y, 2);

      for (var _i4 = 1; _i4 < intersections.length / 2; _i4++) {
        var squaredDistance = Math.pow(intersections[_i4 * 2] - x, 2) + Math.pow(intersections[_i4 * 2 + 1] - y, 2);

        if (squaredDistance <= lowestSquaredDistance) {
          lowestIntersection[0] = intersections[_i4 * 2];
          lowestIntersection[1] = intersections[_i4 * 2 + 1];
          lowestSquaredDistance = squaredDistance;
        }
      }

      return lowestIntersection;
    }

    return intersections;
  };
  var shortenIntersection = function shortenIntersection(intersection, offset, amount) {
    var disp = [intersection[0] - offset[0], intersection[1] - offset[1]];
    var length = Math.sqrt(disp[0] * disp[0] + disp[1] * disp[1]);
    var lenRatio = (length - amount) / length;

    if (lenRatio < 0) {
      lenRatio = 0.00001;
    }

    return [offset[0] + lenRatio * disp[0], offset[1] + lenRatio * disp[1]];
  };
  var generateUnitNgonPointsFitToSquare = function generateUnitNgonPointsFitToSquare(sides, rotationRadians) {
    var points = generateUnitNgonPoints(sides, rotationRadians);
    points = fitPolygonToSquare(points);
    return points;
  };
  var fitPolygonToSquare = function fitPolygonToSquare(points) {
    var x, y;
    var sides = points.length / 2;
    var minX = Infinity,
        minY = Infinity,
        maxX = -Infinity,
        maxY = -Infinity;

    for (var i = 0; i < sides; i++) {
      x = points[2 * i];
      y = points[2 * i + 1];
      minX = Math.min(minX, x);
      maxX = Math.max(maxX, x);
      minY = Math.min(minY, y);
      maxY = Math.max(maxY, y);
    } // stretch factors


    var sx = 2 / (maxX - minX);
    var sy = 2 / (maxY - minY);

    for (var _i5 = 0; _i5 < sides; _i5++) {
      x = points[2 * _i5] = points[2 * _i5] * sx;
      y = points[2 * _i5 + 1] = points[2 * _i5 + 1] * sy;
      minX = Math.min(minX, x);
      maxX = Math.max(maxX, x);
      minY = Math.min(minY, y);
      maxY = Math.max(maxY, y);
    }

    if (minY < -1) {
      for (var _i6 = 0; _i6 < sides; _i6++) {
        y = points[2 * _i6 + 1] = points[2 * _i6 + 1] + (-1 - minY);
      }
    }

    return points;
  };
  var generateUnitNgonPoints = function generateUnitNgonPoints(sides, rotationRadians) {
    var increment = 1.0 / sides * 2 * Math.PI;
    var startAngle = sides % 2 === 0 ? Math.PI / 2.0 + increment / 2.0 : Math.PI / 2.0;
    startAngle += rotationRadians;
    var points = new Array(sides * 2);
    var currentAngle;

    for (var i = 0; i < sides; i++) {
      currentAngle = i * increment + startAngle;
      points[2 * i] = Math.cos(currentAngle); // x

      points[2 * i + 1] = Math.sin(-currentAngle); // y
    }

    return points;
  }; // Set the default radius, unless half of width or height is smaller than default

  var getRoundRectangleRadius = function getRoundRectangleRadius(width, height) {
    return Math.min(width / 4, height / 4, 8);
  }; // Set the default radius

  var getRoundPolygonRadius = function getRoundPolygonRadius(width, height) {
    return Math.min(width / 10, height / 10, 8);
  };
  var getCutRectangleCornerLength = function getCutRectangleCornerLength() {
    return 8;
  };
  var bezierPtsToQuadCoeff = function bezierPtsToQuadCoeff(p0, p1, p2) {
    return [p0 - 2 * p1 + p2, 2 * (p1 - p0), p0];
  }; // get curve width, height, and control point position offsets as a percentage of node height / width

  var getBarrelCurveConstants = function getBarrelCurveConstants(width, height) {
    return {
      heightOffset: Math.min(15, 0.05 * height),
      widthOffset: Math.min(100, 0.25 * width),
      ctrlPtOffsetPct: 0.05
    };
  };

  var pageRankDefaults = defaults({
    dampingFactor: 0.8,
    precision: 0.000001,
    iterations: 200,
    weight: function weight(edge) {
      return 1;
    }
  });
  var elesfn$7 = {
    pageRank: function pageRank(options) {
      var _pageRankDefaults = pageRankDefaults(options),
          dampingFactor = _pageRankDefaults.dampingFactor,
          precision = _pageRankDefaults.precision,
          iterations = _pageRankDefaults.iterations,
          weight = _pageRankDefaults.weight;

      var cy = this._private.cy;

      var _this$byGroup = this.byGroup(),
          nodes = _this$byGroup.nodes,
          edges = _this$byGroup.edges;

      var numNodes = nodes.length;
      var numNodesSqd = numNodes * numNodes;
      var numEdges = edges.length; // Construct transposed adjacency matrix
      // First lets have a zeroed matrix of the right size
      // We'll also keep track of the sum of each column

      var matrix = new Array(numNodesSqd);
      var columnSum = new Array(numNodes);
      var additionalProb = (1 - dampingFactor) / numNodes; // Create null matrix

      for (var i = 0; i < numNodes; i++) {
        for (var j = 0; j < numNodes; j++) {
          var n = i * numNodes + j;
          matrix[n] = 0;
        }

        columnSum[i] = 0;
      } // Now, process edges


      for (var _i = 0; _i < numEdges; _i++) {
        var edge = edges[_i];
        var srcId = edge.data('source');
        var tgtId = edge.data('target'); // Don't include loops in the matrix

        if (srcId === tgtId) {
          continue;
        }

        var s = nodes.indexOfId(srcId);
        var t = nodes.indexOfId(tgtId);
        var w = weight(edge);

        var _n = t * numNodes + s; // Update matrix


        matrix[_n] += w; // Update column sum

        columnSum[s] += w;
      } // Add additional probability based on damping factor
      // Also, take into account columns that have sum = 0


      var p = 1.0 / numNodes + additionalProb; // Shorthand
      // Traverse matrix, column by column

      for (var _j = 0; _j < numNodes; _j++) {
        if (columnSum[_j] === 0) {
          // No 'links' out from node jth, assume equal probability for each possible node
          for (var _i2 = 0; _i2 < numNodes; _i2++) {
            var _n2 = _i2 * numNodes + _j;

            matrix[_n2] = p;
          }
        } else {
          // Node jth has outgoing link, compute normalized probabilities
          for (var _i3 = 0; _i3 < numNodes; _i3++) {
            var _n3 = _i3 * numNodes + _j;

            matrix[_n3] = matrix[_n3] / columnSum[_j] + additionalProb;
          }
        }
      } // Compute dominant eigenvector using power method


      var eigenvector = new Array(numNodes);
      var temp = new Array(numNodes);
      var previous; // Start with a vector of all 1's
      // Also, initialize a null vector which will be used as shorthand

      for (var _i4 = 0; _i4 < numNodes; _i4++) {
        eigenvector[_i4] = 1;
      }

      for (var iter = 0; iter < iterations; iter++) {
        // Temp array with all 0's
        for (var _i5 = 0; _i5 < numNodes; _i5++) {
          temp[_i5] = 0;
        } // Multiply matrix with previous result


        for (var _i6 = 0; _i6 < numNodes; _i6++) {
          for (var _j2 = 0; _j2 < numNodes; _j2++) {
            var _n4 = _i6 * numNodes + _j2;

            temp[_i6] += matrix[_n4] * eigenvector[_j2];
          }
        }

        inPlaceSumNormalize(temp);
        previous = eigenvector;
        eigenvector = temp;
        temp = previous;
        var diff = 0; // Compute difference (squared module) of both vectors

        for (var _i7 = 0; _i7 < numNodes; _i7++) {
          var delta = previous[_i7] - eigenvector[_i7];
          diff += delta * delta;
        } // If difference is less than the desired threshold, stop iterating


        if (diff < precision) {
          break;
        }
      } // Construct result


      var res = {
        rank: function rank(node) {
          node = cy.collection(node)[0];
          return eigenvector[nodes.indexOf(node)];
        }
      };
      return res;
    } // pageRank

  }; // elesfn

  var defaults$1 = defaults({
    root: null,
    weight: function weight(edge) {
      return 1;
    },
    directed: false,
    alpha: 0
  });
  var elesfn$8 = {
    degreeCentralityNormalized: function degreeCentralityNormalized(options) {
      options = defaults$1(options);
      var cy = this.cy();
      var nodes = this.nodes();
      var numNodes = nodes.length;

      if (!options.directed) {
        var degrees = {};
        var maxDegree = 0;

        for (var i = 0; i < numNodes; i++) {
          var node = nodes[i]; // add current node to the current options object and call degreeCentrality

          options.root = node;
          var currDegree = this.degreeCentrality(options);

          if (maxDegree < currDegree.degree) {
            maxDegree = currDegree.degree;
          }

          degrees[node.id()] = currDegree.degree;
        }

        return {
          degree: function degree(node) {
            if (maxDegree === 0) {
              return 0;
            }

            if (string(node)) {
              // from is a selector string
              node = cy.filter(node);
            }

            return degrees[node.id()] / maxDegree;
          }
        };
      } else {
        var indegrees = {};
        var outdegrees = {};
        var maxIndegree = 0;
        var maxOutdegree = 0;

        for (var _i = 0; _i < numNodes; _i++) {
          var _node = nodes[_i];

          var id = _node.id(); // add current node to the current options object and call degreeCentrality


          options.root = _node;

          var _currDegree = this.degreeCentrality(options);

          if (maxIndegree < _currDegree.indegree) maxIndegree = _currDegree.indegree;
          if (maxOutdegree < _currDegree.outdegree) maxOutdegree = _currDegree.outdegree;
          indegrees[id] = _currDegree.indegree;
          outdegrees[id] = _currDegree.outdegree;
        }

        return {
          indegree: function indegree(node) {
            if (maxIndegree == 0) {
              return 0;
            }

            if (string(node)) {
              // from is a selector string
              node = cy.filter(node);
            }

            return indegrees[node.id()] / maxIndegree;
          },
          outdegree: function outdegree(node) {
            if (maxOutdegree === 0) {
              return 0;
            }

            if (string(node)) {
              // from is a selector string
              node = cy.filter(node);
            }

            return outdegrees[node.id()] / maxOutdegree;
          }
        };
      }
    },
    // degreeCentralityNormalized
    // Implemented from the algorithm in Opsahl's paper
    // "Node centrality in weighted networks: Generalizing degree and shortest paths"
    // check the heading 2 "Degree"
    degreeCentrality: function degreeCentrality(options) {
      options = defaults$1(options);
      var cy = this.cy();
      var callingEles = this;
      var _options = options,
          root = _options.root,
          weight = _options.weight,
          directed = _options.directed,
          alpha = _options.alpha;
      root = cy.collection(root)[0];

      if (!directed) {
        var connEdges = root.connectedEdges().intersection(callingEles);
        var k = connEdges.length;
        var s = 0; // Now, sum edge weights

        for (var i = 0; i < connEdges.length; i++) {
          s += weight(connEdges[i]);
        }

        return {
          degree: Math.pow(k, 1 - alpha) * Math.pow(s, alpha)
        };
      } else {
        var edges = root.connectedEdges();
        var incoming = edges.filter(function (edge) {
          return edge.target().same(root) && callingEles.has(edge);
        });
        var outgoing = edges.filter(function (edge) {
          return edge.source().same(root) && callingEles.has(edge);
        });
        var k_in = incoming.length;
        var k_out = outgoing.length;
        var s_in = 0;
        var s_out = 0; // Now, sum incoming edge weights

        for (var _i2 = 0; _i2 < incoming.length; _i2++) {
          s_in += weight(incoming[_i2]);
        } // Now, sum outgoing edge weights


        for (var _i3 = 0; _i3 < outgoing.length; _i3++) {
          s_out += weight(outgoing[_i3]);
        }

        return {
          indegree: Math.pow(k_in, 1 - alpha) * Math.pow(s_in, alpha),
          outdegree: Math.pow(k_out, 1 - alpha) * Math.pow(s_out, alpha)
        };
      }
    } // degreeCentrality

  }; // elesfn
  // nice, short mathemathical alias

  elesfn$8.dc = elesfn$8.degreeCentrality;
  elesfn$8.dcn = elesfn$8.degreeCentralityNormalised = elesfn$8.degreeCentralityNormalized;

  var defaults$2 = defaults({
    harmonic: true,
    weight: function weight() {
      return 1;
    },
    directed: false,
    root: null
  });
  var elesfn$9 = {
    closenessCentralityNormalized: function closenessCentralityNormalized(options) {
      var _defaults = defaults$2(options),
          harmonic = _defaults.harmonic,
          weight = _defaults.weight,
          directed = _defaults.directed;

      var cy = this.cy();
      var closenesses = {};
      var maxCloseness = 0;
      var nodes = this.nodes();
      var fw = this.floydWarshall({
        weight: weight,
        directed: directed
      }); // Compute closeness for every node and find the maximum closeness

      for (var i = 0; i < nodes.length; i++) {
        var currCloseness = 0;
        var node_i = nodes[i];

        for (var j = 0; j < nodes.length; j++) {
          if (i !== j) {
            var d = fw.distance(node_i, nodes[j]);

            if (harmonic) {
              currCloseness += 1 / d;
            } else {
              currCloseness += d;
            }
          }
        }

        if (!harmonic) {
          currCloseness = 1 / currCloseness;
        }

        if (maxCloseness < currCloseness) {
          maxCloseness = currCloseness;
        }

        closenesses[node_i.id()] = currCloseness;
      }

      return {
        closeness: function closeness(node) {
          if (maxCloseness == 0) {
            return 0;
          }

          if (string(node)) {
            // from is a selector string
            node = cy.filter(node)[0].id();
          } else {
            // from is a node
            node = node.id();
          }

          return closenesses[node] / maxCloseness;
        }
      };
    },
    // Implemented from pseudocode from wikipedia
    closenessCentrality: function closenessCentrality(options) {
      var _defaults2 = defaults$2(options),
          root = _defaults2.root,
          weight = _defaults2.weight,
          directed = _defaults2.directed,
          harmonic = _defaults2.harmonic;

      root = this.filter(root)[0]; // we need distance from this node to every other node

      var dijkstra = this.dijkstra({
        root: root,
        weight: weight,
        directed: directed
      });
      var totalDistance = 0;
      var nodes = this.nodes();

      for (var i = 0; i < nodes.length; i++) {
        var n = nodes[i];

        if (!n.same(root)) {
          var d = dijkstra.distanceTo(n);

          if (harmonic) {
            totalDistance += 1 / d;
          } else {
            totalDistance += d;
          }
        }
      }

      return harmonic ? totalDistance : 1 / totalDistance;
    } // closenessCentrality

  }; // elesfn
  // nice, short mathemathical alias

  elesfn$9.cc = elesfn$9.closenessCentrality;
  elesfn$9.ccn = elesfn$9.closenessCentralityNormalised = elesfn$9.closenessCentralityNormalized;

  var defaults$3 = defaults({
    weight: null,
    directed: false
  });
  var elesfn$a = {
    // Implemented from the algorithm in the paper "On Variants of Shortest-Path Betweenness Centrality and their Generic Computation" by Ulrik Brandes
    betweennessCentrality: function betweennessCentrality(options) {
      var _defaults = defaults$3(options),
          directed = _defaults.directed,
          weight = _defaults.weight;

      var weighted = weight != null;
      var cy = this.cy(); // starting

      var V = this.nodes();
      var A = {};
      var _C = {};
      var max = 0;
      var C = {
        set: function set(key, val) {
          _C[key] = val;

          if (val > max) {
            max = val;
          }
        },
        get: function get(key) {
          return _C[key];
        }
      }; // A contains the neighborhoods of every node

      for (var i = 0; i < V.length; i++) {
        var v = V[i];
        var vid = v.id();

        if (directed) {
          A[vid] = v.outgoers().nodes(); // get outgoers of every node
        } else {
          A[vid] = v.openNeighborhood().nodes(); // get neighbors of every node
        }

        C.set(vid, 0);
      }

      var _loop = function _loop(s) {
        var sid = V[s].id();
        var S = []; // stack

        var P = {};
        var g = {};
        var d = {};
        var Q = new Heap(function (a, b) {
          return d[a] - d[b];
        }); // queue
        // init dictionaries

        for (var _i = 0; _i < V.length; _i++) {
          var _vid = V[_i].id();

          P[_vid] = [];
          g[_vid] = 0;
          d[_vid] = Infinity;
        }

        g[sid] = 1; // sigma

        d[sid] = 0; // distance to s

        Q.push(sid);

        while (!Q.empty()) {
          var _v = Q.pop();

          S.push(_v);

          if (weighted) {
            for (var j = 0; j < A[_v].length; j++) {
              var w = A[_v][j];
              var vEle = cy.getElementById(_v);
              var edge = void 0;

              if (vEle.edgesTo(w).length > 0) {
                edge = vEle.edgesTo(w)[0];
              } else {
                edge = w.edgesTo(vEle)[0];
              }

              var edgeWeight = weight(edge);
              w = w.id();

              if (d[w] > d[_v] + edgeWeight) {
                d[w] = d[_v] + edgeWeight;

                if (Q.nodes.indexOf(w) < 0) {
                  //if w is not in Q
                  Q.push(w);
                } else {
                  // update position if w is in Q
                  Q.updateItem(w);
                }

                g[w] = 0;
                P[w] = [];
              }

              if (d[w] == d[_v] + edgeWeight) {
                g[w] = g[w] + g[_v];
                P[w].push(_v);
              }
            }
          } else {
            for (var _j = 0; _j < A[_v].length; _j++) {
              var _w = A[_v][_j].id();

              if (d[_w] == Infinity) {
                Q.push(_w);
                d[_w] = d[_v] + 1;
              }

              if (d[_w] == d[_v] + 1) {
                g[_w] = g[_w] + g[_v];

                P[_w].push(_v);
              }
            }
          }
        }

        var e = {};

        for (var _i2 = 0; _i2 < V.length; _i2++) {
          e[V[_i2].id()] = 0;
        }

        while (S.length > 0) {
          var _w2 = S.pop();

          for (var _j2 = 0; _j2 < P[_w2].length; _j2++) {
            var _v2 = P[_w2][_j2];
            e[_v2] = e[_v2] + g[_v2] / g[_w2] * (1 + e[_w2]);

            if (_w2 != V[s].id()) {
              C.set(_w2, C.get(_w2) + e[_w2]);
            }
          }
        }
      };

      for (var s = 0; s < V.length; s++) {
        _loop(s);
      }

      var ret = {
        betweenness: function betweenness(node) {
          var id = cy.collection(node).id();
          return C.get(id);
        },
        betweennessNormalized: function betweennessNormalized(node) {
          if (max == 0) {
            return 0;
          }

          var id = cy.collection(node).id();
          return C.get(id) / max;
        }
      }; // alias

      ret.betweennessNormalised = ret.betweennessNormalized;
      return ret;
    } // betweennessCentrality

  }; // elesfn
  // nice, short mathemathical alias

  elesfn$a.bc = elesfn$a.betweennessCentrality;

  // Implemented by Zoe Xi @zoexi for GSOC 2016
  /* eslint-disable no-unused-vars */

  var defaults$4 = defaults({
    expandFactor: 2,
    // affects time of computation and cluster granularity to some extent: M * M
    inflateFactor: 2,
    // affects cluster granularity (the greater the value, the more clusters): M(i,j) / E(j)
    multFactor: 1,
    // optional self loops for each node. Use a neutral value to improve cluster computations.
    maxIterations: 20,
    // maximum number of iterations of the MCL algorithm in a single run
    attributes: [// attributes/features used to group nodes, ie. similarity values between nodes
    function (edge) {
      return 1;
    }]
  });
  /* eslint-enable */

  var setOptions = function setOptions(options) {
    return defaults$4(options);
  };
  /* eslint-enable */


  var getSimilarity = function getSimilarity(edge, attributes) {
    var total = 0;

    for (var i = 0; i < attributes.length; i++) {
      total += attributes[i](edge);
    }

    return total;
  };

  var addLoops = function addLoops(M, n, val) {
    for (var i = 0; i < n; i++) {
      M[i * n + i] = val;
    }
  };

  var normalize = function normalize(M, n) {
    var sum;

    for (var col = 0; col < n; col++) {
      sum = 0;

      for (var row = 0; row < n; row++) {
        sum += M[row * n + col];
      }

      for (var _row = 0; _row < n; _row++) {
        M[_row * n + col] = M[_row * n + col] / sum;
      }
    }
  }; // TODO: blocked matrix multiplication?


  var mmult = function mmult(A, B, n) {
    var C = new Array(n * n);

    for (var i = 0; i < n; i++) {
      for (var j = 0; j < n; j++) {
        C[i * n + j] = 0;
      }

      for (var k = 0; k < n; k++) {
        for (var _j = 0; _j < n; _j++) {
          C[i * n + _j] += A[i * n + k] * B[k * n + _j];
        }
      }
    }

    return C;
  };

  var expand = function expand(M, n, expandFactor
  /** power **/
  ) {
    var _M = M.slice(0);

    for (var p = 1; p < expandFactor; p++) {
      M = mmult(M, _M, n);
    }

    return M;
  };

  var inflate = function inflate(M, n, inflateFactor
  /** r **/
  ) {
    var _M = new Array(n * n); // M(i,j) ^ inflatePower


    for (var i = 0; i < n * n; i++) {
      _M[i] = Math.pow(M[i], inflateFactor);
    }

    normalize(_M, n);
    return _M;
  };

  var hasConverged = function hasConverged(M, _M, n2, roundFactor) {
    // Check that both matrices have the same elements (i,j)
    for (var i = 0; i < n2; i++) {
      var v1 = Math.round(M[i] * Math.pow(10, roundFactor)) / Math.pow(10, roundFactor); // truncate to 'roundFactor' decimal places

      var v2 = Math.round(_M[i] * Math.pow(10, roundFactor)) / Math.pow(10, roundFactor);

      if (v1 !== v2) {
        return false;
      }
    }

    return true;
  };

  var assign = function assign(M, n, nodes, cy) {
    var clusters = [];

    for (var i = 0; i < n; i++) {
      var cluster = [];

      for (var j = 0; j < n; j++) {
        // Row-wise attractors and elements that they attract belong in same cluster
        if (Math.round(M[i * n + j] * 1000) / 1000 > 0) {
          cluster.push(nodes[j]);
        }
      }

      if (cluster.length !== 0) {
        clusters.push(cy.collection(cluster));
      }
    }

    return clusters;
  };

  var isDuplicate = function isDuplicate(c1, c2) {
    for (var i = 0; i < c1.length; i++) {
      if (!c2[i] || c1[i].id() !== c2[i].id()) {
        return false;
      }
    }

    return true;
  };

  var removeDuplicates = function removeDuplicates(clusters) {
    for (var i = 0; i < clusters.length; i++) {
      for (var j = 0; j < clusters.length; j++) {
        if (i != j && isDuplicate(clusters[i], clusters[j])) {
          clusters.splice(j, 1);
        }
      }
    }

    return clusters;
  };

  var markovClustering = function markovClustering(options) {
    var nodes = this.nodes();
    var edges = this.edges();
    var cy = this.cy(); // Set parameters of algorithm:

    var opts = setOptions(options); // Map each node to its position in node array

    var id2position = {};

    for (var i = 0; i < nodes.length; i++) {
      id2position[nodes[i].id()] = i;
    } // Generate stochastic matrix M from input graph G (should be symmetric/undirected)


    var n = nodes.length,
        n2 = n * n;

    var M = new Array(n2),
        _M;

    for (var _i = 0; _i < n2; _i++) {
      M[_i] = 0;
    }

    for (var e = 0; e < edges.length; e++) {
      var edge = edges[e];
      var _i2 = id2position[edge.source().id()];
      var j = id2position[edge.target().id()];
      var sim = getSimilarity(edge, opts.attributes);
      M[_i2 * n + j] += sim; // G should be symmetric and undirected

      M[j * n + _i2] += sim;
    } // Begin Markov cluster algorithm
    // Step 1: Add self loops to each node, ie. add multFactor to matrix diagonal


    addLoops(M, n, opts.multFactor); // Step 2: M = normalize( M );

    normalize(M, n);
    var isStillMoving = true;
    var iterations = 0;

    while (isStillMoving && iterations < opts.maxIterations) {
      isStillMoving = false; // Step 3:

      _M = expand(M, n, opts.expandFactor); // Step 4:

      M = inflate(_M, n, opts.inflateFactor); // Step 5: check to see if ~steady state has been reached

      if (!hasConverged(M, _M, n2, 4)) {
        isStillMoving = true;
      }

      iterations++;
    } // Build clusters from matrix


    var clusters = assign(M, n, nodes, cy); // Remove duplicate clusters due to symmetry of graph and M matrix

    clusters = removeDuplicates(clusters);
    return clusters;
  };

  var markovClustering$1 = {
    markovClustering: markovClustering,
    mcl: markovClustering
  };

  // Common distance metrics for clustering algorithms

  var identity = function identity(x) {
    return x;
  };

  var absDiff = function absDiff(p, q) {
    return Math.abs(q - p);
  };

  var addAbsDiff = function addAbsDiff(total, p, q) {
    return total + absDiff(p, q);
  };

  var addSquaredDiff = function addSquaredDiff(total, p, q) {
    return total + Math.pow(q - p, 2);
  };

  var sqrt = function sqrt(x) {
    return Math.sqrt(x);
  };

  var maxAbsDiff = function maxAbsDiff(currentMax, p, q) {
    return Math.max(currentMax, absDiff(p, q));
  };

  var getDistance = function getDistance(length, getP, getQ, init, visit) {
    var post = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : identity;
    var ret = init;
    var p, q;

    for (var dim = 0; dim < length; dim++) {
      p = getP(dim);
      q = getQ(dim);
      ret = visit(ret, p, q);
    }

    return post(ret);
  };

  var distances = {
    euclidean: function euclidean(length, getP, getQ) {
      if (length >= 2) {
        return getDistance(length, getP, getQ, 0, addSquaredDiff, sqrt);
      } else {
        // for single attr case, more efficient to avoid sqrt
        return getDistance(length, getP, getQ, 0, addAbsDiff);
      }
    },
    squaredEuclidean: function squaredEuclidean(length, getP, getQ) {
      return getDistance(length, getP, getQ, 0, addSquaredDiff);
    },
    manhattan: function manhattan(length, getP, getQ) {
      return getDistance(length, getP, getQ, 0, addAbsDiff);
    },
    max: function max(length, getP, getQ) {
      return getDistance(length, getP, getQ, -Infinity, maxAbsDiff);
    }
  }; // in case the user accidentally doesn't use camel case

  distances['squared-euclidean'] = distances['squaredEuclidean'];
  distances['squaredeuclidean'] = distances['squaredEuclidean'];
  function clusteringDistance (method, length, getP, getQ, nodeP, nodeQ) {
    var impl;

    if (fn(method)) {
      impl = method;
    } else {
      impl = distances[method] || distances.euclidean;
    }

    if (length === 0 && fn(method)) {
      return impl(nodeP, nodeQ);
    } else {
      return impl(length, getP, getQ, nodeP, nodeQ);
    }
  }

  var defaults$5 = defaults({
    k: 2,
    m: 2,
    sensitivityThreshold: 0.0001,
    distance: 'euclidean',
    maxIterations: 10,
    attributes: [],
    testMode: false,
    testCentroids: null
  });

  var setOptions$1 = function setOptions(options) {
    return defaults$5(options);
  };
  /* eslint-enable */


  var getDist = function getDist(type, node, centroid, attributes, mode) {
    var noNodeP = mode !== 'kMedoids';
    var getP = noNodeP ? function (i) {
      return centroid[i];
    } : function (i) {
      return attributes[i](centroid);
    };

    var getQ = function getQ(i) {
      return attributes[i](node);
    };

    var nodeP = centroid;
    var nodeQ = node;
    return clusteringDistance(type, attributes.length, getP, getQ, nodeP, nodeQ);
  };

  var randomCentroids = function randomCentroids(nodes, k, attributes) {
    var ndim = attributes.length;
    var min = new Array(ndim);
    var max = new Array(ndim);
    var centroids = new Array(k);
    var centroid = null; // Find min, max values for each attribute dimension

    for (var i = 0; i < ndim; i++) {
      min[i] = nodes.min(attributes[i]).value;
      max[i] = nodes.max(attributes[i]).value;
    } // Build k centroids, each represented as an n-dim feature vector


    for (var c = 0; c < k; c++) {
      centroid = [];

      for (var _i = 0; _i < ndim; _i++) {
        centroid[_i] = Math.random() * (max[_i] - min[_i]) + min[_i]; // random initial value
      }

      centroids[c] = centroid;
    }

    return centroids;
  };

  var classify = function classify(node, centroids, distance, attributes, type) {
    var min = Infinity;
    var index = 0;

    for (var i = 0; i < centroids.length; i++) {
      var dist = getDist(distance, node, centroids[i], attributes, type);

      if (dist < min) {
        min = dist;
        index = i;
      }
    }

    return index;
  };

  var buildCluster = function buildCluster(centroid, nodes, assignment) {
    var cluster = [];
    var node = null;

    for (var n = 0; n < nodes.length; n++) {
      node = nodes[n];

      if (assignment[node.id()] === centroid) {
        //console.log("Node " + node.id() + " is associated with medoid #: " + m);
        cluster.push(node);
      }
    }

    return cluster;
  };

  var haveValuesConverged = function haveValuesConverged(v1, v2, sensitivityThreshold) {
    return Math.abs(v2 - v1) <= sensitivityThreshold;
  };

  var haveMatricesConverged = function haveMatricesConverged(v1, v2, sensitivityThreshold) {
    for (var i = 0; i < v1.length; i++) {
      for (var j = 0; j < v1[i].length; j++) {
        var diff = Math.abs(v1[i][j] - v2[i][j]);

        if (diff > sensitivityThreshold) {
          return false;
        }
      }
    }

    return true;
  };

  var seenBefore = function seenBefore(node, medoids, n) {
    for (var i = 0; i < n; i++) {
      if (node === medoids[i]) return true;
    }

    return false;
  };

  var randomMedoids = function randomMedoids(nodes, k) {
    var medoids = new Array(k); // For small data sets, the probability of medoid conflict is greater,
    // so we need to check to see if we've already seen or chose this node before.

    if (nodes.length < 50) {
      // Randomly select k medoids from the n nodes
      for (var i = 0; i < k; i++) {
        var node = nodes[Math.floor(Math.random() * nodes.length)]; // If we've already chosen this node to be a medoid, don't choose it again (for small data sets).
        // Instead choose a different random node.

        while (seenBefore(node, medoids, i)) {
          node = nodes[Math.floor(Math.random() * nodes.length)];
        }

        medoids[i] = node;
      }
    } else {
      // Relatively large data set, so pretty safe to not check and just select random nodes
      for (var _i2 = 0; _i2 < k; _i2++) {
        medoids[_i2] = nodes[Math.floor(Math.random() * nodes.length)];
      }
    }

    return medoids;
  };

  var findCost = function findCost(potentialNewMedoid, cluster, attributes) {
    var cost = 0;

    for (var n = 0; n < cluster.length; n++) {
      cost += getDist('manhattan', cluster[n], potentialNewMedoid, attributes, 'kMedoids');
    }

    return cost;
  };

  var kMeans = function kMeans(options) {
    var cy = this.cy();
    var nodes = this.nodes();
    var node = null; // Set parameters of algorithm: # of clusters, distance metric, etc.

    var opts = setOptions$1(options); // Begin k-means algorithm

    var clusters = new Array(opts.k);
    var assignment = {};
    var centroids; // Step 1: Initialize centroid positions

    if (opts.testMode) {
      if (typeof opts.testCentroids === 'number') {
        centroids = randomCentroids(nodes, opts.k, opts.attributes);
      } else if (_typeof(opts.testCentroids) === 'object') {
        centroids = opts.testCentroids;
      } else {
        centroids = randomCentroids(nodes, opts.k, opts.attributes);
      }
    } else {
      centroids = randomCentroids(nodes, opts.k, opts.attributes);
    }

    var isStillMoving = true;
    var iterations = 0;

    while (isStillMoving && iterations < opts.maxIterations) {
      // Step 2: Assign nodes to the nearest centroid
      for (var n = 0; n < nodes.length; n++) {
        node = nodes[n]; // Determine which cluster this node belongs to: node id => cluster #

        assignment[node.id()] = classify(node, centroids, opts.distance, opts.attributes, 'kMeans');
      } // Step 3: For each of the k clusters, update its centroid


      isStillMoving = false;

      for (var c = 0; c < opts.k; c++) {
        // Get all nodes that belong to this cluster
        var cluster = buildCluster(c, nodes, assignment);

        if (cluster.length === 0) {
          // If cluster is empty, break out early & move to next cluster
          continue;
        } // Update centroids by calculating avg of all nodes within the cluster.


        var ndim = opts.attributes.length;
        var centroid = centroids[c]; // [ dim_1, dim_2, dim_3, ... , dim_n ]

        var newCentroid = new Array(ndim);
        var sum = new Array(ndim);

        for (var d = 0; d < ndim; d++) {
          sum[d] = 0.0;

          for (var i = 0; i < cluster.length; i++) {
            node = cluster[i];
            sum[d] += opts.attributes[d](node);
          }

          newCentroid[d] = sum[d] / cluster.length; // Check to see if algorithm has converged, i.e. when centroids no longer change

          if (!haveValuesConverged(newCentroid[d], centroid[d], opts.sensitivityThreshold)) {
            isStillMoving = true;
          }
        }

        centroids[c] = newCentroid;
        clusters[c] = cy.collection(cluster);
      }

      iterations++;
    }

    return clusters;
  };

  var kMedoids = function kMedoids(options) {
    var cy = this.cy();
    var nodes = this.nodes();
    var node = null;
    var opts = setOptions$1(options); // Begin k-medoids algorithm

    var clusters = new Array(opts.k);
    var medoids;
    var assignment = {};
    var curCost;
    var minCosts = new Array(opts.k); // minimum cost configuration for each cluster
    // Step 1: Initialize k medoids

    if (opts.testMode) {
      if (typeof opts.testCentroids === 'number') ; else if (_typeof(opts.testCentroids) === 'object') {
        medoids = opts.testCentroids;
      } else {
        medoids = randomMedoids(nodes, opts.k);
      }
    } else {
      medoids = randomMedoids(nodes, opts.k);
    }

    var isStillMoving = true;
    var iterations = 0;

    while (isStillMoving && iterations < opts.maxIterations) {
      // Step 2: Assign nodes to the nearest medoid
      for (var n = 0; n < nodes.length; n++) {
        node = nodes[n]; // Determine which cluster this node belongs to: node id => cluster #

        assignment[node.id()] = classify(node, medoids, opts.distance, opts.attributes, 'kMedoids');
      }

      isStillMoving = false; // Step 3: For each medoid m, and for each node assciated with mediod m,
      // select the node with the lowest configuration cost as new medoid.

      for (var m = 0; m < medoids.length; m++) {
        // Get all nodes that belong to this medoid
        var cluster = buildCluster(m, nodes, assignment);

        if (cluster.length === 0) {
          // If cluster is empty, break out early & move to next cluster
          continue;
        }

        minCosts[m] = findCost(medoids[m], cluster, opts.attributes); // original cost
        // Select different medoid if its configuration has the lowest cost

        for (var _n = 0; _n < cluster.length; _n++) {
          curCost = findCost(cluster[_n], cluster, opts.attributes);

          if (curCost < minCosts[m]) {
            minCosts[m] = curCost;
            medoids[m] = cluster[_n];
            isStillMoving = true;
          }
        }

        clusters[m] = cy.collection(cluster);
      }

      iterations++;
    }

    return clusters;
  };

  var updateCentroids = function updateCentroids(centroids, nodes, U, weight, opts) {
    var numerator, denominator;

    for (var n = 0; n < nodes.length; n++) {
      for (var c = 0; c < centroids.length; c++) {
        weight[n][c] = Math.pow(U[n][c], opts.m);
      }
    }

    for (var _c = 0; _c < centroids.length; _c++) {
      for (var dim = 0; dim < opts.attributes.length; dim++) {
        numerator = 0;
        denominator = 0;

        for (var _n2 = 0; _n2 < nodes.length; _n2++) {
          numerator += weight[_n2][_c] * opts.attributes[dim](nodes[_n2]);
          denominator += weight[_n2][_c];
        }

        centroids[_c][dim] = numerator / denominator;
      }
    }
  };

  var updateMembership = function updateMembership(U, _U, centroids, nodes, opts) {
    // Save previous step
    for (var i = 0; i < U.length; i++) {
      _U[i] = U[i].slice();
    }

    var sum, numerator, denominator;
    var pow = 2 / (opts.m - 1);

    for (var c = 0; c < centroids.length; c++) {
      for (var n = 0; n < nodes.length; n++) {
        sum = 0;

        for (var k = 0; k < centroids.length; k++) {
          // against all other centroids
          numerator = getDist(opts.distance, nodes[n], centroids[c], opts.attributes, 'cmeans');
          denominator = getDist(opts.distance, nodes[n], centroids[k], opts.attributes, 'cmeans');
          sum += Math.pow(numerator / denominator, pow);
        }

        U[n][c] = 1 / sum;
      }
    }
  };

  var assign$1 = function assign(nodes, U, opts, cy) {
    var clusters = new Array(opts.k);

    for (var c = 0; c < clusters.length; c++) {
      clusters[c] = [];
    }

    var max;
    var index;

    for (var n = 0; n < U.length; n++) {
      // for each node (U is N x C matrix)
      max = -Infinity;
      index = -1; // Determine which cluster the node is most likely to belong in

      for (var _c2 = 0; _c2 < U[0].length; _c2++) {
        if (U[n][_c2] > max) {
          max = U[n][_c2];
          index = _c2;
        }
      }

      clusters[index].push(nodes[n]);
    } // Turn every array into a collection of nodes


    for (var _c3 = 0; _c3 < clusters.length; _c3++) {
      clusters[_c3] = cy.collection(clusters[_c3]);
    }

    return clusters;
  };

  var fuzzyCMeans = function fuzzyCMeans(options) {
    var cy = this.cy();
    var nodes = this.nodes();
    var opts = setOptions$1(options); // Begin fuzzy c-means algorithm

    var clusters;
    var centroids;
    var U;

    var _U;

    var weight; // Step 1: Initialize letiables.

    _U = new Array(nodes.length);

    for (var i = 0; i < nodes.length; i++) {
      // N x C matrix
      _U[i] = new Array(opts.k);
    }

    U = new Array(nodes.length);

    for (var _i3 = 0; _i3 < nodes.length; _i3++) {
      // N x C matrix
      U[_i3] = new Array(opts.k);
    }

    for (var _i4 = 0; _i4 < nodes.length; _i4++) {
      var total = 0;

      for (var j = 0; j < opts.k; j++) {
        U[_i4][j] = Math.random();
        total += U[_i4][j];
      }

      for (var _j = 0; _j < opts.k; _j++) {
        U[_i4][_j] = U[_i4][_j] / total;
      }
    }

    centroids = new Array(opts.k);

    for (var _i5 = 0; _i5 < opts.k; _i5++) {
      centroids[_i5] = new Array(opts.attributes.length);
    }

    weight = new Array(nodes.length);

    for (var _i6 = 0; _i6 < nodes.length; _i6++) {
      // N x C matrix
      weight[_i6] = new Array(opts.k);
    } // end init FCM


    var isStillMoving = true;
    var iterations = 0;

    while (isStillMoving && iterations < opts.maxIterations) {
      isStillMoving = false; // Step 2: Calculate the centroids for each step.

      updateCentroids(centroids, nodes, U, weight, opts); // Step 3: Update the partition matrix U.

      updateMembership(U, _U, centroids, nodes, opts); // Step 4: Check for convergence.

      if (!haveMatricesConverged(U, _U, opts.sensitivityThreshold)) {
        isStillMoving = true;
      }

      iterations++;
    } // Assign nodes to clusters with highest probability.


    clusters = assign$1(nodes, U, opts, cy);
    return {
      clusters: clusters,
      degreeOfMembership: U
    };
  };

  var kClustering = {
    kMeans: kMeans,
    kMedoids: kMedoids,
    fuzzyCMeans: fuzzyCMeans,
    fcm: fuzzyCMeans
  };

  // Implemented by Zoe Xi @zoexi for GSOC 2016
  var defaults$6 = defaults({
    distance: 'euclidean',
    // distance metric to compare nodes
    linkage: 'min',
    // linkage criterion : how to determine the distance between clusters of nodes
    mode: 'threshold',
    // mode:'threshold' => clusters must be threshold distance apart
    threshold: Infinity,
    // the distance threshold
    // mode:'dendrogram' => the nodes are organised as leaves in a tree (siblings are close), merging makes clusters
    addDendrogram: false,
    // whether to add the dendrogram to the graph for viz
    dendrogramDepth: 0,
    // depth at which dendrogram branches are merged into the returned clusters
    attributes: [] // array of attr functions

  });
  var linkageAliases = {
    'single': 'min',
    'complete': 'max'
  };

  var setOptions$2 = function setOptions(options) {
    var opts = defaults$6(options);
    var preferredAlias = linkageAliases[opts.linkage];

    if (preferredAlias != null) {
      opts.linkage = preferredAlias;
    }

    return opts;
  };

  var mergeClosest = function mergeClosest(clusters, index, dists, mins, opts) {
    // Find two closest clusters from cached mins
    var minKey = 0;
    var min = Infinity;
    var dist;
    var attrs = opts.attributes;

    var getDist = function getDist(n1, n2) {
      return clusteringDistance(opts.distance, attrs.length, function (i) {
        return attrs[i](n1);
      }, function (i) {
        return attrs[i](n2);
      }, n1, n2);
    };

    for (var i = 0; i < clusters.length; i++) {
      var key = clusters[i].key;
      var _dist = dists[key][mins[key]];

      if (_dist < min) {
        minKey = key;
        min = _dist;
      }
    }

    if (opts.mode === 'threshold' && min >= opts.threshold || opts.mode === 'dendrogram' && clusters.length === 1) {
      return false;
    }

    var c1 = index[minKey];
    var c2 = index[mins[minKey]];
    var merged; // Merge two closest clusters

    if (opts.mode === 'dendrogram') {
      merged = {
        left: c1,
        right: c2,
        key: c1.key
      };
    } else {
      merged = {
        value: c1.value.concat(c2.value),
        key: c1.key
      };
    }

    clusters[c1.index] = merged;
    clusters.splice(c2.index, 1);
    index[c1.key] = merged; // Update distances with new merged cluster

    for (var _i = 0; _i < clusters.length; _i++) {
      var cur = clusters[_i];

      if (c1.key === cur.key) {
        dist = Infinity;
      } else if (opts.linkage === 'min') {
        dist = dists[c1.key][cur.key];

        if (dists[c1.key][cur.key] > dists[c2.key][cur.key]) {
          dist = dists[c2.key][cur.key];
        }
      } else if (opts.linkage === 'max') {
        dist = dists[c1.key][cur.key];

        if (dists[c1.key][cur.key] < dists[c2.key][cur.key]) {
          dist = dists[c2.key][cur.key];
        }
      } else if (opts.linkage === 'mean') {
        dist = (dists[c1.key][cur.key] * c1.size + dists[c2.key][cur.key] * c2.size) / (c1.size + c2.size);
      } else {
        if (opts.mode === 'dendrogram') dist = getDist(cur.value, c1.value);else dist = getDist(cur.value[0], c1.value[0]);
      }

      dists[c1.key][cur.key] = dists[cur.key][c1.key] = dist; // distance matrix is symmetric
    } // Update cached mins


    for (var _i2 = 0; _i2 < clusters.length; _i2++) {
      var key1 = clusters[_i2].key;

      if (mins[key1] === c1.key || mins[key1] === c2.key) {
        var _min = key1;

        for (var j = 0; j < clusters.length; j++) {
          var key2 = clusters[j].key;

          if (dists[key1][key2] < dists[key1][_min]) {
            _min = key2;
          }
        }

        mins[key1] = _min;
      }

      clusters[_i2].index = _i2;
    } // Clean up meta data used for clustering


    c1.key = c2.key = c1.index = c2.index = null;
    return true;
  };

  var getAllChildren = function getAllChildren(root, arr, cy) {
    if (!root) return;

    if (root.value) {
      arr.push(root.value);
    } else {
      if (root.left) getAllChildren(root.left, arr);
      if (root.right) getAllChildren(root.right, arr);
    }
  };

  var buildDendrogram = function buildDendrogram(root, cy) {
    if (!root) return '';

    if (root.left && root.right) {
      var leftStr = buildDendrogram(root.left, cy);
      var rightStr = buildDendrogram(root.right, cy);
      var node = cy.add({
        group: 'nodes',
        data: {
          id: leftStr + ',' + rightStr
        }
      });
      cy.add({
        group: 'edges',
        data: {
          source: leftStr,
          target: node.id()
        }
      });
      cy.add({
        group: 'edges',
        data: {
          source: rightStr,
          target: node.id()
        }
      });
      return node.id();
    } else if (root.value) {
      return root.value.id();
    }
  };

  var buildClustersFromTree = function buildClustersFromTree(root, k, cy) {
    if (!root) return [];
    var left = [],
        right = [],
        leaves = [];

    if (k === 0) {
      // don't cut tree, simply return all nodes as 1 single cluster
      if (root.left) getAllChildren(root.left, left);
      if (root.right) getAllChildren(root.right, right);
      leaves = left.concat(right);
      return [cy.collection(leaves)];
    } else if (k === 1) {
      // cut at root
      if (root.value) {
        // leaf node
        return [cy.collection(root.value)];
      } else {
        if (root.left) getAllChildren(root.left, left);
        if (root.right) getAllChildren(root.right, right);
        return [cy.collection(left), cy.collection(right)];
      }
    } else {
      if (root.value) {
        return [cy.collection(root.value)];
      } else {
        if (root.left) left = buildClustersFromTree(root.left, k - 1, cy);
        if (root.right) right = buildClustersFromTree(root.right, k - 1, cy);
        return left.concat(right);
      }
    }
  };
  /* eslint-enable */


  var hierarchicalClustering = function hierarchicalClustering(options) {
    var cy = this.cy();
    var nodes = this.nodes(); // Set parameters of algorithm: linkage type, distance metric, etc.

    var opts = setOptions$2(options);
    var attrs = opts.attributes;

    var getDist = function getDist(n1, n2) {
      return clusteringDistance(opts.distance, attrs.length, function (i) {
        return attrs[i](n1);
      }, function (i) {
        return attrs[i](n2);
      }, n1, n2);
    }; // Begin hierarchical algorithm


    var clusters = [];
    var dists = []; // distances between each pair of clusters

    var mins = []; // closest cluster for each cluster

    var index = []; // hash of all clusters by key
    // In agglomerative (bottom-up) clustering, each node starts as its own cluster

    for (var n = 0; n < nodes.length; n++) {
      var cluster = {
        value: opts.mode === 'dendrogram' ? nodes[n] : [nodes[n]],
        key: n,
        index: n
      };
      clusters[n] = cluster;
      index[n] = cluster;
      dists[n] = [];
      mins[n] = 0;
    } // Calculate the distance between each pair of clusters


    for (var i = 0; i < clusters.length; i++) {
      for (var j = 0; j <= i; j++) {
        var dist = void 0;

        if (opts.mode === 'dendrogram') {
          // modes store cluster values differently
          dist = i === j ? Infinity : getDist(clusters[i].value, clusters[j].value);
        } else {
          dist = i === j ? Infinity : getDist(clusters[i].value[0], clusters[j].value[0]);
        }

        dists[i][j] = dist;
        dists[j][i] = dist;

        if (dist < dists[i][mins[i]]) {
          mins[i] = j; // Cache mins: closest cluster to cluster i is cluster j
        }
      }
    } // Find the closest pair of clusters and merge them into a single cluster.
    // Update distances between new cluster and each of the old clusters, and loop until threshold reached.


    var merged = mergeClosest(clusters, index, dists, mins, opts);

    while (merged) {
      merged = mergeClosest(clusters, index, dists, mins, opts);
    }

    var retClusters; // Dendrogram mode builds the hierarchy and adds intermediary nodes + edges
    // in addition to returning the clusters.

    if (opts.mode === 'dendrogram') {
      retClusters = buildClustersFromTree(clusters[0], opts.dendrogramDepth, cy);
      if (opts.addDendrogram) buildDendrogram(clusters[0], cy);
    } else {
      // Regular mode simply returns the clusters
      retClusters = new Array(clusters.length);
      clusters.forEach(function (cluster, i) {
        // Clean up meta data used for clustering
        cluster.key = cluster.index = null;
        retClusters[i] = cy.collection(cluster.value);
      });
    }

    return retClusters;
  };

  var hierarchicalClustering$1 = {
    hierarchicalClustering: hierarchicalClustering,
    hca: hierarchicalClustering
  };

  // Implemented by Zoe Xi @zoexi for GSOC 2016
  var defaults$7 = defaults({
    distance: 'euclidean',
    // distance metric to compare attributes between two nodes
    preference: 'median',
    // suitability of a data point to serve as an exemplar
    damping: 0.8,
    // damping factor between [0.5, 1)
    maxIterations: 1000,
    // max number of iterations to run
    minIterations: 100,
    // min number of iterations to run in order for clustering to stop
    attributes: [// functions to quantify the similarity between any two points
      // e.g. node => node.data('weight')
    ]
  });

  var setOptions$3 = function setOptions(options) {
    var dmp = options.damping;
    var pref = options.preference;

    if (!(0.5 <= dmp && dmp < 1)) {
      error("Damping must range on [0.5, 1).  Got: ".concat(dmp));
    }

    var validPrefs = ['median', 'mean', 'min', 'max'];

    if (!(validPrefs.some(function (v) {
      return v === pref;
    }) || number(pref))) {
      error("Preference must be one of [".concat(validPrefs.map(function (p) {
        return "'".concat(p, "'");
      }).join(', '), "] or a number.  Got: ").concat(pref));
    }

    return defaults$7(options);
  };
  /* eslint-enable */


  var getSimilarity$1 = function getSimilarity(type, n1, n2, attributes) {
    var attr = function attr(n, i) {
      return attributes[i](n);
    }; // nb negative because similarity should have an inverse relationship to distance


    return -clusteringDistance(type, attributes.length, function (i) {
      return attr(n1, i);
    }, function (i) {
      return attr(n2, i);
    }, n1, n2);
  };

  var getPreference = function getPreference(S, preference) {
    // larger preference = greater # of clusters
    var p = null;

    if (preference === 'median') {
      p = median(S);
    } else if (preference === 'mean') {
      p = mean(S);
    } else if (preference === 'min') {
      p = min(S);
    } else if (preference === 'max') {
      p = max(S);
    } else {
      // Custom preference number, as set by user
      p = preference;
    }

    return p;
  };

  var findExemplars = function findExemplars(n, R, A) {
    var indices = [];

    for (var i = 0; i < n; i++) {
      if (R[i * n + i] + A[i * n + i] > 0) {
        indices.push(i);
      }
    }

    return indices;
  };

  var assignClusters = function assignClusters(n, S, exemplars) {
    var clusters = [];

    for (var i = 0; i < n; i++) {
      var index = -1;
      var max = -Infinity;

      for (var ei = 0; ei < exemplars.length; ei++) {
        var e = exemplars[ei];

        if (S[i * n + e] > max) {
          index = e;
          max = S[i * n + e];
        }
      }

      if (index > 0) {
        clusters.push(index);
      }
    }

    for (var _ei = 0; _ei < exemplars.length; _ei++) {
      clusters[exemplars[_ei]] = exemplars[_ei];
    }

    return clusters;
  };

  var assign$2 = function assign(n, S, exemplars) {
    var clusters = assignClusters(n, S, exemplars);

    for (var ei = 0; ei < exemplars.length; ei++) {
      var ii = [];

      for (var c = 0; c < clusters.length; c++) {
        if (clusters[c] === exemplars[ei]) {
          ii.push(c);
        }
      }

      var maxI = -1;
      var maxSum = -Infinity;

      for (var i = 0; i < ii.length; i++) {
        var sum = 0;

        for (var j = 0; j < ii.length; j++) {
          sum += S[ii[j] * n + ii[i]];
        }

        if (sum > maxSum) {
          maxI = i;
          maxSum = sum;
        }
      }

      exemplars[ei] = ii[maxI];
    }

    clusters = assignClusters(n, S, exemplars);
    return clusters;
  };

  var affinityPropagation = function affinityPropagation(options) {
    var cy = this.cy();
    var nodes = this.nodes();
    var opts = setOptions$3(options); // Map each node to its position in node array

    var id2position = {};

    for (var i = 0; i < nodes.length; i++) {
      id2position[nodes[i].id()] = i;
    } // Begin affinity propagation algorithm


    var n; // number of data points

    var n2; // size of matrices

    var S; // similarity matrix (1D array)

    var p; // preference/suitability of a data point to serve as an exemplar

    var R; // responsibility matrix (1D array)

    var A; // availability matrix (1D array)

    n = nodes.length;
    n2 = n * n; // Initialize and build S similarity matrix

    S = new Array(n2);

    for (var _i = 0; _i < n2; _i++) {
      S[_i] = -Infinity; // for cases where two data points shouldn't be linked together
    }

    for (var _i2 = 0; _i2 < n; _i2++) {
      for (var j = 0; j < n; j++) {
        if (_i2 !== j) {
          S[_i2 * n + j] = getSimilarity$1(opts.distance, nodes[_i2], nodes[j], opts.attributes);
        }
      }
    } // Place preferences on the diagonal of S


    p = getPreference(S, opts.preference);

    for (var _i3 = 0; _i3 < n; _i3++) {
      S[_i3 * n + _i3] = p;
    } // Initialize R responsibility matrix


    R = new Array(n2);

    for (var _i4 = 0; _i4 < n2; _i4++) {
      R[_i4] = 0.0;
    } // Initialize A availability matrix


    A = new Array(n2);

    for (var _i5 = 0; _i5 < n2; _i5++) {
      A[_i5] = 0.0;
    }

    var old = new Array(n);
    var Rp = new Array(n);
    var se = new Array(n);

    for (var _i6 = 0; _i6 < n; _i6++) {
      old[_i6] = 0.0;
      Rp[_i6] = 0.0;
      se[_i6] = 0;
    }

    var e = new Array(n * opts.minIterations);

    for (var _i7 = 0; _i7 < e.length; _i7++) {
      e[_i7] = 0;
    }

    var iter;

    for (iter = 0; iter < opts.maxIterations; iter++) {
      // main algorithmic loop
      // Update R responsibility matrix
      for (var _i8 = 0; _i8 < n; _i8++) {
        var max = -Infinity,
            max2 = -Infinity,
            maxI = -1,
            AS = 0.0;

        for (var _j = 0; _j < n; _j++) {
          old[_j] = R[_i8 * n + _j];
          AS = A[_i8 * n + _j] + S[_i8 * n + _j];

          if (AS >= max) {
            max2 = max;
            max = AS;
            maxI = _j;
          } else if (AS > max2) {
            max2 = AS;
          }
        }

        for (var _j2 = 0; _j2 < n; _j2++) {
          R[_i8 * n + _j2] = (1 - opts.damping) * (S[_i8 * n + _j2] - max) + opts.damping * old[_j2];
        }

        R[_i8 * n + maxI] = (1 - opts.damping) * (S[_i8 * n + maxI] - max2) + opts.damping * old[maxI];
      } // Update A availability matrix


      for (var _i9 = 0; _i9 < n; _i9++) {
        var sum = 0;

        for (var _j3 = 0; _j3 < n; _j3++) {
          old[_j3] = A[_j3 * n + _i9];
          Rp[_j3] = Math.max(0, R[_j3 * n + _i9]);
          sum += Rp[_j3];
        }

        sum -= Rp[_i9];
        Rp[_i9] = R[_i9 * n + _i9];
        sum += Rp[_i9];

        for (var _j4 = 0; _j4 < n; _j4++) {
          A[_j4 * n + _i9] = (1 - opts.damping) * Math.min(0, sum - Rp[_j4]) + opts.damping * old[_j4];
        }

        A[_i9 * n + _i9] = (1 - opts.damping) * (sum - Rp[_i9]) + opts.damping * old[_i9];
      } // Check for convergence


      var K = 0;

      for (var _i10 = 0; _i10 < n; _i10++) {
        var E = A[_i10 * n + _i10] + R[_i10 * n + _i10] > 0 ? 1 : 0;
        e[iter % opts.minIterations * n + _i10] = E;
        K += E;
      }

      if (K > 0 && (iter >= opts.minIterations - 1 || iter == opts.maxIterations - 1)) {
        var _sum = 0;

        for (var _i11 = 0; _i11 < n; _i11++) {
          se[_i11] = 0;

          for (var _j5 = 0; _j5 < opts.minIterations; _j5++) {
            se[_i11] += e[_j5 * n + _i11];
          }

          if (se[_i11] === 0 || se[_i11] === opts.minIterations) {
            _sum++;
          }
        }

        if (_sum === n) {
          // then we have convergence
          break;
        }
      }
    } // Identify exemplars (cluster centers)


    var exemplarsIndices = findExemplars(n, R, A); // Assign nodes to clusters

    var clusterIndices = assign$2(n, S, exemplarsIndices);
    var clusters = {};

    for (var c = 0; c < exemplarsIndices.length; c++) {
      clusters[exemplarsIndices[c]] = [];
    }

    for (var _i12 = 0; _i12 < nodes.length; _i12++) {
      var pos = id2position[nodes[_i12].id()];

      var clusterIndex = clusterIndices[pos];

      if (clusterIndex != null) {
        // the node may have not been assigned a cluster if no valid attributes were specified
        clusters[clusterIndex].push(nodes[_i12]);
      }
    }

    var retClusters = new Array(exemplarsIndices.length);

    for (var _c = 0; _c < exemplarsIndices.length; _c++) {
      retClusters[_c] = cy.collection(clusters[exemplarsIndices[_c]]);
    }

    return retClusters;
  };

  var affinityPropagation$1 = {
    affinityPropagation: affinityPropagation,
    ap: affinityPropagation
  };

  var hierholzerDefaults = defaults({
    root: undefined,
    directed: false
  });
  var elesfn$b = {
    hierholzer: function hierholzer(options) {
      if (!plainObject(options)) {
        var args = arguments;
        options = {
          root: args[0],
          directed: args[1]
        };
      }

      var _hierholzerDefaults = hierholzerDefaults(options),
          root = _hierholzerDefaults.root,
          directed = _hierholzerDefaults.directed;

      var eles = this;
      var dflag = false;
      var oddIn;
      var oddOut;
      var startVertex;
      if (root) startVertex = string(root) ? this.filter(root)[0].id() : root[0].id();
      var nodes = {};
      var edges = {};

      if (directed) {
        eles.forEach(function (ele) {
          var id = ele.id();

          if (ele.isNode()) {
            var ind = ele.indegree(true);
            var outd = ele.outdegree(true);
            var d1 = ind - outd;
            var d2 = outd - ind;

            if (d1 == 1) {
              if (oddIn) dflag = true;else oddIn = id;
            } else if (d2 == 1) {
              if (oddOut) dflag = true;else oddOut = id;
            } else if (d2 > 1 || d1 > 1) {
              dflag = true;
            }

            nodes[id] = [];
            ele.outgoers().forEach(function (e) {
              if (e.isEdge()) nodes[id].push(e.id());
            });
          } else {
            edges[id] = [undefined, ele.target().id()];
          }
        });
      } else {
        eles.forEach(function (ele) {
          var id = ele.id();

          if (ele.isNode()) {
            var d = ele.degree(true);

            if (d % 2) {
              if (!oddIn) oddIn = id;else if (!oddOut) oddOut = id;else dflag = true;
            }

            nodes[id] = [];
            ele.connectedEdges().forEach(function (e) {
              return nodes[id].push(e.id());
            });
          } else {
            edges[id] = [ele.source().id(), ele.target().id()];
          }
        });
      }

      var result = {
        found: false,
        trail: undefined
      };
      if (dflag) return result;else if (oddOut && oddIn) {
        if (directed) {
          if (startVertex && oddOut != startVertex) {
            return result;
          }

          startVertex = oddOut;
        } else {
          if (startVertex && oddOut != startVertex && oddIn != startVertex) {
            return result;
          } else if (!startVertex) {
            startVertex = oddOut;
          }
        }
      } else {
        if (!startVertex) startVertex = eles[0].id();
      }

      var walk = function walk(v) {
        var currentNode = v;
        var subtour = [v];
        var adj, adjTail, adjHead;

        while (nodes[currentNode].length) {
          adj = nodes[currentNode].shift();
          adjTail = edges[adj][0];
          adjHead = edges[adj][1];

          if (currentNode != adjHead) {
            nodes[adjHead] = nodes[adjHead].filter(function (e) {
              return e != adj;
            });
            currentNode = adjHead;
          } else if (!directed && currentNode != adjTail) {
            nodes[adjTail] = nodes[adjTail].filter(function (e) {
              return e != adj;
            });
            currentNode = adjTail;
          }

          subtour.unshift(adj);
          subtour.unshift(currentNode);
        }

        return subtour;
      };

      var trail = [];
      var subtour = [];
      subtour = walk(startVertex);

      while (subtour.length != 1) {
        if (nodes[subtour[0]].length == 0) {
          trail.unshift(eles.getElementById(subtour.shift()));
          trail.unshift(eles.getElementById(subtour.shift()));
        } else {
          subtour = walk(subtour.shift()).concat(subtour);
        }
      }

      trail.unshift(eles.getElementById(subtour.shift())); // final node

      for (var d in nodes) {
        if (nodes[d].length) {
          return result;
        }
      }

      result.found = true;
      result.trail = this.spawn(trail);
      return result;
    }
  };

  var hopcroftTarjanBiconnected = function hopcroftTarjanBiconnected() {
    var eles = this;
    var nodes = {};
    var id = 0;
    var edgeCount = 0;
    var components = [];
    var stack = [];
    var visitedEdges = {};

    var buildComponent = function buildComponent(x, y) {
      var i = stack.length - 1;
      var cutset = [];
      var component = eles.spawn();

      while (stack[i].x != x || stack[i].y != y) {
        cutset.push(stack.pop().edge);
        i--;
      }

      cutset.push(stack.pop().edge);
      cutset.forEach(function (edge) {
        var connectedNodes = edge.connectedNodes().intersection(eles);
        component.merge(edge);
        connectedNodes.forEach(function (node) {
          var nodeId = node.id();
          var connectedEdges = node.connectedEdges().intersection(eles);
          component.merge(node);

          if (!nodes[nodeId].cutVertex) {
            component.merge(connectedEdges);
          } else {
            component.merge(connectedEdges.filter(function (edge) {
              return edge.isLoop();
            }));
          }
        });
      });
      components.push(component);
    };

    var biconnectedSearch = function biconnectedSearch(root, currentNode, parent) {
      if (root === parent) edgeCount += 1;
      nodes[currentNode] = {
        id: id,
        low: id++,
        cutVertex: false
      };
      var edges = eles.getElementById(currentNode).connectedEdges().intersection(eles);

      if (edges.size() === 0) {
        components.push(eles.spawn(eles.getElementById(currentNode)));
      } else {
        var sourceId, targetId, otherNodeId, edgeId;
        edges.forEach(function (edge) {
          sourceId = edge.source().id();
          targetId = edge.target().id();
          otherNodeId = sourceId === currentNode ? targetId : sourceId;

          if (otherNodeId !== parent) {
            edgeId = edge.id();

            if (!visitedEdges[edgeId]) {
              visitedEdges[edgeId] = true;
              stack.push({
                x: currentNode,
                y: otherNodeId,
                edge: edge
              });
            }

            if (!(otherNodeId in nodes)) {
              biconnectedSearch(root, otherNodeId, currentNode);
              nodes[currentNode].low = Math.min(nodes[currentNode].low, nodes[otherNodeId].low);

              if (nodes[currentNode].id <= nodes[otherNodeId].low) {
                nodes[currentNode].cutVertex = true;
                buildComponent(currentNode, otherNodeId);
              }
            } else {
              nodes[currentNode].low = Math.min(nodes[currentNode].low, nodes[otherNodeId].id);
            }
          }
        });
      }
    };

    eles.forEach(function (ele) {
      if (ele.isNode()) {
        var nodeId = ele.id();

        if (!(nodeId in nodes)) {
          edgeCount = 0;
          biconnectedSearch(nodeId, nodeId);
          nodes[nodeId].cutVertex = edgeCount > 1;
        }
      }
    });
    var cutVertices = Object.keys(nodes).filter(function (id) {
      return nodes[id].cutVertex;
    }).map(function (id) {
      return eles.getElementById(id);
    });
    return {
      cut: eles.spawn(cutVertices),
      components: components
    };
  };

  var hopcroftTarjanBiconnected$1 = {
    hopcroftTarjanBiconnected: hopcroftTarjanBiconnected,
    htbc: hopcroftTarjanBiconnected,
    htb: hopcroftTarjanBiconnected,
    hopcroftTarjanBiconnectedComponents: hopcroftTarjanBiconnected
  };

  var tarjanStronglyConnected = function tarjanStronglyConnected() {
    var eles = this;
    var nodes = {};
    var index = 0;
    var components = [];
    var stack = [];
    var cut = eles.spawn(eles);

    var stronglyConnectedSearch = function stronglyConnectedSearch(sourceNodeId) {
      stack.push(sourceNodeId);
      nodes[sourceNodeId] = {
        index: index,
        low: index++,
        explored: false
      };
      var connectedEdges = eles.getElementById(sourceNodeId).connectedEdges().intersection(eles);
      connectedEdges.forEach(function (edge) {
        var targetNodeId = edge.target().id();

        if (targetNodeId !== sourceNodeId) {
          if (!(targetNodeId in nodes)) {
            stronglyConnectedSearch(targetNodeId);
          }

          if (!nodes[targetNodeId].explored) {
            nodes[sourceNodeId].low = Math.min(nodes[sourceNodeId].low, nodes[targetNodeId].low);
          }
        }
      });

      if (nodes[sourceNodeId].index === nodes[sourceNodeId].low) {
        var componentNodes = eles.spawn();

        for (;;) {
          var nodeId = stack.pop();
          componentNodes.merge(eles.getElementById(nodeId));
          nodes[nodeId].low = nodes[sourceNodeId].index;
          nodes[nodeId].explored = true;

          if (nodeId === sourceNodeId) {
            break;
          }
        }

        var componentEdges = componentNodes.edgesWith(componentNodes);
        var component = componentNodes.merge(componentEdges);
        components.push(component);
        cut = cut.difference(component);
      }
    };

    eles.forEach(function (ele) {
      if (ele.isNode()) {
        var nodeId = ele.id();

        if (!(nodeId in nodes)) {
          stronglyConnectedSearch(nodeId);
        }
      }
    });
    return {
      cut: cut,
      components: components
    };
  };

  var tarjanStronglyConnected$1 = {
    tarjanStronglyConnected: tarjanStronglyConnected,
    tsc: tarjanStronglyConnected,
    tscc: tarjanStronglyConnected,
    tarjanStronglyConnectedComponents: tarjanStronglyConnected
  };

  var elesfn$c = {};
  [elesfn, elesfn$1, elesfn$2, elesfn$3, elesfn$4, elesfn$5, elesfn$6, elesfn$7, elesfn$8, elesfn$9, elesfn$a, markovClustering$1, kClustering, hierarchicalClustering$1, affinityPropagation$1, elesfn$b, hopcroftTarjanBiconnected$1, tarjanStronglyConnected$1].forEach(function (props) {
    extend(elesfn$c, props);
  });

  /*!
  Embeddable Minimum Strictly-Compliant Promises/A+ 1.1.1 Thenable
  Copyright (c) 2013-2014 Ralf S. Engelschall (http://engelschall.com)
  Licensed under The MIT License (http://opensource.org/licenses/MIT)
  */

  /*  promise states [Promises/A+ 2.1]  */
  var STATE_PENDING = 0;
  /*  [Promises/A+ 2.1.1]  */

  var STATE_FULFILLED = 1;
  /*  [Promises/A+ 2.1.2]  */

  var STATE_REJECTED = 2;
  /*  [Promises/A+ 2.1.3]  */

  /*  promise object constructor  */

  var api = function api(executor) {
    /*  optionally support non-constructor/plain-function call  */
    if (!(this instanceof api)) return new api(executor);
    /*  initialize object  */

    this.id = 'Thenable/1.0.7';
    this.state = STATE_PENDING;
    /*  initial state  */

    this.fulfillValue = undefined;
    /*  initial value  */

    /*  [Promises/A+ 1.3, 2.1.2.2]  */

    this.rejectReason = undefined;
    /*  initial reason */

    /*  [Promises/A+ 1.5, 2.1.3.2]  */

    this.onFulfilled = [];
    /*  initial handlers  */

    this.onRejected = [];
    /*  initial handlers  */

    /*  provide optional information-hiding proxy  */

    this.proxy = {
      then: this.then.bind(this)
    };
    /*  support optional executor function  */

    if (typeof executor === 'function') executor.call(this, this.fulfill.bind(this), this.reject.bind(this));
  };
  /*  promise API methods  */


  api.prototype = {
    /*  promise resolving methods  */
    fulfill: function fulfill(value) {
      return deliver(this, STATE_FULFILLED, 'fulfillValue', value);
    },
    reject: function reject(value) {
      return deliver(this, STATE_REJECTED, 'rejectReason', value);
    },

    /*  "The then Method" [Promises/A+ 1.1, 1.2, 2.2]  */
    then: function then(onFulfilled, onRejected) {
      var curr = this;
      var next = new api();
      /*  [Promises/A+ 2.2.7]  */

      curr.onFulfilled.push(resolver(onFulfilled, next, 'fulfill'));
      /*  [Promises/A+ 2.2.2/2.2.6]  */

      curr.onRejected.push(resolver(onRejected, next, 'reject'));
      /*  [Promises/A+ 2.2.3/2.2.6]  */

      execute(curr);
      return next.proxy;
      /*  [Promises/A+ 2.2.7, 3.3]  */
    }
  };
  /*  deliver an action  */

  var deliver = function deliver(curr, state, name, value) {
    if (curr.state === STATE_PENDING) {
      curr.state = state;
      /*  [Promises/A+ 2.1.2.1, 2.1.3.1]  */

      curr[name] = value;
      /*  [Promises/A+ 2.1.2.2, 2.1.3.2]  */

      execute(curr);
    }

    return curr;
  };
  /*  execute all handlers  */


  var execute = function execute(curr) {
    if (curr.state === STATE_FULFILLED) execute_handlers(curr, 'onFulfilled', curr.fulfillValue);else if (curr.state === STATE_REJECTED) execute_handlers(curr, 'onRejected', curr.rejectReason);
  };
  /*  execute particular set of handlers  */


  var execute_handlers = function execute_handlers(curr, name, value) {
    /* global setImmediate: true */

    /* global setTimeout: true */

    /*  short-circuit processing  */
    if (curr[name].length === 0) return;
    /*  iterate over all handlers, exactly once  */

    var handlers = curr[name];
    curr[name] = [];
    /*  [Promises/A+ 2.2.2.3, 2.2.3.3]  */

    var func = function func() {
      for (var i = 0; i < handlers.length; i++) {
        handlers[i](value);
      }
      /*  [Promises/A+ 2.2.5]  */

    };
    /*  execute procedure asynchronously  */

    /*  [Promises/A+ 2.2.4, 3.1]  */


    if (typeof setImmediate === 'function') setImmediate(func);else setTimeout(func, 0);
  };
  /*  generate a resolver function  */


  var resolver = function resolver(cb, next, method) {
    return function (value) {
      if (typeof cb !== 'function')
        /*  [Promises/A+ 2.2.1, 2.2.7.3, 2.2.7.4]  */
        next[method].call(next, value);
        /*  [Promises/A+ 2.2.7.3, 2.2.7.4]  */
      else {
          var result;

          try {
            result = cb(value);
          }
          /*  [Promises/A+ 2.2.2.1, 2.2.3.1, 2.2.5, 3.2]  */
          catch (e) {
            next.reject(e);
            /*  [Promises/A+ 2.2.7.2]  */

            return;
          }

          resolve(next, result);
          /*  [Promises/A+ 2.2.7.1]  */
        }
    };
  };
  /*  "Promise Resolution Procedure"  */

  /*  [Promises/A+ 2.3]  */


  var resolve = function resolve(promise, x) {
    /*  sanity check arguments  */

    /*  [Promises/A+ 2.3.1]  */
    if (promise === x || promise.proxy === x) {
      promise.reject(new TypeError('cannot resolve promise with itself'));
      return;
    }
    /*  surgically check for a "then" method
      (mainly to just call the "getter" of "then" only once)  */


    var then;

    if (_typeof(x) === 'object' && x !== null || typeof x === 'function') {
      try {
        then = x.then;
      }
      /*  [Promises/A+ 2.3.3.1, 3.5]  */
      catch (e) {
        promise.reject(e);
        /*  [Promises/A+ 2.3.3.2]  */

        return;
      }
    }
    /*  handle own Thenables    [Promises/A+ 2.3.2]
      and similar "thenables" [Promises/A+ 2.3.3]  */


    if (typeof then === 'function') {
      var resolved = false;

      try {
        /*  call retrieved "then" method */

        /*  [Promises/A+ 2.3.3.3]  */
        then.call(x,
        /*  resolvePromise  */

        /*  [Promises/A+ 2.3.3.3.1]  */
        function (y) {
          if (resolved) return;
          resolved = true;
          /*  [Promises/A+ 2.3.3.3.3]  */

          if (y === x)
            /*  [Promises/A+ 3.6]  */
            promise.reject(new TypeError('circular thenable chain'));else resolve(promise, y);
        },
        /*  rejectPromise  */

        /*  [Promises/A+ 2.3.3.3.2]  */
        function (r) {
          if (resolved) return;
          resolved = true;
          /*  [Promises/A+ 2.3.3.3.3]  */

          promise.reject(r);
        });
      } catch (e) {
        if (!resolved)
          /*  [Promises/A+ 2.3.3.3.3]  */
          promise.reject(e);
        /*  [Promises/A+ 2.3.3.3.4]  */
      }

      return;
    }
    /*  handle other values  */


    promise.fulfill(x);
    /*  [Promises/A+ 2.3.4, 2.3.3.4]  */
  }; // so we always have Promise.all()


  api.all = function (ps) {
    return new api(function (resolveAll, rejectAll) {
      var vals = new Array(ps.length);
      var doneCount = 0;

      var fulfill = function fulfill(i, val) {
        vals[i] = val;
        doneCount++;

        if (doneCount === ps.length) {
          resolveAll(vals);
        }
      };

      for (var i = 0; i < ps.length; i++) {
        (function (i) {
          var p = ps[i];
          var isPromise = p != null && p.then != null;

          if (isPromise) {
            p.then(function (val) {
              fulfill(i, val);
            }, function (err) {
              rejectAll(err);
            });
          } else {
            var val = p;
            fulfill(i, val);
          }
        })(i);
      }
    });
  };

  api.resolve = function (val) {
    return new api(function (resolve, reject) {
      resolve(val);
    });
  };

  api.reject = function (val) {
    return new api(function (resolve, reject) {
      reject(val);
    });
  };

  var Promise$1 = typeof Promise !== 'undefined' ? Promise : api; // eslint-disable-line no-undef

  var Animation = function Animation(target, opts, opts2) {
    var isCore = core(target);
    var isEle = !isCore;

    var _p = this._private = extend({
      duration: 1000
    }, opts, opts2);

    _p.target = target;
    _p.style = _p.style || _p.css;
    _p.started = false;
    _p.playing = false;
    _p.hooked = false;
    _p.applying = false;
    _p.progress = 0;
    _p.completes = [];
    _p.frames = [];

    if (_p.complete && fn(_p.complete)) {
      _p.completes.push(_p.complete);
    }

    if (isEle) {
      var pos = target.position();
      _p.startPosition = _p.startPosition || {
        x: pos.x,
        y: pos.y
      };
      _p.startStyle = _p.startStyle || target.cy().style().getAnimationStartStyle(target, _p.style);
    }

    if (isCore) {
      var pan = target.pan();
      _p.startPan = {
        x: pan.x,
        y: pan.y
      };
      _p.startZoom = target.zoom();
    } // for future timeline/animations impl


    this.length = 1;
    this[0] = this;
  };

  var anifn = Animation.prototype;
  extend(anifn, {
    instanceString: function instanceString() {
      return 'animation';
    },
    hook: function hook() {
      var _p = this._private;

      if (!_p.hooked) {
        // add to target's animation queue
        var q;
        var tAni = _p.target._private.animation;

        if (_p.queue) {
          q = tAni.queue;
        } else {
          q = tAni.current;
        }

        q.push(this); // add to the animation loop pool

        if (elementOrCollection(_p.target)) {
          _p.target.cy().addToAnimationPool(_p.target);
        }

        _p.hooked = true;
      }

      return this;
    },
    play: function play() {
      var _p = this._private; // autorewind

      if (_p.progress === 1) {
        _p.progress = 0;
      }

      _p.playing = true;
      _p.started = false; // needs to be started by animation loop

      _p.stopped = false;
      this.hook(); // the animation loop will start the animation...

      return this;
    },
    playing: function playing() {
      return this._private.playing;
    },
    apply: function apply() {
      var _p = this._private;
      _p.applying = true;
      _p.started = false; // needs to be started by animation loop

      _p.stopped = false;
      this.hook(); // the animation loop will apply the animation at this progress

      return this;
    },
    applying: function applying() {
      return this._private.applying;
    },
    pause: function pause() {
      var _p = this._private;
      _p.playing = false;
      _p.started = false;
      return this;
    },
    stop: function stop() {
      var _p = this._private;
      _p.playing = false;
      _p.started = false;
      _p.stopped = true; // to be removed from animation queues

      return this;
    },
    rewind: function rewind() {
      return this.progress(0);
    },
    fastforward: function fastforward() {
      return this.progress(1);
    },
    time: function time(t) {
      var _p = this._private;

      if (t === undefined) {
        return _p.progress * _p.duration;
      } else {
        return this.progress(t / _p.duration);
      }
    },
    progress: function progress(p) {
      var _p = this._private;
      var wasPlaying = _p.playing;

      if (p === undefined) {
        return _p.progress;
      } else {
        if (wasPlaying) {
          this.pause();
        }

        _p.progress = p;
        _p.started = false;

        if (wasPlaying) {
          this.play();
        }
      }

      return this;
    },
    completed: function completed() {
      return this._private.progress === 1;
    },
    reverse: function reverse() {
      var _p = this._private;
      var wasPlaying = _p.playing;

      if (wasPlaying) {
        this.pause();
      }

      _p.progress = 1 - _p.progress;
      _p.started = false;

      var swap = function swap(a, b) {
        var _pa = _p[a];

        if (_pa == null) {
          return;
        }

        _p[a] = _p[b];
        _p[b] = _pa;
      };

      swap('zoom', 'startZoom');
      swap('pan', 'startPan');
      swap('position', 'startPosition'); // swap styles

      if (_p.style) {
        for (var i = 0; i < _p.style.length; i++) {
          var prop = _p.style[i];
          var name = prop.name;
          var startStyleProp = _p.startStyle[name];
          _p.startStyle[name] = prop;
          _p.style[i] = startStyleProp;
        }
      }

      if (wasPlaying) {
        this.play();
      }

      return this;
    },
    promise: function promise(type) {
      var _p = this._private;
      var arr;

      switch (type) {
        case 'frame':
          arr = _p.frames;
          break;

        default:
        case 'complete':
        case 'completed':
          arr = _p.completes;
      }

      return new Promise$1(function (resolve, reject) {
        arr.push(function () {
          resolve();
        });
      });
    }
  });
  anifn.complete = anifn.completed;
  anifn.run = anifn.play;
  anifn.running = anifn.playing;

  var define = {
    animated: function animated() {
      return function animatedImpl() {
        var self = this;
        var selfIsArrayLike = self.length !== undefined;
        var all = selfIsArrayLike ? self : [self]; // put in array if not array-like

        var cy = this._private.cy || this;

        if (!cy.styleEnabled()) {
          return false;
        }

        var ele = all[0];

        if (ele) {
          return ele._private.animation.current.length > 0;
        }
      };
    },
    // animated
    clearQueue: function clearQueue() {
      return function clearQueueImpl() {
        var self = this;
        var selfIsArrayLike = self.length !== undefined;
        var all = selfIsArrayLike ? self : [self]; // put in array if not array-like

        var cy = this._private.cy || this;

        if (!cy.styleEnabled()) {
          return this;
        }

        for (var i = 0; i < all.length; i++) {
          var ele = all[i];
          ele._private.animation.queue = [];
        }

        return this;
      };
    },
    // clearQueue
    delay: function delay() {
      return function delayImpl(time, complete) {
        var cy = this._private.cy || this;

        if (!cy.styleEnabled()) {
          return this;
        }

        return this.animate({
          delay: time,
          duration: time,
          complete: complete
        });
      };
    },
    // delay
    delayAnimation: function delayAnimation() {
      return function delayAnimationImpl(time, complete) {
        var cy = this._private.cy || this;

        if (!cy.styleEnabled()) {
          return this;
        }

        return this.animation({
          delay: time,
          duration: time,
          complete: complete
        });
      };
    },
    // delay
    animation: function animation() {
      return function animationImpl(properties, params) {
        var self = this;
        var selfIsArrayLike = self.length !== undefined;
        var all = selfIsArrayLike ? self : [self]; // put in array if not array-like

        var cy = this._private.cy || this;
        var isCore = !selfIsArrayLike;
        var isEles = !isCore;

        if (!cy.styleEnabled()) {
          return this;
        }

        var style = cy.style();
        properties = extend({}, properties, params);
        var propertiesEmpty = Object.keys(properties).length === 0;

        if (propertiesEmpty) {
          return new Animation(all[0], properties); // nothing to animate
        }

        if (properties.duration === undefined) {
          properties.duration = 400;
        }

        switch (properties.duration) {
          case 'slow':
            properties.duration = 600;
            break;

          case 'fast':
            properties.duration = 200;
            break;
        }

        if (isEles) {
          properties.style = style.getPropsList(properties.style || properties.css);
          properties.css = undefined;
        }

        if (isEles && properties.renderedPosition != null) {
          var rpos = properties.renderedPosition;
          var pan = cy.pan();
          var zoom = cy.zoom();
          properties.position = renderedToModelPosition(rpos, zoom, pan);
        } // override pan w/ panBy if set


        if (isCore && properties.panBy != null) {
          var panBy = properties.panBy;
          var cyPan = cy.pan();
          properties.pan = {
            x: cyPan.x + panBy.x,
            y: cyPan.y + panBy.y
          };
        } // override pan w/ center if set


        var center = properties.center || properties.centre;

        if (isCore && center != null) {
          var centerPan = cy.getCenterPan(center.eles, properties.zoom);

          if (centerPan != null) {
            properties.pan = centerPan;
          }
        } // override pan & zoom w/ fit if set


        if (isCore && properties.fit != null) {
          var fit = properties.fit;
          var fitVp = cy.getFitViewport(fit.eles || fit.boundingBox, fit.padding);

          if (fitVp != null) {
            properties.pan = fitVp.pan;
            properties.zoom = fitVp.zoom;
          }
        } // override zoom (& potentially pan) w/ zoom obj if set


        if (isCore && plainObject(properties.zoom)) {
          var vp = cy.getZoomedViewport(properties.zoom);

          if (vp != null) {
            if (vp.zoomed) {
              properties.zoom = vp.zoom;
            }

            if (vp.panned) {
              properties.pan = vp.pan;
            }
          } else {
            properties.zoom = null; // an inavalid zoom (e.g. no delta) gets automatically destroyed
          }
        }

        return new Animation(all[0], properties);
      };
    },
    // animate
    animate: function animate() {
      return function animateImpl(properties, params) {
        var self = this;
        var selfIsArrayLike = self.length !== undefined;
        var all = selfIsArrayLike ? self : [self]; // put in array if not array-like

        var cy = this._private.cy || this;

        if (!cy.styleEnabled()) {
          return this;
        }

        if (params) {
          properties = extend({}, properties, params);
        } // manually hook and run the animation


        for (var i = 0; i < all.length; i++) {
          var ele = all[i];
          var queue = ele.animated() && (properties.queue === undefined || properties.queue);
          var ani = ele.animation(properties, queue ? {
            queue: true
          } : undefined);
          ani.play();
        }

        return this; // chaining
      };
    },
    // animate
    stop: function stop() {
      return function stopImpl(clearQueue, jumpToEnd) {
        var self = this;
        var selfIsArrayLike = self.length !== undefined;
        var all = selfIsArrayLike ? self : [self]; // put in array if not array-like

        var cy = this._private.cy || this;

        if (!cy.styleEnabled()) {
          return this;
        }

        for (var i = 0; i < all.length; i++) {
          var ele = all[i];
          var _p = ele._private;
          var anis = _p.animation.current;

          for (var j = 0; j < anis.length; j++) {
            var ani = anis[j];
            var ani_p = ani._private;

            if (jumpToEnd) {
              // next iteration of the animation loop, the animation
              // will go straight to the end and be removed
              ani_p.duration = 0;
            }
          } // clear the queue of future animations


          if (clearQueue) {
            _p.animation.queue = [];
          }

          if (!jumpToEnd) {
            _p.animation.current = [];
          }
        } // we have to notify (the animation loop doesn't do it for us on `stop`)


        cy.notify('draw');
        return this;
      };
    } // stop

  }; // define

  var define$1 = {
    // access data field
    data: function data(params) {
      var defaults = {
        field: 'data',
        bindingEvent: 'data',
        allowBinding: false,
        allowSetting: false,
        allowGetting: false,
        settingEvent: 'data',
        settingTriggersEvent: false,
        triggerFnName: 'trigger',
        immutableKeys: {},
        // key => true if immutable
        updateStyle: false,
        beforeGet: function beforeGet(self) {},
        beforeSet: function beforeSet(self, obj) {},
        onSet: function onSet(self) {},
        canSet: function canSet(self) {
          return true;
        }
      };
      params = extend({}, defaults, params);
      return function dataImpl(name, value) {
        var p = params;
        var self = this;
        var selfIsArrayLike = self.length !== undefined;
        var all = selfIsArrayLike ? self : [self]; // put in array if not array-like

        var single = selfIsArrayLike ? self[0] : self; // .data('foo', ...)

        if (string(name)) {
          // set or get property
          // .data('foo')
          if (p.allowGetting && value === undefined) {
            // get
            var ret;

            if (single) {
              p.beforeGet(single);
              ret = single._private[p.field][name];
            }

            return ret; // .data('foo', 'bar')
          } else if (p.allowSetting && value !== undefined) {
            // set
            var valid = !p.immutableKeys[name];

            if (valid) {
              var change = _defineProperty({}, name, value);

              p.beforeSet(self, change);

              for (var i = 0, l = all.length; i < l; i++) {
                var ele = all[i];

                if (p.canSet(ele)) {
                  ele._private[p.field][name] = value;
                }
              } // update mappers if asked


              if (p.updateStyle) {
                self.updateStyle();
              } // call onSet callback


              p.onSet(self);

              if (p.settingTriggersEvent) {
                self[p.triggerFnName](p.settingEvent);
              }
            }
          } // .data({ 'foo': 'bar' })

        } else if (p.allowSetting && plainObject(name)) {
          // extend
          var obj = name;
          var k, v;
          var keys = Object.keys(obj);
          p.beforeSet(self, obj);

          for (var _i = 0; _i < keys.length; _i++) {
            k = keys[_i];
            v = obj[k];

            var _valid = !p.immutableKeys[k];

            if (_valid) {
              for (var j = 0; j < all.length; j++) {
                var _ele = all[j];

                if (p.canSet(_ele)) {
                  _ele._private[p.field][k] = v;
                }
              }
            }
          } // update mappers if asked


          if (p.updateStyle) {
            self.updateStyle();
          } // call onSet callback


          p.onSet(self);

          if (p.settingTriggersEvent) {
            self[p.triggerFnName](p.settingEvent);
          } // .data(function(){ ... })

        } else if (p.allowBinding && fn(name)) {
          // bind to event
          var fn$1 = name;
          self.on(p.bindingEvent, fn$1); // .data()
        } else if (p.allowGetting && name === undefined) {
          // get whole object
          var _ret;

          if (single) {
            p.beforeGet(single);
            _ret = single._private[p.field];
          }

          return _ret;
        }

        return self; // maintain chainability
      }; // function
    },
    // data
    // remove data field
    removeData: function removeData(params) {
      var defaults = {
        field: 'data',
        event: 'data',
        triggerFnName: 'trigger',
        triggerEvent: false,
        immutableKeys: {} // key => true if immutable

      };
      params = extend({}, defaults, params);
      return function removeDataImpl(names) {
        var p = params;
        var self = this;
        var selfIsArrayLike = self.length !== undefined;
        var all = selfIsArrayLike ? self : [self]; // put in array if not array-like
        // .removeData('foo bar')

        if (string(names)) {
          // then get the list of keys, and delete them
          var keys = names.split(/\s+/);
          var l = keys.length;

          for (var i = 0; i < l; i++) {
            // delete each non-empty key
            var key = keys[i];

            if (emptyString(key)) {
              continue;
            }

            var valid = !p.immutableKeys[key]; // not valid if immutable

            if (valid) {
              for (var i_a = 0, l_a = all.length; i_a < l_a; i_a++) {
                all[i_a]._private[p.field][key] = undefined;
              }
            }
          }

          if (p.triggerEvent) {
            self[p.triggerFnName](p.event);
          } // .removeData()

        } else if (names === undefined) {
          // then delete all keys
          for (var _i_a = 0, _l_a = all.length; _i_a < _l_a; _i_a++) {
            var _privateFields = all[_i_a]._private[p.field];

            var _keys = Object.keys(_privateFields);

            for (var _i2 = 0; _i2 < _keys.length; _i2++) {
              var _key = _keys[_i2];
              var validKeyToDelete = !p.immutableKeys[_key];

              if (validKeyToDelete) {
                _privateFields[_key] = undefined;
              }
            }
          }

          if (p.triggerEvent) {
            self[p.triggerFnName](p.event);
          }
        }

        return self; // maintain chaining
      }; // function
    } // removeData

  }; // define

  var define$2 = {
    eventAliasesOn: function eventAliasesOn(proto) {
      var p = proto;
      p.addListener = p.listen = p.bind = p.on;
      p.unlisten = p.unbind = p.off = p.removeListener;
      p.trigger = p.emit; // this is just a wrapper alias of .on()

      p.pon = p.promiseOn = function (events, selector) {
        var self = this;
        var args = Array.prototype.slice.call(arguments, 0);
        return new Promise$1(function (resolve, reject) {
          var callback = function callback(e) {
            self.off.apply(self, offArgs);
            resolve(e);
          };

          var onArgs = args.concat([callback]);
          var offArgs = onArgs.concat([]);
          self.on.apply(self, onArgs);
        });
      };
    }
  }; // define

  // use this module to cherry pick functions into your prototype
  var define$3 = {};
  [define, define$1, define$2].forEach(function (m) {
    extend(define$3, m);
  });

  var elesfn$d = {
    animate: define$3.animate(),
    animation: define$3.animation(),
    animated: define$3.animated(),
    clearQueue: define$3.clearQueue(),
    delay: define$3.delay(),
    delayAnimation: define$3.delayAnimation(),
    stop: define$3.stop()
  };

  var elesfn$e = {
    classes: function classes(_classes) {
      var self = this;

      if (_classes === undefined) {
        var ret = [];

        self[0]._private.classes.forEach(function (cls) {
          return ret.push(cls);
        });

        return ret;
      } else if (!array(_classes)) {
        // extract classes from string
        _classes = (_classes || '').match(/\S+/g) || [];
      }

      var changed = [];
      var classesSet = new Set$1(_classes); // check and update each ele

      for (var j = 0; j < self.length; j++) {
        var ele = self[j];
        var _p = ele._private;
        var eleClasses = _p.classes;
        var changedEle = false; // check if ele has all of the passed classes

        for (var i = 0; i < _classes.length; i++) {
          var cls = _classes[i];
          var eleHasClass = eleClasses.has(cls);

          if (!eleHasClass) {
            changedEle = true;
            break;
          }
        } // check if ele has classes outside of those passed


        if (!changedEle) {
          changedEle = eleClasses.size !== _classes.length;
        }

        if (changedEle) {
          _p.classes = classesSet;
          changed.push(ele);
        }
      } // trigger update style on those eles that had class changes


      if (changed.length > 0) {
        this.spawn(changed).updateStyle().emit('class');
      }

      return self;
    },
    addClass: function addClass(classes) {
      return this.toggleClass(classes, true);
    },
    hasClass: function hasClass(className) {
      var ele = this[0];
      return ele != null && ele._private.classes.has(className);
    },
    toggleClass: function toggleClass(classes, toggle) {
      if (!array(classes)) {
        // extract classes from string
        classes = classes.match(/\S+/g) || [];
      }

      var self = this;
      var toggleUndefd = toggle === undefined;
      var changed = []; // eles who had classes changed

      for (var i = 0, il = self.length; i < il; i++) {
        var ele = self[i];
        var eleClasses = ele._private.classes;
        var changedEle = false;

        for (var j = 0; j < classes.length; j++) {
          var cls = classes[j];
          var hasClass = eleClasses.has(cls);
          var changedNow = false;

          if (toggle || toggleUndefd && !hasClass) {
            eleClasses.add(cls);
            changedNow = true;
          } else if (!toggle || toggleUndefd && hasClass) {
            eleClasses["delete"](cls);
            changedNow = true;
          }

          if (!changedEle && changedNow) {
            changed.push(ele);
            changedEle = true;
          }
        } // for j classes

      } // for i eles
      // trigger update style on those eles that had class changes


      if (changed.length > 0) {
        this.spawn(changed).updateStyle().emit('class');
      }

      return self;
    },
    removeClass: function removeClass(classes) {
      return this.toggleClass(classes, false);
    },
    flashClass: function flashClass(classes, duration) {
      var self = this;

      if (duration == null) {
        duration = 250;
      } else if (duration === 0) {
        return self; // nothing to do really
      }

      self.addClass(classes);
      setTimeout(function () {
        self.removeClass(classes);
      }, duration);
      return self;
    }
  };
  elesfn$e.className = elesfn$e.classNames = elesfn$e.classes;

  var tokens = {
    metaChar: '[\\!\\"\\#\\$\\%\\&\\\'\\(\\)\\*\\+\\,\\.\\/\\:\\;\\<\\=\\>\\?\\@\\[\\]\\^\\`\\{\\|\\}\\~]',
    // chars we need to escape in let names, etc
    comparatorOp: '=|\\!=|>|>=|<|<=|\\$=|\\^=|\\*=',
    // binary comparison op (used in data selectors)
    boolOp: '\\?|\\!|\\^',
    // boolean (unary) operators (used in data selectors)
    string: '"(?:\\\\"|[^"])*"' + '|' + "'(?:\\\\'|[^'])*'",
    // string literals (used in data selectors) -- doublequotes | singlequotes
    number: number$1,
    // number literal (used in data selectors) --- e.g. 0.1234, 1234, 12e123
    meta: 'degree|indegree|outdegree',
    // allowed metadata fields (i.e. allowed functions to use from Collection)
    separator: '\\s*,\\s*',
    // queries are separated by commas, e.g. edge[foo = 'bar'], node.someClass
    descendant: '\\s+',
    child: '\\s+>\\s+',
    subject: '\\$',
    group: 'node|edge|\\*',
    directedEdge: '\\s+->\\s+',
    undirectedEdge: '\\s+<->\\s+'
  };
  tokens.variable = '(?:[\\w-]|(?:\\\\' + tokens.metaChar + '))+'; // a variable name

  tokens.value = tokens.string + '|' + tokens.number; // a value literal, either a string or number

  tokens.className = tokens.variable; // a class name (follows variable conventions)

  tokens.id = tokens.variable; // an element id (follows variable conventions)

  (function () {
    var ops, op, i; // add @ variants to comparatorOp

    ops = tokens.comparatorOp.split('|');

    for (i = 0; i < ops.length; i++) {
      op = ops[i];
      tokens.comparatorOp += '|@' + op;
    } // add ! variants to comparatorOp


    ops = tokens.comparatorOp.split('|');

    for (i = 0; i < ops.length; i++) {
      op = ops[i];

      if (op.indexOf('!') >= 0) {
        continue;
      } // skip ops that explicitly contain !


      if (op === '=') {
        continue;
      } // skip = b/c != is explicitly defined


      tokens.comparatorOp += '|\\!' + op;
    }
  })();

  /**
   * Make a new query object
   *
   * @prop type {Type} The type enum (int) of the query
   * @prop checks List of checks to make against an ele to test for a match
   */
  var newQuery = function newQuery() {
    return {
      checks: []
    };
  };

  /**
   * A check type enum-like object.  Uses integer values for fast match() lookup.
   * The ordering does not matter as long as the ints are unique.
   */
  var Type = {
    /** E.g. node */
    GROUP: 0,

    /** A collection of elements */
    COLLECTION: 1,

    /** A filter(ele) function */
    FILTER: 2,

    /** E.g. [foo > 1] */
    DATA_COMPARE: 3,

    /** E.g. [foo] */
    DATA_EXIST: 4,

    /** E.g. [?foo] */
    DATA_BOOL: 5,

    /** E.g. [[degree > 2]] */
    META_COMPARE: 6,

    /** E.g. :selected */
    STATE: 7,

    /** E.g. #foo */
    ID: 8,

    /** E.g. .foo */
    CLASS: 9,

    /** E.g. #foo <-> #bar */
    UNDIRECTED_EDGE: 10,

    /** E.g. #foo -> #bar */
    DIRECTED_EDGE: 11,

    /** E.g. $#foo -> #bar */
    NODE_SOURCE: 12,

    /** E.g. #foo -> $#bar */
    NODE_TARGET: 13,

    /** E.g. $#foo <-> #bar */
    NODE_NEIGHBOR: 14,

    /** E.g. #foo > #bar */
    CHILD: 15,

    /** E.g. #foo #bar */
    DESCENDANT: 16,

    /** E.g. $#foo > #bar */
    PARENT: 17,

    /** E.g. $#foo #bar */
    ANCESTOR: 18,

    /** E.g. #foo > $bar > #baz */
    COMPOUND_SPLIT: 19,

    /** Always matches, useful placeholder for subject in `COMPOUND_SPLIT` */
    TRUE: 20
  };

  var stateSelectors = [{
    selector: ':selected',
    matches: function matches(ele) {
      return ele.selected();
    }
  }, {
    selector: ':unselected',
    matches: function matches(ele) {
      return !ele.selected();
    }
  }, {
    selector: ':selectable',
    matches: function matches(ele) {
      return ele.selectable();
    }
  }, {
    selector: ':unselectable',
    matches: function matches(ele) {
      return !ele.selectable();
    }
  }, {
    selector: ':locked',
    matches: function matches(ele) {
      return ele.locked();
    }
  }, {
    selector: ':unlocked',
    matches: function matches(ele) {
      return !ele.locked();
    }
  }, {
    selector: ':visible',
    matches: function matches(ele) {
      return ele.visible();
    }
  }, {
    selector: ':hidden',
    matches: function matches(ele) {
      return !ele.visible();
    }
  }, {
    selector: ':transparent',
    matches: function matches(ele) {
      return ele.transparent();
    }
  }, {
    selector: ':grabbed',
    matches: function matches(ele) {
      return ele.grabbed();
    }
  }, {
    selector: ':free',
    matches: function matches(ele) {
      return !ele.grabbed();
    }
  }, {
    selector: ':removed',
    matches: function matches(ele) {
      return ele.removed();
    }
  }, {
    selector: ':inside',
    matches: function matches(ele) {
      return !ele.removed();
    }
  }, {
    selector: ':grabbable',
    matches: function matches(ele) {
      return ele.grabbable();
    }
  }, {
    selector: ':ungrabbable',
    matches: function matches(ele) {
      return !ele.grabbable();
    }
  }, {
    selector: ':animated',
    matches: function matches(ele) {
      return ele.animated();
    }
  }, {
    selector: ':unanimated',
    matches: function matches(ele) {
      return !ele.animated();
    }
  }, {
    selector: ':parent',
    matches: function matches(ele) {
      return ele.isParent();
    }
  }, {
    selector: ':childless',
    matches: function matches(ele) {
      return ele.isChildless();
    }
  }, {
    selector: ':child',
    matches: function matches(ele) {
      return ele.isChild();
    }
  }, {
    selector: ':orphan',
    matches: function matches(ele) {
      return ele.isOrphan();
    }
  }, {
    selector: ':nonorphan',
    matches: function matches(ele) {
      return ele.isChild();
    }
  }, {
    selector: ':compound',
    matches: function matches(ele) {
      if (ele.isNode()) {
        return ele.isParent();
      } else {
        return ele.source().isParent() || ele.target().isParent();
      }
    }
  }, {
    selector: ':loop',
    matches: function matches(ele) {
      return ele.isLoop();
    }
  }, {
    selector: ':simple',
    matches: function matches(ele) {
      return ele.isSimple();
    }
  }, {
    selector: ':active',
    matches: function matches(ele) {
      return ele.active();
    }
  }, {
    selector: ':inactive',
    matches: function matches(ele) {
      return !ele.active();
    }
  }, {
    selector: ':backgrounding',
    matches: function matches(ele) {
      return ele.backgrounding();
    }
  }, {
    selector: ':nonbackgrounding',
    matches: function matches(ele) {
      return !ele.backgrounding();
    }
  }].sort(function (a, b) {
    // n.b. selectors that are starting substrings of others must have the longer ones first
    return descending(a.selector, b.selector);
  });

  var lookup = function () {
    var selToFn = {};
    var s;

    for (var i = 0; i < stateSelectors.length; i++) {
      s = stateSelectors[i];
      selToFn[s.selector] = s.matches;
    }

    return selToFn;
  }();

  var stateSelectorMatches = function stateSelectorMatches(sel, ele) {
    return lookup[sel](ele);
  };
  var stateSelectorRegex = '(' + stateSelectors.map(function (s) {
    return s.selector;
  }).join('|') + ')';

  // so that values get compared properly in Selector.filter()

  var cleanMetaChars = function cleanMetaChars(str) {
    return str.replace(new RegExp('\\\\(' + tokens.metaChar + ')', 'g'), function (match, $1) {
      return $1;
    });
  };

  var replaceLastQuery = function replaceLastQuery(selector, examiningQuery, replacementQuery) {
    selector[selector.length - 1] = replacementQuery;
  }; // NOTE: add new expression syntax here to have it recognised by the parser;
  // - a query contains all adjacent (i.e. no separator in between) expressions;
  // - the current query is stored in selector[i]
  // - you need to check the query objects in match() for it actually filter properly, but that's pretty straight forward


  var exprs = [{
    name: 'group',
    // just used for identifying when debugging
    query: true,
    regex: '(' + tokens.group + ')',
    populate: function populate(selector, query, _ref) {
      var _ref2 = _slicedToArray(_ref, 1),
          group = _ref2[0];

      query.checks.push({
        type: Type.GROUP,
        value: group === '*' ? group : group + 's'
      });
    }
  }, {
    name: 'state',
    query: true,
    regex: stateSelectorRegex,
    populate: function populate(selector, query, _ref3) {
      var _ref4 = _slicedToArray(_ref3, 1),
          state = _ref4[0];

      query.checks.push({
        type: Type.STATE,
        value: state
      });
    }
  }, {
    name: 'id',
    query: true,
    regex: '\\#(' + tokens.id + ')',
    populate: function populate(selector, query, _ref5) {
      var _ref6 = _slicedToArray(_ref5, 1),
          id = _ref6[0];

      query.checks.push({
        type: Type.ID,
        value: cleanMetaChars(id)
      });
    }
  }, {
    name: 'className',
    query: true,
    regex: '\\.(' + tokens.className + ')',
    populate: function populate(selector, query, _ref7) {
      var _ref8 = _slicedToArray(_ref7, 1),
          className = _ref8[0];

      query.checks.push({
        type: Type.CLASS,
        value: cleanMetaChars(className)
      });
    }
  }, {
    name: 'dataExists',
    query: true,
    regex: '\\[\\s*(' + tokens.variable + ')\\s*\\]',
    populate: function populate(selector, query, _ref9) {
      var _ref10 = _slicedToArray(_ref9, 1),
          variable = _ref10[0];

      query.checks.push({
        type: Type.DATA_EXIST,
        field: cleanMetaChars(variable)
      });
    }
  }, {
    name: 'dataCompare',
    query: true,
    regex: '\\[\\s*(' + tokens.variable + ')\\s*(' + tokens.comparatorOp + ')\\s*(' + tokens.value + ')\\s*\\]',
    populate: function populate(selector, query, _ref11) {
      var _ref12 = _slicedToArray(_ref11, 3),
          variable = _ref12[0],
          comparatorOp = _ref12[1],
          value = _ref12[2];

      var valueIsString = new RegExp('^' + tokens.string + '$').exec(value) != null;

      if (valueIsString) {
        value = value.substring(1, value.length - 1);
      } else {
        value = parseFloat(value);
      }

      query.checks.push({
        type: Type.DATA_COMPARE,
        field: cleanMetaChars(variable),
        operator: comparatorOp,
        value: value
      });
    }
  }, {
    name: 'dataBool',
    query: true,
    regex: '\\[\\s*(' + tokens.boolOp + ')\\s*(' + tokens.variable + ')\\s*\\]',
    populate: function populate(selector, query, _ref13) {
      var _ref14 = _slicedToArray(_ref13, 2),
          boolOp = _ref14[0],
          variable = _ref14[1];

      query.checks.push({
        type: Type.DATA_BOOL,
        field: cleanMetaChars(variable),
        operator: boolOp
      });
    }
  }, {
    name: 'metaCompare',
    query: true,
    regex: '\\[\\[\\s*(' + tokens.meta + ')\\s*(' + tokens.comparatorOp + ')\\s*(' + tokens.number + ')\\s*\\]\\]',
    populate: function populate(selector, query, _ref15) {
      var _ref16 = _slicedToArray(_ref15, 3),
          meta = _ref16[0],
          comparatorOp = _ref16[1],
          number = _ref16[2];

      query.checks.push({
        type: Type.META_COMPARE,
        field: cleanMetaChars(meta),
        operator: comparatorOp,
        value: parseFloat(number)
      });
    }
  }, {
    name: 'nextQuery',
    separator: true,
    regex: tokens.separator,
    populate: function populate(selector, query) {
      var currentSubject = selector.currentSubject;
      var edgeCount = selector.edgeCount;
      var compoundCount = selector.compoundCount;
      var lastQ = selector[selector.length - 1];

      if (currentSubject != null) {
        lastQ.subject = currentSubject;
        selector.currentSubject = null;
      }

      lastQ.edgeCount = edgeCount;
      lastQ.compoundCount = compoundCount;
      selector.edgeCount = 0;
      selector.compoundCount = 0; // go on to next query

      var nextQuery = selector[selector.length++] = newQuery();
      return nextQuery; // this is the new query to be filled by the following exprs
    }
  }, {
    name: 'directedEdge',
    separator: true,
    regex: tokens.directedEdge,
    populate: function populate(selector, query) {
      if (selector.currentSubject == null) {
        // undirected edge
        var edgeQuery = newQuery();
        var source = query;
        var target = newQuery();
        edgeQuery.checks.push({
          type: Type.DIRECTED_EDGE,
          source: source,
          target: target
        }); // the query in the selector should be the edge rather than the source

        replaceLastQuery(selector, query, edgeQuery);
        selector.edgeCount++; // we're now populating the target query with expressions that follow

        return target;
      } else {
        // source/target
        var srcTgtQ = newQuery();
        var _source = query;

        var _target = newQuery();

        srcTgtQ.checks.push({
          type: Type.NODE_SOURCE,
          source: _source,
          target: _target
        }); // the query in the selector should be the neighbourhood rather than the node

        replaceLastQuery(selector, query, srcTgtQ);
        selector.edgeCount++;
        return _target; // now populating the target with the following expressions
      }
    }
  }, {
    name: 'undirectedEdge',
    separator: true,
    regex: tokens.undirectedEdge,
    populate: function populate(selector, query) {
      if (selector.currentSubject == null) {
        // undirected edge
        var edgeQuery = newQuery();
        var source = query;
        var target = newQuery();
        edgeQuery.checks.push({
          type: Type.UNDIRECTED_EDGE,
          nodes: [source, target]
        }); // the query in the selector should be the edge rather than the source

        replaceLastQuery(selector, query, edgeQuery);
        selector.edgeCount++; // we're now populating the target query with expressions that follow

        return target;
      } else {
        // neighbourhood
        var nhoodQ = newQuery();
        var node = query;
        var neighbor = newQuery();
        nhoodQ.checks.push({
          type: Type.NODE_NEIGHBOR,
          node: node,
          neighbor: neighbor
        }); // the query in the selector should be the neighbourhood rather than the node

        replaceLastQuery(selector, query, nhoodQ);
        return neighbor; // now populating the neighbor with following expressions
      }
    }
  }, {
    name: 'child',
    separator: true,
    regex: tokens.child,
    populate: function populate(selector, query) {
      if (selector.currentSubject == null) {
        // default: child query
        var parentChildQuery = newQuery();
        var child = newQuery();
        var parent = selector[selector.length - 1];
        parentChildQuery.checks.push({
          type: Type.CHILD,
          parent: parent,
          child: child
        }); // the query in the selector should be the '>' itself

        replaceLastQuery(selector, query, parentChildQuery);
        selector.compoundCount++; // we're now populating the child query with expressions that follow

        return child;
      } else if (selector.currentSubject === query) {
        // compound split query
        var compound = newQuery();
        var left = selector[selector.length - 1];
        var right = newQuery();
        var subject = newQuery();

        var _child = newQuery();

        var _parent = newQuery(); // set up the root compound q


        compound.checks.push({
          type: Type.COMPOUND_SPLIT,
          left: left,
          right: right,
          subject: subject
        }); // populate the subject and replace the q at the old spot (within left) with TRUE

        subject.checks = query.checks; // take the checks from the left

        query.checks = [{
          type: Type.TRUE
        }]; // checks under left refs the subject implicitly
        // set up the right q

        _parent.checks.push({
          type: Type.TRUE
        }); // parent implicitly refs the subject


        right.checks.push({
          type: Type.PARENT,
          // type is swapped on right side queries
          parent: _parent,
          child: _child // empty for now

        });
        replaceLastQuery(selector, left, compound); // update the ref since we moved things around for `query`

        selector.currentSubject = subject;
        selector.compoundCount++;
        return _child; // now populating the right side's child
      } else {
        // parent query
        // info for parent query
        var _parent2 = newQuery();

        var _child2 = newQuery();

        var pcQChecks = [{
          type: Type.PARENT,
          parent: _parent2,
          child: _child2
        }]; // the parent-child query takes the place of the query previously being populated

        _parent2.checks = query.checks; // the previous query contains the checks for the parent

        query.checks = pcQChecks; // pc query takes over

        selector.compoundCount++;
        return _child2; // we're now populating the child
      }
    }
  }, {
    name: 'descendant',
    separator: true,
    regex: tokens.descendant,
    populate: function populate(selector, query) {
      if (selector.currentSubject == null) {
        // default: descendant query
        var ancChQuery = newQuery();
        var descendant = newQuery();
        var ancestor = selector[selector.length - 1];
        ancChQuery.checks.push({
          type: Type.DESCENDANT,
          ancestor: ancestor,
          descendant: descendant
        }); // the query in the selector should be the '>' itself

        replaceLastQuery(selector, query, ancChQuery);
        selector.compoundCount++; // we're now populating the descendant query with expressions that follow

        return descendant;
      } else if (selector.currentSubject === query) {
        // compound split query
        var compound = newQuery();
        var left = selector[selector.length - 1];
        var right = newQuery();
        var subject = newQuery();

        var _descendant = newQuery();

        var _ancestor = newQuery(); // set up the root compound q


        compound.checks.push({
          type: Type.COMPOUND_SPLIT,
          left: left,
          right: right,
          subject: subject
        }); // populate the subject and replace the q at the old spot (within left) with TRUE

        subject.checks = query.checks; // take the checks from the left

        query.checks = [{
          type: Type.TRUE
        }]; // checks under left refs the subject implicitly
        // set up the right q

        _ancestor.checks.push({
          type: Type.TRUE
        }); // ancestor implicitly refs the subject


        right.checks.push({
          type: Type.ANCESTOR,
          // type is swapped on right side queries
          ancestor: _ancestor,
          descendant: _descendant // empty for now

        });
        replaceLastQuery(selector, left, compound); // update the ref since we moved things around for `query`

        selector.currentSubject = subject;
        selector.compoundCount++;
        return _descendant; // now populating the right side's descendant
      } else {
        // ancestor query
        // info for parent query
        var _ancestor2 = newQuery();

        var _descendant2 = newQuery();

        var adQChecks = [{
          type: Type.ANCESTOR,
          ancestor: _ancestor2,
          descendant: _descendant2
        }]; // the parent-child query takes the place of the query previously being populated

        _ancestor2.checks = query.checks; // the previous query contains the checks for the parent

        query.checks = adQChecks; // pc query takes over

        selector.compoundCount++;
        return _descendant2; // we're now populating the child
      }
    }
  }, {
    name: 'subject',
    modifier: true,
    regex: tokens.subject,
    populate: function populate(selector, query) {
      if (selector.currentSubject != null && selector.currentSubject !== query) {
        warn('Redefinition of subject in selector `' + selector.toString() + '`');
        return false;
      }

      selector.currentSubject = query;
      var topQ = selector[selector.length - 1];
      var topChk = topQ.checks[0];
      var topType = topChk == null ? null : topChk.type;

      if (topType === Type.DIRECTED_EDGE) {
        // directed edge with subject on the target
        // change to target node check
        topChk.type = Type.NODE_TARGET;
      } else if (topType === Type.UNDIRECTED_EDGE) {
        // undirected edge with subject on the second node
        // change to neighbor check
        topChk.type = Type.NODE_NEIGHBOR;
        topChk.node = topChk.nodes[1]; // second node is subject

        topChk.neighbor = topChk.nodes[0]; // clean up unused fields for new type

        topChk.nodes = null;
      }
    }
  }];
  exprs.forEach(function (e) {
    return e.regexObj = new RegExp('^' + e.regex);
  });

  /**
   * Of all the expressions, find the first match in the remaining text.
   * @param {string} remaining The remaining text to parse
   * @returns The matched expression and the newly remaining text `{ expr, match, name, remaining }`
   */

  var consumeExpr = function consumeExpr(remaining) {
    var expr;
    var match;
    var name;

    for (var j = 0; j < exprs.length; j++) {
      var e = exprs[j];
      var n = e.name;
      var m = remaining.match(e.regexObj);

      if (m != null) {
        match = m;
        expr = e;
        name = n;
        var consumed = m[0];
        remaining = remaining.substring(consumed.length);
        break; // we've consumed one expr, so we can return now
      }
    }

    return {
      expr: expr,
      match: match,
      name: name,
      remaining: remaining
    };
  };
  /**
   * Consume all the leading whitespace
   * @param {string} remaining The text to consume
   * @returns The text with the leading whitespace removed
   */


  var consumeWhitespace = function consumeWhitespace(remaining) {
    var match = remaining.match(/^\s+/);

    if (match) {
      var consumed = match[0];
      remaining = remaining.substring(consumed.length);
    }

    return remaining;
  };
  /**
   * Parse the string and store the parsed representation in the Selector.
   * @param {string} selector The selector string
   * @returns `true` if the selector was successfully parsed, `false` otherwise
   */


  var parse = function parse(selector) {
    var self = this;
    var remaining = self.inputText = selector;
    var currentQuery = self[0] = newQuery();
    self.length = 1;
    remaining = consumeWhitespace(remaining); // get rid of leading whitespace

    for (;;) {
      var exprInfo = consumeExpr(remaining);

      if (exprInfo.expr == null) {
        warn('The selector `' + selector + '`is invalid');
        return false;
      } else {
        var args = exprInfo.match.slice(1); // let the token populate the selector object in currentQuery

        var ret = exprInfo.expr.populate(self, currentQuery, args);

        if (ret === false) {
          return false; // exit if population failed
        } else if (ret != null) {
          currentQuery = ret; // change the current query to be filled if the expr specifies
        }
      }

      remaining = exprInfo.remaining; // we're done when there's nothing left to parse

      if (remaining.match(/^\s*$/)) {
        break;
      }
    }

    var lastQ = self[self.length - 1];

    if (self.currentSubject != null) {
      lastQ.subject = self.currentSubject;
    }

    lastQ.edgeCount = self.edgeCount;
    lastQ.compoundCount = self.compoundCount;

    for (var i = 0; i < self.length; i++) {
      var q = self[i]; // in future, this could potentially be allowed if there were operator precedence and detection of invalid combinations

      if (q.compoundCount > 0 && q.edgeCount > 0) {
        warn('The selector `' + selector + '` is invalid because it uses both a compound selector and an edge selector');
        return false;
      }

      if (q.edgeCount > 1) {
        warn('The selector `' + selector + '` is invalid because it uses multiple edge selectors');
        return false;
      } else if (q.edgeCount === 1) {
        warn('The selector `' + selector + '` is deprecated.  Edge selectors do not take effect on changes to source and target nodes after an edge is added, for performance reasons.  Use a class or data selector on edges instead, updating the class or data of an edge when your app detects a change in source or target nodes.');
      }
    }

    return true; // success
  };
  /**
   * Get the selector represented as a string.  This value uses default formatting,
   * so things like spacing may differ from the input text passed to the constructor.
   * @returns {string} The selector string
   */


  var toString = function toString() {
    if (this.toStringCache != null) {
      return this.toStringCache;
    }

    var clean = function clean(obj) {
      if (obj == null) {
        return '';
      } else {
        return obj;
      }
    };

    var cleanVal = function cleanVal(val) {
      if (string(val)) {
        return '"' + val + '"';
      } else {
        return clean(val);
      }
    };

    var space = function space(val) {
      return ' ' + val + ' ';
    };

    var checkToString = function checkToString(check, subject) {
      var type = check.type,
          value = check.value;

      switch (type) {
        case Type.GROUP:
          {
            var group = clean(value);
            return group.substring(0, group.length - 1);
          }

        case Type.DATA_COMPARE:
          {
            var field = check.field,
                operator = check.operator;
            return '[' + field + space(clean(operator)) + cleanVal(value) + ']';
          }

        case Type.DATA_BOOL:
          {
            var _operator = check.operator,
                _field = check.field;
            return '[' + clean(_operator) + _field + ']';
          }

        case Type.DATA_EXIST:
          {
            var _field2 = check.field;
            return '[' + _field2 + ']';
          }

        case Type.META_COMPARE:
          {
            var _operator2 = check.operator,
                _field3 = check.field;
            return '[[' + _field3 + space(clean(_operator2)) + cleanVal(value) + ']]';
          }

        case Type.STATE:
          {
            return value;
          }

        case Type.ID:
          {
            return '#' + value;
          }

        case Type.CLASS:
          {
            return '.' + value;
          }

        case Type.PARENT:
        case Type.CHILD:
          {
            return queryToString(check.parent, subject) + space('>') + queryToString(check.child, subject);
          }

        case Type.ANCESTOR:
        case Type.DESCENDANT:
          {
            return queryToString(check.ancestor, subject) + ' ' + queryToString(check.descendant, subject);
          }

        case Type.COMPOUND_SPLIT:
          {
            var lhs = queryToString(check.left, subject);
            var sub = queryToString(check.subject, subject);
            var rhs = queryToString(check.right, subject);
            return lhs + (lhs.length > 0 ? ' ' : '') + sub + rhs;
          }

        case Type.TRUE:
          {
            return '';
          }
      }
    };

    var queryToString = function queryToString(query, subject) {
      return query.checks.reduce(function (str, chk, i) {
        return str + (subject === query && i === 0 ? '$' : '') + checkToString(chk, subject);
      }, '');
    };

    var str = '';

    for (var i = 0; i < this.length; i++) {
      var query = this[i];
      str += queryToString(query, query.subject);

      if (this.length > 1 && i < this.length - 1) {
        str += ', ';
      }
    }

    this.toStringCache = str;
    return str;
  };
  var parse$1 = {
    parse: parse,
    toString: toString
  };

  var valCmp = function valCmp(fieldVal, operator, value) {
    var matches;
    var isFieldStr = string(fieldVal);
    var isFieldNum = number(fieldVal);
    var isValStr = string(value);
    var fieldStr, valStr;
    var caseInsensitive = false;
    var notExpr = false;
    var isIneqCmp = false;

    if (operator.indexOf('!') >= 0) {
      operator = operator.replace('!', '');
      notExpr = true;
    }

    if (operator.indexOf('@') >= 0) {
      operator = operator.replace('@', '');
      caseInsensitive = true;
    }

    if (isFieldStr || isValStr || caseInsensitive) {
      fieldStr = !isFieldStr && !isFieldNum ? '' : '' + fieldVal;
      valStr = '' + value;
    } // if we're doing a case insensitive comparison, then we're using a STRING comparison
    // even if we're comparing numbers


    if (caseInsensitive) {
      fieldVal = fieldStr = fieldStr.toLowerCase();
      value = valStr = valStr.toLowerCase();
    }

    switch (operator) {
      case '*=':
        matches = fieldStr.indexOf(valStr) >= 0;
        break;

      case '$=':
        matches = fieldStr.indexOf(valStr, fieldStr.length - valStr.length) >= 0;
        break;

      case '^=':
        matches = fieldStr.indexOf(valStr) === 0;
        break;

      case '=':
        matches = fieldVal === value;
        break;

      case '>':
        isIneqCmp = true;
        matches = fieldVal > value;
        break;

      case '>=':
        isIneqCmp = true;
        matches = fieldVal >= value;
        break;

      case '<':
        isIneqCmp = true;
        matches = fieldVal < value;
        break;

      case '<=':
        isIneqCmp = true;
        matches = fieldVal <= value;
        break;

      default:
        matches = false;
        break;
    } // apply the not op, but null vals for inequalities should always stay non-matching


    if (notExpr && (fieldVal != null || !isIneqCmp)) {
      matches = !matches;
    }

    return matches;
  };
  var boolCmp = function boolCmp(fieldVal, operator) {
    switch (operator) {
      case '?':
        return fieldVal ? true : false;

      case '!':
        return fieldVal ? false : true;

      case '^':
        return fieldVal === undefined;
    }
  };
  var existCmp = function existCmp(fieldVal) {
    return fieldVal !== undefined;
  };
  var data = function data(ele, field) {
    return ele.data(field);
  };
  var meta = function meta(ele, field) {
    return ele[field]();
  };

  /** A lookup of `match(check, ele)` functions by `Type` int */

  var match = [];
  /**
   * Returns whether the query matches for the element
   * @param query The `{ type, value, ... }` query object
   * @param ele The element to compare against
  */

  var matches = function matches(query, ele) {
    return query.checks.every(function (chk) {
      return match[chk.type](chk, ele);
    });
  };

  match[Type.GROUP] = function (check, ele) {
    var group = check.value;
    return group === '*' || group === ele.group();
  };

  match[Type.STATE] = function (check, ele) {
    var stateSelector = check.value;
    return stateSelectorMatches(stateSelector, ele);
  };

  match[Type.ID] = function (check, ele) {
    var id = check.value;
    return ele.id() === id;
  };

  match[Type.CLASS] = function (check, ele) {
    var cls = check.value;
    return ele.hasClass(cls);
  };

  match[Type.META_COMPARE] = function (check, ele) {
    var field = check.field,
        operator = check.operator,
        value = check.value;
    return valCmp(meta(ele, field), operator, value);
  };

  match[Type.DATA_COMPARE] = function (check, ele) {
    var field = check.field,
        operator = check.operator,
        value = check.value;
    return valCmp(data(ele, field), operator, value);
  };

  match[Type.DATA_BOOL] = function (check, ele) {
    var field = check.field,
        operator = check.operator;
    return boolCmp(data(ele, field), operator);
  };

  match[Type.DATA_EXIST] = function (check, ele) {
    var field = check.field,
        operator = check.operator;
    return existCmp(data(ele, field));
  };

  match[Type.UNDIRECTED_EDGE] = function (check, ele) {
    var qA = check.nodes[0];
    var qB = check.nodes[1];
    var src = ele.source();
    var tgt = ele.target();
    return matches(qA, src) && matches(qB, tgt) || matches(qB, src) && matches(qA, tgt);
  };

  match[Type.NODE_NEIGHBOR] = function (check, ele) {
    return matches(check.node, ele) && ele.neighborhood().some(function (n) {
      return n.isNode() && matches(check.neighbor, n);
    });
  };

  match[Type.DIRECTED_EDGE] = function (check, ele) {
    return matches(check.source, ele.source()) && matches(check.target, ele.target());
  };

  match[Type.NODE_SOURCE] = function (check, ele) {
    return matches(check.source, ele) && ele.outgoers().some(function (n) {
      return n.isNode() && matches(check.target, n);
    });
  };

  match[Type.NODE_TARGET] = function (check, ele) {
    return matches(check.target, ele) && ele.incomers().some(function (n) {
      return n.isNode() && matches(check.source, n);
    });
  };

  match[Type.CHILD] = function (check, ele) {
    return matches(check.child, ele) && matches(check.parent, ele.parent());
  };

  match[Type.PARENT] = function (check, ele) {
    return matches(check.parent, ele) && ele.children().some(function (c) {
      return matches(check.child, c);
    });
  };

  match[Type.DESCENDANT] = function (check, ele) {
    return matches(check.descendant, ele) && ele.ancestors().some(function (a) {
      return matches(check.ancestor, a);
    });
  };

  match[Type.ANCESTOR] = function (check, ele) {
    return matches(check.ancestor, ele) && ele.descendants().some(function (d) {
      return matches(check.descendant, d);
    });
  };

  match[Type.COMPOUND_SPLIT] = function (check, ele) {
    return matches(check.subject, ele) && matches(check.left, ele) && matches(check.right, ele);
  };

  match[Type.TRUE] = function () {
    return true;
  };

  match[Type.COLLECTION] = function (check, ele) {
    var collection = check.value;
    return collection.has(ele);
  };

  match[Type.FILTER] = function (check, ele) {
    var filter = check.value;
    return filter(ele);
  };

  var filter = function filter(collection) {
    var self = this; // for 1 id #foo queries, just get the element

    if (self.length === 1 && self[0].checks.length === 1 && self[0].checks[0].type === Type.ID) {
      return collection.getElementById(self[0].checks[0].value).collection();
    }

    var selectorFunction = function selectorFunction(element) {
      for (var j = 0; j < self.length; j++) {
        var query = self[j];

        if (matches(query, element)) {
          return true;
        }
      }

      return false;
    };

    if (self.text() == null) {
      selectorFunction = function selectorFunction() {
        return true;
      };
    }

    return collection.filter(selectorFunction);
  }; // filter
  // does selector match a single element?


  var matches$1 = function matches$1(ele) {
    var self = this;

    for (var j = 0; j < self.length; j++) {
      var query = self[j];

      if (matches(query, ele)) {
        return true;
      }
    }

    return false;
  }; // matches


  var matching = {
    matches: matches$1,
    filter: filter
  };

  var Selector = function Selector(selector) {
    this.inputText = selector;
    this.currentSubject = null;
    this.compoundCount = 0;
    this.edgeCount = 0;
    this.length = 0;

    if (selector == null || string(selector) && selector.match(/^\s*$/)) ; else if (elementOrCollection(selector)) {
      this.addQuery({
        checks: [{
          type: Type.COLLECTION,
          value: selector.collection()
        }]
      });
    } else if (fn(selector)) {
      this.addQuery({
        checks: [{
          type: Type.FILTER,
          value: selector
        }]
      });
    } else if (string(selector)) {
      if (!this.parse(selector)) {
        this.invalid = true;
      }
    } else {
      error('A selector must be created from a string; found ');
    }
  };

  var selfn = Selector.prototype;
  [parse$1, matching].forEach(function (p) {
    return extend(selfn, p);
  });

  selfn.text = function () {
    return this.inputText;
  };

  selfn.size = function () {
    return this.length;
  };

  selfn.eq = function (i) {
    return this[i];
  };

  selfn.sameText = function (otherSel) {
    return !this.invalid && !otherSel.invalid && this.text() === otherSel.text();
  };

  selfn.addQuery = function (q) {
    this[this.length++] = q;
  };

  selfn.selector = selfn.toString;

  var elesfn$f = {
    allAre: function allAre(selector) {
      var selObj = new Selector(selector);
      return this.every(function (ele) {
        return selObj.matches(ele);
      });
    },
    is: function is(selector) {
      var selObj = new Selector(selector);
      return this.some(function (ele) {
        return selObj.matches(ele);
      });
    },
    some: function some(fn, thisArg) {
      for (var i = 0; i < this.length; i++) {
        var ret = !thisArg ? fn(this[i], i, this) : fn.apply(thisArg, [this[i], i, this]);

        if (ret) {
          return true;
        }
      }

      return false;
    },
    every: function every(fn, thisArg) {
      for (var i = 0; i < this.length; i++) {
        var ret = !thisArg ? fn(this[i], i, this) : fn.apply(thisArg, [this[i], i, this]);

        if (!ret) {
          return false;
        }
      }

      return true;
    },
    same: function same(collection) {
      // cheap collection ref check
      if (this === collection) {
        return true;
      }

      collection = this.cy().collection(collection);
      var thisLength = this.length;
      var collectionLength = collection.length; // cheap length check

      if (thisLength !== collectionLength) {
        return false;
      } // cheap element ref check


      if (thisLength === 1) {
        return this[0] === collection[0];
      }

      return this.every(function (ele) {
        return collection.hasElementWithId(ele.id());
      });
    },
    anySame: function anySame(collection) {
      collection = this.cy().collection(collection);
      return this.some(function (ele) {
        return collection.hasElementWithId(ele.id());
      });
    },
    allAreNeighbors: function allAreNeighbors(collection) {
      collection = this.cy().collection(collection);
      var nhood = this.neighborhood();
      return collection.every(function (ele) {
        return nhood.hasElementWithId(ele.id());
      });
    },
    contains: function contains(collection) {
      collection = this.cy().collection(collection);
      var self = this;
      return collection.every(function (ele) {
        return self.hasElementWithId(ele.id());
      });
    }
  };
  elesfn$f.allAreNeighbours = elesfn$f.allAreNeighbors;
  elesfn$f.has = elesfn$f.contains;
  elesfn$f.equal = elesfn$f.equals = elesfn$f.same;

  var cache = function cache(fn, name) {
    return function traversalCache(arg1, arg2, arg3, arg4) {
      var selectorOrEles = arg1;
      var eles = this;
      var key;

      if (selectorOrEles == null) {
        key = '';
      } else if (elementOrCollection(selectorOrEles) && selectorOrEles.length === 1) {
        key = selectorOrEles.id();
      }

      if (eles.length === 1 && key) {
        var _p = eles[0]._private;
        var tch = _p.traversalCache = _p.traversalCache || {};
        var ch = tch[name] = tch[name] || [];
        var hash = hashString(key);
        var cacheHit = ch[hash];

        if (cacheHit) {
          return cacheHit;
        } else {
          return ch[hash] = fn.call(eles, arg1, arg2, arg3, arg4);
        }
      } else {
        return fn.call(eles, arg1, arg2, arg3, arg4);
      }
    };
  };

  var elesfn$g = {
    parent: function parent(selector) {
      var parents = []; // optimisation for single ele call

      if (this.length === 1) {
        var parent = this[0]._private.parent;

        if (parent) {
          return parent;
        }
      }

      for (var i = 0; i < this.length; i++) {
        var ele = this[i];
        var _parent = ele._private.parent;

        if (_parent) {
          parents.push(_parent);
        }
      }

      return this.spawn(parents, {
        unique: true
      }).filter(selector);
    },
    parents: function parents(selector) {
      var parents = [];
      var eles = this.parent();

      while (eles.nonempty()) {
        for (var i = 0; i < eles.length; i++) {
          var ele = eles[i];
          parents.push(ele);
        }

        eles = eles.parent();
      }

      return this.spawn(parents, {
        unique: true
      }).filter(selector);
    },
    commonAncestors: function commonAncestors(selector) {
      var ancestors;

      for (var i = 0; i < this.length; i++) {
        var ele = this[i];
        var parents = ele.parents();
        ancestors = ancestors || parents;
        ancestors = ancestors.intersect(parents); // current list must be common with current ele parents set
      }

      return ancestors.filter(selector);
    },
    orphans: function orphans(selector) {
      return this.stdFilter(function (ele) {
        return ele.isOrphan();
      }).filter(selector);
    },
    nonorphans: function nonorphans(selector) {
      return this.stdFilter(function (ele) {
        return ele.isChild();
      }).filter(selector);
    },
    children: cache(function (selector) {
      var children = [];

      for (var i = 0; i < this.length; i++) {
        var ele = this[i];
        var eleChildren = ele._private.children;

        for (var j = 0; j < eleChildren.length; j++) {
          children.push(eleChildren[j]);
        }
      }

      return this.spawn(children, {
        unique: true
      }).filter(selector);
    }, 'children'),
    siblings: function siblings(selector) {
      return this.parent().children().not(this).filter(selector);
    },
    isParent: function isParent() {
      var ele = this[0];

      if (ele) {
        return ele.isNode() && ele._private.children.length !== 0;
      }
    },
    isChildless: function isChildless() {
      var ele = this[0];

      if (ele) {
        return ele.isNode() && ele._private.children.length === 0;
      }
    },
    isChild: function isChild() {
      var ele = this[0];

      if (ele) {
        return ele.isNode() && ele._private.parent != null;
      }
    },
    isOrphan: function isOrphan() {
      var ele = this[0];

      if (ele) {
        return ele.isNode() && ele._private.parent == null;
      }
    },
    descendants: function descendants(selector) {
      var elements = [];

      function add(eles) {
        for (var i = 0; i < eles.length; i++) {
          var ele = eles[i];
          elements.push(ele);

          if (ele.children().nonempty()) {
            add(ele.children());
          }
        }
      }

      add(this.children());
      return this.spawn(elements, {
        unique: true
      }).filter(selector);
    }
  };

  function forEachCompound(eles, fn, includeSelf, recursiveStep) {
    var q = [];
    var did = new Set$1();
    var cy = eles.cy();
    var hasCompounds = cy.hasCompoundNodes();

    for (var i = 0; i < eles.length; i++) {
      var ele = eles[i];

      if (includeSelf) {
        q.push(ele);
      } else if (hasCompounds) {
        recursiveStep(q, did, ele);
      }
    }

    while (q.length > 0) {
      var _ele = q.shift();

      fn(_ele);
      did.add(_ele.id());

      if (hasCompounds) {
        recursiveStep(q, did, _ele);
      }
    }

    return eles;
  }

  function addChildren(q, did, ele) {
    if (ele.isParent()) {
      var children = ele._private.children;

      for (var i = 0; i < children.length; i++) {
        var child = children[i];

        if (!did.has(child.id())) {
          q.push(child);
        }
      }
    }
  } // very efficient version of eles.add( eles.descendants() ).forEach()
  // for internal use


  elesfn$g.forEachDown = function (fn) {
    var includeSelf = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    return forEachCompound(this, fn, includeSelf, addChildren);
  };

  function addParent(q, did, ele) {
    if (ele.isChild()) {
      var parent = ele._private.parent;

      if (!did.has(parent.id())) {
        q.push(parent);
      }
    }
  }

  elesfn$g.forEachUp = function (fn) {
    var includeSelf = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    return forEachCompound(this, fn, includeSelf, addParent);
  };

  function addParentAndChildren(q, did, ele) {
    addParent(q, did, ele);
    addChildren(q, did, ele);
  }

  elesfn$g.forEachUpAndDown = function (fn) {
    var includeSelf = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    return forEachCompound(this, fn, includeSelf, addParentAndChildren);
  }; // aliases


  elesfn$g.ancestors = elesfn$g.parents;

  var fn$1, elesfn$h;
  fn$1 = elesfn$h = {
    data: define$3.data({
      field: 'data',
      bindingEvent: 'data',
      allowBinding: true,
      allowSetting: true,
      settingEvent: 'data',
      settingTriggersEvent: true,
      triggerFnName: 'trigger',
      allowGetting: true,
      immutableKeys: {
        'id': true,
        'source': true,
        'target': true,
        'parent': true
      },
      updateStyle: true
    }),
    removeData: define$3.removeData({
      field: 'data',
      event: 'data',
      triggerFnName: 'trigger',
      triggerEvent: true,
      immutableKeys: {
        'id': true,
        'source': true,
        'target': true,
        'parent': true
      },
      updateStyle: true
    }),
    scratch: define$3.data({
      field: 'scratch',
      bindingEvent: 'scratch',
      allowBinding: true,
      allowSetting: true,
      settingEvent: 'scratch',
      settingTriggersEvent: true,
      triggerFnName: 'trigger',
      allowGetting: true,
      updateStyle: true
    }),
    removeScratch: define$3.removeData({
      field: 'scratch',
      event: 'scratch',
      triggerFnName: 'trigger',
      triggerEvent: true,
      updateStyle: true
    }),
    rscratch: define$3.data({
      field: 'rscratch',
      allowBinding: false,
      allowSetting: true,
      settingTriggersEvent: false,
      allowGetting: true
    }),
    removeRscratch: define$3.removeData({
      field: 'rscratch',
      triggerEvent: false
    }),
    id: function id() {
      var ele = this[0];

      if (ele) {
        return ele._private.data.id;
      }
    }
  }; // aliases

  fn$1.attr = fn$1.data;
  fn$1.removeAttr = fn$1.removeData;
  var data$1 = elesfn$h;

  var elesfn$i = {};

  function defineDegreeFunction(callback) {
    return function (includeLoops) {
      var self = this;

      if (includeLoops === undefined) {
        includeLoops = true;
      }

      if (self.length === 0) {
        return;
      }

      if (self.isNode() && !self.removed()) {
        var degree = 0;
        var node = self[0];
        var connectedEdges = node._private.edges;

        for (var i = 0; i < connectedEdges.length; i++) {
          var edge = connectedEdges[i];

          if (!includeLoops && edge.isLoop()) {
            continue;
          }

          degree += callback(node, edge);
        }

        return degree;
      } else {
        return;
      }
    };
  }

  extend(elesfn$i, {
    degree: defineDegreeFunction(function (node, edge) {
      if (edge.source().same(edge.target())) {
        return 2;
      } else {
        return 1;
      }
    }),
    indegree: defineDegreeFunction(function (node, edge) {
      if (edge.target().same(node)) {
        return 1;
      } else {
        return 0;
      }
    }),
    outdegree: defineDegreeFunction(function (node, edge) {
      if (edge.source().same(node)) {
        return 1;
      } else {
        return 0;
      }
    })
  });

  function defineDegreeBoundsFunction(degreeFn, callback) {
    return function (includeLoops) {
      var ret;
      var nodes = this.nodes();

      for (var i = 0; i < nodes.length; i++) {
        var ele = nodes[i];
        var degree = ele[degreeFn](includeLoops);

        if (degree !== undefined && (ret === undefined || callback(degree, ret))) {
          ret = degree;
        }
      }

      return ret;
    };
  }

  extend(elesfn$i, {
    minDegree: defineDegreeBoundsFunction('degree', function (degree, min) {
      return degree < min;
    }),
    maxDegree: defineDegreeBoundsFunction('degree', function (degree, max) {
      return degree > max;
    }),
    minIndegree: defineDegreeBoundsFunction('indegree', function (degree, min) {
      return degree < min;
    }),
    maxIndegree: defineDegreeBoundsFunction('indegree', function (degree, max) {
      return degree > max;
    }),
    minOutdegree: defineDegreeBoundsFunction('outdegree', function (degree, min) {
      return degree < min;
    }),
    maxOutdegree: defineDegreeBoundsFunction('outdegree', function (degree, max) {
      return degree > max;
    })
  });
  extend(elesfn$i, {
    totalDegree: function totalDegree(includeLoops) {
      var total = 0;
      var nodes = this.nodes();

      for (var i = 0; i < nodes.length; i++) {
        total += nodes[i].degree(includeLoops);
      }

      return total;
    }
  });

  var fn$2, elesfn$j;

  var beforePositionSet = function beforePositionSet(eles, newPos, silent) {
    for (var i = 0; i < eles.length; i++) {
      var ele = eles[i];

      if (!ele.locked()) {
        var oldPos = ele._private.position;
        var delta = {
          x: newPos.x != null ? newPos.x - oldPos.x : 0,
          y: newPos.y != null ? newPos.y - oldPos.y : 0
        };

        if (ele.isParent() && !(delta.x === 0 && delta.y === 0)) {
          ele.children().shift(delta, silent);
        }

        ele.shiftCachedBoundingBox(delta);
      }
    }
  };

  var positionDef = {
    field: 'position',
    bindingEvent: 'position',
    allowBinding: true,
    allowSetting: true,
    settingEvent: 'position',
    settingTriggersEvent: true,
    triggerFnName: 'emitAndNotify',
    allowGetting: true,
    validKeys: ['x', 'y'],
    beforeGet: function beforeGet(ele) {
      ele.updateCompoundBounds();
    },
    beforeSet: function beforeSet(eles, newPos) {
      beforePositionSet(eles, newPos, false);
    },
    onSet: function onSet(eles) {
      eles.dirtyCompoundBoundsCache();
    },
    canSet: function canSet(ele) {
      return !ele.locked();
    }
  };
  fn$2 = elesfn$j = {
    position: define$3.data(positionDef),
    // position but no notification to renderer
    silentPosition: define$3.data(extend({}, positionDef, {
      allowBinding: false,
      allowSetting: true,
      settingTriggersEvent: false,
      allowGetting: false,
      beforeSet: function beforeSet(eles, newPos) {
        beforePositionSet(eles, newPos, true);
      }
    })),
    positions: function positions(pos, silent) {
      if (plainObject(pos)) {
        if (silent) {
          this.silentPosition(pos);
        } else {
          this.position(pos);
        }
      } else if (fn(pos)) {
        var _fn = pos;
        var cy = this.cy();
        cy.startBatch();

        for (var i = 0; i < this.length; i++) {
          var ele = this[i];

          var _pos = void 0;

          if (_pos = _fn(ele, i)) {
            if (silent) {
              ele.silentPosition(_pos);
            } else {
              ele.position(_pos);
            }
          }
        }

        cy.endBatch();
      }

      return this; // chaining
    },
    silentPositions: function silentPositions(pos) {
      return this.positions(pos, true);
    },
    shift: function shift(dim, val, silent) {
      var delta;

      if (plainObject(dim)) {
        delta = {
          x: number(dim.x) ? dim.x : 0,
          y: number(dim.y) ? dim.y : 0
        };
        silent = val;
      } else if (string(dim) && number(val)) {
        delta = {
          x: 0,
          y: 0
        };
        delta[dim] = val;
      }

      if (delta != null) {
        var cy = this.cy();
        cy.startBatch();

        for (var i = 0; i < this.length; i++) {
          var ele = this[i];
          var pos = ele.position();
          var newPos = {
            x: pos.x + delta.x,
            y: pos.y + delta.y
          };

          if (silent) {
            ele.silentPosition(newPos);
          } else {
            ele.position(newPos);
          }
        }

        cy.endBatch();
      }

      return this;
    },
    silentShift: function silentShift(dim, val) {
      if (plainObject(dim)) {
        this.shift(dim, true);
      } else if (string(dim) && number(val)) {
        this.shift(dim, val, true);
      }

      return this;
    },
    // get/set the rendered (i.e. on screen) positon of the element
    renderedPosition: function renderedPosition(dim, val) {
      var ele = this[0];
      var cy = this.cy();
      var zoom = cy.zoom();
      var pan = cy.pan();
      var rpos = plainObject(dim) ? dim : undefined;
      var setting = rpos !== undefined || val !== undefined && string(dim);

      if (ele && ele.isNode()) {
        // must have an element and must be a node to return position
        if (setting) {
          for (var i = 0; i < this.length; i++) {
            var _ele = this[i];

            if (val !== undefined) {
              // set one dimension
              _ele.position(dim, (val - pan[dim]) / zoom);
            } else if (rpos !== undefined) {
              // set whole position
              _ele.position(renderedToModelPosition(rpos, zoom, pan));
            }
          }
        } else {
          // getting
          var pos = ele.position();
          rpos = modelToRenderedPosition(pos, zoom, pan);

          if (dim === undefined) {
            // then return the whole rendered position
            return rpos;
          } else {
            // then return the specified dimension
            return rpos[dim];
          }
        }
      } else if (!setting) {
        return undefined; // for empty collection case
      }

      return this; // chaining
    },
    // get/set the position relative to the parent
    relativePosition: function relativePosition(dim, val) {
      var ele = this[0];
      var cy = this.cy();
      var ppos = plainObject(dim) ? dim : undefined;
      var setting = ppos !== undefined || val !== undefined && string(dim);
      var hasCompoundNodes = cy.hasCompoundNodes();

      if (ele && ele.isNode()) {
        // must have an element and must be a node to return position
        if (setting) {
          for (var i = 0; i < this.length; i++) {
            var _ele2 = this[i];
            var parent = hasCompoundNodes ? _ele2.parent() : null;
            var hasParent = parent && parent.length > 0;
            var relativeToParent = hasParent;

            if (hasParent) {
              parent = parent[0];
            }

            var origin = relativeToParent ? parent.position() : {
              x: 0,
              y: 0
            };

            if (val !== undefined) {
              // set one dimension
              _ele2.position(dim, val + origin[dim]);
            } else if (ppos !== undefined) {
              // set whole position
              _ele2.position({
                x: ppos.x + origin.x,
                y: ppos.y + origin.y
              });
            }
          }
        } else {
          // getting
          var pos = ele.position();

          var _parent = hasCompoundNodes ? ele.parent() : null;

          var _hasParent = _parent && _parent.length > 0;

          var _relativeToParent = _hasParent;

          if (_hasParent) {
            _parent = _parent[0];
          }

          var _origin = _relativeToParent ? _parent.position() : {
            x: 0,
            y: 0
          };

          ppos = {
            x: pos.x - _origin.x,
            y: pos.y - _origin.y
          };

          if (dim === undefined) {
            // then return the whole rendered position
            return ppos;
          } else {
            // then return the specified dimension
            return ppos[dim];
          }
        }
      } else if (!setting) {
        return undefined; // for empty collection case
      }

      return this; // chaining
    }
  }; // aliases

  fn$2.modelPosition = fn$2.point = fn$2.position;
  fn$2.modelPositions = fn$2.points = fn$2.positions;
  fn$2.renderedPoint = fn$2.renderedPosition;
  fn$2.relativePoint = fn$2.relativePosition;
  var position = elesfn$j;

  var fn$3, elesfn$k;
  fn$3 = elesfn$k = {};

  elesfn$k.renderedBoundingBox = function (options) {
    var bb = this.boundingBox(options);
    var cy = this.cy();
    var zoom = cy.zoom();
    var pan = cy.pan();
    var x1 = bb.x1 * zoom + pan.x;
    var x2 = bb.x2 * zoom + pan.x;
    var y1 = bb.y1 * zoom + pan.y;
    var y2 = bb.y2 * zoom + pan.y;
    return {
      x1: x1,
      x2: x2,
      y1: y1,
      y2: y2,
      w: x2 - x1,
      h: y2 - y1
    };
  };

  elesfn$k.dirtyCompoundBoundsCache = function () {
    var cy = this.cy();

    if (!cy.styleEnabled() || !cy.hasCompoundNodes()) {
      return this;
    }

    this.forEachUp(function (ele) {
      if (ele.isParent()) {
        var _p = ele._private;
        _p.compoundBoundsClean = false;
        _p.bbCache = null;
        ele.emitAndNotify('bounds');
      }
    });
    return this;
  };

  elesfn$k.updateCompoundBounds = function () {
    var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    var cy = this.cy(); // not possible to do on non-compound graphs or with the style disabled

    if (!cy.styleEnabled() || !cy.hasCompoundNodes()) {
      return this;
    } // save cycles when batching -- but bounds will be stale (or not exist yet)


    if (!force && cy.batching()) {
      return this;
    }

    function update(parent) {
      if (!parent.isParent()) {
        return;
      }

      var _p = parent._private;
      var children = parent.children();
      var includeLabels = parent.pstyle('compound-sizing-wrt-labels').value === 'include';
      var min = {
        width: {
          val: parent.pstyle('min-width').pfValue,
          left: parent.pstyle('min-width-bias-left'),
          right: parent.pstyle('min-width-bias-right')
        },
        height: {
          val: parent.pstyle('min-height').pfValue,
          top: parent.pstyle('min-height-bias-top'),
          bottom: parent.pstyle('min-height-bias-bottom')
        }
      };
      var bb = children.boundingBox({
        includeLabels: includeLabels,
        includeOverlays: false,
        // updating the compound bounds happens outside of the regular
        // cache cycle (i.e. before fired events)
        useCache: false
      });
      var pos = _p.position; // if children take up zero area then keep position and fall back on stylesheet w/h

      if (bb.w === 0 || bb.h === 0) {
        bb = {
          w: parent.pstyle('width').pfValue,
          h: parent.pstyle('height').pfValue
        };
        bb.x1 = pos.x - bb.w / 2;
        bb.x2 = pos.x + bb.w / 2;
        bb.y1 = pos.y - bb.h / 2;
        bb.y2 = pos.y + bb.h / 2;
      }

      function computeBiasValues(propDiff, propBias, propBiasComplement) {
        var biasDiff = 0;
        var biasComplementDiff = 0;
        var biasTotal = propBias + propBiasComplement;

        if (propDiff > 0 && biasTotal > 0) {
          biasDiff = propBias / biasTotal * propDiff;
          biasComplementDiff = propBiasComplement / biasTotal * propDiff;
        }

        return {
          biasDiff: biasDiff,
          biasComplementDiff: biasComplementDiff
        };
      }

      function computePaddingValues(width, height, paddingObject, relativeTo) {
        // Assuming percentage is number from 0 to 1
        if (paddingObject.units === '%') {
          switch (relativeTo) {
            case 'width':
              return width > 0 ? paddingObject.pfValue * width : 0;

            case 'height':
              return height > 0 ? paddingObject.pfValue * height : 0;

            case 'average':
              return width > 0 && height > 0 ? paddingObject.pfValue * (width + height) / 2 : 0;

            case 'min':
              return width > 0 && height > 0 ? width > height ? paddingObject.pfValue * height : paddingObject.pfValue * width : 0;

            case 'max':
              return width > 0 && height > 0 ? width > height ? paddingObject.pfValue * width : paddingObject.pfValue * height : 0;

            default:
              return 0;
          }
        } else if (paddingObject.units === 'px') {
          return paddingObject.pfValue;
        } else {
          return 0;
        }
      }

      var leftVal = min.width.left.value;

      if (min.width.left.units === 'px' && min.width.val > 0) {
        leftVal = leftVal * 100 / min.width.val;
      }

      var rightVal = min.width.right.value;

      if (min.width.right.units === 'px' && min.width.val > 0) {
        rightVal = rightVal * 100 / min.width.val;
      }

      var topVal = min.height.top.value;

      if (min.height.top.units === 'px' && min.height.val > 0) {
        topVal = topVal * 100 / min.height.val;
      }

      var bottomVal = min.height.bottom.value;

      if (min.height.bottom.units === 'px' && min.height.val > 0) {
        bottomVal = bottomVal * 100 / min.height.val;
      }

      var widthBiasDiffs = computeBiasValues(min.width.val - bb.w, leftVal, rightVal);
      var diffLeft = widthBiasDiffs.biasDiff;
      var diffRight = widthBiasDiffs.biasComplementDiff;
      var heightBiasDiffs = computeBiasValues(min.height.val - bb.h, topVal, bottomVal);
      var diffTop = heightBiasDiffs.biasDiff;
      var diffBottom = heightBiasDiffs.biasComplementDiff;
      _p.autoPadding = computePaddingValues(bb.w, bb.h, parent.pstyle('padding'), parent.pstyle('padding-relative-to').value);
      _p.autoWidth = Math.max(bb.w, min.width.val);
      pos.x = (-diffLeft + bb.x1 + bb.x2 + diffRight) / 2;
      _p.autoHeight = Math.max(bb.h, min.height.val);
      pos.y = (-diffTop + bb.y1 + bb.y2 + diffBottom) / 2;
    }

    for (var i = 0; i < this.length; i++) {
      var ele = this[i];
      var _p = ele._private;

      if (!_p.compoundBoundsClean) {
        update(ele);

        if (!cy.batching()) {
          _p.compoundBoundsClean = true;
        }
      }
    }

    return this;
  };

  var noninf = function noninf(x) {
    if (x === Infinity || x === -Infinity) {
      return 0;
    }

    return x;
  };

  var updateBounds = function updateBounds(b, x1, y1, x2, y2) {
    // don't update with zero area boxes
    if (x2 - x1 === 0 || y2 - y1 === 0) {
      return;
    } // don't update with null dim


    if (x1 == null || y1 == null || x2 == null || y2 == null) {
      return;
    }

    b.x1 = x1 < b.x1 ? x1 : b.x1;
    b.x2 = x2 > b.x2 ? x2 : b.x2;
    b.y1 = y1 < b.y1 ? y1 : b.y1;
    b.y2 = y2 > b.y2 ? y2 : b.y2;
    b.w = b.x2 - b.x1;
    b.h = b.y2 - b.y1;
  };

  var updateBoundsFromBox = function updateBoundsFromBox(b, b2) {
    if (b2 == null) {
      return b;
    }

    return updateBounds(b, b2.x1, b2.y1, b2.x2, b2.y2);
  };

  var prefixedProperty = function prefixedProperty(obj, field, prefix) {
    return getPrefixedProperty(obj, field, prefix);
  };

  var updateBoundsFromArrow = function updateBoundsFromArrow(bounds, ele, prefix) {
    if (ele.cy().headless()) {
      return;
    }

    var _p = ele._private;
    var rstyle = _p.rstyle;
    var halfArW = rstyle.arrowWidth / 2;
    var arrowType = ele.pstyle(prefix + '-arrow-shape').value;
    var x;
    var y;

    if (arrowType !== 'none') {
      if (prefix === 'source') {
        x = rstyle.srcX;
        y = rstyle.srcY;
      } else if (prefix === 'target') {
        x = rstyle.tgtX;
        y = rstyle.tgtY;
      } else {
        x = rstyle.midX;
        y = rstyle.midY;
      } // always store the individual arrow bounds


      var bbs = _p.arrowBounds = _p.arrowBounds || {};
      var bb = bbs[prefix] = bbs[prefix] || {};
      bb.x1 = x - halfArW;
      bb.y1 = y - halfArW;
      bb.x2 = x + halfArW;
      bb.y2 = y + halfArW;
      bb.w = bb.x2 - bb.x1;
      bb.h = bb.y2 - bb.y1;
      expandBoundingBox(bb, 1);
      updateBounds(bounds, bb.x1, bb.y1, bb.x2, bb.y2);
    }
  };

  var updateBoundsFromLabel = function updateBoundsFromLabel(bounds, ele, prefix) {
    if (ele.cy().headless()) {
      return;
    }

    var prefixDash;

    if (prefix) {
      prefixDash = prefix + '-';
    } else {
      prefixDash = '';
    }

    var _p = ele._private;
    var rstyle = _p.rstyle;
    var label = ele.pstyle(prefixDash + 'label').strValue;

    if (label) {
      var halign = ele.pstyle('text-halign');
      var valign = ele.pstyle('text-valign');
      var labelWidth = prefixedProperty(rstyle, 'labelWidth', prefix);
      var labelHeight = prefixedProperty(rstyle, 'labelHeight', prefix);
      var labelX = prefixedProperty(rstyle, 'labelX', prefix);
      var labelY = prefixedProperty(rstyle, 'labelY', prefix);
      var marginX = ele.pstyle(prefixDash + 'text-margin-x').pfValue;
      var marginY = ele.pstyle(prefixDash + 'text-margin-y').pfValue;
      var isEdge = ele.isEdge();
      var rotation = ele.pstyle(prefixDash + 'text-rotation');
      var outlineWidth = ele.pstyle('text-outline-width').pfValue;
      var borderWidth = ele.pstyle('text-border-width').pfValue;
      var halfBorderWidth = borderWidth / 2;
      var padding = ele.pstyle('text-background-padding').pfValue;
      var lh = labelHeight;
      var lw = labelWidth;
      var lw_2 = lw / 2;
      var lh_2 = lh / 2;
      var lx1, lx2, ly1, ly2;

      if (isEdge) {
        lx1 = labelX - lw_2;
        lx2 = labelX + lw_2;
        ly1 = labelY - lh_2;
        ly2 = labelY + lh_2;
      } else {
        switch (halign.value) {
          case 'left':
            lx1 = labelX - lw;
            lx2 = labelX;
            break;

          case 'center':
            lx1 = labelX - lw_2;
            lx2 = labelX + lw_2;
            break;

          case 'right':
            lx1 = labelX;
            lx2 = labelX + lw;
            break;
        }

        switch (valign.value) {
          case 'top':
            ly1 = labelY - lh;
            ly2 = labelY;
            break;

          case 'center':
            ly1 = labelY - lh_2;
            ly2 = labelY + lh_2;
            break;

          case 'bottom':
            ly1 = labelY;
            ly2 = labelY + lh;
            break;
        }
      } // shift by margin and expand by outline and border


      lx1 += marginX - Math.max(outlineWidth, halfBorderWidth) - padding;
      lx2 += marginX + Math.max(outlineWidth, halfBorderWidth) + padding;
      ly1 += marginY - Math.max(outlineWidth, halfBorderWidth) - padding;
      ly2 += marginY + Math.max(outlineWidth, halfBorderWidth) + padding; // always store the unrotated label bounds separately

      var bbPrefix = prefix || 'main';
      var bbs = _p.labelBounds;
      var bb = bbs[bbPrefix] = bbs[bbPrefix] || {};
      bb.x1 = lx1;
      bb.y1 = ly1;
      bb.x2 = lx2;
      bb.y2 = ly2;
      bb.w = lx2 - lx1;
      bb.h = ly2 - ly1;
      expandBoundingBox(bb, 1); // expand to work around browser dimension inaccuracies

      var isAutorotate = isEdge && rotation.strValue === 'autorotate';
      var isPfValue = rotation.pfValue != null && rotation.pfValue !== 0;

      if (isAutorotate || isPfValue) {
        var theta = isAutorotate ? prefixedProperty(_p.rstyle, 'labelAngle', prefix) : rotation.pfValue;
        var cos = Math.cos(theta);
        var sin = Math.sin(theta); // rotation point (default value for center-center)

        var xo = (lx1 + lx2) / 2;
        var yo = (ly1 + ly2) / 2;

        if (!isEdge) {
          switch (halign.value) {
            case 'left':
              xo = lx2;
              break;

            case 'right':
              xo = lx1;
              break;
          }

          switch (valign.value) {
            case 'top':
              yo = ly2;
              break;

            case 'bottom':
              yo = ly1;
              break;
          }
        }

        var rotate = function rotate(x, y) {
          x = x - xo;
          y = y - yo;
          return {
            x: x * cos - y * sin + xo,
            y: x * sin + y * cos + yo
          };
        };

        var px1y1 = rotate(lx1, ly1);
        var px1y2 = rotate(lx1, ly2);
        var px2y1 = rotate(lx2, ly1);
        var px2y2 = rotate(lx2, ly2);
        lx1 = Math.min(px1y1.x, px1y2.x, px2y1.x, px2y2.x);
        lx2 = Math.max(px1y1.x, px1y2.x, px2y1.x, px2y2.x);
        ly1 = Math.min(px1y1.y, px1y2.y, px2y1.y, px2y2.y);
        ly2 = Math.max(px1y1.y, px1y2.y, px2y1.y, px2y2.y);
      }

      var bbPrefixRot = bbPrefix + 'Rot';
      var bbRot = bbs[bbPrefixRot] = bbs[bbPrefixRot] || {};
      bbRot.x1 = lx1;
      bbRot.y1 = ly1;
      bbRot.x2 = lx2;
      bbRot.y2 = ly2;
      bbRot.w = lx2 - lx1;
      bbRot.h = ly2 - ly1;
      updateBounds(bounds, lx1, ly1, lx2, ly2);
      updateBounds(_p.labelBounds.all, lx1, ly1, lx2, ly2);
    }

    return bounds;
  }; // get the bounding box of the elements (in raw model position)


  var boundingBoxImpl = function boundingBoxImpl(ele, options) {
    var cy = ele._private.cy;
    var styleEnabled = cy.styleEnabled();
    var headless = cy.headless();
    var bounds = makeBoundingBox();
    var _p = ele._private;
    var isNode = ele.isNode();
    var isEdge = ele.isEdge();
    var ex1, ex2, ey1, ey2; // extrema of body / lines

    var x, y; // node pos

    var rstyle = _p.rstyle;
    var manualExpansion = isNode && styleEnabled ? ele.pstyle('bounds-expansion').pfValue : [0]; // must use `display` prop only, as reading `compound.width()` causes recursion
    // (other factors like width values will be considered later in this function anyway)

    var isDisplayed = function isDisplayed(ele) {
      return ele.pstyle('display').value !== 'none';
    };

    var displayed = !styleEnabled || isDisplayed(ele) // must take into account connected nodes b/c of implicit edge hiding on display:none node
    && (!isEdge || isDisplayed(ele.source()) && isDisplayed(ele.target()));

    if (displayed) {
      // displayed suffices, since we will find zero area eles anyway
      var overlayOpacity = 0;
      var overlayPadding = 0;

      if (styleEnabled && options.includeOverlays) {
        overlayOpacity = ele.pstyle('overlay-opacity').value;

        if (overlayOpacity !== 0) {
          overlayPadding = ele.pstyle('overlay-padding').value;
        }
      }

      var w = 0;
      var wHalf = 0;

      if (styleEnabled) {
        w = ele.pstyle('width').pfValue;
        wHalf = w / 2;
      }

      if (isNode && options.includeNodes) {
        var pos = ele.position();
        x = pos.x;
        y = pos.y;

        var _w = ele.outerWidth();

        var halfW = _w / 2;
        var h = ele.outerHeight();
        var halfH = h / 2; // handle node dimensions
        /////////////////////////

        ex1 = x - halfW;
        ex2 = x + halfW;
        ey1 = y - halfH;
        ey2 = y + halfH;
        updateBounds(bounds, ex1, ey1, ex2, ey2);
      } else if (isEdge && options.includeEdges) {
        if (styleEnabled && !headless) {
          var curveStyle = ele.pstyle('curve-style').strValue; // handle edge dimensions (rough box estimate)
          //////////////////////////////////////////////

          ex1 = Math.min(rstyle.srcX, rstyle.midX, rstyle.tgtX);
          ex2 = Math.max(rstyle.srcX, rstyle.midX, rstyle.tgtX);
          ey1 = Math.min(rstyle.srcY, rstyle.midY, rstyle.tgtY);
          ey2 = Math.max(rstyle.srcY, rstyle.midY, rstyle.tgtY); // take into account edge width

          ex1 -= wHalf;
          ex2 += wHalf;
          ey1 -= wHalf;
          ey2 += wHalf;
          updateBounds(bounds, ex1, ey1, ex2, ey2); // precise edges
          ////////////////

          if (curveStyle === 'haystack') {
            var hpts = rstyle.haystackPts;

            if (hpts && hpts.length === 2) {
              ex1 = hpts[0].x;
              ey1 = hpts[0].y;
              ex2 = hpts[1].x;
              ey2 = hpts[1].y;

              if (ex1 > ex2) {
                var temp = ex1;
                ex1 = ex2;
                ex2 = temp;
              }

              if (ey1 > ey2) {
                var _temp = ey1;
                ey1 = ey2;
                ey2 = _temp;
              }

              updateBounds(bounds, ex1 - wHalf, ey1 - wHalf, ex2 + wHalf, ey2 + wHalf);
            }
          } else if (curveStyle === 'bezier' || curveStyle === 'unbundled-bezier' || curveStyle === 'segments' || curveStyle === 'taxi') {
            var pts;

            switch (curveStyle) {
              case 'bezier':
              case 'unbundled-bezier':
                pts = rstyle.bezierPts;
                break;

              case 'segments':
              case 'taxi':
                pts = rstyle.linePts;
                break;
            }

            if (pts != null) {
              for (var j = 0; j < pts.length; j++) {
                var pt = pts[j];
                ex1 = pt.x - wHalf;
                ex2 = pt.x + wHalf;
                ey1 = pt.y - wHalf;
                ey2 = pt.y + wHalf;
                updateBounds(bounds, ex1, ey1, ex2, ey2);
              }
            }
          } // bezier-like or segment-like edge

        } else {
          // headless or style disabled
          // fallback on source and target positions
          //////////////////////////////////////////
          var n1 = ele.source();
          var n1pos = n1.position();
          var n2 = ele.target();
          var n2pos = n2.position();
          ex1 = n1pos.x;
          ex2 = n2pos.x;
          ey1 = n1pos.y;
          ey2 = n2pos.y;

          if (ex1 > ex2) {
            var _temp2 = ex1;
            ex1 = ex2;
            ex2 = _temp2;
          }

          if (ey1 > ey2) {
            var _temp3 = ey1;
            ey1 = ey2;
            ey2 = _temp3;
          } // take into account edge width


          ex1 -= wHalf;
          ex2 += wHalf;
          ey1 -= wHalf;
          ey2 += wHalf;
          updateBounds(bounds, ex1, ey1, ex2, ey2);
        } // headless or style disabled

      } // edges
      // handle edge arrow size
      /////////////////////////


      if (styleEnabled && options.includeEdges && isEdge) {
        updateBoundsFromArrow(bounds, ele, 'mid-source');
        updateBoundsFromArrow(bounds, ele, 'mid-target');
        updateBoundsFromArrow(bounds, ele, 'source');
        updateBoundsFromArrow(bounds, ele, 'target');
      } // ghost
      ////////


      if (styleEnabled) {
        var ghost = ele.pstyle('ghost').value === 'yes';

        if (ghost) {
          var gx = ele.pstyle('ghost-offset-x').pfValue;
          var gy = ele.pstyle('ghost-offset-y').pfValue;
          updateBounds(bounds, bounds.x1 + gx, bounds.y1 + gy, bounds.x2 + gx, bounds.y2 + gy);
        }
      } // always store the body bounds separately from the labels


      var bbBody = _p.bodyBounds = _p.bodyBounds || {};
      assignBoundingBox(bbBody, bounds);
      expandBoundingBoxSides(bbBody, manualExpansion);
      expandBoundingBox(bbBody, 1); // expand to work around browser dimension inaccuracies
      // overlay
      //////////

      if (styleEnabled) {
        ex1 = bounds.x1;
        ex2 = bounds.x2;
        ey1 = bounds.y1;
        ey2 = bounds.y2;
        updateBounds(bounds, ex1 - overlayPadding, ey1 - overlayPadding, ex2 + overlayPadding, ey2 + overlayPadding);
      } // always store the body bounds separately from the labels


      var bbOverlay = _p.overlayBounds = _p.overlayBounds || {};
      assignBoundingBox(bbOverlay, bounds);
      expandBoundingBoxSides(bbOverlay, manualExpansion);
      expandBoundingBox(bbOverlay, 1); // expand to work around browser dimension inaccuracies
      // handle label dimensions
      //////////////////////////

      var bbLabels = _p.labelBounds = _p.labelBounds || {};

      if (bbLabels.all != null) {
        clearBoundingBox(bbLabels.all);
      } else {
        bbLabels.all = makeBoundingBox();
      }

      if (styleEnabled && options.includeLabels) {
        if (options.includeMainLabels) {
          updateBoundsFromLabel(bounds, ele, null);
        }

        if (isEdge) {
          if (options.includeSourceLabels) {
            updateBoundsFromLabel(bounds, ele, 'source');
          }

          if (options.includeTargetLabels) {
            updateBoundsFromLabel(bounds, ele, 'target');
          }
        }
      } // style enabled for labels

    } // if displayed


    bounds.x1 = noninf(bounds.x1);
    bounds.y1 = noninf(bounds.y1);
    bounds.x2 = noninf(bounds.x2);
    bounds.y2 = noninf(bounds.y2);
    bounds.w = noninf(bounds.x2 - bounds.x1);
    bounds.h = noninf(bounds.y2 - bounds.y1);

    if (bounds.w > 0 && bounds.h > 0 && displayed) {
      expandBoundingBoxSides(bounds, manualExpansion); // expand bounds by 1 because antialiasing can increase the visual/effective size by 1 on all sides

      expandBoundingBox(bounds, 1);
    }

    return bounds;
  };

  var getKey = function getKey(opts) {
    var i = 0;

    var tf = function tf(val) {
      return (val ? 1 : 0) << i++;
    };

    var key = 0;
    key += tf(opts.incudeNodes);
    key += tf(opts.includeEdges);
    key += tf(opts.includeLabels);
    key += tf(opts.includeMainLabels);
    key += tf(opts.includeSourceLabels);
    key += tf(opts.includeTargetLabels);
    key += tf(opts.includeOverlays);
    return key;
  };

  var getBoundingBoxPosKey = function getBoundingBoxPosKey(ele) {
    if (ele.isEdge()) {
      var p1 = ele.source().position();
      var p2 = ele.target().position();

      var r = function r(x) {
        return Math.round(x);
      };

      return hashIntsArray([r(p1.x), r(p1.y), r(p2.x), r(p2.y)]);
    } else {
      return 0;
    }
  };

  var cachedBoundingBoxImpl = function cachedBoundingBoxImpl(ele, opts) {
    var _p = ele._private;
    var bb;
    var isEdge = ele.isEdge();
    var key = opts == null ? defBbOptsKey : getKey(opts);
    var usingDefOpts = key === defBbOptsKey;
    var currPosKey = getBoundingBoxPosKey(ele);
    var isPosKeySame = _p.bbCachePosKey === currPosKey;
    var useCache = opts.useCache && isPosKeySame;

    var isDirty = function isDirty(ele) {
      return ele._private.bbCache == null;
    };

    var needRecalc = !useCache || isDirty(ele) || isEdge && isDirty(ele.source()) || isDirty(ele.target());

    if (needRecalc) {
      if (!isPosKeySame) {
        ele.recalculateRenderedStyle();
      }

      bb = boundingBoxImpl(ele, defBbOpts);
      _p.bbCache = bb;
      _p.bbCacheShift.x = _p.bbCacheShift.y = 0;
      _p.bbCachePosKey = currPosKey;
    } else {
      bb = _p.bbCache;
    }

    if (!needRecalc && (_p.bbCacheShift.x !== 0 || _p.bbCacheShift.y !== 0)) {
      var shift = assignShiftToBoundingBox;
      var delta = _p.bbCacheShift;

      var safeShift = function safeShift(bb, delta) {
        if (bb != null) {
          shift(bb, delta);
        }
      };

      shift(bb, delta);
      var bodyBounds = _p.bodyBounds,
          overlayBounds = _p.overlayBounds,
          labelBounds = _p.labelBounds,
          arrowBounds = _p.arrowBounds;
      safeShift(bodyBounds, delta);
      safeShift(overlayBounds, delta);

      if (arrowBounds != null) {
        safeShift(arrowBounds.source, delta);
        safeShift(arrowBounds.target, delta);
        safeShift(arrowBounds['mid-source'], delta);
        safeShift(arrowBounds['mid-target'], delta);
      }

      if (labelBounds != null) {
        safeShift(labelBounds.main, delta);
        safeShift(labelBounds.all, delta);
        safeShift(labelBounds.source, delta);
        safeShift(labelBounds.target, delta);
      }
    } // always reset the shift, because we either applied the shift or cleared it by doing a fresh recalc


    _p.bbCacheShift.x = _p.bbCacheShift.y = 0; // not using def opts => need to build up bb from combination of sub bbs

    if (!usingDefOpts) {
      var isNode = ele.isNode();
      bb = makeBoundingBox();

      if (opts.includeNodes && isNode || opts.includeEdges && !isNode) {
        if (opts.includeOverlays) {
          updateBoundsFromBox(bb, _p.overlayBounds);
        } else {
          updateBoundsFromBox(bb, _p.bodyBounds);
        }
      }

      if (opts.includeLabels) {
        if (opts.includeMainLabels && (!isEdge || opts.includeSourceLabels && opts.includeTargetLabels)) {
          updateBoundsFromBox(bb, _p.labelBounds.all);
        } else {
          if (opts.includeMainLabels) {
            updateBoundsFromBox(bb, _p.labelBounds.mainRot);
          }

          if (opts.includeSourceLabels) {
            updateBoundsFromBox(bb, _p.labelBounds.sourceRot);
          }

          if (opts.includeTargetLabels) {
            updateBoundsFromBox(bb, _p.labelBounds.targetRot);
          }
        }
      }

      bb.w = bb.x2 - bb.x1;
      bb.h = bb.y2 - bb.y1;
    }

    return bb;
  };

  var defBbOpts = {
    includeNodes: true,
    includeEdges: true,
    includeLabels: true,
    includeMainLabels: true,
    includeSourceLabels: true,
    includeTargetLabels: true,
    includeOverlays: true,
    useCache: true
  };
  var defBbOptsKey = getKey(defBbOpts);
  var filledBbOpts = defaults(defBbOpts);

  elesfn$k.boundingBox = function (options) {
    var bounds; // the main usecase is ele.boundingBox() for a single element with no/def options
    // specified s.t. the cache is used, so check for this case to make it faster by
    // avoiding the overhead of the rest of the function

    if (this.length === 1 && this[0]._private.bbCache != null && (options === undefined || options.useCache === undefined || options.useCache === true)) {
      if (options === undefined) {
        options = defBbOpts;
      } else {
        options = filledBbOpts(options);
      }

      bounds = cachedBoundingBoxImpl(this[0], options);
    } else {
      bounds = makeBoundingBox();
      options = options || defBbOpts;
      var opts = filledBbOpts(options);
      var eles = this;
      var cy = eles.cy();
      var styleEnabled = cy.styleEnabled();

      if (styleEnabled) {
        for (var i = 0; i < eles.length; i++) {
          var ele = eles[i];
          var _p = ele._private;
          var currPosKey = getBoundingBoxPosKey(ele);
          var isPosKeySame = _p.bbCachePosKey === currPosKey;
          var useCache = opts.useCache && isPosKeySame;
          ele.recalculateRenderedStyle(useCache);
        }
      }

      this.updateCompoundBounds();

      for (var _i = 0; _i < eles.length; _i++) {
        var _ele = eles[_i];
        updateBoundsFromBox(bounds, cachedBoundingBoxImpl(_ele, opts));
      }
    }

    bounds.x1 = noninf(bounds.x1);
    bounds.y1 = noninf(bounds.y1);
    bounds.x2 = noninf(bounds.x2);
    bounds.y2 = noninf(bounds.y2);
    bounds.w = noninf(bounds.x2 - bounds.x1);
    bounds.h = noninf(bounds.y2 - bounds.y1);
    return bounds;
  };

  elesfn$k.dirtyBoundingBoxCache = function () {
    for (var i = 0; i < this.length; i++) {
      var _p = this[i]._private;
      _p.bbCache = null;
      _p.bbCacheShift.x = _p.bbCacheShift.y = 0;
      _p.bbCachePosKey = null;
      _p.bodyBounds = null;
      _p.overlayBounds = null;
      _p.labelBounds.all = null;
      _p.labelBounds.source = null;
      _p.labelBounds.target = null;
      _p.labelBounds.main = null;
      _p.labelBounds.sourceRot = null;
      _p.labelBounds.targetRot = null;
      _p.labelBounds.mainRot = null;
      _p.arrowBounds.source = null;
      _p.arrowBounds.target = null;
      _p.arrowBounds['mid-source'] = null;
      _p.arrowBounds['mid-target'] = null;
    }

    this.emitAndNotify('bounds');
    return this;
  };

  elesfn$k.shiftCachedBoundingBox = function (delta) {
    for (var i = 0; i < this.length; i++) {
      var ele = this[i];
      var _p = ele._private;
      var bb = _p.bbCache;

      if (bb != null) {
        _p.bbCacheShift.x += delta.x;
        _p.bbCacheShift.y += delta.y;
      }
    }

    this.emitAndNotify('bounds');
    return this;
  }; // private helper to get bounding box for custom node positions
  // - good for perf in certain cases but currently requires dirtying the rendered style
  // - would be better to not modify the nodes but the nodes are read directly everywhere in the renderer...
  // - try to use for only things like discrete layouts where the node position would change anyway


  elesfn$k.boundingBoxAt = function (fn) {
    var nodes = this.nodes();
    var cy = this.cy();
    var hasCompoundNodes = cy.hasCompoundNodes();

    if (hasCompoundNodes) {
      nodes = nodes.filter(function (node) {
        return !node.isParent();
      });
    }

    if (plainObject(fn)) {
      var obj = fn;

      fn = function fn() {
        return obj;
      };
    }

    var storeOldPos = function storeOldPos(node, i) {
      return node._private.bbAtOldPos = fn(node, i);
    };

    var getOldPos = function getOldPos(node) {
      return node._private.bbAtOldPos;
    };

    cy.startBatch();
    nodes.forEach(storeOldPos).silentPositions(fn);

    if (hasCompoundNodes) {
      this.updateCompoundBounds(true); // force update b/c we're inside a batch cycle
    }

    var bb = copyBoundingBox(this.boundingBox({
      useCache: false
    }));
    nodes.silentPositions(getOldPos);
    cy.endBatch();
    return bb;
  };

  fn$3.boundingbox = fn$3.bb = fn$3.boundingBox;
  fn$3.renderedBoundingbox = fn$3.renderedBoundingBox;
  var bounds = elesfn$k;

  var fn$4, elesfn$l;
  fn$4 = elesfn$l = {};

  var defineDimFns = function defineDimFns(opts) {
    opts.uppercaseName = capitalize(opts.name);
    opts.autoName = 'auto' + opts.uppercaseName;
    opts.labelName = 'label' + opts.uppercaseName;
    opts.outerName = 'outer' + opts.uppercaseName;
    opts.uppercaseOuterName = capitalize(opts.outerName);

    fn$4[opts.name] = function dimImpl() {
      var ele = this[0];
      var _p = ele._private;
      var cy = _p.cy;
      var styleEnabled = cy._private.styleEnabled;

      if (ele) {
        if (styleEnabled) {
          if (ele.isParent()) {
            ele.updateCompoundBounds();
            return _p[opts.autoName] || 0;
          }

          var d = ele.pstyle(opts.name);

          switch (d.strValue) {
            case 'label':
              ele.recalculateRenderedStyle();
              return _p.rstyle[opts.labelName] || 0;

            default:
              return d.pfValue;
          }
        } else {
          return 1;
        }
      }
    };

    fn$4['outer' + opts.uppercaseName] = function outerDimImpl() {
      var ele = this[0];
      var _p = ele._private;
      var cy = _p.cy;
      var styleEnabled = cy._private.styleEnabled;

      if (ele) {
        if (styleEnabled) {
          var dim = ele[opts.name]();
          var border = ele.pstyle('border-width').pfValue; // n.b. 1/2 each side

          var padding = 2 * ele.padding();
          return dim + border + padding;
        } else {
          return 1;
        }
      }
    };

    fn$4['rendered' + opts.uppercaseName] = function renderedDimImpl() {
      var ele = this[0];

      if (ele) {
        var d = ele[opts.name]();
        return d * this.cy().zoom();
      }
    };

    fn$4['rendered' + opts.uppercaseOuterName] = function renderedOuterDimImpl() {
      var ele = this[0];

      if (ele) {
        var od = ele[opts.outerName]();
        return od * this.cy().zoom();
      }
    };
  };

  defineDimFns({
    name: 'width'
  });
  defineDimFns({
    name: 'height'
  });

  elesfn$l.padding = function () {
    var ele = this[0];
    var _p = ele._private;

    if (ele.isParent()) {
      ele.updateCompoundBounds();

      if (_p.autoPadding !== undefined) {
        return _p.autoPadding;
      } else {
        return ele.pstyle('padding').pfValue;
      }
    } else {
      return ele.pstyle('padding').pfValue;
    }
  };

  elesfn$l.paddedHeight = function () {
    var ele = this[0];
    return ele.height() + 2 * ele.padding();
  };

  elesfn$l.paddedWidth = function () {
    var ele = this[0];
    return ele.width() + 2 * ele.padding();
  };

  var widthHeight = elesfn$l;

  var ifEdge = function ifEdge(ele, getValue) {
    if (ele.isEdge()) {
      return getValue(ele);
    }
  };

  var ifEdgeRenderedPosition = function ifEdgeRenderedPosition(ele, getPoint) {
    if (ele.isEdge()) {
      var cy = ele.cy();
      return modelToRenderedPosition(getPoint(ele), cy.zoom(), cy.pan());
    }
  };

  var ifEdgeRenderedPositions = function ifEdgeRenderedPositions(ele, getPoints) {
    if (ele.isEdge()) {
      var cy = ele.cy();
      var pan = cy.pan();
      var zoom = cy.zoom();
      return getPoints(ele).map(function (p) {
        return modelToRenderedPosition(p, zoom, pan);
      });
    }
  };

  var controlPoints = function controlPoints(ele) {
    return ele.renderer().getControlPoints(ele);
  };

  var segmentPoints = function segmentPoints(ele) {
    return ele.renderer().getSegmentPoints(ele);
  };

  var sourceEndpoint = function sourceEndpoint(ele) {
    return ele.renderer().getSourceEndpoint(ele);
  };

  var targetEndpoint = function targetEndpoint(ele) {
    return ele.renderer().getTargetEndpoint(ele);
  };

  var midpoint = function midpoint(ele) {
    return ele.renderer().getEdgeMidpoint(ele);
  };

  var pts = {
    controlPoints: {
      get: controlPoints,
      mult: true
    },
    segmentPoints: {
      get: segmentPoints,
      mult: true
    },
    sourceEndpoint: {
      get: sourceEndpoint
    },
    targetEndpoint: {
      get: targetEndpoint
    },
    midpoint: {
      get: midpoint
    }
  };

  var renderedName = function renderedName(name) {
    return 'rendered' + name[0].toUpperCase() + name.substr(1);
  };

  var edgePoints = Object.keys(pts).reduce(function (obj, name) {
    var spec = pts[name];
    var rName = renderedName(name);

    obj[name] = function () {
      return ifEdge(this, spec.get);
    };

    if (spec.mult) {
      obj[rName] = function () {
        return ifEdgeRenderedPositions(this, spec.get);
      };
    } else {
      obj[rName] = function () {
        return ifEdgeRenderedPosition(this, spec.get);
      };
    }

    return obj;
  }, {});

  var dimensions = extend({}, position, bounds, widthHeight, edgePoints);

  /*!
  Event object based on jQuery events, MIT license

  https://jquery.org/license/
  https://tldrlegal.com/license/mit-license
  https://github.com/jquery/jquery/blob/master/src/event.js
  */
  var Event = function Event(src, props) {
    this.recycle(src, props);
  };

  function returnFalse() {
    return false;
  }

  function returnTrue() {
    return true;
  } // http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html


  Event.prototype = {
    instanceString: function instanceString() {
      return 'event';
    },
    recycle: function recycle(src, props) {
      this.isImmediatePropagationStopped = this.isPropagationStopped = this.isDefaultPrevented = returnFalse;

      if (src != null && src.preventDefault) {
        // Browser Event object
        this.type = src.type; // Events bubbling up the document may have been marked as prevented
        // by a handler lower down the tree; reflect the correct value.

        this.isDefaultPrevented = src.defaultPrevented ? returnTrue : returnFalse;
      } else if (src != null && src.type) {
        // Plain object containing all event details
        props = src;
      } else {
        // Event string
        this.type = src;
      } // Put explicitly provided properties onto the event object


      if (props != null) {
        // more efficient to manually copy fields we use
        this.originalEvent = props.originalEvent;
        this.type = props.type != null ? props.type : this.type;
        this.cy = props.cy;
        this.target = props.target;
        this.position = props.position;
        this.renderedPosition = props.renderedPosition;
        this.namespace = props.namespace;
        this.layout = props.layout;
      }

      if (this.cy != null && this.position != null && this.renderedPosition == null) {
        // create a rendered position based on the passed position
        var pos = this.position;
        var zoom = this.cy.zoom();
        var pan = this.cy.pan();
        this.renderedPosition = {
          x: pos.x * zoom + pan.x,
          y: pos.y * zoom + pan.y
        };
      } // Create a timestamp if incoming event doesn't have one


      this.timeStamp = src && src.timeStamp || Date.now();
    },
    preventDefault: function preventDefault() {
      this.isDefaultPrevented = returnTrue;
      var e = this.originalEvent;

      if (!e) {
        return;
      } // if preventDefault exists run it on the original event


      if (e.preventDefault) {
        e.preventDefault();
      }
    },
    stopPropagation: function stopPropagation() {
      this.isPropagationStopped = returnTrue;
      var e = this.originalEvent;

      if (!e) {
        return;
      } // if stopPropagation exists run it on the original event


      if (e.stopPropagation) {
        e.stopPropagation();
      }
    },
    stopImmediatePropagation: function stopImmediatePropagation() {
      this.isImmediatePropagationStopped = returnTrue;
      this.stopPropagation();
    },
    isDefaultPrevented: returnFalse,
    isPropagationStopped: returnFalse,
    isImmediatePropagationStopped: returnFalse
  };

  var eventRegex = /^([^.]+)(\.(?:[^.]+))?$/; // regex for matching event strings (e.g. "click.namespace")

  var universalNamespace = '.*'; // matches as if no namespace specified and prevents users from unbinding accidentally

  var defaults$8 = {
    qualifierCompare: function qualifierCompare(q1, q2) {
      return q1 === q2;
    },
    eventMatches: function eventMatches()
    /*context, listener, eventObj*/
    {
      return true;
    },
    addEventFields: function addEventFields()
    /*context, evt*/
    {},
    callbackContext: function callbackContext(context
    /*, listener, eventObj*/
    ) {
      return context;
    },
    beforeEmit: function beforeEmit()
    /* context, listener, eventObj */
    {},
    afterEmit: function afterEmit()
    /* context, listener, eventObj */
    {},
    bubble: function bubble()
    /*context*/
    {
      return false;
    },
    parent: function parent()
    /*context*/
    {
      return null;
    },
    context: null
  };
  var defaultsKeys = Object.keys(defaults$8);
  var emptyOpts = {};

  function Emitter() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : emptyOpts;
    var context = arguments.length > 1 ? arguments[1] : undefined;

    // micro-optimisation vs Object.assign() -- reduces Element instantiation time
    for (var i = 0; i < defaultsKeys.length; i++) {
      var key = defaultsKeys[i];
      this[key] = opts[key] || defaults$8[key];
    }

    this.context = context || this.context;
    this.listeners = [];
    this.emitting = 0;
  }

  var p = Emitter.prototype;

  var forEachEvent = function forEachEvent(self, handler, events, qualifier, callback, conf, confOverrides) {
    if (fn(qualifier)) {
      callback = qualifier;
      qualifier = null;
    }

    if (confOverrides) {
      if (conf == null) {
        conf = confOverrides;
      } else {
        conf = extend({}, conf, confOverrides);
      }
    }

    var eventList = array(events) ? events : events.split(/\s+/);

    for (var i = 0; i < eventList.length; i++) {
      var evt = eventList[i];

      if (emptyString(evt)) {
        continue;
      }

      var match = evt.match(eventRegex); // type[.namespace]

      if (match) {
        var type = match[1];
        var namespace = match[2] ? match[2] : null;
        var ret = handler(self, evt, type, namespace, qualifier, callback, conf);

        if (ret === false) {
          break;
        } // allow exiting early

      }
    }
  };

  var makeEventObj = function makeEventObj(self, obj) {
    self.addEventFields(self.context, obj);
    return new Event(obj.type, obj);
  };

  var forEachEventObj = function forEachEventObj(self, handler, events) {
    if (event(events)) {
      handler(self, events);
      return;
    } else if (plainObject(events)) {
      handler(self, makeEventObj(self, events));
      return;
    }

    var eventList = array(events) ? events : events.split(/\s+/);

    for (var i = 0; i < eventList.length; i++) {
      var evt = eventList[i];

      if (emptyString(evt)) {
        continue;
      }

      var match = evt.match(eventRegex); // type[.namespace]

      if (match) {
        var type = match[1];
        var namespace = match[2] ? match[2] : null;
        var eventObj = makeEventObj(self, {
          type: type,
          namespace: namespace,
          target: self.context
        });
        handler(self, eventObj);
      }
    }
  };

  p.on = p.addListener = function (events, qualifier, callback, conf, confOverrides) {
    forEachEvent(this, function (self, event, type, namespace, qualifier, callback, conf) {
      if (fn(callback)) {
        self.listeners.push({
          event: event,
          // full event string
          callback: callback,
          // callback to run
          type: type,
          // the event type (e.g. 'click')
          namespace: namespace,
          // the event namespace (e.g. ".foo")
          qualifier: qualifier,
          // a restriction on whether to match this emitter
          conf: conf // additional configuration

        });
      }
    }, events, qualifier, callback, conf, confOverrides);
    return this;
  };

  p.one = function (events, qualifier, callback, conf) {
    return this.on(events, qualifier, callback, conf, {
      one: true
    });
  };

  p.removeListener = p.off = function (events, qualifier, callback, conf) {
    var _this = this;

    if (this.emitting !== 0) {
      this.listeners = copyArray(this.listeners);
    }

    var listeners = this.listeners;

    var _loop = function _loop(i) {
      var listener = listeners[i];
      forEachEvent(_this, function (self, event, type, namespace, qualifier, callback
      /*, conf*/
      ) {
        if ((listener.type === type || events === '*') && (!namespace && listener.namespace !== '.*' || listener.namespace === namespace) && (!qualifier || self.qualifierCompare(listener.qualifier, qualifier)) && (!callback || listener.callback === callback)) {
          listeners.splice(i, 1);
          return false;
        }
      }, events, qualifier, callback, conf);
    };

    for (var i = listeners.length - 1; i >= 0; i--) {
      _loop(i);
    }

    return this;
  };

  p.removeAllListeners = function () {
    return this.removeListener('*');
  };

  p.emit = p.trigger = function (events, extraParams, manualCallback) {
    var listeners = this.listeners;
    var numListenersBeforeEmit = listeners.length;
    this.emitting++;

    if (!array(extraParams)) {
      extraParams = [extraParams];
    }

    forEachEventObj(this, function (self, eventObj) {
      if (manualCallback != null) {
        listeners = [{
          event: eventObj.event,
          type: eventObj.type,
          namespace: eventObj.namespace,
          callback: manualCallback
        }];
        numListenersBeforeEmit = listeners.length;
      }

      var _loop2 = function _loop2(i) {
        var listener = listeners[i];

        if (listener.type === eventObj.type && (!listener.namespace || listener.namespace === eventObj.namespace || listener.namespace === universalNamespace) && self.eventMatches(self.context, listener, eventObj)) {
          var args = [eventObj];

          if (extraParams != null) {
            push(args, extraParams);
          }

          self.beforeEmit(self.context, listener, eventObj);

          if (listener.conf && listener.conf.one) {
            self.listeners = self.listeners.filter(function (l) {
              return l !== listener;
            });
          }

          var context = self.callbackContext(self.context, listener, eventObj);
          var ret = listener.callback.apply(context, args);
          self.afterEmit(self.context, listener, eventObj);

          if (ret === false) {
            eventObj.stopPropagation();
            eventObj.preventDefault();
          }
        } // if listener matches

      };

      for (var i = 0; i < numListenersBeforeEmit; i++) {
        _loop2(i);
      } // for listener


      if (self.bubble(self.context) && !eventObj.isPropagationStopped()) {
        self.parent(self.context).emit(eventObj, extraParams);
      }
    }, events);
    this.emitting--;
    return this;
  };

  var emitterOptions = {
    qualifierCompare: function qualifierCompare(selector1, selector2) {
      if (selector1 == null || selector2 == null) {
        return selector1 == null && selector2 == null;
      } else {
        return selector1.sameText(selector2);
      }
    },
    eventMatches: function eventMatches(ele, listener, eventObj) {
      var selector = listener.qualifier;

      if (selector != null) {
        return ele !== eventObj.target && element(eventObj.target) && selector.matches(eventObj.target);
      }

      return true;
    },
    addEventFields: function addEventFields(ele, evt) {
      evt.cy = ele.cy();
      evt.target = ele;
    },
    callbackContext: function callbackContext(ele, listener, eventObj) {
      return listener.qualifier != null ? eventObj.target : ele;
    },
    beforeEmit: function beforeEmit(context, listener
    /*, eventObj*/
    ) {
      if (listener.conf && listener.conf.once) {
        listener.conf.onceCollection.removeListener(listener.event, listener.qualifier, listener.callback);
      }
    },
    bubble: function bubble() {
      return true;
    },
    parent: function parent(ele) {
      return ele.isChild() ? ele.parent() : ele.cy();
    }
  };

  var argSelector = function argSelector(arg) {
    if (string(arg)) {
      return new Selector(arg);
    } else {
      return arg;
    }
  };

  var elesfn$m = {
    createEmitter: function createEmitter() {
      for (var i = 0; i < this.length; i++) {
        var ele = this[i];
        var _p = ele._private;

        if (!_p.emitter) {
          _p.emitter = new Emitter(emitterOptions, ele);
        }
      }

      return this;
    },
    emitter: function emitter() {
      return this._private.emitter;
    },
    on: function on(events, selector, callback) {
      var argSel = argSelector(selector);

      for (var i = 0; i < this.length; i++) {
        var ele = this[i];
        ele.emitter().on(events, argSel, callback);
      }

      return this;
    },
    removeListener: function removeListener(events, selector, callback) {
      var argSel = argSelector(selector);

      for (var i = 0; i < this.length; i++) {
        var ele = this[i];
        ele.emitter().removeListener(events, argSel, callback);
      }

      return this;
    },
    removeAllListeners: function removeAllListeners() {
      for (var i = 0; i < this.length; i++) {
        var ele = this[i];
        ele.emitter().removeAllListeners();
      }

      return this;
    },
    one: function one(events, selector, callback) {
      var argSel = argSelector(selector);

      for (var i = 0; i < this.length; i++) {
        var ele = this[i];
        ele.emitter().one(events, argSel, callback);
      }

      return this;
    },
    once: function once(events, selector, callback) {
      var argSel = argSelector(selector);

      for (var i = 0; i < this.length; i++) {
        var ele = this[i];
        ele.emitter().on(events, argSel, callback, {
          once: true,
          onceCollection: this
        });
      }
    },
    emit: function emit(events, extraParams) {
      for (var i = 0; i < this.length; i++) {
        var ele = this[i];
        ele.emitter().emit(events, extraParams);
      }

      return this;
    },
    emitAndNotify: function emitAndNotify(event, extraParams) {
      // for internal use only
      if (this.length === 0) {
        return;
      } // empty collections don't need to notify anything
      // notify renderer


      this.cy().notify(event, this);
      this.emit(event, extraParams);
      return this;
    }
  };
  define$3.eventAliasesOn(elesfn$m);

  var elesfn$n = {
    nodes: function nodes(selector) {
      return this.filter(function (ele) {
        return ele.isNode();
      }).filter(selector);
    },
    edges: function edges(selector) {
      return this.filter(function (ele) {
        return ele.isEdge();
      }).filter(selector);
    },
    // internal helper to get nodes and edges as separate collections with single iteration over elements
    byGroup: function byGroup() {
      var nodes = this.spawn();
      var edges = this.spawn();

      for (var i = 0; i < this.length; i++) {
        var ele = this[i];

        if (ele.isNode()) {
          nodes.merge(ele);
        } else {
          edges.merge(ele);
        }
      }

      return {
        nodes: nodes,
        edges: edges
      };
    },
    filter: function filter(_filter, thisArg) {
      if (_filter === undefined) {
        // check this first b/c it's the most common/performant case
        return this;
      } else if (string(_filter) || elementOrCollection(_filter)) {
        return new Selector(_filter).filter(this);
      } else if (fn(_filter)) {
        var filterEles = this.spawn();
        var eles = this;

        for (var i = 0; i < eles.length; i++) {
          var ele = eles[i];
          var include = thisArg ? _filter.apply(thisArg, [ele, i, eles]) : _filter(ele, i, eles);

          if (include) {
            filterEles.merge(ele);
          }
        }

        return filterEles;
      }

      return this.spawn(); // if not handled by above, give 'em an empty collection
    },
    not: function not(toRemove) {
      if (!toRemove) {
        return this;
      } else {
        if (string(toRemove)) {
          toRemove = this.filter(toRemove);
        }

        var elements = [];
        var rMap = toRemove._private.map;

        for (var i = 0; i < this.length; i++) {
          var element = this[i];
          var remove = rMap.has(element.id());

          if (!remove) {
            elements.push(element);
          }
        }

        return this.spawn(elements);
      }
    },
    absoluteComplement: function absoluteComplement() {
      var cy = this.cy();
      return cy.mutableElements().not(this);
    },
    intersect: function intersect(other) {
      // if a selector is specified, then filter by it instead
      if (string(other)) {
        var selector = other;
        return this.filter(selector);
      }

      var elements = [];
      var col1 = this;
      var col2 = other;
      var col1Smaller = this.length < other.length;
      var map2 = col1Smaller ? col2._private.map : col1._private.map;
      var col = col1Smaller ? col1 : col2;

      for (var i = 0; i < col.length; i++) {
        var id = col[i]._private.data.id;
        var entry = map2.get(id);

        if (entry) {
          elements.push(entry.ele);
        }
      }

      return this.spawn(elements);
    },
    xor: function xor(other) {
      var cy = this._private.cy;

      if (string(other)) {
        other = cy.$(other);
      }

      var elements = [];
      var col1 = this;
      var col2 = other;

      var add = function add(col, other) {
        for (var i = 0; i < col.length; i++) {
          var ele = col[i];
          var id = ele._private.data.id;
          var inOther = other.hasElementWithId(id);

          if (!inOther) {
            elements.push(ele);
          }
        }
      };

      add(col1, col2);
      add(col2, col1);
      return this.spawn(elements);
    },
    diff: function diff(other) {
      var cy = this._private.cy;

      if (string(other)) {
        other = cy.$(other);
      }

      var left = [];
      var right = [];
      var both = [];
      var col1 = this;
      var col2 = other;

      var add = function add(col, other, retEles) {
        for (var i = 0; i < col.length; i++) {
          var ele = col[i];
          var id = ele._private.data.id;
          var inOther = other.hasElementWithId(id);

          if (inOther) {
            both.push(ele);
          } else {
            retEles.push(ele);
          }
        }
      };

      add(col1, col2, left);
      add(col2, col1, right);
      return {
        left: this.spawn(left, {
          unique: true
        }),
        right: this.spawn(right, {
          unique: true
        }),
        both: this.spawn(both, {
          unique: true
        })
      };
    },
    add: function add(toAdd) {
      var cy = this._private.cy;

      if (!toAdd) {
        return this;
      }

      if (string(toAdd)) {
        var selector = toAdd;
        toAdd = cy.mutableElements().filter(selector);
      }

      var elements = [];

      for (var i = 0; i < this.length; i++) {
        elements.push(this[i]);
      }

      var map = this._private.map;

      for (var _i = 0; _i < toAdd.length; _i++) {
        var add = !map.has(toAdd[_i].id());

        if (add) {
          elements.push(toAdd[_i]);
        }
      }

      return this.spawn(elements);
    },
    // in place merge on calling collection
    merge: function merge(toAdd) {
      var _p = this._private;
      var cy = _p.cy;

      if (!toAdd) {
        return this;
      }

      if (toAdd && string(toAdd)) {
        var selector = toAdd;
        toAdd = cy.mutableElements().filter(selector);
      }

      var map = _p.map;

      for (var i = 0; i < toAdd.length; i++) {
        var toAddEle = toAdd[i];
        var id = toAddEle._private.data.id;
        var add = !map.has(id);

        if (add) {
          var index = this.length++;
          this[index] = toAddEle;
          map.set(id, {
            ele: toAddEle,
            index: index
          });
        } else {
          // replace
          var _index = map.get(id).index;
          this[_index] = toAddEle;
          map.set(id, {
            ele: toAddEle,
            index: _index
          });
        }
      }

      return this; // chaining
    },
    unmergeAt: function unmergeAt(i) {
      var ele = this[i];
      var id = ele.id();
      var _p = this._private;
      var map = _p.map; // remove ele

      this[i] = undefined;
      map["delete"](id);
      var unmergedLastEle = i === this.length - 1; // replace empty spot with last ele in collection

      if (this.length > 1 && !unmergedLastEle) {
        var lastEleI = this.length - 1;
        var lastEle = this[lastEleI];
        var lastEleId = lastEle._private.data.id;
        this[lastEleI] = undefined;
        this[i] = lastEle;
        map.set(lastEleId, {
          ele: lastEle,
          index: i
        });
      } // the collection is now 1 ele smaller


      this.length--;
      return this;
    },
    // remove single ele in place in calling collection
    unmergeOne: function unmergeOne(ele) {
      ele = ele[0];
      var _p = this._private;
      var id = ele._private.data.id;
      var map = _p.map;
      var entry = map.get(id);

      if (!entry) {
        return this; // no need to remove
      }

      var i = entry.index;
      this.unmergeAt(i);
      return this;
    },
    // remove eles in place on calling collection
    unmerge: function unmerge(toRemove) {
      var cy = this._private.cy;

      if (!toRemove) {
        return this;
      }

      if (toRemove && string(toRemove)) {
        var selector = toRemove;
        toRemove = cy.mutableElements().filter(selector);
      }

      for (var i = 0; i < toRemove.length; i++) {
        this.unmergeOne(toRemove[i]);
      }

      return this; // chaining
    },
    unmergeBy: function unmergeBy(toRmFn) {
      for (var i = this.length - 1; i >= 0; i--) {
        var ele = this[i];

        if (toRmFn(ele)) {
          this.unmergeAt(i);
        }
      }

      return this;
    },
    map: function map(mapFn, thisArg) {
      var arr = [];
      var eles = this;

      for (var i = 0; i < eles.length; i++) {
        var ele = eles[i];
        var ret = thisArg ? mapFn.apply(thisArg, [ele, i, eles]) : mapFn(ele, i, eles);
        arr.push(ret);
      }

      return arr;
    },
    reduce: function reduce(fn, initialValue) {
      var val = initialValue;
      var eles = this;

      for (var i = 0; i < eles.length; i++) {
        val = fn(val, eles[i], i, eles);
      }

      return val;
    },
    max: function max(valFn, thisArg) {
      var max = -Infinity;
      var maxEle;
      var eles = this;

      for (var i = 0; i < eles.length; i++) {
        var ele = eles[i];
        var val = thisArg ? valFn.apply(thisArg, [ele, i, eles]) : valFn(ele, i, eles);

        if (val > max) {
          max = val;
          maxEle = ele;
        }
      }

      return {
        value: max,
        ele: maxEle
      };
    },
    min: function min(valFn, thisArg) {
      var min = Infinity;
      var minEle;
      var eles = this;

      for (var i = 0; i < eles.length; i++) {
        var ele = eles[i];
        var val = thisArg ? valFn.apply(thisArg, [ele, i, eles]) : valFn(ele, i, eles);

        if (val < min) {
          min = val;
          minEle = ele;
        }
      }

      return {
        value: min,
        ele: minEle
      };
    }
  }; // aliases

  var fn$5 = elesfn$n;
  fn$5['u'] = fn$5['|'] = fn$5['+'] = fn$5.union = fn$5.or = fn$5.add;
  fn$5['\\'] = fn$5['!'] = fn$5['-'] = fn$5.difference = fn$5.relativeComplement = fn$5.subtract = fn$5.not;
  fn$5['n'] = fn$5['&'] = fn$5['.'] = fn$5.and = fn$5.intersection = fn$5.intersect;
  fn$5['^'] = fn$5['(+)'] = fn$5['(-)'] = fn$5.symmetricDifference = fn$5.symdiff = fn$5.xor;
  fn$5.fnFilter = fn$5.filterFn = fn$5.stdFilter = fn$5.filter;
  fn$5.complement = fn$5.abscomp = fn$5.absoluteComplement;

  var elesfn$o = {
    isNode: function isNode() {
      return this.group() === 'nodes';
    },
    isEdge: function isEdge() {
      return this.group() === 'edges';
    },
    isLoop: function isLoop() {
      return this.isEdge() && this.source()[0] === this.target()[0];
    },
    isSimple: function isSimple() {
      return this.isEdge() && this.source()[0] !== this.target()[0];
    },
    group: function group() {
      var ele = this[0];

      if (ele) {
        return ele._private.group;
      }
    }
  };

  /**
   *  Elements are drawn in a specific order based on compound depth (low to high), the element type (nodes above edges),
   *  and z-index (low to high).  These styles affect how this applies:
   *
   *  z-compound-depth: May be `bottom | orphan | auto | top`.  The first drawn is `bottom`, then `orphan` which is the
   *      same depth as the root of the compound graph, followed by the default value `auto` which draws in order from
   *      root to leaves of the compound graph.  The last drawn is `top`.
   *  z-index-compare: May be `auto | manual`.  The default value is `auto` which always draws edges under nodes.
   *      `manual` ignores this convention and draws based on the `z-index` value setting.
   *  z-index: An integer value that affects the relative draw order of elements.  In general, an element with a higher
   *      `z-index` will be drawn on top of an element with a lower `z-index`.
   */

  var zIndexSort = function zIndexSort(a, b) {
    var cy = a.cy();
    var hasCompoundNodes = cy.hasCompoundNodes();

    function getDepth(ele) {
      var style = ele.pstyle('z-compound-depth');

      if (style.value === 'auto') {
        return hasCompoundNodes ? ele.zDepth() : 0;
      } else if (style.value === 'bottom') {
        return -1;
      } else if (style.value === 'top') {
        return MAX_INT;
      } // 'orphan'


      return 0;
    }

    var depthDiff = getDepth(a) - getDepth(b);

    if (depthDiff !== 0) {
      return depthDiff;
    }

    function getEleDepth(ele) {
      var style = ele.pstyle('z-index-compare');

      if (style.value === 'auto') {
        return ele.isNode() ? 1 : 0;
      } // 'manual'


      return 0;
    }

    var eleDiff = getEleDepth(a) - getEleDepth(b);

    if (eleDiff !== 0) {
      return eleDiff;
    }

    var zDiff = a.pstyle('z-index').value - b.pstyle('z-index').value;

    if (zDiff !== 0) {
      return zDiff;
    } // compare indices in the core (order added to graph w/ last on top)


    return a.poolIndex() - b.poolIndex();
  };

  var elesfn$p = {
    forEach: function forEach(fn$1, thisArg) {
      if (fn(fn$1)) {
        var N = this.length;

        for (var i = 0; i < N; i++) {
          var ele = this[i];
          var ret = thisArg ? fn$1.apply(thisArg, [ele, i, this]) : fn$1(ele, i, this);

          if (ret === false) {
            break;
          } // exit each early on return false

        }
      }

      return this;
    },
    toArray: function toArray() {
      var array = [];

      for (var i = 0; i < this.length; i++) {
        array.push(this[i]);
      }

      return array;
    },
    slice: function slice(start, end) {
      var array = [];
      var thisSize = this.length;

      if (end == null) {
        end = thisSize;
      }

      if (start == null) {
        start = 0;
      }

      if (start < 0) {
        start = thisSize + start;
      }

      if (end < 0) {
        end = thisSize + end;
      }

      for (var i = start; i >= 0 && i < end && i < thisSize; i++) {
        array.push(this[i]);
      }

      return this.spawn(array);
    },
    size: function size() {
      return this.length;
    },
    eq: function eq(i) {
      return this[i] || this.spawn();
    },
    first: function first() {
      return this[0] || this.spawn();
    },
    last: function last() {
      return this[this.length - 1] || this.spawn();
    },
    empty: function empty() {
      return this.length === 0;
    },
    nonempty: function nonempty() {
      return !this.empty();
    },
    sort: function sort(sortFn) {
      if (!fn(sortFn)) {
        return this;
      }

      var sorted = this.toArray().sort(sortFn);
      return this.spawn(sorted);
    },
    sortByZIndex: function sortByZIndex() {
      return this.sort(zIndexSort);
    },
    zDepth: function zDepth() {
      var ele = this[0];

      if (!ele) {
        return undefined;
      } // let cy = ele.cy();


      var _p = ele._private;
      var group = _p.group;

      if (group === 'nodes') {
        var depth = _p.data.parent ? ele.parents().size() : 0;

        if (!ele.isParent()) {
          return MAX_INT - 1; // childless nodes always on top
        }

        return depth;
      } else {
        var src = _p.source;
        var tgt = _p.target;
        var srcDepth = src.zDepth();
        var tgtDepth = tgt.zDepth();
        return Math.max(srcDepth, tgtDepth, 0); // depth of deepest parent
      }
    }
  };
  elesfn$p.each = elesfn$p.forEach;

  var defineSymbolIterator = function defineSymbolIterator() {
    var typeofUndef =  "undefined" ;
    var isIteratorSupported = (typeof Symbol === "undefined" ? "undefined" : _typeof(Symbol)) != typeofUndef && _typeof(Symbol.iterator) != typeofUndef; // eslint-disable-line no-undef

    if (isIteratorSupported) {
      elesfn$p[Symbol.iterator] = function () {
        var _this = this;

        // eslint-disable-line no-undef
        var entry = {
          value: undefined,
          done: false
        };
        var i = 0;
        var length = this.length;
        return _defineProperty({
          next: function next() {
            if (i < length) {
              entry.value = _this[i++];
            } else {
              entry.value = undefined;
              entry.done = true;
            }

            return entry;
          }
        }, Symbol.iterator, function () {
          // eslint-disable-line no-undef
          return this;
        });
      };
    }
  };

  defineSymbolIterator();

  var getLayoutDimensionOptions = defaults({
    nodeDimensionsIncludeLabels: false
  });
  var elesfn$q = {
    // Calculates and returns node dimensions { x, y } based on options given
    layoutDimensions: function layoutDimensions(options) {
      options = getLayoutDimensionOptions(options);
      var dims;

      if (!this.takesUpSpace()) {
        dims = {
          w: 0,
          h: 0
        };
      } else if (options.nodeDimensionsIncludeLabels) {
        var bbDim = this.boundingBox();
        dims = {
          w: bbDim.w,
          h: bbDim.h
        };
      } else {
        dims = {
          w: this.outerWidth(),
          h: this.outerHeight()
        };
      } // sanitise the dimensions for external layouts (avoid division by zero)


      if (dims.w === 0 || dims.h === 0) {
        dims.w = dims.h = 1;
      }

      return dims;
    },
    // using standard layout options, apply position function (w/ or w/o animation)
    layoutPositions: function layoutPositions(layout, options, fn) {
      var nodes = this.nodes();
      var cy = this.cy();
      var layoutEles = options.eles; // nodes & edges

      var getMemoizeKey = function getMemoizeKey(node) {
        return node.id();
      };

      var fnMem = memoize(fn, getMemoizeKey); // memoized version of position function

      layout.emit({
        type: 'layoutstart',
        layout: layout
      });
      layout.animations = [];

      var calculateSpacing = function calculateSpacing(spacing, nodesBb, pos) {
        var center = {
          x: nodesBb.x1 + nodesBb.w / 2,
          y: nodesBb.y1 + nodesBb.h / 2
        };
        var spacingVector = {
          // scale from center of bounding box (not necessarily 0,0)
          x: (pos.x - center.x) * spacing,
          y: (pos.y - center.y) * spacing
        };
        return {
          x: center.x + spacingVector.x,
          y: center.y + spacingVector.y
        };
      };

      var useSpacingFactor = options.spacingFactor && options.spacingFactor !== 1;

      var spacingBb = function spacingBb() {
        if (!useSpacingFactor) {
          return null;
        }

        var bb = makeBoundingBox();

        for (var i = 0; i < nodes.length; i++) {
          var node = nodes[i];
          var pos = fnMem(node, i);
          expandBoundingBoxByPoint(bb, pos.x, pos.y);
        }

        return bb;
      };

      var bb = spacingBb();
      var getFinalPos = memoize(function (node, i) {
        var newPos = fnMem(node, i);

        if (useSpacingFactor) {
          var spacing = Math.abs(options.spacingFactor);
          newPos = calculateSpacing(spacing, bb, newPos);
        }

        if (options.transform != null) {
          newPos = options.transform(node, newPos);
        }

        return newPos;
      }, getMemoizeKey);

      if (options.animate) {
        for (var i = 0; i < nodes.length; i++) {
          var node = nodes[i];
          var newPos = getFinalPos(node, i);
          var animateNode = options.animateFilter == null || options.animateFilter(node, i);

          if (animateNode) {
            var ani = node.animation({
              position: newPos,
              duration: options.animationDuration,
              easing: options.animationEasing
            });
            layout.animations.push(ani);
          } else {
            node.position(newPos);
          }
        }

        if (options.fit) {
          var fitAni = cy.animation({
            fit: {
              boundingBox: layoutEles.boundingBoxAt(getFinalPos),
              padding: options.padding
            },
            duration: options.animationDuration,
            easing: options.animationEasing
          });
          layout.animations.push(fitAni);
        } else if (options.zoom !== undefined && options.pan !== undefined) {
          var zoomPanAni = cy.animation({
            zoom: options.zoom,
            pan: options.pan,
            duration: options.animationDuration,
            easing: options.animationEasing
          });
          layout.animations.push(zoomPanAni);
        }

        layout.animations.forEach(function (ani) {
          return ani.play();
        });
        layout.one('layoutready', options.ready);
        layout.emit({
          type: 'layoutready',
          layout: layout
        });
        Promise$1.all(layout.animations.map(function (ani) {
          return ani.promise();
        })).then(function () {
          layout.one('layoutstop', options.stop);
          layout.emit({
            type: 'layoutstop',
            layout: layout
          });
        });
      } else {
        nodes.positions(getFinalPos);

        if (options.fit) {
          cy.fit(options.eles, options.padding);
        }

        if (options.zoom != null) {
          cy.zoom(options.zoom);
        }

        if (options.pan) {
          cy.pan(options.pan);
        }

        layout.one('layoutready', options.ready);
        layout.emit({
          type: 'layoutready',
          layout: layout
        });
        layout.one('layoutstop', options.stop);
        layout.emit({
          type: 'layoutstop',
          layout: layout
        });
      }

      return this; // chaining
    },
    layout: function layout(options) {
      var cy = this.cy();
      return cy.makeLayout(extend({}, options, {
        eles: this
      }));
    }
  }; // aliases:

  elesfn$q.createLayout = elesfn$q.makeLayout = elesfn$q.layout;

  function styleCache(key, fn, ele) {
    var _p = ele._private;
    var cache = _p.styleCache = _p.styleCache || [];
    var val;

    if ((val = cache[key]) != null) {
      return val;
    } else {
      val = cache[key] = fn(ele);
      return val;
    }
  }

  function cacheStyleFunction(key, fn) {
    key = hashString(key);
    return function cachedStyleFunction(ele) {
      return styleCache(key, fn, ele);
    };
  }

  function cachePrototypeStyleFunction(key, fn) {
    key = hashString(key);

    var selfFn = function selfFn(ele) {
      return fn.call(ele);
    };

    return function cachedPrototypeStyleFunction() {
      var ele = this[0];

      if (ele) {
        return styleCache(key, selfFn, ele);
      }
    };
  }

  var elesfn$r = {
    recalculateRenderedStyle: function recalculateRenderedStyle(useCache) {
      var cy = this.cy();
      var renderer = cy.renderer();
      var styleEnabled = cy.styleEnabled();

      if (renderer && styleEnabled) {
        renderer.recalculateRenderedStyle(this, useCache);
      }

      return this;
    },
    dirtyStyleCache: function dirtyStyleCache() {
      var cy = this.cy();

      var dirty = function dirty(ele) {
        return ele._private.styleCache = null;
      };

      if (cy.hasCompoundNodes()) {
        var eles;
        eles = this.spawnSelf().merge(this.descendants()).merge(this.parents());
        eles.merge(eles.connectedEdges());
        eles.forEach(dirty);
      } else {
        this.forEach(function (ele) {
          dirty(ele);
          ele.connectedEdges().forEach(dirty);
        });
      }

      return this;
    },
    // fully updates (recalculates) the style for the elements
    updateStyle: function updateStyle(notifyRenderer) {
      var cy = this._private.cy;

      if (!cy.styleEnabled()) {
        return this;
      }

      if (cy.batching()) {
        var bEles = cy._private.batchStyleEles;
        bEles.merge(this);
        return this; // chaining and exit early when batching
      }

      var hasCompounds = cy.hasCompoundNodes();
      var style = cy.style();
      var updatedEles = this;
      notifyRenderer = notifyRenderer || notifyRenderer === undefined ? true : false;

      if (hasCompounds) {
        // then add everything up and down for compound selector checks
        updatedEles = this.spawnSelf().merge(this.descendants()).merge(this.parents());
      }

      var changedEles = style.apply(updatedEles);

      if (notifyRenderer) {
        changedEles.emitAndNotify('style'); // let renderer know we changed style
      } else {
        changedEles.emit('style'); // just fire the event
      }

      return this; // chaining
    },
    // get the internal parsed style object for the specified property
    parsedStyle: function parsedStyle(property) {
      var includeNonDefault = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var ele = this[0];
      var cy = ele.cy();

      if (!cy.styleEnabled()) {
        return;
      }

      if (ele) {
        var overriddenStyle = ele._private.style[property];

        if (overriddenStyle != null) {
          return overriddenStyle;
        } else if (includeNonDefault) {
          return cy.style().getDefaultProperty(property);
        } else {
          return null;
        }
      }
    },
    numericStyle: function numericStyle(property) {
      var ele = this[0];

      if (!ele.cy().styleEnabled()) {
        return;
      }

      if (ele) {
        var pstyle = ele.pstyle(property);
        return pstyle.pfValue !== undefined ? pstyle.pfValue : pstyle.value;
      }
    },
    numericStyleUnits: function numericStyleUnits(property) {
      var ele = this[0];

      if (!ele.cy().styleEnabled()) {
        return;
      }

      if (ele) {
        return ele.pstyle(property).units;
      }
    },
    // get the specified css property as a rendered value (i.e. on-screen value)
    // or get the whole rendered style if no property specified (NB doesn't allow setting)
    renderedStyle: function renderedStyle(property) {
      var cy = this.cy();

      if (!cy.styleEnabled()) {
        return this;
      }

      var ele = this[0];

      if (ele) {
        return cy.style().getRenderedStyle(ele, property);
      }
    },
    // read the calculated css style of the element or override the style (via a bypass)
    style: function style(name, value) {
      var cy = this.cy();

      if (!cy.styleEnabled()) {
        return this;
      }

      var updateTransitions = false;
      var style = cy.style();

      if (plainObject(name)) {
        // then extend the bypass
        var props = name;
        style.applyBypass(this, props, updateTransitions);
        this.emitAndNotify('style'); // let the renderer know we've updated style
      } else if (string(name)) {
        if (value === undefined) {
          // then get the property from the style
          var ele = this[0];

          if (ele) {
            return style.getStylePropertyValue(ele, name);
          } else {
            // empty collection => can't get any value
            return;
          }
        } else {
          // then set the bypass with the property value
          style.applyBypass(this, name, value, updateTransitions);
          this.emitAndNotify('style'); // let the renderer know we've updated style
        }
      } else if (name === undefined) {
        var _ele = this[0];

        if (_ele) {
          return style.getRawStyle(_ele);
        } else {
          // empty collection => can't get any value
          return;
        }
      }

      return this; // chaining
    },
    removeStyle: function removeStyle(names) {
      var cy = this.cy();

      if (!cy.styleEnabled()) {
        return this;
      }

      var updateTransitions = false;
      var style = cy.style();
      var eles = this;

      if (names === undefined) {
        for (var i = 0; i < eles.length; i++) {
          var ele = eles[i];
          style.removeAllBypasses(ele, updateTransitions);
        }
      } else {
        names = names.split(/\s+/);

        for (var _i = 0; _i < eles.length; _i++) {
          var _ele2 = eles[_i];
          style.removeBypasses(_ele2, names, updateTransitions);
        }
      }

      this.emitAndNotify('style'); // let the renderer know we've updated style

      return this; // chaining
    },
    show: function show() {
      this.css('display', 'element');
      return this; // chaining
    },
    hide: function hide() {
      this.css('display', 'none');
      return this; // chaining
    },
    effectiveOpacity: function effectiveOpacity() {
      var cy = this.cy();

      if (!cy.styleEnabled()) {
        return 1;
      }

      var hasCompoundNodes = cy.hasCompoundNodes();
      var ele = this[0];

      if (ele) {
        var _p = ele._private;
        var parentOpacity = ele.pstyle('opacity').value;

        if (!hasCompoundNodes) {
          return parentOpacity;
        }

        var parents = !_p.data.parent ? null : ele.parents();

        if (parents) {
          for (var i = 0; i < parents.length; i++) {
            var parent = parents[i];
            var opacity = parent.pstyle('opacity').value;
            parentOpacity = opacity * parentOpacity;
          }
        }

        return parentOpacity;
      }
    },
    transparent: function transparent() {
      var cy = this.cy();

      if (!cy.styleEnabled()) {
        return false;
      }

      var ele = this[0];
      var hasCompoundNodes = ele.cy().hasCompoundNodes();

      if (ele) {
        if (!hasCompoundNodes) {
          return ele.pstyle('opacity').value === 0;
        } else {
          return ele.effectiveOpacity() === 0;
        }
      }
    },
    backgrounding: function backgrounding() {
      var cy = this.cy();

      if (!cy.styleEnabled()) {
        return false;
      }

      var ele = this[0];
      return ele._private.backgrounding ? true : false;
    }
  };

  function checkCompound(ele, parentOk) {
    var _p = ele._private;
    var parents = _p.data.parent ? ele.parents() : null;

    if (parents) {
      for (var i = 0; i < parents.length; i++) {
        var parent = parents[i];

        if (!parentOk(parent)) {
          return false;
        }
      }
    }

    return true;
  }

  function defineDerivedStateFunction(specs) {
    var ok = specs.ok;
    var edgeOkViaNode = specs.edgeOkViaNode || specs.ok;
    var parentOk = specs.parentOk || specs.ok;
    return function () {
      var cy = this.cy();

      if (!cy.styleEnabled()) {
        return true;
      }

      var ele = this[0];
      var hasCompoundNodes = cy.hasCompoundNodes();

      if (ele) {
        var _p = ele._private;

        if (!ok(ele)) {
          return false;
        }

        if (ele.isNode()) {
          return !hasCompoundNodes || checkCompound(ele, parentOk);
        } else {
          var src = _p.source;
          var tgt = _p.target;
          return edgeOkViaNode(src) && (!hasCompoundNodes || checkCompound(src, edgeOkViaNode)) && (src === tgt || edgeOkViaNode(tgt) && (!hasCompoundNodes || checkCompound(tgt, edgeOkViaNode)));
        }
      }
    };
  }

  var eleTakesUpSpace = cacheStyleFunction('eleTakesUpSpace', function (ele) {
    return ele.pstyle('display').value === 'element' && ele.width() !== 0 && (ele.isNode() ? ele.height() !== 0 : true);
  });
  elesfn$r.takesUpSpace = cachePrototypeStyleFunction('takesUpSpace', defineDerivedStateFunction({
    ok: eleTakesUpSpace
  }));
  var eleInteractive = cacheStyleFunction('eleInteractive', function (ele) {
    return ele.pstyle('events').value === 'yes' && ele.pstyle('visibility').value === 'visible' && eleTakesUpSpace(ele);
  });
  var parentInteractive = cacheStyleFunction('parentInteractive', function (parent) {
    return parent.pstyle('visibility').value === 'visible' && eleTakesUpSpace(parent);
  });
  elesfn$r.interactive = cachePrototypeStyleFunction('interactive', defineDerivedStateFunction({
    ok: eleInteractive,
    parentOk: parentInteractive,
    edgeOkViaNode: eleTakesUpSpace
  }));

  elesfn$r.noninteractive = function () {
    var ele = this[0];

    if (ele) {
      return !ele.interactive();
    }
  };

  var eleVisible = cacheStyleFunction('eleVisible', function (ele) {
    return ele.pstyle('visibility').value === 'visible' && ele.pstyle('opacity').pfValue !== 0 && eleTakesUpSpace(ele);
  });
  var edgeVisibleViaNode = eleTakesUpSpace;
  elesfn$r.visible = cachePrototypeStyleFunction('visible', defineDerivedStateFunction({
    ok: eleVisible,
    edgeOkViaNode: edgeVisibleViaNode
  }));

  elesfn$r.hidden = function () {
    var ele = this[0];

    if (ele) {
      return !ele.visible();
    }
  };

  elesfn$r.isBundledBezier = cachePrototypeStyleFunction('isBundledBezier', function () {
    if (!this.cy().styleEnabled()) {
      return false;
    }

    return !this.removed() && this.pstyle('curve-style').value === 'bezier' && this.takesUpSpace();
  });
  elesfn$r.bypass = elesfn$r.css = elesfn$r.style;
  elesfn$r.renderedCss = elesfn$r.renderedStyle;
  elesfn$r.removeBypass = elesfn$r.removeCss = elesfn$r.removeStyle;
  elesfn$r.pstyle = elesfn$r.parsedStyle;

  var elesfn$s = {};

  function defineSwitchFunction(params) {
    return function () {
      var args = arguments;
      var changedEles = []; // e.g. cy.nodes().select( data, handler )

      if (args.length === 2) {
        var data = args[0];
        var handler = args[1];
        this.on(params.event, data, handler);
      } // e.g. cy.nodes().select( handler )
      else if (args.length === 1 && fn(args[0])) {
          var _handler = args[0];
          this.on(params.event, _handler);
        } // e.g. cy.nodes().select()
        // e.g. (private) cy.nodes().select(['tapselect'])
        else if (args.length === 0 || args.length === 1 && array(args[0])) {
            var addlEvents = args.length === 1 ? args[0] : null;

            for (var i = 0; i < this.length; i++) {
              var ele = this[i];
              var able = !params.ableField || ele._private[params.ableField];
              var changed = ele._private[params.field] != params.value;

              if (params.overrideAble) {
                var overrideAble = params.overrideAble(ele);

                if (overrideAble !== undefined) {
                  able = overrideAble;

                  if (!overrideAble) {
                    return this;
                  } // to save cycles assume not able for all on override

                }
              }

              if (able) {
                ele._private[params.field] = params.value;

                if (changed) {
                  changedEles.push(ele);
                }
              }
            }

            var changedColl = this.spawn(changedEles);
            changedColl.updateStyle(); // change of state => possible change of style

            changedColl.emit(params.event);

            if (addlEvents) {
              changedColl.emit(addlEvents);
            }
          }

      return this;
    };
  }

  function defineSwitchSet(params) {
    elesfn$s[params.field] = function () {
      var ele = this[0];

      if (ele) {
        if (params.overrideField) {
          var val = params.overrideField(ele);

          if (val !== undefined) {
            return val;
          }
        }

        return ele._private[params.field];
      }
    };

    elesfn$s[params.on] = defineSwitchFunction({
      event: params.on,
      field: params.field,
      ableField: params.ableField,
      overrideAble: params.overrideAble,
      value: true
    });
    elesfn$s[params.off] = defineSwitchFunction({
      event: params.off,
      field: params.field,
      ableField: params.ableField,
      overrideAble: params.overrideAble,
      value: false
    });
  }

  defineSwitchSet({
    field: 'locked',
    overrideField: function overrideField(ele) {
      return ele.cy().autolock() ? true : undefined;
    },
    on: 'lock',
    off: 'unlock'
  });
  defineSwitchSet({
    field: 'grabbable',
    overrideField: function overrideField(ele) {
      return ele.cy().autoungrabify() || ele.pannable() ? false : undefined;
    },
    on: 'grabify',
    off: 'ungrabify'
  });
  defineSwitchSet({
    field: 'selected',
    ableField: 'selectable',
    overrideAble: function overrideAble(ele) {
      return ele.cy().autounselectify() ? false : undefined;
    },
    on: 'select',
    off: 'unselect'
  });
  defineSwitchSet({
    field: 'selectable',
    overrideField: function overrideField(ele) {
      return ele.cy().autounselectify() ? false : undefined;
    },
    on: 'selectify',
    off: 'unselectify'
  });
  elesfn$s.deselect = elesfn$s.unselect;

  elesfn$s.grabbed = function () {
    var ele = this[0];

    if (ele) {
      return ele._private.grabbed;
    }
  };

  defineSwitchSet({
    field: 'active',
    on: 'activate',
    off: 'unactivate'
  });
  defineSwitchSet({
    field: 'pannable',
    on: 'panify',
    off: 'unpanify'
  });

  elesfn$s.inactive = function () {
    var ele = this[0];

    if (ele) {
      return !ele._private.active;
    }
  };

  var elesfn$t = {}; // DAG functions
  ////////////////

  var defineDagExtremity = function defineDagExtremity(params) {
    return function dagExtremityImpl(selector) {
      var eles = this;
      var ret = [];

      for (var i = 0; i < eles.length; i++) {
        var ele = eles[i];

        if (!ele.isNode()) {
          continue;
        }

        var disqualified = false;
        var edges = ele.connectedEdges();

        for (var j = 0; j < edges.length; j++) {
          var edge = edges[j];
          var src = edge.source();
          var tgt = edge.target();

          if (params.noIncomingEdges && tgt === ele && src !== ele || params.noOutgoingEdges && src === ele && tgt !== ele) {
            disqualified = true;
            break;
          }
        }

        if (!disqualified) {
          ret.push(ele);
        }
      }

      return this.spawn(ret, {
        unique: true
      }).filter(selector);
    };
  };

  var defineDagOneHop = function defineDagOneHop(params) {
    return function (selector) {
      var eles = this;
      var oEles = [];

      for (var i = 0; i < eles.length; i++) {
        var ele = eles[i];

        if (!ele.isNode()) {
          continue;
        }

        var edges = ele.connectedEdges();

        for (var j = 0; j < edges.length; j++) {
          var edge = edges[j];
          var src = edge.source();
          var tgt = edge.target();

          if (params.outgoing && src === ele) {
            oEles.push(edge);
            oEles.push(tgt);
          } else if (params.incoming && tgt === ele) {
            oEles.push(edge);
            oEles.push(src);
          }
        }
      }

      return this.spawn(oEles, {
        unique: true
      }).filter(selector);
    };
  };

  var defineDagAllHops = function defineDagAllHops(params) {
    return function (selector) {
      var eles = this;
      var sEles = [];
      var sElesIds = {};

      for (;;) {
        var next = params.outgoing ? eles.outgoers() : eles.incomers();

        if (next.length === 0) {
          break;
        } // done if none left


        var newNext = false;

        for (var i = 0; i < next.length; i++) {
          var n = next[i];
          var nid = n.id();

          if (!sElesIds[nid]) {
            sElesIds[nid] = true;
            sEles.push(n);
            newNext = true;
          }
        }

        if (!newNext) {
          break;
        } // done if touched all outgoers already


        eles = next;
      }

      return this.spawn(sEles, {
        unique: true
      }).filter(selector);
    };
  };

  elesfn$t.clearTraversalCache = function () {
    for (var i = 0; i < this.length; i++) {
      this[i]._private.traversalCache = null;
    }
  };

  extend(elesfn$t, {
    // get the root nodes in the DAG
    roots: defineDagExtremity({
      noIncomingEdges: true
    }),
    // get the leaf nodes in the DAG
    leaves: defineDagExtremity({
      noOutgoingEdges: true
    }),
    // normally called children in graph theory
    // these nodes =edges=> outgoing nodes
    outgoers: cache(defineDagOneHop({
      outgoing: true
    }), 'outgoers'),
    // aka DAG descendants
    successors: defineDagAllHops({
      outgoing: true
    }),
    // normally called parents in graph theory
    // these nodes <=edges= incoming nodes
    incomers: cache(defineDagOneHop({
      incoming: true
    }), 'incomers'),
    // aka DAG ancestors
    predecessors: defineDagAllHops({
      incoming: true
    })
  }); // Neighbourhood functions
  //////////////////////////

  extend(elesfn$t, {
    neighborhood: cache(function (selector) {
      var elements = [];
      var nodes = this.nodes();

      for (var i = 0; i < nodes.length; i++) {
        // for all nodes
        var node = nodes[i];
        var connectedEdges = node.connectedEdges(); // for each connected edge, add the edge and the other node

        for (var j = 0; j < connectedEdges.length; j++) {
          var edge = connectedEdges[j];
          var src = edge.source();
          var tgt = edge.target();
          var otherNode = node === src ? tgt : src; // need check in case of loop

          if (otherNode.length > 0) {
            elements.push(otherNode[0]); // add node 1 hop away
          } // add connected edge


          elements.push(edge[0]);
        }
      }

      return this.spawn(elements, {
        unique: true
      }).filter(selector);
    }, 'neighborhood'),
    closedNeighborhood: function closedNeighborhood(selector) {
      return this.neighborhood().add(this).filter(selector);
    },
    openNeighborhood: function openNeighborhood(selector) {
      return this.neighborhood(selector);
    }
  }); // aliases

  elesfn$t.neighbourhood = elesfn$t.neighborhood;
  elesfn$t.closedNeighbourhood = elesfn$t.closedNeighborhood;
  elesfn$t.openNeighbourhood = elesfn$t.openNeighborhood; // Edge functions
  /////////////////

  extend(elesfn$t, {
    source: cache(function sourceImpl(selector) {
      var ele = this[0];
      var src;

      if (ele) {
        src = ele._private.source || ele.cy().collection();
      }

      return src && selector ? src.filter(selector) : src;
    }, 'source'),
    target: cache(function targetImpl(selector) {
      var ele = this[0];
      var tgt;

      if (ele) {
        tgt = ele._private.target || ele.cy().collection();
      }

      return tgt && selector ? tgt.filter(selector) : tgt;
    }, 'target'),
    sources: defineSourceFunction({
      attr: 'source'
    }),
    targets: defineSourceFunction({
      attr: 'target'
    })
  });

  function defineSourceFunction(params) {
    return function sourceImpl(selector) {
      var sources = [];

      for (var i = 0; i < this.length; i++) {
        var ele = this[i];
        var src = ele._private[params.attr];

        if (src) {
          sources.push(src);
        }
      }

      return this.spawn(sources, {
        unique: true
      }).filter(selector);
    };
  }

  extend(elesfn$t, {
    edgesWith: cache(defineEdgesWithFunction(), 'edgesWith'),
    edgesTo: cache(defineEdgesWithFunction({
      thisIsSrc: true
    }), 'edgesTo')
  });

  function defineEdgesWithFunction(params) {
    return function edgesWithImpl(otherNodes) {
      var elements = [];
      var cy = this._private.cy;
      var p = params || {}; // get elements if a selector is specified

      if (string(otherNodes)) {
        otherNodes = cy.$(otherNodes);
      }

      for (var h = 0; h < otherNodes.length; h++) {
        var edges = otherNodes[h]._private.edges;

        for (var i = 0; i < edges.length; i++) {
          var edge = edges[i];
          var edgeData = edge._private.data;
          var thisToOther = this.hasElementWithId(edgeData.source) && otherNodes.hasElementWithId(edgeData.target);
          var otherToThis = otherNodes.hasElementWithId(edgeData.source) && this.hasElementWithId(edgeData.target);
          var edgeConnectsThisAndOther = thisToOther || otherToThis;

          if (!edgeConnectsThisAndOther) {
            continue;
          }

          if (p.thisIsSrc || p.thisIsTgt) {
            if (p.thisIsSrc && !thisToOther) {
              continue;
            }

            if (p.thisIsTgt && !otherToThis) {
              continue;
            }
          }

          elements.push(edge);
        }
      }

      return this.spawn(elements, {
        unique: true
      });
    };
  }

  extend(elesfn$t, {
    connectedEdges: cache(function (selector) {
      var retEles = [];
      var eles = this;

      for (var i = 0; i < eles.length; i++) {
        var node = eles[i];

        if (!node.isNode()) {
          continue;
        }

        var edges = node._private.edges;

        for (var j = 0; j < edges.length; j++) {
          var edge = edges[j];
          retEles.push(edge);
        }
      }

      return this.spawn(retEles, {
        unique: true
      }).filter(selector);
    }, 'connectedEdges'),
    connectedNodes: cache(function (selector) {
      var retEles = [];
      var eles = this;

      for (var i = 0; i < eles.length; i++) {
        var edge = eles[i];

        if (!edge.isEdge()) {
          continue;
        }

        retEles.push(edge.source()[0]);
        retEles.push(edge.target()[0]);
      }

      return this.spawn(retEles, {
        unique: true
      }).filter(selector);
    }, 'connectedNodes'),
    parallelEdges: cache(defineParallelEdgesFunction(), 'parallelEdges'),
    codirectedEdges: cache(defineParallelEdgesFunction({
      codirected: true
    }), 'codirectedEdges')
  });

  function defineParallelEdgesFunction(params) {
    var defaults = {
      codirected: false
    };
    params = extend({}, defaults, params);
    return function parallelEdgesImpl(selector) {
      // micro-optimised for renderer
      var elements = [];
      var edges = this.edges();
      var p = params; // look at all the edges in the collection

      for (var i = 0; i < edges.length; i++) {
        var edge1 = edges[i];
        var edge1_p = edge1._private;
        var src1 = edge1_p.source;
        var srcid1 = src1._private.data.id;
        var tgtid1 = edge1_p.data.target;
        var srcEdges1 = src1._private.edges; // look at edges connected to the src node of this edge

        for (var j = 0; j < srcEdges1.length; j++) {
          var edge2 = srcEdges1[j];
          var edge2data = edge2._private.data;
          var tgtid2 = edge2data.target;
          var srcid2 = edge2data.source;
          var codirected = tgtid2 === tgtid1 && srcid2 === srcid1;
          var oppdirected = srcid1 === tgtid2 && tgtid1 === srcid2;

          if (p.codirected && codirected || !p.codirected && (codirected || oppdirected)) {
            elements.push(edge2);
          }
        }
      }

      return this.spawn(elements, {
        unique: true
      }).filter(selector);
    };
  } // Misc functions
  /////////////////


  extend(elesfn$t, {
    components: function components(root) {
      var self = this;
      var cy = self.cy();
      var visited = cy.collection();
      var unvisited = root == null ? self.nodes() : root.nodes();
      var components = [];

      if (root != null && unvisited.empty()) {
        // root may contain only edges
        unvisited = root.sources(); // doesn't matter which node to use (undirected), so just use the source sides
      }

      var visitInComponent = function visitInComponent(node, component) {
        visited.merge(node);
        unvisited.unmerge(node);
        component.merge(node);
      };

      if (unvisited.empty()) {
        return self.spawn();
      }

      var _loop = function _loop() {
        // each iteration yields a component
        var cmpt = cy.collection();
        components.push(cmpt);
        var root = unvisited[0];
        visitInComponent(root, cmpt);
        self.bfs({
          directed: false,
          roots: root,
          visit: function visit(v) {
            return visitInComponent(v, cmpt);
          }
        });
        cmpt.forEach(function (node) {
          node.connectedEdges().forEach(function (e) {
            // connectedEdges() usually cached
            if (self.has(e) && cmpt.has(e.source()) && cmpt.has(e.target())) {
              // has() is cheap
              cmpt.merge(e); // forEach() only considers nodes -- sets N at call time
            }
          });
        });
      };

      do {
        _loop();
      } while (unvisited.length > 0);

      return components;
    },
    component: function component() {
      var ele = this[0];
      return ele.cy().mutableElements().components(ele)[0];
    }
  });
  elesfn$t.componentsOf = elesfn$t.components;

  var idFactory = {
    generate: function generate(cy, element, tryThisId) {
      var id = tryThisId != null ? tryThisId : uuid();

      while (cy.hasElementWithId(id)) {
        id = uuid();
      }

      return id;
    }
  }; // represents a set of nodes, edges, or both together

  var Collection$1 = function Collection(cy, elements, options) {
    if (cy === undefined || !core(cy)) {
      error('A collection must have a reference to the core');
      return;
    }

    var map = new Map$1();
    var createdElements = false;

    if (!elements) {
      elements = [];
    } else if (elements.length > 0 && plainObject(elements[0]) && !element(elements[0])) {
      createdElements = true; // make elements from json and restore all at once later

      var eles = [];
      var elesIds = new Set$1();

      for (var i = 0, l = elements.length; i < l; i++) {
        var json = elements[i];

        if (json.data == null) {
          json.data = {};
        }

        var _data = json.data; // make sure newly created elements have valid ids

        if (_data.id == null) {
          _data.id = idFactory.generate(cy, json);
        } else if (cy.hasElementWithId(_data.id) || elesIds.has(_data.id)) {
          continue; // can't create element if prior id already exists
        }

        var ele = new Element(cy, json, false);
        eles.push(ele);
        elesIds.add(_data.id);
      }

      elements = eles;
    }

    this.length = 0;

    for (var _i = 0, _l = elements.length; _i < _l; _i++) {
      var element$1 = elements[_i][0]; // [0] in case elements is an array of collections, rather than array of elements

      if (element$1 == null) {
        continue;
      }

      var id = element$1._private.data.id;

      if (options == null || options.unique && !map.has(id)) {
        map.set(id, {
          index: this.length,
          ele: element$1
        });
        this[this.length] = element$1;
        this.length++;
      }
    }

    this._private = {
      cy: cy,
      map: map
    }; // restore the elements if we created them from json

    if (createdElements) {
      this.restore();
    }
  }; // Functions
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  // keep the prototypes in sync (an element has the same functions as a collection)
  // and use elefn and elesfn as shorthands to the prototypes


  var elesfn$u = Element.prototype = Collection$1.prototype;

  elesfn$u.instanceString = function () {
    return 'collection';
  };

  elesfn$u.spawn = function (cy, eles, opts) {
    if (!core(cy)) {
      // cy is optional
      opts = eles;
      eles = cy;
      cy = this.cy();
    }

    return new Collection$1(cy, eles, opts);
  };

  elesfn$u.spawnSelf = function () {
    return this.spawn(this);
  };

  elesfn$u.cy = function () {
    return this._private.cy;
  };

  elesfn$u.renderer = function () {
    return this._private.cy.renderer();
  };

  elesfn$u.element = function () {
    return this[0];
  };

  elesfn$u.collection = function () {
    if (collection(this)) {
      return this;
    } else {
      // an element
      return new Collection$1(this._private.cy, [this]);
    }
  };

  elesfn$u.unique = function () {
    return new Collection$1(this._private.cy, this, {
      unique: true
    });
  };

  elesfn$u.hasElementWithId = function (id) {
    id = '' + id; // id must be string

    return this._private.map.has(id);
  };

  elesfn$u.getElementById = function (id) {
    id = '' + id; // id must be string

    var cy = this._private.cy;

    var entry = this._private.map.get(id);

    return entry ? entry.ele : new Collection$1(cy); // get ele or empty collection
  };

  elesfn$u.$id = elesfn$u.getElementById;

  elesfn$u.poolIndex = function () {
    var cy = this._private.cy;
    var eles = cy._private.elements;
    var id = this[0]._private.data.id;
    return eles._private.map.get(id).index;
  };

  elesfn$u.indexOf = function (ele) {
    var id = ele[0]._private.data.id;
    return this._private.map.get(id).index;
  };

  elesfn$u.indexOfId = function (id) {
    id = '' + id; // id must be string

    return this._private.map.get(id).index;
  };

  elesfn$u.json = function (obj) {
    var ele = this.element();
    var cy = this.cy();

    if (ele == null && obj) {
      return this;
    } // can't set to no eles


    if (ele == null) {
      return undefined;
    } // can't get from no eles


    var p = ele._private;

    if (plainObject(obj)) {
      // set
      cy.startBatch();

      if (obj.data) {
        ele.data(obj.data);
        var _data2 = p.data;

        if (ele.isEdge()) {
          // source and target are immutable via data()
          var move = false;
          var spec = {};
          var src = obj.data.source;
          var tgt = obj.data.target;

          if (src != null && src != _data2.source) {
            spec.source = '' + src; // id must be string

            move = true;
          }

          if (tgt != null && tgt != _data2.target) {
            spec.target = '' + tgt; // id must be string

            move = true;
          }

          if (move) {
            ele = ele.move(spec);
          }
        } else {
          // parent is immutable via data()
          var newParentValSpecd = 'parent' in obj.data;
          var parent = obj.data.parent;

          if (newParentValSpecd && (parent != null || _data2.parent != null) && parent != _data2.parent) {
            if (parent === undefined) {
              // can't set undefined imperatively, so use null
              parent = null;
            }

            if (parent != null) {
              parent = '' + parent; // id must be string
            }

            ele = ele.move({
              parent: parent
            });
          }
        }
      }

      if (obj.position) {
        ele.position(obj.position);
      } // ignore group -- immutable


      var checkSwitch = function checkSwitch(k, trueFnName, falseFnName) {
        var obj_k = obj[k];

        if (obj_k != null && obj_k !== p[k]) {
          if (obj_k) {
            ele[trueFnName]();
          } else {
            ele[falseFnName]();
          }
        }
      };

      checkSwitch('removed', 'remove', 'restore');
      checkSwitch('selected', 'select', 'unselect');
      checkSwitch('selectable', 'selectify', 'unselectify');
      checkSwitch('locked', 'lock', 'unlock');
      checkSwitch('grabbable', 'grabify', 'ungrabify');
      checkSwitch('pannable', 'panify', 'unpanify');

      if (obj.classes != null) {
        ele.classes(obj.classes);
      }

      cy.endBatch();
      return this;
    } else if (obj === undefined) {
      // get
      var json = {
        data: copy(p.data),
        position: copy(p.position),
        group: p.group,
        removed: p.removed,
        selected: p.selected,
        selectable: p.selectable,
        locked: p.locked,
        grabbable: p.grabbable,
        pannable: p.pannable,
        classes: null
      };
      json.classes = '';
      var i = 0;
      p.classes.forEach(function (cls) {
        return json.classes += i++ === 0 ? cls : ' ' + cls;
      });
      return json;
    }
  };

  elesfn$u.jsons = function () {
    var jsons = [];

    for (var i = 0; i < this.length; i++) {
      var ele = this[i];
      var json = ele.json();
      jsons.push(json);
    }

    return jsons;
  };

  elesfn$u.clone = function () {
    var cy = this.cy();
    var elesArr = [];

    for (var i = 0; i < this.length; i++) {
      var ele = this[i];
      var json = ele.json();
      var clone = new Element(cy, json, false); // NB no restore

      elesArr.push(clone);
    }

    return new Collection$1(cy, elesArr);
  };

  elesfn$u.copy = elesfn$u.clone;

  elesfn$u.restore = function () {
    var notifyRenderer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
    var addToPool = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    var self = this;
    var cy = self.cy();
    var cy_p = cy._private; // create arrays of nodes and edges, since we need to
    // restore the nodes first

    var nodes = [];
    var edges = [];
    var elements;

    for (var _i2 = 0, l = self.length; _i2 < l; _i2++) {
      var ele = self[_i2];

      if (addToPool && !ele.removed()) {
        // don't need to handle this ele
        continue;
      } // keep nodes first in the array and edges after


      if (ele.isNode()) {
        // put to front of array if node
        nodes.push(ele);
      } else {
        // put to end of array if edge
        edges.push(ele);
      }
    }

    elements = nodes.concat(edges);
    var i;

    var removeFromElements = function removeFromElements() {
      elements.splice(i, 1);
      i--;
    }; // now, restore each element


    for (i = 0; i < elements.length; i++) {
      var _ele = elements[i];
      var _private = _ele._private;
      var _data3 = _private.data; // the traversal cache should start fresh when ele is added

      _ele.clearTraversalCache(); // set id and validate


      if (!addToPool && !_private.removed) ; else if (_data3.id === undefined) {
        _data3.id = idFactory.generate(cy, _ele);
      } else if (number(_data3.id)) {
        _data3.id = '' + _data3.id; // now it's a string
      } else if (emptyString(_data3.id) || !string(_data3.id)) {
        error('Can not create element with invalid string ID `' + _data3.id + '`'); // can't create element if it has empty string as id or non-string id

        removeFromElements();
        continue;
      } else if (cy.hasElementWithId(_data3.id)) {
        error('Can not create second element with ID `' + _data3.id + '`'); // can't create element if one already has that id

        removeFromElements();
        continue;
      }

      var id = _data3.id; // id is finalised, now let's keep a ref

      if (_ele.isNode()) {
        // extra checks for nodes
        var pos = _private.position; // make sure the nodes have a defined position

        if (pos.x == null) {
          pos.x = 0;
        }

        if (pos.y == null) {
          pos.y = 0;
        }
      }

      if (_ele.isEdge()) {
        // extra checks for edges
        var edge = _ele;
        var fields = ['source', 'target'];
        var fieldsLength = fields.length;
        var badSourceOrTarget = false;

        for (var j = 0; j < fieldsLength; j++) {
          var field = fields[j];
          var val = _data3[field];

          if (number(val)) {
            val = _data3[field] = '' + _data3[field]; // now string
          }

          if (val == null || val === '') {
            // can't create if source or target is not defined properly
            error('Can not create edge `' + id + '` with unspecified ' + field);
            badSourceOrTarget = true;
          } else if (!cy.hasElementWithId(val)) {
            // can't create edge if one of its nodes doesn't exist
            error('Can not create edge `' + id + '` with nonexistant ' + field + ' `' + val + '`');
            badSourceOrTarget = true;
          }
        }

        if (badSourceOrTarget) {
          removeFromElements();
          continue;
        } // can't create this


        var src = cy.getElementById(_data3.source);
        var tgt = cy.getElementById(_data3.target); // only one edge in node if loop

        if (src.same(tgt)) {
          src._private.edges.push(edge);
        } else {
          src._private.edges.push(edge);

          tgt._private.edges.push(edge);
        }

        edge._private.source = src;
        edge._private.target = tgt;
      } // if is edge
      // create mock ids / indexes maps for element so it can be used like collections


      _private.map = new Map$1();

      _private.map.set(id, {
        ele: _ele,
        index: 0
      });

      _private.removed = false;

      if (addToPool) {
        cy.addToPool(_ele);
      }
    } // for each element
    // do compound node sanity checks


    for (var _i3 = 0; _i3 < nodes.length; _i3++) {
      // each node
      var node = nodes[_i3];
      var _data4 = node._private.data;

      if (number(_data4.parent)) {
        // then automake string
        _data4.parent = '' + _data4.parent;
      }

      var parentId = _data4.parent;
      var specifiedParent = parentId != null;

      if (specifiedParent) {
        var parent = cy.getElementById(parentId);

        if (parent.empty()) {
          // non-existant parent; just remove it
          _data4.parent = undefined;
        } else {
          var selfAsParent = false;
          var ancestor = parent;

          while (!ancestor.empty()) {
            if (node.same(ancestor)) {
              // mark self as parent and remove from data
              selfAsParent = true;
              _data4.parent = undefined; // remove parent reference
              // exit or we loop forever

              break;
            }

            ancestor = ancestor.parent();
          }

          if (!selfAsParent) {
            // connect with children
            parent[0]._private.children.push(node);

            node._private.parent = parent[0]; // let the core know we have a compound graph

            cy_p.hasCompoundNodes = true;
          }
        } // else

      } // if specified parent

    } // for each node


    if (elements.length > 0) {
      var restored = new Collection$1(cy, elements);

      for (var _i4 = 0; _i4 < restored.length; _i4++) {
        var _ele2 = restored[_i4];

        if (_ele2.isNode()) {
          continue;
        } // adding an edge invalidates the traversal caches for the parallel edges


        _ele2.parallelEdges().clearTraversalCache(); // adding an edge invalidates the traversal cache for the connected nodes


        _ele2.source().clearTraversalCache();

        _ele2.target().clearTraversalCache();
      }

      var toUpdateStyle;

      if (cy_p.hasCompoundNodes) {
        toUpdateStyle = cy.collection().merge(restored).merge(restored.connectedNodes()).merge(restored.parent());
      } else {
        toUpdateStyle = restored;
      }

      toUpdateStyle.dirtyCompoundBoundsCache().dirtyBoundingBoxCache().updateStyle(notifyRenderer);

      if (notifyRenderer) {
        restored.emitAndNotify('add');
      } else if (addToPool) {
        restored.emit('add');
      }
    }

    return self; // chainability
  };

  elesfn$u.removed = function () {
    var ele = this[0];
    return ele && ele._private.removed;
  };

  elesfn$u.inside = function () {
    var ele = this[0];
    return ele && !ele._private.removed;
  };

  elesfn$u.remove = function () {
    var notifyRenderer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
    var removeFromPool = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    var self = this;
    var elesToRemove = [];
    var elesToRemoveIds = {};
    var cy = self._private.cy; // add connected edges

    function addConnectedEdges(node) {
      var edges = node._private.edges;

      for (var i = 0; i < edges.length; i++) {
        add(edges[i]);
      }
    } // add descendant nodes


    function addChildren(node) {
      var children = node._private.children;

      for (var i = 0; i < children.length; i++) {
        add(children[i]);
      }
    }

    function add(ele) {
      var alreadyAdded = elesToRemoveIds[ele.id()];

      if (removeFromPool && ele.removed() || alreadyAdded) {
        return;
      } else {
        elesToRemoveIds[ele.id()] = true;
      }

      if (ele.isNode()) {
        elesToRemove.push(ele); // nodes are removed last

        addConnectedEdges(ele);
        addChildren(ele);
      } else {
        elesToRemove.unshift(ele); // edges are removed first
      }
    } // make the list of elements to remove
    // (may be removing more than specified due to connected edges etc)


    for (var i = 0, l = self.length; i < l; i++) {
      var ele = self[i];
      add(ele);
    }

    function removeEdgeRef(node, edge) {
      var connectedEdges = node._private.edges;
      removeFromArray(connectedEdges, edge); // removing an edges invalidates the traversal cache for its nodes

      node.clearTraversalCache();
    }

    function removeParallelRef(pllEdge) {
      // removing an edge invalidates the traversal caches for the parallel edges
      pllEdge.clearTraversalCache();
    }

    var alteredParents = [];
    alteredParents.ids = {};

    function removeChildRef(parent, ele) {
      ele = ele[0];
      parent = parent[0];
      var children = parent._private.children;
      var pid = parent.id();
      removeFromArray(children, ele); // remove parent => child ref

      ele._private.parent = null; // remove child => parent ref

      if (!alteredParents.ids[pid]) {
        alteredParents.ids[pid] = true;
        alteredParents.push(parent);
      }
    }

    self.dirtyCompoundBoundsCache();

    if (removeFromPool) {
      cy.removeFromPool(elesToRemove); // remove from core pool
    }

    for (var _i5 = 0; _i5 < elesToRemove.length; _i5++) {
      var _ele3 = elesToRemove[_i5];

      if (_ele3.isEdge()) {
        // remove references to this edge in its connected nodes
        var src = _ele3.source()[0];

        var tgt = _ele3.target()[0];

        removeEdgeRef(src, _ele3);
        removeEdgeRef(tgt, _ele3);

        var pllEdges = _ele3.parallelEdges();

        for (var j = 0; j < pllEdges.length; j++) {
          var pllEdge = pllEdges[j];
          removeParallelRef(pllEdge);

          if (pllEdge.isBundledBezier()) {
            pllEdge.dirtyBoundingBoxCache();
          }
        }
      } else {
        // remove reference to parent
        var parent = _ele3.parent();

        if (parent.length !== 0) {
          removeChildRef(parent, _ele3);
        }
      }

      if (removeFromPool) {
        // mark as removed
        _ele3._private.removed = true;
      }
    } // check to see if we have a compound graph or not


    var elesStillInside = cy._private.elements;
    cy._private.hasCompoundNodes = false;

    for (var _i6 = 0; _i6 < elesStillInside.length; _i6++) {
      var _ele4 = elesStillInside[_i6];

      if (_ele4.isParent()) {
        cy._private.hasCompoundNodes = true;
        break;
      }
    }

    var removedElements = new Collection$1(this.cy(), elesToRemove);

    if (removedElements.size() > 0) {
      // must manually notify since trigger won't do this automatically once removed
      if (notifyRenderer) {
        removedElements.emitAndNotify('remove');
      } else if (removeFromPool) {
        removedElements.emit('remove');
      }
    } // the parents who were modified by the removal need their style updated


    for (var _i7 = 0; _i7 < alteredParents.length; _i7++) {
      var _ele5 = alteredParents[_i7];

      if (!removeFromPool || !_ele5.removed()) {
        _ele5.updateStyle();
      }
    }

    return removedElements;
  };

  elesfn$u.move = function (struct) {
    var cy = this._private.cy;
    var eles = this; // just clean up refs, caches, etc. in the same way as when removing and then restoring
    // (our calls to remove/restore do not remove from the graph or make events)

    var notifyRenderer = false;
    var modifyPool = false;

    var toString = function toString(id) {
      return id == null ? id : '' + id;
    }; // id must be string


    if (struct.source !== undefined || struct.target !== undefined) {
      var srcId = toString(struct.source);
      var tgtId = toString(struct.target);
      var srcExists = srcId != null && cy.hasElementWithId(srcId);
      var tgtExists = tgtId != null && cy.hasElementWithId(tgtId);

      if (srcExists || tgtExists) {
        cy.batch(function () {
          // avoid duplicate style updates
          eles.remove(notifyRenderer, modifyPool); // clean up refs etc.

          eles.emitAndNotify('moveout');

          for (var i = 0; i < eles.length; i++) {
            var ele = eles[i];
            var _data5 = ele._private.data;

            if (ele.isEdge()) {
              if (srcExists) {
                _data5.source = srcId;
              }

              if (tgtExists) {
                _data5.target = tgtId;
              }
            }
          }

          eles.restore(notifyRenderer, modifyPool); // make new refs, style, etc.
        });
        eles.emitAndNotify('move');
      }
    } else if (struct.parent !== undefined) {
      // move node to new parent
      var parentId = toString(struct.parent);
      var parentExists = parentId === null || cy.hasElementWithId(parentId);

      if (parentExists) {
        var pidToAssign = parentId === null ? undefined : parentId;
        cy.batch(function () {
          // avoid duplicate style updates
          var updated = eles.remove(notifyRenderer, modifyPool); // clean up refs etc.

          updated.emitAndNotify('moveout');

          for (var i = 0; i < eles.length; i++) {
            var ele = eles[i];
            var _data6 = ele._private.data;

            if (ele.isNode()) {
              _data6.parent = pidToAssign;
            }
          }

          updated.restore(notifyRenderer, modifyPool); // make new refs, style, etc.
        });
        eles.emitAndNotify('move');
      }
    }

    return this;
  };

  [elesfn$c, elesfn$d, elesfn$e, elesfn$f, elesfn$g, data$1, elesfn$i, dimensions, elesfn$m, elesfn$n, elesfn$o, elesfn$p, elesfn$q, elesfn$r, elesfn$s, elesfn$t].forEach(function (props) {
    extend(elesfn$u, props);
  });

  var corefn = {
    add: function add(opts) {
      var elements;
      var cy = this; // add the elements

      if (elementOrCollection(opts)) {
        var eles = opts;

        if (eles._private.cy === cy) {
          // same instance => just restore
          elements = eles.restore();
        } else {
          // otherwise, copy from json
          var jsons = [];

          for (var i = 0; i < eles.length; i++) {
            var ele = eles[i];
            jsons.push(ele.json());
          }

          elements = new Collection$1(cy, jsons);
        }
      } // specify an array of options
      else if (array(opts)) {
          var _jsons = opts;
          elements = new Collection$1(cy, _jsons);
        } // specify via opts.nodes and opts.edges
        else if (plainObject(opts) && (array(opts.nodes) || array(opts.edges))) {
            var elesByGroup = opts;
            var _jsons2 = [];
            var grs = ['nodes', 'edges'];

            for (var _i = 0, il = grs.length; _i < il; _i++) {
              var group = grs[_i];
              var elesArray = elesByGroup[group];

              if (array(elesArray)) {
                for (var j = 0, jl = elesArray.length; j < jl; j++) {
                  var json = extend({
                    group: group
                  }, elesArray[j]);

                  _jsons2.push(json);
                }
              }
            }

            elements = new Collection$1(cy, _jsons2);
          } // specify options for one element
          else {
              var _json = opts;
              elements = new Element(cy, _json).collection();
            }

      return elements;
    },
    remove: function remove(collection) {
      if (elementOrCollection(collection)) ; else if (string(collection)) {
        var selector = collection;
        collection = this.$(selector);
      }

      return collection.remove();
    }
  };

  /* global Float32Array */

  /*! Bezier curve function generator. Copyright Gaetan Renaudeau. MIT License: http://en.wikipedia.org/wiki/MIT_License */
  function generateCubicBezier(mX1, mY1, mX2, mY2) {
    var NEWTON_ITERATIONS = 4,
        NEWTON_MIN_SLOPE = 0.001,
        SUBDIVISION_PRECISION = 0.0000001,
        SUBDIVISION_MAX_ITERATIONS = 10,
        kSplineTableSize = 11,
        kSampleStepSize = 1.0 / (kSplineTableSize - 1.0),
        float32ArraySupported = typeof Float32Array !== 'undefined';
    /* Must contain four arguments. */

    if (arguments.length !== 4) {
      return false;
    }
    /* Arguments must be numbers. */


    for (var i = 0; i < 4; ++i) {
      if (typeof arguments[i] !== "number" || isNaN(arguments[i]) || !isFinite(arguments[i])) {
        return false;
      }
    }
    /* X values must be in the [0, 1] range. */


    mX1 = Math.min(mX1, 1);
    mX2 = Math.min(mX2, 1);
    mX1 = Math.max(mX1, 0);
    mX2 = Math.max(mX2, 0);
    var mSampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);

    function A(aA1, aA2) {
      return 1.0 - 3.0 * aA2 + 3.0 * aA1;
    }

    function B(aA1, aA2) {
      return 3.0 * aA2 - 6.0 * aA1;
    }

    function C(aA1) {
      return 3.0 * aA1;
    }

    function calcBezier(aT, aA1, aA2) {
      return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;
    }

    function getSlope(aT, aA1, aA2) {
      return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);
    }

    function newtonRaphsonIterate(aX, aGuessT) {
      for (var _i = 0; _i < NEWTON_ITERATIONS; ++_i) {
        var currentSlope = getSlope(aGuessT, mX1, mX2);

        if (currentSlope === 0.0) {
          return aGuessT;
        }

        var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
        aGuessT -= currentX / currentSlope;
      }

      return aGuessT;
    }

    function calcSampleValues() {
      for (var _i2 = 0; _i2 < kSplineTableSize; ++_i2) {
        mSampleValues[_i2] = calcBezier(_i2 * kSampleStepSize, mX1, mX2);
      }
    }

    function binarySubdivide(aX, aA, aB) {
      var currentX,
          currentT,
          i = 0;

      do {
        currentT = aA + (aB - aA) / 2.0;
        currentX = calcBezier(currentT, mX1, mX2) - aX;

        if (currentX > 0.0) {
          aB = currentT;
        } else {
          aA = currentT;
        }
      } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);

      return currentT;
    }

    function getTForX(aX) {
      var intervalStart = 0.0,
          currentSample = 1,
          lastSample = kSplineTableSize - 1;

      for (; currentSample !== lastSample && mSampleValues[currentSample] <= aX; ++currentSample) {
        intervalStart += kSampleStepSize;
      }

      --currentSample;
      var dist = (aX - mSampleValues[currentSample]) / (mSampleValues[currentSample + 1] - mSampleValues[currentSample]),
          guessForT = intervalStart + dist * kSampleStepSize,
          initialSlope = getSlope(guessForT, mX1, mX2);

      if (initialSlope >= NEWTON_MIN_SLOPE) {
        return newtonRaphsonIterate(aX, guessForT);
      } else if (initialSlope === 0.0) {
        return guessForT;
      } else {
        return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize);
      }
    }

    var _precomputed = false;

    function precompute() {
      _precomputed = true;

      if (mX1 !== mY1 || mX2 !== mY2) {
        calcSampleValues();
      }
    }

    var f = function f(aX) {
      if (!_precomputed) {
        precompute();
      }

      if (mX1 === mY1 && mX2 === mY2) {
        return aX;
      }

      if (aX === 0) {
        return 0;
      }

      if (aX === 1) {
        return 1;
      }

      return calcBezier(getTForX(aX), mY1, mY2);
    };

    f.getControlPoints = function () {
      return [{
        x: mX1,
        y: mY1
      }, {
        x: mX2,
        y: mY2
      }];
    };

    var str = "generateBezier(" + [mX1, mY1, mX2, mY2] + ")";

    f.toString = function () {
      return str;
    };

    return f;
  }

  /*! Runge-Kutta spring physics function generator. Adapted from Framer.js, copyright Koen Bok. MIT License: http://en.wikipedia.org/wiki/MIT_License */

  /* Given a tension, friction, and duration, a simulation at 60FPS will first run without a defined duration in order to calculate the full path. A second pass
     then adjusts the time delta -- using the relation between actual time and duration -- to calculate the path for the duration-constrained animation. */
  var generateSpringRK4 = function () {
    function springAccelerationForState(state) {
      return -state.tension * state.x - state.friction * state.v;
    }

    function springEvaluateStateWithDerivative(initialState, dt, derivative) {
      var state = {
        x: initialState.x + derivative.dx * dt,
        v: initialState.v + derivative.dv * dt,
        tension: initialState.tension,
        friction: initialState.friction
      };
      return {
        dx: state.v,
        dv: springAccelerationForState(state)
      };
    }

    function springIntegrateState(state, dt) {
      var a = {
        dx: state.v,
        dv: springAccelerationForState(state)
      },
          b = springEvaluateStateWithDerivative(state, dt * 0.5, a),
          c = springEvaluateStateWithDerivative(state, dt * 0.5, b),
          d = springEvaluateStateWithDerivative(state, dt, c),
          dxdt = 1.0 / 6.0 * (a.dx + 2.0 * (b.dx + c.dx) + d.dx),
          dvdt = 1.0 / 6.0 * (a.dv + 2.0 * (b.dv + c.dv) + d.dv);
      state.x = state.x + dxdt * dt;
      state.v = state.v + dvdt * dt;
      return state;
    }

    return function springRK4Factory(tension, friction, duration) {
      var initState = {
        x: -1,
        v: 0,
        tension: null,
        friction: null
      },
          path = [0],
          time_lapsed = 0,
          tolerance = 1 / 10000,
          DT = 16 / 1000,
          have_duration,
          dt,
          last_state;
      tension = parseFloat(tension) || 500;
      friction = parseFloat(friction) || 20;
      duration = duration || null;
      initState.tension = tension;
      initState.friction = friction;
      have_duration = duration !== null;
      /* Calculate the actual time it takes for this animation to complete with the provided conditions. */

      if (have_duration) {
        /* Run the simulation without a duration. */
        time_lapsed = springRK4Factory(tension, friction);
        /* Compute the adjusted time delta. */

        dt = time_lapsed / duration * DT;
      } else {
        dt = DT;
      }

      for (;;) {
        /* Next/step function .*/
        last_state = springIntegrateState(last_state || initState, dt);
        /* Store the position. */

        path.push(1 + last_state.x);
        time_lapsed += 16;
        /* If the change threshold is reached, break. */

        if (!(Math.abs(last_state.x) > tolerance && Math.abs(last_state.v) > tolerance)) {
          break;
        }
      }
      /* If duration is not defined, return the actual time required for completing this animation. Otherwise, return a closure that holds the
         computed path and returns a snapshot of the position according to a given percentComplete. */


      return !have_duration ? time_lapsed : function (percentComplete) {
        return path[percentComplete * (path.length - 1) | 0];
      };
    };
  }();

  var cubicBezier = function cubicBezier(t1, p1, t2, p2) {
    var bezier = generateCubicBezier(t1, p1, t2, p2);
    return function (start, end, percent) {
      return start + (end - start) * bezier(percent);
    };
  };

  var easings = {
    'linear': function linear(start, end, percent) {
      return start + (end - start) * percent;
    },
    // default easings
    'ease': cubicBezier(0.25, 0.1, 0.25, 1),
    'ease-in': cubicBezier(0.42, 0, 1, 1),
    'ease-out': cubicBezier(0, 0, 0.58, 1),
    'ease-in-out': cubicBezier(0.42, 0, 0.58, 1),
    // sine
    'ease-in-sine': cubicBezier(0.47, 0, 0.745, 0.715),
    'ease-out-sine': cubicBezier(0.39, 0.575, 0.565, 1),
    'ease-in-out-sine': cubicBezier(0.445, 0.05, 0.55, 0.95),
    // quad
    'ease-in-quad': cubicBezier(0.55, 0.085, 0.68, 0.53),
    'ease-out-quad': cubicBezier(0.25, 0.46, 0.45, 0.94),
    'ease-in-out-quad': cubicBezier(0.455, 0.03, 0.515, 0.955),
    // cubic
    'ease-in-cubic': cubicBezier(0.55, 0.055, 0.675, 0.19),
    'ease-out-cubic': cubicBezier(0.215, 0.61, 0.355, 1),
    'ease-in-out-cubic': cubicBezier(0.645, 0.045, 0.355, 1),
    // quart
    'ease-in-quart': cubicBezier(0.895, 0.03, 0.685, 0.22),
    'ease-out-quart': cubicBezier(0.165, 0.84, 0.44, 1),
    'ease-in-out-quart': cubicBezier(0.77, 0, 0.175, 1),
    // quint
    'ease-in-quint': cubicBezier(0.755, 0.05, 0.855, 0.06),
    'ease-out-quint': cubicBezier(0.23, 1, 0.32, 1),
    'ease-in-out-quint': cubicBezier(0.86, 0, 0.07, 1),
    // expo
    'ease-in-expo': cubicBezier(0.95, 0.05, 0.795, 0.035),
    'ease-out-expo': cubicBezier(0.19, 1, 0.22, 1),
    'ease-in-out-expo': cubicBezier(1, 0, 0, 1),
    // circ
    'ease-in-circ': cubicBezier(0.6, 0.04, 0.98, 0.335),
    'ease-out-circ': cubicBezier(0.075, 0.82, 0.165, 1),
    'ease-in-out-circ': cubicBezier(0.785, 0.135, 0.15, 0.86),
    // user param easings...
    'spring': function spring(tension, friction, duration) {
      if (duration === 0) {
        // can't get a spring w/ duration 0
        return easings.linear; // duration 0 => jump to end so impl doesn't matter
      }

      var spring = generateSpringRK4(tension, friction, duration);
      return function (start, end, percent) {
        return start + (end - start) * spring(percent);
      };
    },
    'cubic-bezier': cubicBezier
  };

  function getEasedValue(type, start, end, percent, easingFn) {
    if (percent === 1) {
      return end;
    }

    if (start === end) {
      return end;
    }

    var val = easingFn(start, end, percent);

    if (type == null) {
      return val;
    }

    if (type.roundValue || type.color) {
      val = Math.round(val);
    }

    if (type.min !== undefined) {
      val = Math.max(val, type.min);
    }

    if (type.max !== undefined) {
      val = Math.min(val, type.max);
    }

    return val;
  }

  function getValue(prop, spec) {
    if (prop.pfValue != null || prop.value != null) {
      if (prop.pfValue != null && (spec == null || spec.type.units !== '%')) {
        return prop.pfValue;
      } else {
        return prop.value;
      }
    } else {
      return prop;
    }
  }

  function ease(startProp, endProp, percent, easingFn, propSpec) {
    var type = propSpec != null ? propSpec.type : null;

    if (percent < 0) {
      percent = 0;
    } else if (percent > 1) {
      percent = 1;
    }

    var start = getValue(startProp, propSpec);
    var end = getValue(endProp, propSpec);

    if (number(start) && number(end)) {
      return getEasedValue(type, start, end, percent, easingFn);
    } else if (array(start) && array(end)) {
      var easedArr = [];

      for (var i = 0; i < end.length; i++) {
        var si = start[i];
        var ei = end[i];

        if (si != null && ei != null) {
          var val = getEasedValue(type, si, ei, percent, easingFn);
          easedArr.push(val);
        } else {
          easedArr.push(ei);
        }
      }

      return easedArr;
    }

    return undefined;
  }

  function step(self, ani, now, isCore) {
    var isEles = !isCore;
    var _p = self._private;
    var ani_p = ani._private;
    var pEasing = ani_p.easing;
    var startTime = ani_p.startTime;
    var cy = isCore ? self : self.cy();
    var style = cy.style();

    if (!ani_p.easingImpl) {
      if (pEasing == null) {
        // use default
        ani_p.easingImpl = easings['linear'];
      } else {
        // then define w/ name
        var easingVals;

        if (string(pEasing)) {
          var easingProp = style.parse('transition-timing-function', pEasing);
          easingVals = easingProp.value;
        } else {
          // then assume preparsed array
          easingVals = pEasing;
        }

        var name, args;

        if (string(easingVals)) {
          name = easingVals;
          args = [];
        } else {
          name = easingVals[1];
          args = easingVals.slice(2).map(function (n) {
            return +n;
          });
        }

        if (args.length > 0) {
          // create with args
          if (name === 'spring') {
            args.push(ani_p.duration); // need duration to generate spring
          }

          ani_p.easingImpl = easings[name].apply(null, args);
        } else {
          // static impl by name
          ani_p.easingImpl = easings[name];
        }
      }
    }

    var easing = ani_p.easingImpl;
    var percent;

    if (ani_p.duration === 0) {
      percent = 1;
    } else {
      percent = (now - startTime) / ani_p.duration;
    }

    if (ani_p.applying) {
      percent = ani_p.progress;
    }

    if (percent < 0) {
      percent = 0;
    } else if (percent > 1) {
      percent = 1;
    }

    if (ani_p.delay == null) {
      // then update
      var startPos = ani_p.startPosition;
      var endPos = ani_p.position;

      if (endPos && isEles && !self.locked()) {
        var newPos = {};

        if (valid(startPos.x, endPos.x)) {
          newPos.x = ease(startPos.x, endPos.x, percent, easing);
        }

        if (valid(startPos.y, endPos.y)) {
          newPos.y = ease(startPos.y, endPos.y, percent, easing);
        }

        self.position(newPos);
      }

      var startPan = ani_p.startPan;
      var endPan = ani_p.pan;
      var pan = _p.pan;
      var animatingPan = endPan != null && isCore;

      if (animatingPan) {
        if (valid(startPan.x, endPan.x)) {
          pan.x = ease(startPan.x, endPan.x, percent, easing);
        }

        if (valid(startPan.y, endPan.y)) {
          pan.y = ease(startPan.y, endPan.y, percent, easing);
        }

        self.emit('pan');
      }

      var startZoom = ani_p.startZoom;
      var endZoom = ani_p.zoom;
      var animatingZoom = endZoom != null && isCore;

      if (animatingZoom) {
        if (valid(startZoom, endZoom)) {
          _p.zoom = bound(_p.minZoom, ease(startZoom, endZoom, percent, easing), _p.maxZoom);
        }

        self.emit('zoom');
      }

      if (animatingPan || animatingZoom) {
        self.emit('viewport');
      }

      var props = ani_p.style;

      if (props && props.length > 0 && isEles) {
        for (var i = 0; i < props.length; i++) {
          var prop = props[i];
          var _name = prop.name;
          var end = prop;
          var start = ani_p.startStyle[_name];
          var propSpec = style.properties[start.name];
          var easedVal = ease(start, end, percent, easing, propSpec);
          style.overrideBypass(self, _name, easedVal);
        } // for props


        self.emit('style');
      } // if

    }

    ani_p.progress = percent;
    return percent;
  }

  function valid(start, end) {
    if (start == null || end == null) {
      return false;
    }

    if (number(start) && number(end)) {
      return true;
    } else if (start && end) {
      return true;
    }

    return false;
  }

  function startAnimation(self, ani, now, isCore) {
    var ani_p = ani._private;
    ani_p.started = true;
    ani_p.startTime = now - ani_p.progress * ani_p.duration;
  }

  function stepAll(now, cy) {
    var eles = cy._private.aniEles;
    var doneEles = [];

    function stepOne(ele, isCore) {
      var _p = ele._private;
      var current = _p.animation.current;
      var queue = _p.animation.queue;
      var ranAnis = false; // cancel all animations on display:none ele

      if (!isCore && ele.pstyle('display').value === 'none') {
        // put all current and queue animations in this tick's current list
        // and empty the lists for the element
        current = current.splice(0, current.length).concat(queue.splice(0, queue.length)); // stop all animations

        for (var i = 0; i < current.length; i++) {
          current[i].stop();
        }
      } // if nothing currently animating, get something from the queue


      if (current.length === 0) {
        var next = queue.shift();

        if (next) {
          current.push(next);
        }
      }

      var callbacks = function callbacks(_callbacks) {
        for (var j = _callbacks.length - 1; j >= 0; j--) {
          var cb = _callbacks[j];
          cb();
        }

        _callbacks.splice(0, _callbacks.length);
      }; // step and remove if done


      for (var _i = current.length - 1; _i >= 0; _i--) {
        var ani = current[_i];
        var ani_p = ani._private;

        if (ani_p.stopped) {
          current.splice(_i, 1);
          ani_p.hooked = false;
          ani_p.playing = false;
          ani_p.started = false;
          callbacks(ani_p.frames);
          continue;
        }

        if (!ani_p.playing && !ani_p.applying) {
          continue;
        } // an apply() while playing shouldn't do anything


        if (ani_p.playing && ani_p.applying) {
          ani_p.applying = false;
        }

        if (!ani_p.started) {
          startAnimation(ele, ani, now);
        }

        step(ele, ani, now, isCore);

        if (ani_p.applying) {
          ani_p.applying = false;
        }

        callbacks(ani_p.frames);

        if (ani_p.step != null) {
          ani_p.step(now);
        }

        if (ani.completed()) {
          current.splice(_i, 1);
          ani_p.hooked = false;
          ani_p.playing = false;
          ani_p.started = false;
          callbacks(ani_p.completes);
        }

        ranAnis = true;
      }

      if (!isCore && current.length === 0 && queue.length === 0) {
        doneEles.push(ele);
      }

      return ranAnis;
    } // stepElement
    // handle all eles


    var ranEleAni = false;

    for (var e = 0; e < eles.length; e++) {
      var ele = eles[e];
      var handledThisEle = stepOne(ele);
      ranEleAni = ranEleAni || handledThisEle;
    } // each element


    var ranCoreAni = stepOne(cy, true); // notify renderer

    if (ranEleAni || ranCoreAni) {
      if (eles.length > 0) {
        cy.notify('draw', eles);
      } else {
        cy.notify('draw');
      }
    } // remove elements from list of currently animating if its queues are empty


    eles.unmerge(doneEles);
    cy.emit('step');
  } // stepAll

  var corefn$1 = {
    // pull in animation functions
    animate: define$3.animate(),
    animation: define$3.animation(),
    animated: define$3.animated(),
    clearQueue: define$3.clearQueue(),
    delay: define$3.delay(),
    delayAnimation: define$3.delayAnimation(),
    stop: define$3.stop(),
    addToAnimationPool: function addToAnimationPool(eles) {
      var cy = this;

      if (!cy.styleEnabled()) {
        return;
      } // save cycles when no style used


      cy._private.aniEles.merge(eles);
    },
    stopAnimationLoop: function stopAnimationLoop() {
      this._private.animationsRunning = false;
    },
    startAnimationLoop: function startAnimationLoop() {
      var cy = this;
      cy._private.animationsRunning = true;

      if (!cy.styleEnabled()) {
        return;
      } // save cycles when no style used
      // NB the animation loop will exec in headless environments if style enabled
      // and explicit cy.destroy() is necessary to stop the loop


      function headlessStep() {
        if (!cy._private.animationsRunning) {
          return;
        }

        requestAnimationFrame(function animationStep(now) {
          stepAll(now, cy);
          headlessStep();
        });
      }

      var renderer = cy.renderer();

      if (renderer && renderer.beforeRender) {
        // let the renderer schedule animations
        renderer.beforeRender(function rendererAnimationStep(willDraw, now) {
          stepAll(now, cy);
        }, renderer.beforeRenderPriorities.animations);
      } else {
        // manage the animation loop ourselves
        headlessStep(); // first call
      }
    }
  };

  var emitterOptions$1 = {
    qualifierCompare: function qualifierCompare(selector1, selector2) {
      if (selector1 == null || selector2 == null) {
        return selector1 == null && selector2 == null;
      } else {
        return selector1.sameText(selector2);
      }
    },
    eventMatches: function eventMatches(cy, listener, eventObj) {
      var selector = listener.qualifier;

      if (selector != null) {
        return cy !== eventObj.target && element(eventObj.target) && selector.matches(eventObj.target);
      }

      return true;
    },
    addEventFields: function addEventFields(cy, evt) {
      evt.cy = cy;
      evt.target = cy;
    },
    callbackContext: function callbackContext(cy, listener, eventObj) {
      return listener.qualifier != null ? eventObj.target : cy;
    }
  };

  var argSelector$1 = function argSelector(arg) {
    if (string(arg)) {
      return new Selector(arg);
    } else {
      return arg;
    }
  };

  var elesfn$v = {
    createEmitter: function createEmitter() {
      var _p = this._private;

      if (!_p.emitter) {
        _p.emitter = new Emitter(emitterOptions$1, this);
      }

      return this;
    },
    emitter: function emitter() {
      return this._private.emitter;
    },
    on: function on(events, selector, callback) {
      this.emitter().on(events, argSelector$1(selector), callback);
      return this;
    },
    removeListener: function removeListener(events, selector, callback) {
      this.emitter().removeListener(events, argSelector$1(selector), callback);
      return this;
    },
    removeAllListeners: function removeAllListeners() {
      this.emitter().removeAllListeners();
      return this;
    },
    one: function one(events, selector, callback) {
      this.emitter().one(events, argSelector$1(selector), callback);
      return this;
    },
    once: function once(events, selector, callback) {
      this.emitter().one(events, argSelector$1(selector), callback);
      return this;
    },
    emit: function emit(events, extraParams) {
      this.emitter().emit(events, extraParams);
      return this;
    },
    emitAndNotify: function emitAndNotify(event, eles) {
      this.emit(event);
      this.notify(event, eles);
      return this;
    }
  };
  define$3.eventAliasesOn(elesfn$v);

  var corefn$2 = {
    png: function png(options) {
      var renderer = this._private.renderer;
      options = options || {};
      return renderer.png(options);
    },
    jpg: function jpg(options) {
      var renderer = this._private.renderer;
      options = options || {};
      options.bg = options.bg || '#fff';
      return renderer.jpg(options);
    }
  };
  corefn$2.jpeg = corefn$2.jpg;

  var corefn$3 = {
    layout: function layout(options) {
      var cy = this;

      if (options == null) {
        error('Layout options must be specified to make a layout');
        return;
      }

      if (options.name == null) {
        error('A `name` must be specified to make a layout');
        return;
      }

      var name = options.name;
      var Layout = cy.extension('layout', name);

      if (Layout == null) {
        error('No such layout `' + name + '` found.  Did you forget to import it and `cytoscape.use()` it?');
        return;
      }

      var eles;

      if (string(options.eles)) {
        eles = cy.$(options.eles);
      } else {
        eles = options.eles != null ? options.eles : cy.$();
      }

      var layout = new Layout(extend({}, options, {
        cy: cy,
        eles: eles
      }));
      return layout;
    }
  };
  corefn$3.createLayout = corefn$3.makeLayout = corefn$3.layout;

  var corefn$4 = {
    notify: function notify(eventName, eventEles) {
      var _p = this._private;

      if (this.batching()) {
        _p.batchNotifications = _p.batchNotifications || {};
        var eles = _p.batchNotifications[eventName] = _p.batchNotifications[eventName] || this.collection();

        if (eventEles != null) {
          eles.merge(eventEles);
        }

        return; // notifications are disabled during batching
      }

      if (!_p.notificationsEnabled) {
        return;
      } // exit on disabled


      var renderer = this.renderer(); // exit if destroy() called on core or renderer in between frames #1499 #1528

      if (this.destroyed() || !renderer) {
        return;
      }

      renderer.notify(eventName, eventEles);
    },
    notifications: function notifications(bool) {
      var p = this._private;

      if (bool === undefined) {
        return p.notificationsEnabled;
      } else {
        p.notificationsEnabled = bool ? true : false;
      }

      return this;
    },
    noNotifications: function noNotifications(callback) {
      this.notifications(false);
      callback();
      this.notifications(true);
    },
    batching: function batching() {
      return this._private.batchCount > 0;
    },
    startBatch: function startBatch() {
      var _p = this._private;

      if (_p.batchCount == null) {
        _p.batchCount = 0;
      }

      if (_p.batchCount === 0) {
        _p.batchStyleEles = this.collection();
        _p.batchNotifications = {};
      }

      _p.batchCount++;
      return this;
    },
    endBatch: function endBatch() {
      var _p = this._private;

      if (_p.batchCount === 0) {
        return this;
      }

      _p.batchCount--;

      if (_p.batchCount === 0) {
        // update style for dirty eles
        _p.batchStyleEles.updateStyle();

        var renderer = this.renderer(); // notify the renderer of queued eles and event types

        Object.keys(_p.batchNotifications).forEach(function (eventName) {
          var eles = _p.batchNotifications[eventName];

          if (eles.empty()) {
            renderer.notify(eventName);
          } else {
            renderer.notify(eventName, eles);
          }
        });
      }

      return this;
    },
    batch: function batch(callback) {
      this.startBatch();
      callback();
      this.endBatch();
      return this;
    },
    // for backwards compatibility
    batchData: function batchData(map) {
      var cy = this;
      return this.batch(function () {
        var ids = Object.keys(map);

        for (var i = 0; i < ids.length; i++) {
          var id = ids[i];
          var data = map[id];
          var ele = cy.getElementById(id);
          ele.data(data);
        }
      });
    }
  };

  var rendererDefaults = defaults({
    hideEdgesOnViewport: false,
    textureOnViewport: false,
    motionBlur: false,
    motionBlurOpacity: 0.05,
    pixelRatio: undefined,
    desktopTapThreshold: 4,
    touchTapThreshold: 8,
    wheelSensitivity: 1,
    debug: false,
    showFps: false
  });
  var corefn$5 = {
    renderTo: function renderTo(context, zoom, pan, pxRatio) {
      var r = this._private.renderer;
      r.renderTo(context, zoom, pan, pxRatio);
      return this;
    },
    renderer: function renderer() {
      return this._private.renderer;
    },
    forceRender: function forceRender() {
      this.notify('draw');
      return this;
    },
    resize: function resize() {
      this.invalidateSize();
      this.emitAndNotify('resize');
      return this;
    },
    initRenderer: function initRenderer(options) {
      var cy = this;
      var RendererProto = cy.extension('renderer', options.name);

      if (RendererProto == null) {
        error("Can not initialise: No such renderer `".concat(options.name, "` found. Did you forget to import it and `cytoscape.use()` it?"));
        return;
      }

      if (options.wheelSensitivity !== undefined) {
        warn("You have set a custom wheel sensitivity.  This will make your app zoom unnaturally when using mainstream mice.  You should change this value from the default only if you can guarantee that all your users will use the same hardware and OS configuration as your current machine.");
      }

      var rOpts = rendererDefaults(options);
      rOpts.cy = cy;
      cy._private.renderer = new RendererProto(rOpts);
      this.notify('init');
    },
    destroyRenderer: function destroyRenderer() {
      var cy = this;
      cy.notify('destroy'); // destroy the renderer

      var domEle = cy.container();

      if (domEle) {
        domEle._cyreg = null;

        while (domEle.childNodes.length > 0) {
          domEle.removeChild(domEle.childNodes[0]);
        }
      }

      cy._private.renderer = null; // to be extra safe, remove the ref

      cy.mutableElements().forEach(function (ele) {
        var _p = ele._private;
        _p.rscratch = {};
        _p.rstyle = {};
        _p.animation.current = [];
        _p.animation.queue = [];
      });
    },
    onRender: function onRender(fn) {
      return this.on('render', fn);
    },
    offRender: function offRender(fn) {
      return this.off('render', fn);
    }
  };
  corefn$5.invalidateDimensions = corefn$5.resize;

  var corefn$6 = {
    // get a collection
    // - empty collection on no args
    // - collection of elements in the graph on selector arg
    // - guarantee a returned collection when elements or collection specified
    collection: function collection(eles, opts) {
      if (string(eles)) {
        return this.$(eles);
      } else if (elementOrCollection(eles)) {
        return eles.collection();
      } else if (array(eles)) {
        return new Collection$1(this, eles, opts);
      }

      return new Collection$1(this);
    },
    nodes: function nodes(selector) {
      var nodes = this.$(function (ele) {
        return ele.isNode();
      });

      if (selector) {
        return nodes.filter(selector);
      }

      return nodes;
    },
    edges: function edges(selector) {
      var edges = this.$(function (ele) {
        return ele.isEdge();
      });

      if (selector) {
        return edges.filter(selector);
      }

      return edges;
    },
    // search the graph like jQuery
    $: function $(selector) {
      var eles = this._private.elements;

      if (selector) {
        return eles.filter(selector);
      } else {
        return eles.spawnSelf();
      }
    },
    mutableElements: function mutableElements() {
      return this._private.elements;
    }
  }; // aliases

  corefn$6.elements = corefn$6.filter = corefn$6.$;

  var styfn = {}; // keys for style blocks, e.g. ttfftt

  var TRUE = 't';
  var FALSE = 'f'; // (potentially expensive calculation)
  // apply the style to the element based on
  // - its bypass
  // - what selectors match it

  styfn.apply = function (eles) {
    var self = this;
    var _p = self._private;
    var cy = _p.cy;
    var updatedEles = cy.collection();

    if (_p.newStyle) {
      // clear style caches
      _p.contextStyles = {};
      _p.propDiffs = {};
      self.cleanElements(eles, true);
    }

    for (var ie = 0; ie < eles.length; ie++) {
      var ele = eles[ie];
      var cxtMeta = self.getContextMeta(ele);

      if (cxtMeta.empty) {
        continue;
      }

      var cxtStyle = self.getContextStyle(cxtMeta);
      var app = self.applyContextStyle(cxtMeta, cxtStyle, ele);

      if (!_p.newStyle) {
        self.updateTransitions(ele, app.diffProps);
      }

      var hintsDiff = self.updateStyleHints(ele);

      if (hintsDiff) {
        updatedEles.merge(ele);
      }
    } // for elements


    _p.newStyle = false;
    return updatedEles;
  };

  styfn.getPropertiesDiff = function (oldCxtKey, newCxtKey) {
    var self = this;
    var cache = self._private.propDiffs = self._private.propDiffs || {};
    var dualCxtKey = oldCxtKey + '-' + newCxtKey;
    var cachedVal = cache[dualCxtKey];

    if (cachedVal) {
      return cachedVal;
    }

    var diffProps = [];
    var addedProp = {};

    for (var i = 0; i < self.length; i++) {
      var cxt = self[i];
      var oldHasCxt = oldCxtKey[i] === TRUE;
      var newHasCxt = newCxtKey[i] === TRUE;
      var cxtHasDiffed = oldHasCxt !== newHasCxt;
      var cxtHasMappedProps = cxt.mappedProperties.length > 0;

      if (cxtHasDiffed || newHasCxt && cxtHasMappedProps) {
        var props = void 0;

        if (cxtHasDiffed && cxtHasMappedProps) {
          props = cxt.properties; // suffices b/c mappedProperties is a subset of properties
        } else if (cxtHasDiffed) {
          props = cxt.properties; // need to check them all
        } else if (cxtHasMappedProps) {
          props = cxt.mappedProperties; // only need to check mapped
        }

        for (var j = 0; j < props.length; j++) {
          var prop = props[j];
          var name = prop.name; // if a later context overrides this property, then the fact that this context has switched/diffed doesn't matter
          // (semi expensive check since it makes this function O(n^2) on context length, but worth it since overall result
          // is cached)

          var laterCxtOverrides = false;

          for (var k = i + 1; k < self.length; k++) {
            var laterCxt = self[k];
            var hasLaterCxt = newCxtKey[k] === TRUE;

            if (!hasLaterCxt) {
              continue;
            } // can't override unless the context is active


            laterCxtOverrides = laterCxt.properties[prop.name] != null;

            if (laterCxtOverrides) {
              break;
            } // exit early as long as one later context overrides

          }

          if (!addedProp[name] && !laterCxtOverrides) {
            addedProp[name] = true;
            diffProps.push(name);
          }
        } // for props

      } // if

    } // for contexts


    cache[dualCxtKey] = diffProps;
    return diffProps;
  };

  styfn.getContextMeta = function (ele) {
    var self = this;
    var cxtKey = '';
    var diffProps;
    var prevKey = ele._private.styleCxtKey || '';

    if (self._private.newStyle) {
      prevKey = ''; // since we need to apply all style if a fresh stylesheet
    } // get the cxt key


    for (var i = 0; i < self.length; i++) {
      var context = self[i];
      var contextSelectorMatches = context.selector && context.selector.matches(ele); // NB: context.selector may be null for 'core'

      if (contextSelectorMatches) {
        cxtKey += TRUE;
      } else {
        cxtKey += FALSE;
      }
    } // for context


    diffProps = self.getPropertiesDiff(prevKey, cxtKey);
    ele._private.styleCxtKey = cxtKey;
    return {
      key: cxtKey,
      diffPropNames: diffProps,
      empty: diffProps.length === 0
    };
  }; // gets a computed ele style object based on matched contexts


  styfn.getContextStyle = function (cxtMeta) {
    var cxtKey = cxtMeta.key;
    var self = this;
    var cxtStyles = this._private.contextStyles = this._private.contextStyles || {}; // if already computed style, returned cached copy

    if (cxtStyles[cxtKey]) {
      return cxtStyles[cxtKey];
    }

    var style = {
      _private: {
        key: cxtKey
      }
    };

    for (var i = 0; i < self.length; i++) {
      var cxt = self[i];
      var hasCxt = cxtKey[i] === TRUE;

      if (!hasCxt) {
        continue;
      }

      for (var j = 0; j < cxt.properties.length; j++) {
        var prop = cxt.properties[j];
        style[prop.name] = prop;
      }
    }

    cxtStyles[cxtKey] = style;
    return style;
  };

  styfn.applyContextStyle = function (cxtMeta, cxtStyle, ele) {
    var self = this;
    var diffProps = cxtMeta.diffPropNames;
    var retDiffProps = {};
    var types = self.types;

    for (var i = 0; i < diffProps.length; i++) {
      var diffPropName = diffProps[i];
      var cxtProp = cxtStyle[diffPropName];
      var eleProp = ele.pstyle(diffPropName);

      if (!cxtProp) {
        // no context prop means delete
        if (!eleProp) {
          continue; // no existing prop means nothing needs to be removed
          // nb affects initial application on mapped values like control-point-distances
        } else if (eleProp.bypass) {
          cxtProp = {
            name: diffPropName,
            deleteBypassed: true
          };
        } else {
          cxtProp = {
            name: diffPropName,
            "delete": true
          };
        }
      } // save cycles when the context prop doesn't need to be applied


      if (eleProp === cxtProp) {
        continue;
      } // save cycles when a mapped context prop doesn't need to be applied


      if (cxtProp.mapped === types.fn // context prop is function mapper
      && eleProp != null // some props can be null even by default (e.g. a prop that overrides another one)
      && eleProp.mapping != null // ele prop is a concrete value from from a mapper
      && eleProp.mapping.value === cxtProp.value // the current prop on the ele is a flat prop value for the function mapper
      ) {
          // NB don't write to cxtProp, as it's shared among eles (stored in stylesheet)
          var mapping = eleProp.mapping; // can write to mapping, as it's a per-ele copy

          var fnValue = mapping.fnValue = cxtProp.value(ele); // temporarily cache the value in case of a miss

          if (fnValue === mapping.prevFnValue) {
            continue;
          }
        }

      var retDiffProp = retDiffProps[diffPropName] = {
        prev: eleProp
      };
      self.applyParsedProperty(ele, cxtProp);
      retDiffProp.next = ele.pstyle(diffPropName);

      if (retDiffProp.next && retDiffProp.next.bypass) {
        retDiffProp.next = retDiffProp.next.bypassed;
      }
    }

    return {
      diffProps: retDiffProps
    };
  };

  styfn.updateStyleHints = function (ele) {
    var _p = ele._private;
    var self = this;
    var propNames = self.propertyGroupNames;
    var propGrKeys = self.propertyGroupKeys;

    var propHash = function propHash(ele, propNames, seedKey) {
      return self.getPropertiesHash(ele, propNames, seedKey);
    };

    var oldStyleKey = _p.styleKey;

    if (ele.removed()) {
      return false;
    }

    var isNode = _p.group === 'nodes'; // get the style key hashes per prop group
    // but lazily -- only use non-default prop values to reduce the number of hashes
    //

    var overriddenStyles = ele._private.style;
    propNames = Object.keys(overriddenStyles);

    for (var i = 0; i < propGrKeys.length; i++) {
      var grKey = propGrKeys[i];
      _p.styleKeys[grKey] = [DEFAULT_HASH_SEED, DEFAULT_HASH_SEED_ALT];
    }

    var updateGrKey1 = function updateGrKey1(val, grKey) {
      return _p.styleKeys[grKey][0] = hashInt(val, _p.styleKeys[grKey][0]);
    };

    var updateGrKey2 = function updateGrKey2(val, grKey) {
      return _p.styleKeys[grKey][1] = hashIntAlt(val, _p.styleKeys[grKey][1]);
    };

    var updateGrKey = function updateGrKey(val, grKey) {
      updateGrKey1(val, grKey);
      updateGrKey2(val, grKey);
    };

    var updateGrKeyWStr = function updateGrKeyWStr(strVal, grKey) {
      for (var j = 0; j < strVal.length; j++) {
        var ch = strVal.charCodeAt(j);
        updateGrKey1(ch, grKey);
        updateGrKey2(ch, grKey);
      }
    }; // - hashing works on 32 bit ints b/c we use bitwise ops
    // - small numbers get cut off (e.g. 0.123 is seen as 0 by the hashing function)
    // - raise up small numbers so more significant digits are seen by hashing
    // - make small numbers larger than a normal value to avoid collisions
    // - works in practice and it's relatively cheap


    var N = 2000000000;

    var cleanNum = function cleanNum(val) {
      return -128 < val && val < 128 && Math.floor(val) !== val ? N - (val * 1024 | 0) : val;
    };

    for (var _i = 0; _i < propNames.length; _i++) {
      var name = propNames[_i];
      var parsedProp = overriddenStyles[name];

      if (parsedProp == null) {
        continue;
      }

      var propInfo = this.properties[name];
      var type = propInfo.type;
      var _grKey = propInfo.groupKey;
      var normalizedNumberVal = void 0;

      if (propInfo.hashOverride != null) {
        normalizedNumberVal = propInfo.hashOverride(ele, parsedProp);
      } else if (parsedProp.pfValue != null) {
        normalizedNumberVal = parsedProp.pfValue;
      } // might not be a number if it allows enums


      var numberVal = propInfo.enums == null ? parsedProp.value : null;
      var haveNormNum = normalizedNumberVal != null;
      var haveUnitedNum = numberVal != null;
      var haveNum = haveNormNum || haveUnitedNum;
      var units = parsedProp.units; // numbers are cheaper to hash than strings
      // 1 hash op vs n hash ops (for length n string)

      if (type.number && haveNum) {
        var v = haveNormNum ? normalizedNumberVal : numberVal;

        if (type.multiple) {
          for (var _i2 = 0; _i2 < v.length; _i2++) {
            updateGrKey(cleanNum(v[_i2]), _grKey);
          }
        } else {
          updateGrKey(cleanNum(v), _grKey);
        }

        if (!haveNormNum && units != null) {
          updateGrKeyWStr(units, _grKey);
        }
      } else {
        updateGrKeyWStr(parsedProp.strValue, _grKey);
      }
    } // overall style key
    //


    var hash = [DEFAULT_HASH_SEED, DEFAULT_HASH_SEED_ALT];

    for (var _i3 = 0; _i3 < propGrKeys.length; _i3++) {
      var _grKey2 = propGrKeys[_i3];
      var grHash = _p.styleKeys[_grKey2];
      hash[0] = hashInt(grHash[0], hash[0]);
      hash[1] = hashIntAlt(grHash[1], hash[1]);
    }

    _p.styleKey = combineHashes(hash[0], hash[1]); // label dims
    //

    var sk = _p.styleKeys;
    _p.labelDimsKey = combineHashesArray(sk.labelDimensions);
    var labelKeys = propHash(ele, ['label'], sk.labelDimensions);
    _p.labelKey = combineHashesArray(labelKeys);
    _p.labelStyleKey = combineHashesArray(hashArrays(sk.commonLabel, labelKeys));

    if (!isNode) {
      var sourceLabelKeys = propHash(ele, ['source-label'], sk.labelDimensions);
      _p.sourceLabelKey = combineHashesArray(sourceLabelKeys);
      _p.sourceLabelStyleKey = combineHashesArray(hashArrays(sk.commonLabel, sourceLabelKeys));
      var targetLabelKeys = propHash(ele, ['target-label'], sk.labelDimensions);
      _p.targetLabelKey = combineHashesArray(targetLabelKeys);
      _p.targetLabelStyleKey = combineHashesArray(hashArrays(sk.commonLabel, targetLabelKeys));
    } // node
    //


    if (isNode) {
      var _p$styleKeys = _p.styleKeys,
          nodeBody = _p$styleKeys.nodeBody,
          nodeBorder = _p$styleKeys.nodeBorder,
          backgroundImage = _p$styleKeys.backgroundImage,
          compound = _p$styleKeys.compound,
          pie = _p$styleKeys.pie;
      var nodeKeys = [nodeBorder, backgroundImage, compound, pie].reduce(hashArrays, nodeBody);
      _p.nodeKey = combineHashesArray(nodeKeys);
      _p.hasPie = pie[0] !== DEFAULT_HASH_SEED && pie[1] !== DEFAULT_HASH_SEED_ALT;
    }

    return oldStyleKey !== _p.styleKey;
  };

  styfn.clearStyleHints = function (ele) {
    var _p = ele._private;
    _p.styleKeys = {};
    _p.styleKey = null;
    _p.labelKey = null;
    _p.labelStyleKey = null;
    _p.sourceLabelKey = null;
    _p.sourceLabelStyleKey = null;
    _p.targetLabelKey = null;
    _p.targetLabelStyleKey = null;
    _p.nodeKey = null;
    _p.hasPie = null;
  }; // apply a property to the style (for internal use)
  // returns whether application was successful
  //
  // now, this function flattens the property, and here's how:
  //
  // for parsedProp:{ bypass: true, deleteBypass: true }
  // no property is generated, instead the bypass property in the
  // element's style is replaced by what's pointed to by the `bypassed`
  // field in the bypass property (i.e. restoring the property the
  // bypass was overriding)
  //
  // for parsedProp:{ mapped: truthy }
  // the generated flattenedProp:{ mapping: prop }
  //
  // for parsedProp:{ bypass: true }
  // the generated flattenedProp:{ bypassed: parsedProp }


  styfn.applyParsedProperty = function (ele, parsedProp) {
    var self = this;
    var prop = parsedProp;
    var style = ele._private.style;
    var flatProp;
    var types = self.types;
    var type = self.properties[prop.name].type;
    var propIsBypass = prop.bypass;
    var origProp = style[prop.name];
    var origPropIsBypass = origProp && origProp.bypass;
    var _p = ele._private;
    var flatPropMapping = 'mapping';

    var getVal = function getVal(p) {
      if (p == null) {
        return null;
      } else if (p.pfValue != null) {
        return p.pfValue;
      } else {
        return p.value;
      }
    };

    var checkTriggers = function checkTriggers() {
      var fromVal = getVal(origProp);
      var toVal = getVal(prop);
      self.checkTriggers(ele, prop.name, fromVal, toVal);
    }; // edge sanity checks to prevent the client from making serious mistakes


    if (parsedProp.name === 'curve-style' && ele.isEdge() && ( // loops must be bundled beziers
    parsedProp.value !== 'bezier' && ele.isLoop() || // edges connected to compound nodes can not be haystacks
    parsedProp.value === 'haystack' && (ele.source().isParent() || ele.target().isParent()))) {
      prop = parsedProp = this.parse(parsedProp.name, 'bezier', propIsBypass);
    }

    if (prop["delete"]) {
      // delete the property and use the default value on falsey value
      style[prop.name] = undefined;
      checkTriggers();
      return true;
    }

    if (prop.deleteBypassed) {
      // delete the property that the
      if (!origProp) {
        checkTriggers();
        return true; // can't delete if no prop
      } else if (origProp.bypass) {
        // delete bypassed
        origProp.bypassed = undefined;
        checkTriggers();
        return true;
      } else {
        return false; // we're unsuccessful deleting the bypassed
      }
    } // check if we need to delete the current bypass


    if (prop.deleteBypass) {
      // then this property is just here to indicate we need to delete
      if (!origProp) {
        checkTriggers();
        return true; // property is already not defined
      } else if (origProp.bypass) {
        // then replace the bypass property with the original
        // because the bypassed property was already applied (and therefore parsed), we can just replace it (no reapplying necessary)
        style[prop.name] = origProp.bypassed;
        checkTriggers();
        return true;
      } else {
        return false; // we're unsuccessful deleting the bypass
      }
    }

    var printMappingErr = function printMappingErr() {
      warn('Do not assign mappings to elements without corresponding data (i.e. ele `' + ele.id() + '` has no mapping for property `' + prop.name + '` with data field `' + prop.field + '`); try a `[' + prop.field + ']` selector to limit scope to elements with `' + prop.field + '` defined');
    }; // put the property in the style objects


    switch (prop.mapped) {
      // flatten the property if mapped
      case types.mapData:
        {
          // flatten the field (e.g. data.foo.bar)
          var fields = prop.field.split('.');
          var fieldVal = _p.data;

          for (var i = 0; i < fields.length && fieldVal; i++) {
            var field = fields[i];
            fieldVal = fieldVal[field];
          }

          if (fieldVal == null) {
            printMappingErr();
            return false;
          }

          var percent;

          if (!number(fieldVal)) {
            // then don't apply and fall back on the existing style
            warn('Do not use continuous mappers without specifying numeric data (i.e. `' + prop.field + ': ' + fieldVal + '` for `' + ele.id() + '` is non-numeric)');
            return false;
          } else {
            var fieldWidth = prop.fieldMax - prop.fieldMin;

            if (fieldWidth === 0) {
              // safety check -- not strictly necessary as no props of zero range should be passed here
              percent = 0;
            } else {
              percent = (fieldVal - prop.fieldMin) / fieldWidth;
            }
          } // make sure to bound percent value


          if (percent < 0) {
            percent = 0;
          } else if (percent > 1) {
            percent = 1;
          }

          if (type.color) {
            var r1 = prop.valueMin[0];
            var r2 = prop.valueMax[0];
            var g1 = prop.valueMin[1];
            var g2 = prop.valueMax[1];
            var b1 = prop.valueMin[2];
            var b2 = prop.valueMax[2];
            var a1 = prop.valueMin[3] == null ? 1 : prop.valueMin[3];
            var a2 = prop.valueMax[3] == null ? 1 : prop.valueMax[3];
            var clr = [Math.round(r1 + (r2 - r1) * percent), Math.round(g1 + (g2 - g1) * percent), Math.round(b1 + (b2 - b1) * percent), Math.round(a1 + (a2 - a1) * percent)];
            flatProp = {
              // colours are simple, so just create the flat property instead of expensive string parsing
              bypass: prop.bypass,
              // we're a bypass if the mapping property is a bypass
              name: prop.name,
              value: clr,
              strValue: 'rgb(' + clr[0] + ', ' + clr[1] + ', ' + clr[2] + ')'
            };
          } else if (type.number) {
            var calcValue = prop.valueMin + (prop.valueMax - prop.valueMin) * percent;
            flatProp = this.parse(prop.name, calcValue, prop.bypass, flatPropMapping);
          } else {
            return false; // can only map to colours and numbers
          }

          if (!flatProp) {
            // if we can't flatten the property, then don't apply the property and fall back on the existing style
            printMappingErr();
            return false;
          }

          flatProp.mapping = prop; // keep a reference to the mapping

          prop = flatProp; // the flattened (mapped) property is the one we want

          break;
        }
      // direct mapping

      case types.data:
        {
          // flatten the field (e.g. data.foo.bar)
          var _fields = prop.field.split('.');

          var _fieldVal = _p.data;

          for (var _i4 = 0; _i4 < _fields.length && _fieldVal; _i4++) {
            var _field = _fields[_i4];
            _fieldVal = _fieldVal[_field];
          }

          if (_fieldVal != null) {
            flatProp = this.parse(prop.name, _fieldVal, prop.bypass, flatPropMapping);
          }

          if (!flatProp) {
            // if we can't flatten the property, then don't apply and fall back on the existing style
            printMappingErr();
            return false;
          }

          flatProp.mapping = prop; // keep a reference to the mapping

          prop = flatProp; // the flattened (mapped) property is the one we want

          break;
        }

      case types.fn:
        {
          var fn = prop.value;
          var fnRetVal = prop.fnValue != null ? prop.fnValue : fn(ele); // check for cached value before calling function

          prop.prevFnValue = fnRetVal;

          if (fnRetVal == null) {
            warn('Custom function mappers may not return null (i.e. `' + prop.name + '` for ele `' + ele.id() + '` is null)');
            return false;
          }

          flatProp = this.parse(prop.name, fnRetVal, prop.bypass, flatPropMapping);

          if (!flatProp) {
            warn('Custom function mappers may not return invalid values for the property type (i.e. `' + prop.name + '` for ele `' + ele.id() + '` is invalid)');
            return false;
          }

          flatProp.mapping = copy(prop); // keep a reference to the mapping

          prop = flatProp; // the flattened (mapped) property is the one we want

          break;
        }

      case undefined:
        break;
      // just set the property

      default:
        return false;
      // not a valid mapping
    } // if the property is a bypass property, then link the resultant property to the original one


    if (propIsBypass) {
      if (origPropIsBypass) {
        // then this bypass overrides the existing one
        prop.bypassed = origProp.bypassed; // steal bypassed prop from old bypass
      } else {
        // then link the orig prop to the new bypass
        prop.bypassed = origProp;
      }

      style[prop.name] = prop; // and set
    } else {
      // prop is not bypass
      if (origPropIsBypass) {
        // then keep the orig prop (since it's a bypass) and link to the new prop
        origProp.bypassed = prop;
      } else {
        // then just replace the old prop with the new one
        style[prop.name] = prop;
      }
    }

    checkTriggers();
    return true;
  };

  styfn.cleanElements = function (eles, keepBypasses) {
    for (var i = 0; i < eles.length; i++) {
      var ele = eles[i];
      this.clearStyleHints(ele);
      ele.dirtyCompoundBoundsCache();
      ele.dirtyBoundingBoxCache();

      if (!keepBypasses) {
        ele._private.style = {};
      } else {
        var style = ele._private.style;
        var propNames = Object.keys(style);

        for (var j = 0; j < propNames.length; j++) {
          var propName = propNames[j];
          var eleProp = style[propName];

          if (eleProp != null) {
            if (eleProp.bypass) {
              eleProp.bypassed = null;
            } else {
              style[propName] = null;
            }
          }
        }
      }
    }
  }; // updates the visual style for all elements (useful for manual style modification after init)


  styfn.update = function () {
    var cy = this._private.cy;
    var eles = cy.mutableElements();
    eles.updateStyle();
  }; // diffProps : { name => { prev, next } }


  styfn.updateTransitions = function (ele, diffProps) {
    var self = this;
    var _p = ele._private;
    var props = ele.pstyle('transition-property').value;
    var duration = ele.pstyle('transition-duration').pfValue;
    var delay = ele.pstyle('transition-delay').pfValue;

    if (props.length > 0 && duration > 0) {
      var style = {}; // build up the style to animate towards

      var anyPrev = false;

      for (var i = 0; i < props.length; i++) {
        var prop = props[i];
        var styProp = ele.pstyle(prop);
        var diffProp = diffProps[prop];

        if (!diffProp) {
          continue;
        }

        var prevProp = diffProp.prev;
        var fromProp = prevProp;
        var toProp = diffProp.next != null ? diffProp.next : styProp;
        var diff = false;
        var initVal = void 0;
        var initDt = 0.000001; // delta time % value for initVal (allows animating out of init zero opacity)

        if (!fromProp) {
          continue;
        } // consider px values


        if (number(fromProp.pfValue) && number(toProp.pfValue)) {
          diff = toProp.pfValue - fromProp.pfValue; // nonzero is truthy

          initVal = fromProp.pfValue + initDt * diff; // consider numerical values
        } else if (number(fromProp.value) && number(toProp.value)) {
          diff = toProp.value - fromProp.value; // nonzero is truthy

          initVal = fromProp.value + initDt * diff; // consider colour values
        } else if (array(fromProp.value) && array(toProp.value)) {
          diff = fromProp.value[0] !== toProp.value[0] || fromProp.value[1] !== toProp.value[1] || fromProp.value[2] !== toProp.value[2];
          initVal = fromProp.strValue;
        } // the previous value is good for an animation only if it's different


        if (diff) {
          style[prop] = toProp.strValue; // to val

          this.applyBypass(ele, prop, initVal); // from val

          anyPrev = true;
        }
      } // end if props allow ani
      // can't transition if there's nothing previous to transition from


      if (!anyPrev) {
        return;
      }

      _p.transitioning = true;
      new Promise$1(function (resolve) {
        if (delay > 0) {
          ele.delayAnimation(delay).play().promise().then(resolve);
        } else {
          resolve();
        }
      }).then(function () {
        return ele.animation({
          style: style,
          duration: duration,
          easing: ele.pstyle('transition-timing-function').value,
          queue: false
        }).play().promise();
      }).then(function () {
        // if( !isBypass ){
        self.removeBypasses(ele, props);
        ele.emitAndNotify('style'); // }

        _p.transitioning = false;
      });
    } else if (_p.transitioning) {
      this.removeBypasses(ele, props);
      ele.emitAndNotify('style');
      _p.transitioning = false;
    }
  };

  styfn.checkTrigger = function (ele, name, fromValue, toValue, getTrigger, onTrigger) {
    var prop = this.properties[name];
    var triggerCheck = getTrigger(prop);

    if (triggerCheck != null && triggerCheck(fromValue, toValue)) {
      onTrigger(prop);
    }
  };

  styfn.checkZOrderTrigger = function (ele, name, fromValue, toValue) {
    var _this = this;

    this.checkTrigger(ele, name, fromValue, toValue, function (prop) {
      return prop.triggersZOrder;
    }, function () {
      _this._private.cy.notify('zorder', ele);
    });
  };

  styfn.checkBoundsTrigger = function (ele, name, fromValue, toValue) {
    this.checkTrigger(ele, name, fromValue, toValue, function (prop) {
      return prop.triggersBounds;
    }, function (prop) {
      ele.dirtyCompoundBoundsCache();
      ele.dirtyBoundingBoxCache(); // if the prop change makes the bb of pll bezier edges invalid,
      // then dirty the pll edge bb cache as well

      if ( // only for beziers -- so performance of other edges isn't affected
      (ele.pstyle('curve-style').value === 'bezier' // already a bezier
      // was just now changed to or from a bezier:
      || name === 'curve-style' && (fromValue === 'bezier' || toValue === 'bezier')) && prop.triggersBoundsOfParallelBeziers) {
        ele.parallelEdges().forEach(function (pllEdge) {
          if (pllEdge.isBundledBezier()) {
            pllEdge.dirtyBoundingBoxCache();
          }
        });
      }
    });
  };

  styfn.checkTriggers = function (ele, name, fromValue, toValue) {
    ele.dirtyStyleCache();
    this.checkZOrderTrigger(ele, name, fromValue, toValue);
    this.checkBoundsTrigger(ele, name, fromValue, toValue);
  };

  var styfn$1 = {}; // bypasses are applied to an existing style on an element, and just tacked on temporarily
  // returns true iff application was successful for at least 1 specified property

  styfn$1.applyBypass = function (eles, name, value, updateTransitions) {
    var self = this;
    var props = [];
    var isBypass = true; // put all the properties (can specify one or many) in an array after parsing them

    if (name === '*' || name === '**') {
      // apply to all property names
      if (value !== undefined) {
        for (var i = 0; i < self.properties.length; i++) {
          var prop = self.properties[i];
          var _name = prop.name;
          var parsedProp = this.parse(_name, value, true);

          if (parsedProp) {
            props.push(parsedProp);
          }
        }
      }
    } else if (string(name)) {
      // then parse the single property
      var _parsedProp = this.parse(name, value, true);

      if (_parsedProp) {
        props.push(_parsedProp);
      }
    } else if (plainObject(name)) {
      // then parse each property
      var specifiedProps = name;
      updateTransitions = value;
      var names = Object.keys(specifiedProps);

      for (var _i = 0; _i < names.length; _i++) {
        var _name2 = names[_i];
        var _value = specifiedProps[_name2];

        if (_value === undefined) {
          // try camel case name too
          _value = specifiedProps[dash2camel(_name2)];
        }

        if (_value !== undefined) {
          var _parsedProp2 = this.parse(_name2, _value, true);

          if (_parsedProp2) {
            props.push(_parsedProp2);
          }
        }
      }
    } else {
      // can't do anything without well defined properties
      return false;
    } // we've failed if there are no valid properties


    if (props.length === 0) {
      return false;
    } // now, apply the bypass properties on the elements


    var ret = false; // return true if at least one succesful bypass applied

    for (var _i2 = 0; _i2 < eles.length; _i2++) {
      // for each ele
      var ele = eles[_i2];
      var diffProps = {};
      var diffProp = void 0;

      for (var j = 0; j < props.length; j++) {
        // for each prop
        var _prop = props[j];

        if (updateTransitions) {
          var prevProp = ele.pstyle(_prop.name);
          diffProp = diffProps[_prop.name] = {
            prev: prevProp
          };
        }

        ret = this.applyParsedProperty(ele, _prop) || ret;

        if (updateTransitions) {
          diffProp.next = ele.pstyle(_prop.name);
        }
      } // for props


      if (ret) {
        this.updateStyleHints(ele);
      }

      if (updateTransitions) {
        this.updateTransitions(ele, diffProps, isBypass);
      }
    } // for eles


    return ret;
  }; // only useful in specific cases like animation


  styfn$1.overrideBypass = function (eles, name, value) {
    name = camel2dash(name);

    for (var i = 0; i < eles.length; i++) {
      var ele = eles[i];
      var prop = ele._private.style[name];
      var type = this.properties[name].type;
      var isColor = type.color;
      var isMulti = type.mutiple;
      var oldValue = !prop ? null : prop.pfValue != null ? prop.pfValue : prop.value;

      if (!prop || !prop.bypass) {
        // need a bypass if one doesn't exist
        this.applyBypass(ele, name, value);
      } else {
        prop.value = value;

        if (prop.pfValue != null) {
          prop.pfValue = value;
        }

        if (isColor) {
          prop.strValue = 'rgb(' + value.join(',') + ')';
        } else if (isMulti) {
          prop.strValue = value.join(' ');
        } else {
          prop.strValue = '' + value;
        }

        this.updateStyleHints(ele);
      }

      this.checkTriggers(ele, name, oldValue, value);
    }
  };

  styfn$1.removeAllBypasses = function (eles, updateTransitions) {
    return this.removeBypasses(eles, this.propertyNames, updateTransitions);
  };

  styfn$1.removeBypasses = function (eles, props, updateTransitions) {
    var isBypass = true;

    for (var j = 0; j < eles.length; j++) {
      var ele = eles[j];
      var diffProps = {};

      for (var i = 0; i < props.length; i++) {
        var name = props[i];
        var prop = this.properties[name];
        var prevProp = ele.pstyle(prop.name);

        if (!prevProp || !prevProp.bypass) {
          // if a bypass doesn't exist for the prop, nothing needs to be removed
          continue;
        }

        var value = ''; // empty => remove bypass

        var parsedProp = this.parse(name, value, true);
        var diffProp = diffProps[prop.name] = {
          prev: prevProp
        };
        this.applyParsedProperty(ele, parsedProp);
        diffProp.next = ele.pstyle(prop.name);
      } // for props


      this.updateStyleHints(ele);

      if (updateTransitions) {
        this.updateTransitions(ele, diffProps, isBypass);
      }
    } // for eles

  };

  var styfn$2 = {}; // gets what an em size corresponds to in pixels relative to a dom element

  styfn$2.getEmSizeInPixels = function () {
    var px = this.containerCss('font-size');

    if (px != null) {
      return parseFloat(px);
    } else {
      return 1; // for headless
    }
  }; // gets css property from the core container


  styfn$2.containerCss = function (propName) {
    var cy = this._private.cy;
    var domElement = cy.container();

    if (window$1 && domElement && window$1.getComputedStyle) {
      return window$1.getComputedStyle(domElement).getPropertyValue(propName);
    }
  };

  var styfn$3 = {}; // gets the rendered style for an element

  styfn$3.getRenderedStyle = function (ele, prop) {
    if (prop) {
      return this.getStylePropertyValue(ele, prop, true);
    } else {
      return this.getRawStyle(ele, true);
    }
  }; // gets the raw style for an element


  styfn$3.getRawStyle = function (ele, isRenderedVal) {
    var self = this;
    ele = ele[0]; // insure it's an element

    if (ele) {
      var rstyle = {};

      for (var i = 0; i < self.properties.length; i++) {
        var prop = self.properties[i];
        var val = self.getStylePropertyValue(ele, prop.name, isRenderedVal);

        if (val != null) {
          rstyle[prop.name] = val;
          rstyle[dash2camel(prop.name)] = val;
        }
      }

      return rstyle;
    }
  };

  styfn$3.getIndexedStyle = function (ele, property, subproperty, index) {
    var pstyle = ele.pstyle(property)[subproperty][index];
    return pstyle != null ? pstyle : ele.cy().style().getDefaultProperty(property)[subproperty][0];
  };

  styfn$3.getStylePropertyValue = function (ele, propName, isRenderedVal) {
    var self = this;
    ele = ele[0]; // insure it's an element

    if (ele) {
      var prop = self.properties[propName];

      if (prop.alias) {
        prop = prop.pointsTo;
      }

      var type = prop.type;
      var styleProp = ele.pstyle(prop.name);

      if (styleProp) {
        var value = styleProp.value,
            units = styleProp.units,
            strValue = styleProp.strValue;

        if (isRenderedVal && type.number && value != null && number(value)) {
          var zoom = ele.cy().zoom();

          var getRenderedValue = function getRenderedValue(val) {
            return val * zoom;
          };

          var getValueStringWithUnits = function getValueStringWithUnits(val, units) {
            return getRenderedValue(val) + units;
          };

          var isArrayValue = array(value);
          var haveUnits = isArrayValue ? units.every(function (u) {
            return u != null;
          }) : units != null;

          if (haveUnits) {
            if (isArrayValue) {
              return value.map(function (v, i) {
                return getValueStringWithUnits(v, units[i]);
              }).join(' ');
            } else {
              return getValueStringWithUnits(value, units);
            }
          } else {
            if (isArrayValue) {
              return value.map(function (v) {
                return string(v) ? v : '' + getRenderedValue(v);
              }).join(' ');
            } else {
              return '' + getRenderedValue(value);
            }
          }
        } else if (strValue != null) {
          return strValue;
        }
      }

      return null;
    }
  };

  styfn$3.getAnimationStartStyle = function (ele, aniProps) {
    var rstyle = {};

    for (var i = 0; i < aniProps.length; i++) {
      var aniProp = aniProps[i];
      var name = aniProp.name;
      var styleProp = ele.pstyle(name);

      if (styleProp !== undefined) {
        // then make a prop of it
        if (plainObject(styleProp)) {
          styleProp = this.parse(name, styleProp.strValue);
        } else {
          styleProp = this.parse(name, styleProp);
        }
      }

      if (styleProp) {
        rstyle[name] = styleProp;
      }
    }

    return rstyle;
  };

  styfn$3.getPropsList = function (propsObj) {
    var self = this;
    var rstyle = [];
    var style = propsObj;
    var props = self.properties;

    if (style) {
      var names = Object.keys(style);

      for (var i = 0; i < names.length; i++) {
        var name = names[i];
        var val = style[name];
        var prop = props[name] || props[camel2dash(name)];
        var styleProp = this.parse(prop.name, val);

        if (styleProp) {
          rstyle.push(styleProp);
        }
      }
    }

    return rstyle;
  };

  styfn$3.getNonDefaultPropertiesHash = function (ele, propNames, seed) {
    var hash = seed.slice();
    var name, val, strVal, chVal;
    var i, j;

    for (i = 0; i < propNames.length; i++) {
      name = propNames[i];
      val = ele.pstyle(name, false);

      if (val == null) {
        continue;
      } else if (val.pfValue != null) {
        hash[0] = hashInt(chVal, hash[0]);
        hash[1] = hashIntAlt(chVal, hash[1]);
      } else {
        strVal = val.strValue;

        for (j = 0; j < strVal.length; j++) {
          chVal = strVal.charCodeAt(j);
          hash[0] = hashInt(chVal, hash[0]);
          hash[1] = hashIntAlt(chVal, hash[1]);
        }
      }
    }

    return hash;
  };

  styfn$3.getPropertiesHash = styfn$3.getNonDefaultPropertiesHash;

  var styfn$4 = {};

  styfn$4.appendFromJson = function (json) {
    var style = this;

    for (var i = 0; i < json.length; i++) {
      var context = json[i];
      var selector = context.selector;
      var props = context.style || context.css;
      var names = Object.keys(props);
      style.selector(selector); // apply selector

      for (var j = 0; j < names.length; j++) {
        var name = names[j];
        var value = props[name];
        style.css(name, value); // apply property
      }
    }

    return style;
  }; // accessible cy.style() function


  styfn$4.fromJson = function (json) {
    var style = this;
    style.resetToDefault();
    style.appendFromJson(json);
    return style;
  }; // get json from cy.style() api


  styfn$4.json = function () {
    var json = [];

    for (var i = this.defaultLength; i < this.length; i++) {
      var cxt = this[i];
      var selector = cxt.selector;
      var props = cxt.properties;
      var css = {};

      for (var j = 0; j < props.length; j++) {
        var prop = props[j];
        css[prop.name] = prop.strValue;
      }

      json.push({
        selector: !selector ? 'core' : selector.toString(),
        style: css
      });
    }

    return json;
  };

  var styfn$5 = {};

  styfn$5.appendFromString = function (string) {
    var self = this;
    var style = this;
    var remaining = '' + string;
    var selAndBlockStr;
    var blockRem;
    var propAndValStr; // remove comments from the style string

    remaining = remaining.replace(/[/][*](\s|.)+?[*][/]/g, '');

    function removeSelAndBlockFromRemaining() {
      // remove the parsed selector and block from the remaining text to parse
      if (remaining.length > selAndBlockStr.length) {
        remaining = remaining.substr(selAndBlockStr.length);
      } else {
        remaining = '';
      }
    }

    function removePropAndValFromRem() {
      // remove the parsed property and value from the remaining block text to parse
      if (blockRem.length > propAndValStr.length) {
        blockRem = blockRem.substr(propAndValStr.length);
      } else {
        blockRem = '';
      }
    }

    for (;;) {
      var nothingLeftToParse = remaining.match(/^\s*$/);

      if (nothingLeftToParse) {
        break;
      }

      var selAndBlock = remaining.match(/^\s*((?:.|\s)+?)\s*\{((?:.|\s)+?)\}/);

      if (!selAndBlock) {
        warn('Halting stylesheet parsing: String stylesheet contains more to parse but no selector and block found in: ' + remaining);
        break;
      }

      selAndBlockStr = selAndBlock[0]; // parse the selector

      var selectorStr = selAndBlock[1];

      if (selectorStr !== 'core') {
        var selector = new Selector(selectorStr);

        if (selector.invalid) {
          warn('Skipping parsing of block: Invalid selector found in string stylesheet: ' + selectorStr); // skip this selector and block

          removeSelAndBlockFromRemaining();
          continue;
        }
      } // parse the block of properties and values


      var blockStr = selAndBlock[2];
      var invalidBlock = false;
      blockRem = blockStr;
      var props = [];

      for (;;) {
        var _nothingLeftToParse = blockRem.match(/^\s*$/);

        if (_nothingLeftToParse) {
          break;
        }

        var propAndVal = blockRem.match(/^\s*(.+?)\s*:\s*(.+?)\s*;/);

        if (!propAndVal) {
          warn('Skipping parsing of block: Invalid formatting of style property and value definitions found in:' + blockStr);
          invalidBlock = true;
          break;
        }

        propAndValStr = propAndVal[0];
        var propStr = propAndVal[1];
        var valStr = propAndVal[2];
        var prop = self.properties[propStr];

        if (!prop) {
          warn('Skipping property: Invalid property name in: ' + propAndValStr); // skip this property in the block

          removePropAndValFromRem();
          continue;
        }

        var parsedProp = style.parse(propStr, valStr);

        if (!parsedProp) {
          warn('Skipping property: Invalid property definition in: ' + propAndValStr); // skip this property in the block

          removePropAndValFromRem();
          continue;
        }

        props.push({
          name: propStr,
          val: valStr
        });
        removePropAndValFromRem();
      }

      if (invalidBlock) {
        removeSelAndBlockFromRemaining();
        break;
      } // put the parsed block in the style


      style.selector(selectorStr);

      for (var i = 0; i < props.length; i++) {
        var _prop = props[i];
        style.css(_prop.name, _prop.val);
      }

      removeSelAndBlockFromRemaining();
    }

    return style;
  };

  styfn$5.fromString = function (string) {
    var style = this;
    style.resetToDefault();
    style.appendFromString(string);
    return style;
  };

  var styfn$6 = {};

  (function () {
    var number = number$1;
    var rgba = rgbaNoBackRefs;
    var hsla = hslaNoBackRefs;
    var hex3$1 = hex3;
    var hex6$1 = hex6;

    var data = function data(prefix) {
      return '^' + prefix + '\\s*\\(\\s*([\\w\\.]+)\\s*\\)$';
    };

    var mapData = function mapData(prefix) {
      var mapArg = number + '|\\w+|' + rgba + '|' + hsla + '|' + hex3$1 + '|' + hex6$1;
      return '^' + prefix + '\\s*\\(([\\w\\.]+)\\s*\\,\\s*(' + number + ')\\s*\\,\\s*(' + number + ')\\s*,\\s*(' + mapArg + ')\\s*\\,\\s*(' + mapArg + ')\\)$';
    };

    var urlRegexes = ['^url\\s*\\(\\s*[\'"]?(.+?)[\'"]?\\s*\\)$', '^(none)$', '^(.+)$']; // each visual style property has a type and needs to be validated according to it

    styfn$6.types = {
      time: {
        number: true,
        min: 0,
        units: 's|ms',
        implicitUnits: 'ms'
      },
      percent: {
        number: true,
        min: 0,
        max: 100,
        units: '%',
        implicitUnits: '%'
      },
      percentages: {
        number: true,
        min: 0,
        max: 100,
        units: '%',
        implicitUnits: '%',
        multiple: true
      },
      zeroOneNumber: {
        number: true,
        min: 0,
        max: 1,
        unitless: true
      },
      zeroOneNumbers: {
        number: true,
        min: 0,
        max: 1,
        unitless: true,
        multiple: true
      },
      nOneOneNumber: {
        number: true,
        min: -1,
        max: 1,
        unitless: true
      },
      nonNegativeInt: {
        number: true,
        min: 0,
        integer: true,
        unitless: true
      },
      position: {
        enums: ['parent', 'origin']
      },
      nodeSize: {
        number: true,
        min: 0,
        enums: ['label']
      },
      number: {
        number: true,
        unitless: true
      },
      numbers: {
        number: true,
        unitless: true,
        multiple: true
      },
      positiveNumber: {
        number: true,
        unitless: true,
        min: 0,
        strictMin: true
      },
      size: {
        number: true,
        min: 0
      },
      bidirectionalSize: {
        number: true
      },
      // allows negative
      bidirectionalSizeMaybePercent: {
        number: true,
        allowPercent: true
      },
      // allows negative
      bidirectionalSizes: {
        number: true,
        multiple: true
      },
      // allows negative
      sizeMaybePercent: {
        number: true,
        min: 0,
        allowPercent: true
      },
      axisDirection: {
        enums: ['horizontal', 'leftward', 'rightward', 'vertical', 'upward', 'downward', 'auto']
      },
      paddingRelativeTo: {
        enums: ['width', 'height', 'average', 'min', 'max']
      },
      bgWH: {
        number: true,
        min: 0,
        allowPercent: true,
        enums: ['auto'],
        multiple: true
      },
      bgPos: {
        number: true,
        allowPercent: true,
        multiple: true
      },
      bgRelativeTo: {
        enums: ['inner', 'include-padding'],
        multiple: true
      },
      bgRepeat: {
        enums: ['repeat', 'repeat-x', 'repeat-y', 'no-repeat'],
        multiple: true
      },
      bgFit: {
        enums: ['none', 'contain', 'cover'],
        multiple: true
      },
      bgCrossOrigin: {
        enums: ['anonymous', 'use-credentials'],
        multiple: true
      },
      bgClip: {
        enums: ['none', 'node'],
        multiple: true
      },
      color: {
        color: true
      },
      colors: {
        color: true,
        multiple: true
      },
      fill: {
        enums: ['solid', 'linear-gradient', 'radial-gradient']
      },
      bool: {
        enums: ['yes', 'no']
      },
      lineStyle: {
        enums: ['solid', 'dotted', 'dashed']
      },
      lineCap: {
        enums: ['butt', 'round', 'square']
      },
      borderStyle: {
        enums: ['solid', 'dotted', 'dashed', 'double']
      },
      curveStyle: {
        enums: ['bezier', 'unbundled-bezier', 'haystack', 'segments', 'straight', 'taxi']
      },
      fontFamily: {
        regex: '^([\\w- \\"]+(?:\\s*,\\s*[\\w- \\"]+)*)$'
      },
      fontStyle: {
        enums: ['italic', 'normal', 'oblique']
      },
      fontWeight: {
        enums: ['normal', 'bold', 'bolder', 'lighter', '100', '200', '300', '400', '500', '600', '800', '900', 100, 200, 300, 400, 500, 600, 700, 800, 900]
      },
      textDecoration: {
        enums: ['none', 'underline', 'overline', 'line-through']
      },
      textTransform: {
        enums: ['none', 'uppercase', 'lowercase']
      },
      textWrap: {
        enums: ['none', 'wrap', 'ellipsis']
      },
      textOverflowWrap: {
        enums: ['whitespace', 'anywhere']
      },
      textBackgroundShape: {
        enums: ['rectangle', 'roundrectangle', 'round-rectangle']
      },
      nodeShape: {
        enums: ['rectangle', 'roundrectangle', 'round-rectangle', 'cutrectangle', 'cut-rectangle', 'bottomroundrectangle', 'bottom-round-rectangle', 'barrel', 'ellipse', 'triangle', 'round-triangle', 'square', 'pentagon', 'round-pentagon', 'hexagon', 'round-hexagon', 'concavehexagon', 'concave-hexagon', 'heptagon', 'round-heptagon', 'octagon', 'round-octagon', 'tag', 'round-tag', 'star', 'diamond', 'round-diamond', 'vee', 'rhomboid', 'polygon']
      },
      compoundIncludeLabels: {
        enums: ['include', 'exclude']
      },
      arrowShape: {
        enums: ['tee', 'triangle', 'triangle-tee', 'circle-triangle', 'triangle-cross', 'triangle-backcurve', 'vee', 'square', 'circle', 'diamond', 'chevron', 'none']
      },
      arrowFill: {
        enums: ['filled', 'hollow']
      },
      display: {
        enums: ['element', 'none']
      },
      visibility: {
        enums: ['hidden', 'visible']
      },
      zCompoundDepth: {
        enums: ['bottom', 'orphan', 'auto', 'top']
      },
      zIndexCompare: {
        enums: ['auto', 'manual']
      },
      valign: {
        enums: ['top', 'center', 'bottom']
      },
      halign: {
        enums: ['left', 'center', 'right']
      },
      justification: {
        enums: ['left', 'center', 'right', 'auto']
      },
      text: {
        string: true
      },
      data: {
        mapping: true,
        regex: data('data')
      },
      layoutData: {
        mapping: true,
        regex: data('layoutData')
      },
      scratch: {
        mapping: true,
        regex: data('scratch')
      },
      mapData: {
        mapping: true,
        regex: mapData('mapData')
      },
      mapLayoutData: {
        mapping: true,
        regex: mapData('mapLayoutData')
      },
      mapScratch: {
        mapping: true,
        regex: mapData('mapScratch')
      },
      fn: {
        mapping: true,
        fn: true
      },
      url: {
        regexes: urlRegexes,
        singleRegexMatchValue: true
      },
      urls: {
        regexes: urlRegexes,
        singleRegexMatchValue: true,
        multiple: true
      },
      propList: {
        propList: true
      },
      angle: {
        number: true,
        units: 'deg|rad',
        implicitUnits: 'rad'
      },
      textRotation: {
        number: true,
        units: 'deg|rad',
        implicitUnits: 'rad',
        enums: ['none', 'autorotate']
      },
      polygonPointList: {
        number: true,
        multiple: true,
        evenMultiple: true,
        min: -1,
        max: 1,
        unitless: true
      },
      edgeDistances: {
        enums: ['intersection', 'node-position']
      },
      edgeEndpoint: {
        number: true,
        multiple: true,
        units: '%|px|em|deg|rad',
        implicitUnits: 'px',
        enums: ['inside-to-node', 'outside-to-node', 'outside-to-node-or-label', 'outside-to-line', 'outside-to-line-or-label'],
        singleEnum: true,
        validate: function validate(valArr, unitsArr) {
          switch (valArr.length) {
            case 2:
              // can be % or px only
              return unitsArr[0] !== 'deg' && unitsArr[0] !== 'rad' && unitsArr[1] !== 'deg' && unitsArr[1] !== 'rad';

            case 1:
              // can be enum, deg, or rad only
              return string(valArr[0]) || unitsArr[0] === 'deg' || unitsArr[0] === 'rad';

            default:
              return false;
          }
        }
      },
      easing: {
        regexes: ['^(spring)\\s*\\(\\s*(' + number + ')\\s*,\\s*(' + number + ')\\s*\\)$', '^(cubic-bezier)\\s*\\(\\s*(' + number + ')\\s*,\\s*(' + number + ')\\s*,\\s*(' + number + ')\\s*,\\s*(' + number + ')\\s*\\)$'],
        enums: ['linear', 'ease', 'ease-in', 'ease-out', 'ease-in-out', 'ease-in-sine', 'ease-out-sine', 'ease-in-out-sine', 'ease-in-quad', 'ease-out-quad', 'ease-in-out-quad', 'ease-in-cubic', 'ease-out-cubic', 'ease-in-out-cubic', 'ease-in-quart', 'ease-out-quart', 'ease-in-out-quart', 'ease-in-quint', 'ease-out-quint', 'ease-in-out-quint', 'ease-in-expo', 'ease-out-expo', 'ease-in-out-expo', 'ease-in-circ', 'ease-out-circ', 'ease-in-out-circ']
      },
      gradientDirection: {
        enums: ['to-bottom', 'to-top', 'to-left', 'to-right', 'to-bottom-right', 'to-bottom-left', 'to-top-right', 'to-top-left', 'to-right-bottom', 'to-left-bottom', 'to-right-top', 'to-left-top']
      },
      boundsExpansion: {
        number: true,
        multiple: true,
        min: 0,
        validate: function validate(valArr) {
          var length = valArr.length;
          return length === 1 || length === 2 || length === 4;
        }
      }
    };
    var diff = {
      zeroNonZero: function zeroNonZero(val1, val2) {
        if ((val1 == null || val2 == null) && val1 !== val2) {
          return true; // null cases could represent any value
        }

        if (val1 == 0 && val2 != 0) {
          return true;
        } else if (val1 != 0 && val2 == 0) {
          return true;
        } else {
          return false;
        }
      },
      any: function any(val1, val2) {
        return val1 != val2;
      }
    }; // define visual style properties
    //
    // - n.b. adding a new group of props may require updates to updateStyleHints()
    // - adding new props to an existing group gets handled automatically

    var t = styfn$6.types;
    var mainLabel = [{
      name: 'label',
      type: t.text,
      triggersBounds: diff.any
    }, {
      name: 'text-rotation',
      type: t.textRotation,
      triggersBounds: diff.any
    }, {
      name: 'text-margin-x',
      type: t.bidirectionalSize,
      triggersBounds: diff.any
    }, {
      name: 'text-margin-y',
      type: t.bidirectionalSize,
      triggersBounds: diff.any
    }];
    var sourceLabel = [{
      name: 'source-label',
      type: t.text,
      triggersBounds: diff.any
    }, {
      name: 'source-text-rotation',
      type: t.textRotation,
      triggersBounds: diff.any
    }, {
      name: 'source-text-margin-x',
      type: t.bidirectionalSize,
      triggersBounds: diff.any
    }, {
      name: 'source-text-margin-y',
      type: t.bidirectionalSize,
      triggersBounds: diff.any
    }, {
      name: 'source-text-offset',
      type: t.size,
      triggersBounds: diff.any
    }];
    var targetLabel = [{
      name: 'target-label',
      type: t.text,
      triggersBounds: diff.any
    }, {
      name: 'target-text-rotation',
      type: t.textRotation,
      triggersBounds: diff.any
    }, {
      name: 'target-text-margin-x',
      type: t.bidirectionalSize,
      triggersBounds: diff.any
    }, {
      name: 'target-text-margin-y',
      type: t.bidirectionalSize,
      triggersBounds: diff.any
    }, {
      name: 'target-text-offset',
      type: t.size,
      triggersBounds: diff.any
    }];
    var labelDimensions = [{
      name: 'font-family',
      type: t.fontFamily,
      triggersBounds: diff.any
    }, {
      name: 'font-style',
      type: t.fontStyle,
      triggersBounds: diff.any
    }, {
      name: 'font-weight',
      type: t.fontWeight,
      triggersBounds: diff.any
    }, {
      name: 'font-size',
      type: t.size,
      triggersBounds: diff.any
    }, {
      name: 'text-transform',
      type: t.textTransform,
      triggersBounds: diff.any
    }, {
      name: 'text-wrap',
      type: t.textWrap,
      triggersBounds: diff.any
    }, {
      name: 'text-overflow-wrap',
      type: t.textOverflowWrap,
      triggersBounds: diff.any
    }, {
      name: 'text-max-width',
      type: t.size,
      triggersBounds: diff.any
    }, {
      name: 'text-outline-width',
      type: t.size,
      triggersBounds: diff.any
    }, {
      name: 'line-height',
      type: t.positiveNumber,
      triggersBounds: diff.any
    }];
    var commonLabel = [{
      name: 'text-valign',
      type: t.valign,
      triggersBounds: diff.any
    }, {
      name: 'text-halign',
      type: t.halign,
      triggersBounds: diff.any
    }, {
      name: 'color',
      type: t.color
    }, {
      name: 'text-outline-color',
      type: t.color
    }, {
      name: 'text-outline-opacity',
      type: t.zeroOneNumber
    }, {
      name: 'text-background-color',
      type: t.color
    }, {
      name: 'text-background-opacity',
      type: t.zeroOneNumber
    }, {
      name: 'text-background-padding',
      type: t.size,
      triggersBounds: diff.any
    }, {
      name: 'text-border-opacity',
      type: t.zeroOneNumber
    }, {
      name: 'text-border-color',
      type: t.color
    }, {
      name: 'text-border-width',
      type: t.size,
      triggersBounds: diff.any
    }, {
      name: 'text-border-style',
      type: t.borderStyle,
      triggersBounds: diff.any
    }, {
      name: 'text-background-shape',
      type: t.textBackgroundShape,
      triggersBounds: diff.any
    }, {
      name: 'text-justification',
      type: t.justification
    }];
    var behavior = [{
      name: 'events',
      type: t.bool
    }, {
      name: 'text-events',
      type: t.bool
    }];
    var visibility = [{
      name: 'display',
      type: t.display,
      triggersZOrder: diff.any,
      triggersBounds: diff.any,
      triggersBoundsOfParallelBeziers: true
    }, {
      name: 'visibility',
      type: t.visibility,
      triggersZOrder: diff.any
    }, {
      name: 'opacity',
      type: t.zeroOneNumber,
      triggersZOrder: diff.zeroNonZero
    }, {
      name: 'text-opacity',
      type: t.zeroOneNumber
    }, {
      name: 'min-zoomed-font-size',
      type: t.size
    }, {
      name: 'z-compound-depth',
      type: t.zCompoundDepth,
      triggersZOrder: diff.any
    }, {
      name: 'z-index-compare',
      type: t.zIndexCompare,
      triggersZOrder: diff.any
    }, {
      name: 'z-index',
      type: t.nonNegativeInt,
      triggersZOrder: diff.any
    }];
    var overlay = [{
      name: 'overlay-padding',
      type: t.size,
      triggersBounds: diff.any
    }, {
      name: 'overlay-color',
      type: t.color
    }, {
      name: 'overlay-opacity',
      type: t.zeroOneNumber,
      triggersBounds: diff.zeroNonZero
    }];
    var transition = [{
      name: 'transition-property',
      type: t.propList
    }, {
      name: 'transition-duration',
      type: t.time
    }, {
      name: 'transition-delay',
      type: t.time
    }, {
      name: 'transition-timing-function',
      type: t.easing
    }];

    var nodeSizeHashOverride = function nodeSizeHashOverride(ele, parsedProp) {
      if (parsedProp.value === 'label') {
        return -ele.poolIndex(); // no hash key hits is using label size (hitrate for perf probably low anyway)
      } else {
        return parsedProp.pfValue;
      }
    };

    var nodeBody = [{
      name: 'height',
      type: t.nodeSize,
      triggersBounds: diff.any,
      hashOverride: nodeSizeHashOverride
    }, {
      name: 'width',
      type: t.nodeSize,
      triggersBounds: diff.any,
      hashOverride: nodeSizeHashOverride
    }, {
      name: 'shape',
      type: t.nodeShape,
      triggersBounds: diff.any
    }, {
      name: 'shape-polygon-points',
      type: t.polygonPointList,
      triggersBounds: diff.any
    }, {
      name: 'background-color',
      type: t.color
    }, {
      name: 'background-fill',
      type: t.fill
    }, {
      name: 'background-opacity',
      type: t.zeroOneNumber
    }, {
      name: 'background-blacken',
      type: t.nOneOneNumber
    }, {
      name: 'background-gradient-stop-colors',
      type: t.colors
    }, {
      name: 'background-gradient-stop-positions',
      type: t.percentages
    }, {
      name: 'background-gradient-direction',
      type: t.gradientDirection
    }, {
      name: 'padding',
      type: t.sizeMaybePercent,
      triggersBounds: diff.any
    }, {
      name: 'padding-relative-to',
      type: t.paddingRelativeTo,
      triggersBounds: diff.any
    }, {
      name: 'bounds-expansion',
      type: t.boundsExpansion,
      triggersBounds: diff.any
    }];
    var nodeBorder = [{
      name: 'border-color',
      type: t.color
    }, {
      name: 'border-opacity',
      type: t.zeroOneNumber
    }, {
      name: 'border-width',
      type: t.size,
      triggersBounds: diff.any
    }, {
      name: 'border-style',
      type: t.borderStyle
    }];
    var backgroundImage = [{
      name: 'background-image',
      type: t.urls
    }, {
      name: 'background-image-crossorigin',
      type: t.bgCrossOrigin
    }, {
      name: 'background-image-opacity',
      type: t.zeroOneNumbers
    }, {
      name: 'background-position-x',
      type: t.bgPos
    }, {
      name: 'background-position-y',
      type: t.bgPos
    }, {
      name: 'background-width-relative-to',
      type: t.bgRelativeTo
    }, {
      name: 'background-height-relative-to',
      type: t.bgRelativeTo
    }, {
      name: 'background-repeat',
      type: t.bgRepeat
    }, {
      name: 'background-fit',
      type: t.bgFit
    }, {
      name: 'background-clip',
      type: t.bgClip
    }, {
      name: 'background-width',
      type: t.bgWH
    }, {
      name: 'background-height',
      type: t.bgWH
    }, {
      name: 'background-offset-x',
      type: t.bgPos
    }, {
      name: 'background-offset-y',
      type: t.bgPos
    }];
    var compound = [{
      name: 'position',
      type: t.position,
      triggersBounds: diff.any
    }, {
      name: 'compound-sizing-wrt-labels',
      type: t.compoundIncludeLabels,
      triggersBounds: diff.any
    }, {
      name: 'min-width',
      type: t.size,
      triggersBounds: diff.any
    }, {
      name: 'min-width-bias-left',
      type: t.sizeMaybePercent,
      triggersBounds: diff.any
    }, {
      name: 'min-width-bias-right',
      type: t.sizeMaybePercent,
      triggersBounds: diff.any
    }, {
      name: 'min-height',
      type: t.size,
      triggersBounds: diff.any
    }, {
      name: 'min-height-bias-top',
      type: t.sizeMaybePercent,
      triggersBounds: diff.any
    }, {
      name: 'min-height-bias-bottom',
      type: t.sizeMaybePercent,
      triggersBounds: diff.any
    }];
    var edgeLine = [{
      name: 'line-style',
      type: t.lineStyle
    }, {
      name: 'line-color',
      type: t.color
    }, {
      name: 'line-fill',
      type: t.fill
    }, {
      name: 'line-cap',
      type: t.lineCap
    }, {
      name: 'line-dash-pattern',
      type: t.numbers
    }, {
      name: 'line-dash-offset',
      type: t.number
    }, {
      name: 'line-gradient-stop-colors',
      type: t.colors
    }, {
      name: 'line-gradient-stop-positions',
      type: t.percentages
    }, {
      name: 'curve-style',
      type: t.curveStyle,
      triggersBounds: diff.any,
      triggersBoundsOfParallelBeziers: true
    }, {
      name: 'haystack-radius',
      type: t.zeroOneNumber,
      triggersBounds: diff.any
    }, {
      name: 'source-endpoint',
      type: t.edgeEndpoint,
      triggersBounds: diff.any
    }, {
      name: 'target-endpoint',
      type: t.edgeEndpoint,
      triggersBounds: diff.any
    }, {
      name: 'control-point-step-size',
      type: t.size,
      triggersBounds: diff.any
    }, {
      name: 'control-point-distances',
      type: t.bidirectionalSizes,
      triggersBounds: diff.any
    }, {
      name: 'control-point-weights',
      type: t.numbers,
      triggersBounds: diff.any
    }, {
      name: 'segment-distances',
      type: t.bidirectionalSizes,
      triggersBounds: diff.any
    }, {
      name: 'segment-weights',
      type: t.numbers,
      triggersBounds: diff.any
    }, {
      name: 'taxi-turn',
      type: t.bidirectionalSizeMaybePercent,
      triggersBounds: diff.any
    }, {
      name: 'taxi-turn-min-distance',
      type: t.size,
      triggersBounds: diff.any
    }, {
      name: 'taxi-direction',
      type: t.axisDirection,
      triggersBounds: diff.any
    }, {
      name: 'edge-distances',
      type: t.edgeDistances,
      triggersBounds: diff.any
    }, {
      name: 'arrow-scale',
      type: t.positiveNumber,
      triggersBounds: diff.any
    }, {
      name: 'loop-direction',
      type: t.angle,
      triggersBounds: diff.any
    }, {
      name: 'loop-sweep',
      type: t.angle,
      triggersBounds: diff.any
    }, {
      name: 'source-distance-from-node',
      type: t.size,
      triggersBounds: diff.any
    }, {
      name: 'target-distance-from-node',
      type: t.size,
      triggersBounds: diff.any
    }];
    var ghost = [{
      name: 'ghost',
      type: t.bool,
      triggersBounds: diff.any
    }, {
      name: 'ghost-offset-x',
      type: t.bidirectionalSize,
      triggersBounds: diff.any
    }, {
      name: 'ghost-offset-y',
      type: t.bidirectionalSize,
      triggersBounds: diff.any
    }, {
      name: 'ghost-opacity',
      type: t.zeroOneNumber
    }];
    var core = [{
      name: 'selection-box-color',
      type: t.color
    }, {
      name: 'selection-box-opacity',
      type: t.zeroOneNumber
    }, {
      name: 'selection-box-border-color',
      type: t.color
    }, {
      name: 'selection-box-border-width',
      type: t.size
    }, {
      name: 'active-bg-color',
      type: t.color
    }, {
      name: 'active-bg-opacity',
      type: t.zeroOneNumber
    }, {
      name: 'active-bg-size',
      type: t.size
    }, {
      name: 'outside-texture-bg-color',
      type: t.color
    }, {
      name: 'outside-texture-bg-opacity',
      type: t.zeroOneNumber
    }]; // pie backgrounds for nodes

    var pie = [];
    styfn$6.pieBackgroundN = 16; // because the pie properties are numbered, give access to a constant N (for renderer use)

    pie.push({
      name: 'pie-size',
      type: t.sizeMaybePercent
    });

    for (var i = 1; i <= styfn$6.pieBackgroundN; i++) {
      pie.push({
        name: 'pie-' + i + '-background-color',
        type: t.color
      });
      pie.push({
        name: 'pie-' + i + '-background-size',
        type: t.percent
      });
      pie.push({
        name: 'pie-' + i + '-background-opacity',
        type: t.zeroOneNumber
      });
    } // edge arrows


    var edgeArrow = [];
    var arrowPrefixes = styfn$6.arrowPrefixes = ['source', 'mid-source', 'target', 'mid-target'];
    [{
      name: 'arrow-shape',
      type: t.arrowShape,
      triggersBounds: diff.any
    }, {
      name: 'arrow-color',
      type: t.color
    }, {
      name: 'arrow-fill',
      type: t.arrowFill
    }].forEach(function (prop) {
      arrowPrefixes.forEach(function (prefix) {
        var name = prefix + '-' + prop.name;
        var type = prop.type,
            triggersBounds = prop.triggersBounds;
        edgeArrow.push({
          name: name,
          type: type,
          triggersBounds: triggersBounds
        });
      });
    }, {});
    var props = styfn$6.properties = [].concat(behavior, transition, visibility, overlay, ghost, commonLabel, labelDimensions, mainLabel, sourceLabel, targetLabel, nodeBody, nodeBorder, backgroundImage, pie, compound, edgeLine, edgeArrow, core);
    var propGroups = styfn$6.propertyGroups = {
      // common to all eles
      behavior: behavior,
      transition: transition,
      visibility: visibility,
      overlay: overlay,
      ghost: ghost,
      // labels
      commonLabel: commonLabel,
      labelDimensions: labelDimensions,
      mainLabel: mainLabel,
      sourceLabel: sourceLabel,
      targetLabel: targetLabel,
      // node props
      nodeBody: nodeBody,
      nodeBorder: nodeBorder,
      backgroundImage: backgroundImage,
      pie: pie,
      compound: compound,
      // edge props
      edgeLine: edgeLine,
      edgeArrow: edgeArrow,
      core: core
    };
    var propGroupNames = styfn$6.propertyGroupNames = {};
    var propGroupKeys = styfn$6.propertyGroupKeys = Object.keys(propGroups);
    propGroupKeys.forEach(function (key) {
      propGroupNames[key] = propGroups[key].map(function (prop) {
        return prop.name;
      });
      propGroups[key].forEach(function (prop) {
        return prop.groupKey = key;
      });
    }); // define aliases

    var aliases = styfn$6.aliases = [{
      name: 'content',
      pointsTo: 'label'
    }, {
      name: 'control-point-distance',
      pointsTo: 'control-point-distances'
    }, {
      name: 'control-point-weight',
      pointsTo: 'control-point-weights'
    }, {
      name: 'edge-text-rotation',
      pointsTo: 'text-rotation'
    }, {
      name: 'padding-left',
      pointsTo: 'padding'
    }, {
      name: 'padding-right',
      pointsTo: 'padding'
    }, {
      name: 'padding-top',
      pointsTo: 'padding'
    }, {
      name: 'padding-bottom',
      pointsTo: 'padding'
    }]; // list of property names

    styfn$6.propertyNames = props.map(function (p) {
      return p.name;
    }); // allow access of properties by name ( e.g. style.properties.height )

    for (var _i = 0; _i < props.length; _i++) {
      var prop = props[_i];
      props[prop.name] = prop; // allow lookup by name
    } // map aliases


    for (var _i2 = 0; _i2 < aliases.length; _i2++) {
      var alias = aliases[_i2];
      var pointsToProp = props[alias.pointsTo];
      var aliasProp = {
        name: alias.name,
        alias: true,
        pointsTo: pointsToProp
      }; // add alias prop for parsing

      props.push(aliasProp);
      props[alias.name] = aliasProp; // allow lookup by name
    }
  })();

  styfn$6.getDefaultProperty = function (name) {
    return this.getDefaultProperties()[name];
  };

  styfn$6.getDefaultProperties = function () {
    var _p = this._private;

    if (_p.defaultProperties != null) {
      return _p.defaultProperties;
    }

    var rawProps = extend({
      // core props
      'selection-box-color': '#ddd',
      'selection-box-opacity': 0.65,
      'selection-box-border-color': '#aaa',
      'selection-box-border-width': 1,
      'active-bg-color': 'black',
      'active-bg-opacity': 0.15,
      'active-bg-size': 30,
      'outside-texture-bg-color': '#000',
      'outside-texture-bg-opacity': 0.125,
      // common node/edge props
      'events': 'yes',
      'text-events': 'no',
      'text-valign': 'top',
      'text-halign': 'center',
      'text-justification': 'auto',
      'line-height': 1,
      'color': '#000',
      'text-outline-color': '#000',
      'text-outline-width': 0,
      'text-outline-opacity': 1,
      'text-opacity': 1,
      'text-decoration': 'none',
      'text-transform': 'none',
      'text-wrap': 'none',
      'text-overflow-wrap': 'whitespace',
      'text-max-width': 9999,
      'text-background-color': '#000',
      'text-background-opacity': 0,
      'text-background-shape': 'rectangle',
      'text-background-padding': 0,
      'text-border-opacity': 0,
      'text-border-width': 0,
      'text-border-style': 'solid',
      'text-border-color': '#000',
      'font-family': 'Helvetica Neue, Helvetica, sans-serif',
      'font-style': 'normal',
      'font-weight': 'normal',
      'font-size': 16,
      'min-zoomed-font-size': 0,
      'text-rotation': 'none',
      'source-text-rotation': 'none',
      'target-text-rotation': 'none',
      'visibility': 'visible',
      'display': 'element',
      'opacity': 1,
      'z-compound-depth': 'auto',
      'z-index-compare': 'auto',
      'z-index': 0,
      'label': '',
      'text-margin-x': 0,
      'text-margin-y': 0,
      'source-label': '',
      'source-text-offset': 0,
      'source-text-margin-x': 0,
      'source-text-margin-y': 0,
      'target-label': '',
      'target-text-offset': 0,
      'target-text-margin-x': 0,
      'target-text-margin-y': 0,
      'overlay-opacity': 0,
      'overlay-color': '#000',
      'overlay-padding': 10,
      'transition-property': 'none',
      'transition-duration': 0,
      'transition-delay': 0,
      'transition-timing-function': 'linear',
      // node props
      'background-blacken': 0,
      'background-color': '#999',
      'background-fill': 'solid',
      'background-opacity': 1,
      'background-image': 'none',
      'background-image-crossorigin': 'anonymous',
      'background-image-opacity': 1,
      'background-position-x': '50%',
      'background-position-y': '50%',
      'background-offset-x': 0,
      'background-offset-y': 0,
      'background-width-relative-to': 'include-padding',
      'background-height-relative-to': 'include-padding',
      'background-repeat': 'no-repeat',
      'background-fit': 'none',
      'background-clip': 'node',
      'background-width': 'auto',
      'background-height': 'auto',
      'border-color': '#000',
      'border-opacity': 1,
      'border-width': 0,
      'border-style': 'solid',
      'height': 30,
      'width': 30,
      'shape': 'ellipse',
      'shape-polygon-points': '-1, -1,   1, -1,   1, 1,   -1, 1',
      'bounds-expansion': 0,
      // node gradient
      'background-gradient-direction': 'to-bottom',
      'background-gradient-stop-colors': '#999',
      'background-gradient-stop-positions': '0%',
      // ghost props
      'ghost': 'no',
      'ghost-offset-y': 0,
      'ghost-offset-x': 0,
      'ghost-opacity': 0,
      // compound props
      'padding': 0,
      'padding-relative-to': 'width',
      'position': 'origin',
      'compound-sizing-wrt-labels': 'include',
      'min-width': 0,
      'min-width-bias-left': 0,
      'min-width-bias-right': 0,
      'min-height': 0,
      'min-height-bias-top': 0,
      'min-height-bias-bottom': 0
    }, {
      // node pie bg
      'pie-size': '100%'
    }, [{
      name: 'pie-{{i}}-background-color',
      value: 'black'
    }, {
      name: 'pie-{{i}}-background-size',
      value: '0%'
    }, {
      name: 'pie-{{i}}-background-opacity',
      value: 1
    }].reduce(function (css, prop) {
      for (var i = 1; i <= styfn$6.pieBackgroundN; i++) {
        var name = prop.name.replace('{{i}}', i);
        var val = prop.value;
        css[name] = val;
      }

      return css;
    }, {}), {
      // edge props
      'line-style': 'solid',
      'line-color': '#999',
      'line-fill': 'solid',
      'line-cap': 'butt',
      'line-gradient-stop-colors': '#999',
      'line-gradient-stop-positions': '0%',
      'control-point-step-size': 40,
      'control-point-weights': 0.5,
      'segment-weights': 0.5,
      'segment-distances': 20,
      'taxi-turn': '50%',
      'taxi-turn-min-distance': 10,
      'taxi-direction': 'auto',
      'edge-distances': 'intersection',
      'curve-style': 'haystack',
      'haystack-radius': 0,
      'arrow-scale': 1,
      'loop-direction': '-45deg',
      'loop-sweep': '-90deg',
      'source-distance-from-node': 0,
      'target-distance-from-node': 0,
      'source-endpoint': 'outside-to-node',
      'target-endpoint': 'outside-to-node',
      'line-dash-pattern': [6, 3],
      'line-dash-offset': 0
    }, [{
      name: 'arrow-shape',
      value: 'none'
    }, {
      name: 'arrow-color',
      value: '#999'
    }, {
      name: 'arrow-fill',
      value: 'filled'
    }].reduce(function (css, prop) {
      styfn$6.arrowPrefixes.forEach(function (prefix) {
        var name = prefix + '-' + prop.name;
        var val = prop.value;
        css[name] = val;
      });
      return css;
    }, {}));
    var parsedProps = {};

    for (var i = 0; i < this.properties.length; i++) {
      var prop = this.properties[i];

      if (prop.pointsTo) {
        continue;
      }

      var name = prop.name;
      var val = rawProps[name];
      var parsedProp = this.parse(name, val);
      parsedProps[name] = parsedProp;
    }

    _p.defaultProperties = parsedProps;
    return _p.defaultProperties;
  };

  styfn$6.addDefaultStylesheet = function () {
    this.selector(':parent').css({
      'shape': 'rectangle',
      'padding': 10,
      'background-color': '#eee',
      'border-color': '#ccc',
      'border-width': 1
    }).selector('edge').css({
      'width': 3
    }).selector(':loop').css({
      'curve-style': 'bezier'
    }).selector('edge:compound').css({
      'curve-style': 'bezier',
      'source-endpoint': 'outside-to-line',
      'target-endpoint': 'outside-to-line'
    }).selector(':selected').css({
      'background-color': '#0169D9',
      'line-color': '#0169D9',
      'source-arrow-color': '#0169D9',
      'target-arrow-color': '#0169D9',
      'mid-source-arrow-color': '#0169D9',
      'mid-target-arrow-color': '#0169D9'
    }).selector(':parent:selected').css({
      'background-color': '#CCE1F9',
      'border-color': '#aec8e5'
    }).selector(':active').css({
      'overlay-color': 'black',
      'overlay-padding': 10,
      'overlay-opacity': 0.25
    });
    this.defaultLength = this.length;
  };

  var styfn$7 = {}; // a caching layer for property parsing

  styfn$7.parse = function (name, value, propIsBypass, propIsFlat) {
    var self = this; // function values can't be cached in all cases, and there isn't much benefit of caching them anyway

    if (fn(value)) {
      return self.parseImplWarn(name, value, propIsBypass, propIsFlat);
    }

    var flatKey = propIsFlat === 'mapping' || propIsFlat === true || propIsFlat === false || propIsFlat == null ? 'dontcare' : propIsFlat;
    var bypassKey = propIsBypass ? 't' : 'f';
    var valueKey = '' + value;
    var argHash = hashStrings(name, valueKey, bypassKey, flatKey);
    var propCache = self.propCache = self.propCache || [];
    var ret;

    if (!(ret = propCache[argHash])) {
      ret = propCache[argHash] = self.parseImplWarn(name, value, propIsBypass, propIsFlat);
    } // - bypasses can't be shared b/c the value can be changed by animations or otherwise overridden
    // - mappings can't be shared b/c mappings are per-element


    if (propIsBypass || propIsFlat === 'mapping') {
      // need a copy since props are mutated later in their lifecycles
      ret = copy(ret);

      if (ret) {
        ret.value = copy(ret.value); // because it could be an array, e.g. colour
      }
    }

    return ret;
  };

  styfn$7.parseImplWarn = function (name, value, propIsBypass, propIsFlat) {
    var prop = this.parseImpl(name, value, propIsBypass, propIsFlat);

    if (!prop && value != null) {
      warn("The style property `".concat(name, ": ").concat(value, "` is invalid"));
    }

    return prop;
  }; // parse a property; return null on invalid; return parsed property otherwise
  // fields :
  // - name : the name of the property
  // - value : the parsed, native-typed value of the property
  // - strValue : a string value that represents the property value in valid css
  // - bypass : true iff the property is a bypass property


  styfn$7.parseImpl = function (name, value, propIsBypass, propIsFlat) {
    var self = this;
    name = camel2dash(name); // make sure the property name is in dash form (e.g. 'property-name' not 'propertyName')

    var property = self.properties[name];
    var passedValue = value;
    var types = self.types;

    if (!property) {
      return null;
    } // return null on property of unknown name


    if (value === undefined) {
      return null;
    } // can't assign undefined
    // the property may be an alias


    if (property.alias) {
      property = property.pointsTo;
      name = property.name;
    }

    var valueIsString = string(value);

    if (valueIsString) {
      // trim the value to make parsing easier
      value = value.trim();
    }

    var type = property.type;

    if (!type) {
      return null;
    } // no type, no luck
    // check if bypass is null or empty string (i.e. indication to delete bypass property)


    if (propIsBypass && (value === '' || value === null)) {
      return {
        name: name,
        value: value,
        bypass: true,
        deleteBypass: true
      };
    } // check if value is a function used as a mapper


    if (fn(value)) {
      return {
        name: name,
        value: value,
        strValue: 'fn',
        mapped: types.fn,
        bypass: propIsBypass
      };
    } // check if value is mapped


    var data, mapData;

    if (!valueIsString || propIsFlat || value.length < 7 || value[1] !== 'a') ; else if (value.length >= 7 && value[0] === 'd' && (data = new RegExp(types.data.regex).exec(value))) {
      if (propIsBypass) {
        return false;
      } // mappers not allowed in bypass


      var mapped = types.data;
      return {
        name: name,
        value: data,
        strValue: '' + value,
        mapped: mapped,
        field: data[1],
        bypass: propIsBypass
      };
    } else if (value.length >= 10 && value[0] === 'm' && (mapData = new RegExp(types.mapData.regex).exec(value))) {
      if (propIsBypass) {
        return false;
      } // mappers not allowed in bypass


      if (type.multiple) {
        return false;
      } // impossible to map to num


      var _mapped = types.mapData; // we can map only if the type is a colour or a number

      if (!(type.color || type.number)) {
        return false;
      }

      var valueMin = this.parse(name, mapData[4]); // parse to validate

      if (!valueMin || valueMin.mapped) {
        return false;
      } // can't be invalid or mapped


      var valueMax = this.parse(name, mapData[5]); // parse to validate

      if (!valueMax || valueMax.mapped) {
        return false;
      } // can't be invalid or mapped
      // check if valueMin and valueMax are the same


      if (valueMin.pfValue === valueMax.pfValue || valueMin.strValue === valueMax.strValue) {
        warn('`' + name + ': ' + value + '` is not a valid mapper because the output range is zero; converting to `' + name + ': ' + valueMin.strValue + '`');
        return this.parse(name, valueMin.strValue); // can't make much of a mapper without a range
      } else if (type.color) {
        var c1 = valueMin.value;
        var c2 = valueMax.value;
        var same = c1[0] === c2[0] // red
        && c1[1] === c2[1] // green
        && c1[2] === c2[2] // blue
        && ( // optional alpha
        c1[3] === c2[3] // same alpha outright
        || (c1[3] == null || c1[3] === 1) && ( // full opacity for colour 1?
        c2[3] == null || c2[3] === 1) // full opacity for colour 2?
        );

        if (same) {
          return false;
        } // can't make a mapper without a range

      }

      return {
        name: name,
        value: mapData,
        strValue: '' + value,
        mapped: _mapped,
        field: mapData[1],
        fieldMin: parseFloat(mapData[2]),
        // min & max are numeric
        fieldMax: parseFloat(mapData[3]),
        valueMin: valueMin.value,
        valueMax: valueMax.value,
        bypass: propIsBypass
      };
    }

    if (type.multiple && propIsFlat !== 'multiple') {
      var vals;

      if (valueIsString) {
        vals = value.split(/\s+/);
      } else if (array(value)) {
        vals = value;
      } else {
        vals = [value];
      }

      if (type.evenMultiple && vals.length % 2 !== 0) {
        return null;
      }

      var valArr = [];
      var unitsArr = [];
      var pfValArr = [];
      var strVal = '';
      var hasEnum = false;

      for (var i = 0; i < vals.length; i++) {
        var p = self.parse(name, vals[i], propIsBypass, 'multiple');
        hasEnum = hasEnum || string(p.value);
        valArr.push(p.value);
        pfValArr.push(p.pfValue != null ? p.pfValue : p.value);
        unitsArr.push(p.units);
        strVal += (i > 0 ? ' ' : '') + p.strValue;
      }

      if (type.validate && !type.validate(valArr, unitsArr)) {
        return null;
      }

      if (type.singleEnum && hasEnum) {
        if (valArr.length === 1 && string(valArr[0])) {
          return {
            name: name,
            value: valArr[0],
            strValue: valArr[0],
            bypass: propIsBypass
          };
        } else {
          return null;
        }
      }

      return {
        name: name,
        value: valArr,
        pfValue: pfValArr,
        strValue: strVal,
        bypass: propIsBypass,
        units: unitsArr
      };
    } // several types also allow enums


    var checkEnums = function checkEnums() {
      for (var _i = 0; _i < type.enums.length; _i++) {
        var en = type.enums[_i];

        if (en === value) {
          return {
            name: name,
            value: value,
            strValue: '' + value,
            bypass: propIsBypass
          };
        }
      }

      return null;
    }; // check the type and return the appropriate object


    if (type.number) {
      var units;
      var implicitUnits = 'px'; // not set => px

      if (type.units) {
        // use specified units if set
        units = type.units;
      }

      if (type.implicitUnits) {
        implicitUnits = type.implicitUnits;
      }

      if (!type.unitless) {
        if (valueIsString) {
          var unitsRegex = 'px|em' + (type.allowPercent ? '|\\%' : '');

          if (units) {
            unitsRegex = units;
          } // only allow explicit units if so set


          var match = value.match('^(' + number$1 + ')(' + unitsRegex + ')?' + '$');

          if (match) {
            value = match[1];
            units = match[2] || implicitUnits;
          }
        } else if (!units || type.implicitUnits) {
          units = implicitUnits; // implicitly px if unspecified
        }
      }

      value = parseFloat(value); // if not a number and enums not allowed, then the value is invalid

      if (isNaN(value) && type.enums === undefined) {
        return null;
      } // check if this number type also accepts special keywords in place of numbers
      // (i.e. `left`, `auto`, etc)


      if (isNaN(value) && type.enums !== undefined) {
        value = passedValue;
        return checkEnums();
      } // check if value must be an integer


      if (type.integer && !integer(value)) {
        return null;
      } // check value is within range


      if (type.min !== undefined && (value < type.min || type.strictMin && value === type.min) || type.max !== undefined && (value > type.max || type.strictMax && value === type.max)) {
        return null;
      }

      var ret = {
        name: name,
        value: value,
        strValue: '' + value + (units ? units : ''),
        units: units,
        bypass: propIsBypass
      }; // normalise value in pixels

      if (type.unitless || units !== 'px' && units !== 'em') {
        ret.pfValue = value;
      } else {
        ret.pfValue = units === 'px' || !units ? value : this.getEmSizeInPixels() * value;
      } // normalise value in ms


      if (units === 'ms' || units === 's') {
        ret.pfValue = units === 'ms' ? value : 1000 * value;
      } // normalise value in rad


      if (units === 'deg' || units === 'rad') {
        ret.pfValue = units === 'rad' ? value : deg2rad(value);
      } // normalize value in %


      if (units === '%') {
        ret.pfValue = value / 100;
      }

      return ret;
    } else if (type.propList) {
      var props = [];
      var propsStr = '' + value;

      if (propsStr === 'none') ; else {
        // go over each prop
        var propsSplit = propsStr.split(/\s*,\s*|\s+/);

        for (var _i2 = 0; _i2 < propsSplit.length; _i2++) {
          var propName = propsSplit[_i2].trim();

          if (self.properties[propName]) {
            props.push(propName);
          } else {
            warn('`' + propName + '` is not a valid property name');
          }
        }

        if (props.length === 0) {
          return null;
        }
      }

      return {
        name: name,
        value: props,
        strValue: props.length === 0 ? 'none' : props.join(' '),
        bypass: propIsBypass
      };
    } else if (type.color) {
      var tuple = color2tuple(value);

      if (!tuple) {
        return null;
      }

      return {
        name: name,
        value: tuple,
        pfValue: tuple,
        strValue: 'rgb(' + tuple[0] + ',' + tuple[1] + ',' + tuple[2] + ')',
        // n.b. no spaces b/c of multiple support
        bypass: propIsBypass
      };
    } else if (type.regex || type.regexes) {
      // first check enums
      if (type.enums) {
        var enumProp = checkEnums();

        if (enumProp) {
          return enumProp;
        }
      }

      var regexes = type.regexes ? type.regexes : [type.regex];

      for (var _i3 = 0; _i3 < regexes.length; _i3++) {
        var regex = new RegExp(regexes[_i3]); // make a regex from the type string

        var m = regex.exec(value);

        if (m) {
          // regex matches
          return {
            name: name,
            value: type.singleRegexMatchValue ? m[1] : m,
            strValue: '' + value,
            bypass: propIsBypass
          };
        }
      }

      return null; // didn't match any
    } else if (type.string) {
      // just return
      return {
        name: name,
        value: '' + value,
        strValue: '' + value,
        bypass: propIsBypass
      };
    } else if (type.enums) {
      // check enums last because it's a combo type in others
      return checkEnums();
    } else {
      return null; // not a type we can handle
    }
  };

  var Style = function Style(cy) {
    if (!(this instanceof Style)) {
      return new Style(cy);
    }

    if (!core(cy)) {
      error('A style must have a core reference');
      return;
    }

    this._private = {
      cy: cy,
      coreStyle: {}
    };
    this.length = 0;
    this.resetToDefault();
  };

  var styfn$8 = Style.prototype;

  styfn$8.instanceString = function () {
    return 'style';
  }; // remove all contexts


  styfn$8.clear = function () {
    for (var i = 0; i < this.length; i++) {
      this[i] = undefined;
    }

    this.length = 0;
    var _p = this._private;
    _p.newStyle = true;
    return this; // chaining
  };

  styfn$8.resetToDefault = function () {
    this.clear();
    this.addDefaultStylesheet();
    return this;
  }; // builds a style object for the 'core' selector


  styfn$8.core = function (propName) {
    return this._private.coreStyle[propName] || this.getDefaultProperty(propName);
  }; // create a new context from the specified selector string and switch to that context


  styfn$8.selector = function (selectorStr) {
    // 'core' is a special case and does not need a selector
    var selector = selectorStr === 'core' ? null : new Selector(selectorStr);
    var i = this.length++; // new context means new index

    this[i] = {
      selector: selector,
      properties: [],
      mappedProperties: [],
      index: i
    };
    return this; // chaining
  }; // add one or many css rules to the current context


  styfn$8.css = function () {
    var self = this;
    var args = arguments;

    if (args.length === 1) {
      var map = args[0];

      for (var i = 0; i < self.properties.length; i++) {
        var prop = self.properties[i];
        var mapVal = map[prop.name];

        if (mapVal === undefined) {
          mapVal = map[dash2camel(prop.name)];
        }

        if (mapVal !== undefined) {
          this.cssRule(prop.name, mapVal);
        }
      }
    } else if (args.length === 2) {
      this.cssRule(args[0], args[1]);
    } // do nothing if args are invalid


    return this; // chaining
  };

  styfn$8.style = styfn$8.css; // add a single css rule to the current context

  styfn$8.cssRule = function (name, value) {
    // name-value pair
    var property = this.parse(name, value); // add property to current context if valid

    if (property) {
      var i = this.length - 1;
      this[i].properties.push(property);
      this[i].properties[property.name] = property; // allow access by name as well

      if (property.name.match(/pie-(\d+)-background-size/) && property.value) {
        this._private.hasPie = true;
      }

      if (property.mapped) {
        this[i].mappedProperties.push(property);
      } // add to core style if necessary


      var currentSelectorIsCore = !this[i].selector;

      if (currentSelectorIsCore) {
        this._private.coreStyle[property.name] = property;
      }
    }

    return this; // chaining
  };

  styfn$8.append = function (style) {
    if (stylesheet(style)) {
      style.appendToStyle(this);
    } else if (array(style)) {
      this.appendFromJson(style);
    } else if (string(style)) {
      this.appendFromString(style);
    } // you probably wouldn't want to append a Style, since you'd duplicate the default parts


    return this;
  }; // static function


  Style.fromJson = function (cy, json) {
    var style = new Style(cy);
    style.fromJson(json);
    return style;
  };

  Style.fromString = function (cy, string) {
    return new Style(cy).fromString(string);
  };

  [styfn, styfn$1, styfn$2, styfn$3, styfn$4, styfn$5, styfn$6, styfn$7].forEach(function (props) {
    extend(styfn$8, props);
  });
  Style.types = styfn$8.types;
  Style.properties = styfn$8.properties;
  Style.propertyGroups = styfn$8.propertyGroups;
  Style.propertyGroupNames = styfn$8.propertyGroupNames;
  Style.propertyGroupKeys = styfn$8.propertyGroupKeys;

  var corefn$7 = {
    style: function style(newStyle) {
      if (newStyle) {
        var s = this.setStyle(newStyle);
        s.update();
      }

      return this._private.style;
    },
    setStyle: function setStyle(style) {
      var _p = this._private;

      if (stylesheet(style)) {
        _p.style = style.generateStyle(this);
      } else if (array(style)) {
        _p.style = Style.fromJson(this, style);
      } else if (string(style)) {
        _p.style = Style.fromString(this, style);
      } else {
        _p.style = Style(this);
      }

      return _p.style;
    }
  };

  var defaultSelectionType = 'single';
  var corefn$8 = {
    autolock: function autolock(bool) {
      if (bool !== undefined) {
        this._private.autolock = bool ? true : false;
      } else {
        return this._private.autolock;
      }

      return this; // chaining
    },
    autoungrabify: function autoungrabify(bool) {
      if (bool !== undefined) {
        this._private.autoungrabify = bool ? true : false;
      } else {
        return this._private.autoungrabify;
      }

      return this; // chaining
    },
    autounselectify: function autounselectify(bool) {
      if (bool !== undefined) {
        this._private.autounselectify = bool ? true : false;
      } else {
        return this._private.autounselectify;
      }

      return this; // chaining
    },
    selectionType: function selectionType(selType) {
      var _p = this._private;

      if (_p.selectionType == null) {
        _p.selectionType = defaultSelectionType;
      }

      if (selType !== undefined) {
        if (selType === 'additive' || selType === 'single') {
          _p.selectionType = selType;
        }
      } else {
        return _p.selectionType;
      }

      return this;
    },
    panningEnabled: function panningEnabled(bool) {
      if (bool !== undefined) {
        this._private.panningEnabled = bool ? true : false;
      } else {
        return this._private.panningEnabled;
      }

      return this; // chaining
    },
    userPanningEnabled: function userPanningEnabled(bool) {
      if (bool !== undefined) {
        this._private.userPanningEnabled = bool ? true : false;
      } else {
        return this._private.userPanningEnabled;
      }

      return this; // chaining
    },
    zoomingEnabled: function zoomingEnabled(bool) {
      if (bool !== undefined) {
        this._private.zoomingEnabled = bool ? true : false;
      } else {
        return this._private.zoomingEnabled;
      }

      return this; // chaining
    },
    userZoomingEnabled: function userZoomingEnabled(bool) {
      if (bool !== undefined) {
        this._private.userZoomingEnabled = bool ? true : false;
      } else {
        return this._private.userZoomingEnabled;
      }

      return this; // chaining
    },
    boxSelectionEnabled: function boxSelectionEnabled(bool) {
      if (bool !== undefined) {
        this._private.boxSelectionEnabled = bool ? true : false;
      } else {
        return this._private.boxSelectionEnabled;
      }

      return this; // chaining
    },
    pan: function pan() {
      var args = arguments;
      var pan = this._private.pan;
      var dim, val, dims, x, y;

      switch (args.length) {
        case 0:
          // .pan()
          return pan;

        case 1:
          if (string(args[0])) {
            // .pan('x')
            dim = args[0];
            return pan[dim];
          } else if (plainObject(args[0])) {
            // .pan({ x: 0, y: 100 })
            if (!this._private.panningEnabled) {
              return this;
            }

            dims = args[0];
            x = dims.x;
            y = dims.y;

            if (number(x)) {
              pan.x = x;
            }

            if (number(y)) {
              pan.y = y;
            }

            this.emit('pan viewport');
          }

          break;

        case 2:
          // .pan('x', 100)
          if (!this._private.panningEnabled) {
            return this;
          }

          dim = args[0];
          val = args[1];

          if ((dim === 'x' || dim === 'y') && number(val)) {
            pan[dim] = val;
          }

          this.emit('pan viewport');
          break;
        // invalid
      }

      this.notify('viewport');
      return this; // chaining
    },
    panBy: function panBy(arg0, arg1) {
      var args = arguments;
      var pan = this._private.pan;
      var dim, val, dims, x, y;

      if (!this._private.panningEnabled) {
        return this;
      }

      switch (args.length) {
        case 1:
          if (plainObject(arg0)) {
            // .panBy({ x: 0, y: 100 })
            dims = args[0];
            x = dims.x;
            y = dims.y;

            if (number(x)) {
              pan.x += x;
            }

            if (number(y)) {
              pan.y += y;
            }

            this.emit('pan viewport');
          }

          break;

        case 2:
          // .panBy('x', 100)
          dim = arg0;
          val = arg1;

          if ((dim === 'x' || dim === 'y') && number(val)) {
            pan[dim] += val;
          }

          this.emit('pan viewport');
          break;
        // invalid
      }

      this.notify('viewport');
      return this; // chaining
    },
    fit: function fit(elements, padding) {
      var viewportState = this.getFitViewport(elements, padding);

      if (viewportState) {
        var _p = this._private;
        _p.zoom = viewportState.zoom;
        _p.pan = viewportState.pan;
        this.emit('pan zoom viewport');
        this.notify('viewport');
      }

      return this; // chaining
    },
    getFitViewport: function getFitViewport(elements, padding) {
      if (number(elements) && padding === undefined) {
        // elements is optional
        padding = elements;
        elements = undefined;
      }

      if (!this._private.panningEnabled || !this._private.zoomingEnabled) {
        return;
      }

      var bb;

      if (string(elements)) {
        var sel = elements;
        elements = this.$(sel);
      } else if (boundingBox(elements)) {
        // assume bb
        var bbe = elements;
        bb = {
          x1: bbe.x1,
          y1: bbe.y1,
          x2: bbe.x2,
          y2: bbe.y2
        };
        bb.w = bb.x2 - bb.x1;
        bb.h = bb.y2 - bb.y1;
      } else if (!elementOrCollection(elements)) {
        elements = this.mutableElements();
      }

      if (elementOrCollection(elements) && elements.empty()) {
        return;
      } // can't fit to nothing


      bb = bb || elements.boundingBox();
      var w = this.width();
      var h = this.height();
      var zoom;
      padding = number(padding) ? padding : 0;

      if (!isNaN(w) && !isNaN(h) && w > 0 && h > 0 && !isNaN(bb.w) && !isNaN(bb.h) && bb.w > 0 && bb.h > 0) {
        zoom = Math.min((w - 2 * padding) / bb.w, (h - 2 * padding) / bb.h); // crop zoom

        zoom = zoom > this._private.maxZoom ? this._private.maxZoom : zoom;
        zoom = zoom < this._private.minZoom ? this._private.minZoom : zoom;
        var pan = {
          // now pan to middle
          x: (w - zoom * (bb.x1 + bb.x2)) / 2,
          y: (h - zoom * (bb.y1 + bb.y2)) / 2
        };
        return {
          zoom: zoom,
          pan: pan
        };
      }

      return;
    },
    zoomRange: function zoomRange(min, max) {
      var _p = this._private;

      if (max == null) {
        var opts = min;
        min = opts.min;
        max = opts.max;
      }

      if (number(min) && number(max) && min <= max) {
        _p.minZoom = min;
        _p.maxZoom = max;
      } else if (number(min) && max === undefined && min <= _p.maxZoom) {
        _p.minZoom = min;
      } else if (number(max) && min === undefined && max >= _p.minZoom) {
        _p.maxZoom = max;
      }

      return this;
    },
    minZoom: function minZoom(zoom) {
      if (zoom === undefined) {
        return this._private.minZoom;
      } else {
        return this.zoomRange({
          min: zoom
        });
      }
    },
    maxZoom: function maxZoom(zoom) {
      if (zoom === undefined) {
        return this._private.maxZoom;
      } else {
        return this.zoomRange({
          max: zoom
        });
      }
    },
    getZoomedViewport: function getZoomedViewport(params) {
      var _p = this._private;
      var currentPan = _p.pan;
      var currentZoom = _p.zoom;
      var pos; // in rendered px

      var zoom;
      var bail = false;

      if (!_p.zoomingEnabled) {
        // zooming disabled
        bail = true;
      }

      if (number(params)) {
        // then set the zoom
        zoom = params;
      } else if (plainObject(params)) {
        // then zoom about a point
        zoom = params.level;

        if (params.position != null) {
          pos = modelToRenderedPosition(params.position, currentZoom, currentPan);
        } else if (params.renderedPosition != null) {
          pos = params.renderedPosition;
        }

        if (pos != null && !_p.panningEnabled) {
          // panning disabled
          bail = true;
        }
      } // crop zoom


      zoom = zoom > _p.maxZoom ? _p.maxZoom : zoom;
      zoom = zoom < _p.minZoom ? _p.minZoom : zoom; // can't zoom with invalid params

      if (bail || !number(zoom) || zoom === currentZoom || pos != null && (!number(pos.x) || !number(pos.y))) {
        return null;
      }

      if (pos != null) {
        // set zoom about position
        var pan1 = currentPan;
        var zoom1 = currentZoom;
        var zoom2 = zoom;
        var pan2 = {
          x: -zoom2 / zoom1 * (pos.x - pan1.x) + pos.x,
          y: -zoom2 / zoom1 * (pos.y - pan1.y) + pos.y
        };
        return {
          zoomed: true,
          panned: true,
          zoom: zoom2,
          pan: pan2
        };
      } else {
        // just set the zoom
        return {
          zoomed: true,
          panned: false,
          zoom: zoom,
          pan: currentPan
        };
      }
    },
    zoom: function zoom(params) {
      if (params === undefined) {
        // get
        return this._private.zoom;
      } else {
        // set
        var vp = this.getZoomedViewport(params);
        var _p = this._private;

        if (vp == null || !vp.zoomed) {
          return this;
        }

        _p.zoom = vp.zoom;

        if (vp.panned) {
          _p.pan.x = vp.pan.x;
          _p.pan.y = vp.pan.y;
        }

        this.emit('zoom' + (vp.panned ? ' pan' : '') + ' viewport');
        this.notify('viewport');
        return this; // chaining
      }
    },
    viewport: function viewport(opts) {
      var _p = this._private;
      var zoomDefd = true;
      var panDefd = true;
      var events = []; // to trigger

      var zoomFailed = false;
      var panFailed = false;

      if (!opts) {
        return this;
      }

      if (!number(opts.zoom)) {
        zoomDefd = false;
      }

      if (!plainObject(opts.pan)) {
        panDefd = false;
      }

      if (!zoomDefd && !panDefd) {
        return this;
      }

      if (zoomDefd) {
        var z = opts.zoom;

        if (z < _p.minZoom || z > _p.maxZoom || !_p.zoomingEnabled) {
          zoomFailed = true;
        } else {
          _p.zoom = z;
          events.push('zoom');
        }
      }

      if (panDefd && (!zoomFailed || !opts.cancelOnFailedZoom) && _p.panningEnabled) {
        var p = opts.pan;

        if (number(p.x)) {
          _p.pan.x = p.x;
          panFailed = false;
        }

        if (number(p.y)) {
          _p.pan.y = p.y;
          panFailed = false;
        }

        if (!panFailed) {
          events.push('pan');
        }
      }

      if (events.length > 0) {
        events.push('viewport');
        this.emit(events.join(' '));
        this.notify('viewport');
      }

      return this; // chaining
    },
    center: function center(elements) {
      var pan = this.getCenterPan(elements);

      if (pan) {
        this._private.pan = pan;
        this.emit('pan viewport');
        this.notify('viewport');
      }

      return this; // chaining
    },
    getCenterPan: function getCenterPan(elements, zoom) {
      if (!this._private.panningEnabled) {
        return;
      }

      if (string(elements)) {
        var selector = elements;
        elements = this.mutableElements().filter(selector);
      } else if (!elementOrCollection(elements)) {
        elements = this.mutableElements();
      }

      if (elements.length === 0) {
        return;
      } // can't centre pan to nothing


      var bb = elements.boundingBox();
      var w = this.width();
      var h = this.height();
      zoom = zoom === undefined ? this._private.zoom : zoom;
      var pan = {
        // middle
        x: (w - zoom * (bb.x1 + bb.x2)) / 2,
        y: (h - zoom * (bb.y1 + bb.y2)) / 2
      };
      return pan;
    },
    reset: function reset() {
      if (!this._private.panningEnabled || !this._private.zoomingEnabled) {
        return this;
      }

      this.viewport({
        pan: {
          x: 0,
          y: 0
        },
        zoom: 1
      });
      return this; // chaining
    },
    invalidateSize: function invalidateSize() {
      this._private.sizeCache = null;
    },
    size: function size() {
      var _p = this._private;
      var container = _p.container;
      return _p.sizeCache = _p.sizeCache || (container ? function () {
        var style = window$1.getComputedStyle(container);

        var val = function val(name) {
          return parseFloat(style.getPropertyValue(name));
        };

        return {
          width: container.clientWidth - val('padding-left') - val('padding-right'),
          height: container.clientHeight - val('padding-top') - val('padding-bottom')
        };
      }() : {
        // fallback if no container (not 0 b/c can be used for dividing etc)
        width: 1,
        height: 1
      });
    },
    width: function width() {
      return this.size().width;
    },
    height: function height() {
      return this.size().height;
    },
    extent: function extent() {
      var pan = this._private.pan;
      var zoom = this._private.zoom;
      var rb = this.renderedExtent();
      var b = {
        x1: (rb.x1 - pan.x) / zoom,
        x2: (rb.x2 - pan.x) / zoom,
        y1: (rb.y1 - pan.y) / zoom,
        y2: (rb.y2 - pan.y) / zoom
      };
      b.w = b.x2 - b.x1;
      b.h = b.y2 - b.y1;
      return b;
    },
    renderedExtent: function renderedExtent() {
      var width = this.width();
      var height = this.height();
      return {
        x1: 0,
        y1: 0,
        x2: width,
        y2: height,
        w: width,
        h: height
      };
    }
  }; // aliases

  corefn$8.centre = corefn$8.center; // backwards compatibility

  corefn$8.autolockNodes = corefn$8.autolock;
  corefn$8.autoungrabifyNodes = corefn$8.autoungrabify;

  var fn$6 = {
    data: define$3.data({
      field: 'data',
      bindingEvent: 'data',
      allowBinding: true,
      allowSetting: true,
      settingEvent: 'data',
      settingTriggersEvent: true,
      triggerFnName: 'trigger',
      allowGetting: true
    }),
    removeData: define$3.removeData({
      field: 'data',
      event: 'data',
      triggerFnName: 'trigger',
      triggerEvent: true
    }),
    scratch: define$3.data({
      field: 'scratch',
      bindingEvent: 'scratch',
      allowBinding: true,
      allowSetting: true,
      settingEvent: 'scratch',
      settingTriggersEvent: true,
      triggerFnName: 'trigger',
      allowGetting: true
    }),
    removeScratch: define$3.removeData({
      field: 'scratch',
      event: 'scratch',
      triggerFnName: 'trigger',
      triggerEvent: true
    })
  }; // aliases

  fn$6.attr = fn$6.data;
  fn$6.removeAttr = fn$6.removeData;

  var Core = function Core(opts) {
    var cy = this;
    opts = extend({}, opts);
    var container = opts.container; // allow for passing a wrapped jquery object
    // e.g. cytoscape({ container: $('#cy') })

    if (container && !htmlElement(container) && htmlElement(container[0])) {
      container = container[0];
    }

    var reg = container ? container._cyreg : null; // e.g. already registered some info (e.g. readies) via jquery

    reg = reg || {};

    if (reg && reg.cy) {
      reg.cy.destroy();
      reg = {}; // old instance => replace reg completely
    }

    var readies = reg.readies = reg.readies || [];

    if (container) {
      container._cyreg = reg;
    } // make sure container assoc'd reg points to this cy


    reg.cy = cy;
    var head = window$1 !== undefined && container !== undefined && !opts.headless;
    var options = opts;
    options.layout = extend({
      name: head ? 'grid' : 'null'
    }, options.layout);
    options.renderer = extend({
      name: head ? 'canvas' : 'null'
    }, options.renderer);

    var defVal = function defVal(def, val, altVal) {
      if (val !== undefined) {
        return val;
      } else if (altVal !== undefined) {
        return altVal;
      } else {
        return def;
      }
    };

    var _p = this._private = {
      container: container,
      // html dom ele container
      ready: false,
      // whether ready has been triggered
      options: options,
      // cached options
      elements: new Collection$1(this),
      // elements in the graph
      listeners: [],
      // list of listeners
      aniEles: new Collection$1(this),
      // elements being animated
      data: {},
      // data for the core
      scratch: {},
      // scratch object for core
      layout: null,
      renderer: null,
      destroyed: false,
      // whether destroy was called
      notificationsEnabled: true,
      // whether notifications are sent to the renderer
      minZoom: 1e-50,
      maxZoom: 1e50,
      zoomingEnabled: defVal(true, options.zoomingEnabled),
      userZoomingEnabled: defVal(true, options.userZoomingEnabled),
      panningEnabled: defVal(true, options.panningEnabled),
      userPanningEnabled: defVal(true, options.userPanningEnabled),
      boxSelectionEnabled: defVal(true, options.boxSelectionEnabled),
      autolock: defVal(false, options.autolock, options.autolockNodes),
      autoungrabify: defVal(false, options.autoungrabify, options.autoungrabifyNodes),
      autounselectify: defVal(false, options.autounselectify),
      styleEnabled: options.styleEnabled === undefined ? head : options.styleEnabled,
      zoom: number(options.zoom) ? options.zoom : 1,
      pan: {
        x: plainObject(options.pan) && number(options.pan.x) ? options.pan.x : 0,
        y: plainObject(options.pan) && number(options.pan.y) ? options.pan.y : 0
      },
      animation: {
        // object for currently-running animations
        current: [],
        queue: []
      },
      hasCompoundNodes: false
    };

    this.createEmitter(); // set selection type

    this.selectionType(options.selectionType); // init zoom bounds

    this.zoomRange({
      min: options.minZoom,
      max: options.maxZoom
    });

    var loadExtData = function loadExtData(extData, next) {
      var anyIsPromise = extData.some(promise);

      if (anyIsPromise) {
        return Promise$1.all(extData).then(next); // load all data asynchronously, then exec rest of init
      } else {
        next(extData); // exec synchronously for convenience
      }
    }; // start with the default stylesheet so we have something before loading an external stylesheet


    if (_p.styleEnabled) {
      cy.setStyle([]);
    } // create the renderer


    var rendererOptions = extend({}, options, options.renderer); // allow rendering hints in top level options

    cy.initRenderer(rendererOptions);

    var setElesAndLayout = function setElesAndLayout(elements, onload, ondone) {
      cy.notifications(false); // remove old elements

      var oldEles = cy.mutableElements();

      if (oldEles.length > 0) {
        oldEles.remove();
      }

      if (elements != null) {
        if (plainObject(elements) || array(elements)) {
          cy.add(elements);
        }
      }

      cy.one('layoutready', function (e) {
        cy.notifications(true);
        cy.emit(e); // we missed this event by turning notifications off, so pass it on

        cy.one('load', onload);
        cy.emitAndNotify('load');
      }).one('layoutstop', function () {
        cy.one('done', ondone);
        cy.emit('done');
      });
      var layoutOpts = extend({}, cy._private.options.layout);
      layoutOpts.eles = cy.elements();
      cy.layout(layoutOpts).run();
    };

    loadExtData([options.style, options.elements], function (thens) {
      var initStyle = thens[0];
      var initEles = thens[1]; // init style

      if (_p.styleEnabled) {
        cy.style().append(initStyle);
      } // initial load


      setElesAndLayout(initEles, function () {
        // onready
        cy.startAnimationLoop();
        _p.ready = true; // if a ready callback is specified as an option, the bind it

        if (fn(options.ready)) {
          cy.on('ready', options.ready);
        } // bind all the ready handlers registered before creating this instance


        for (var i = 0; i < readies.length; i++) {
          var fn$1 = readies[i];
          cy.on('ready', fn$1);
        }

        if (reg) {
          reg.readies = [];
        } // clear b/c we've bound them all and don't want to keep it around in case a new core uses the same div etc


        cy.emit('ready');
      }, options.done);
    });
  };

  var corefn$9 = Core.prototype; // short alias

  extend(corefn$9, {
    instanceString: function instanceString() {
      return 'core';
    },
    isReady: function isReady() {
      return this._private.ready;
    },
    destroyed: function destroyed() {
      return this._private.destroyed;
    },
    ready: function ready(fn) {
      if (this.isReady()) {
        this.emitter().emit('ready', [], fn); // just calls fn as though triggered via ready event
      } else {
        this.on('ready', fn);
      }

      return this;
    },
    destroy: function destroy() {
      var cy = this;
      if (cy.destroyed()) return;
      cy.stopAnimationLoop();
      cy.destroyRenderer();
      this.emit('destroy');
      cy._private.destroyed = true;
      return cy;
    },
    hasElementWithId: function hasElementWithId(id) {
      return this._private.elements.hasElementWithId(id);
    },
    getElementById: function getElementById(id) {
      return this._private.elements.getElementById(id);
    },
    hasCompoundNodes: function hasCompoundNodes() {
      return this._private.hasCompoundNodes;
    },
    headless: function headless() {
      return this._private.renderer.isHeadless();
    },
    styleEnabled: function styleEnabled() {
      return this._private.styleEnabled;
    },
    addToPool: function addToPool(eles) {
      this._private.elements.merge(eles);

      return this; // chaining
    },
    removeFromPool: function removeFromPool(eles) {
      this._private.elements.unmerge(eles);

      return this;
    },
    container: function container() {
      return this._private.container || null;
    },
    mount: function mount(container) {
      if (container == null) {
        return;
      }

      var cy = this;
      var _p = cy._private;
      var options = _p.options;

      if (!htmlElement(container) && htmlElement(container[0])) {
        container = container[0];
      }

      cy.stopAnimationLoop();
      cy.destroyRenderer();
      _p.container = container;
      _p.styleEnabled = true;
      cy.invalidateSize();
      cy.initRenderer(extend({}, options, options.renderer, {
        // allow custom renderer name to be re-used, otherwise use canvas
        name: options.renderer.name === 'null' ? 'canvas' : options.renderer.name
      }));
      cy.startAnimationLoop();
      cy.style(options.style);
      cy.emit('mount');
      return cy;
    },
    unmount: function unmount() {
      var cy = this;
      cy.stopAnimationLoop();
      cy.destroyRenderer();
      cy.initRenderer({
        name: 'null'
      });
      cy.emit('unmount');
      return cy;
    },
    options: function options() {
      return copy(this._private.options);
    },
    json: function json(obj) {
      var cy = this;
      var _p = cy._private;
      var eles = cy.mutableElements();

      var getFreshRef = function getFreshRef(ele) {
        return cy.getElementById(ele.id());
      };

      if (plainObject(obj)) {
        // set
        cy.startBatch();

        if (obj.elements) {
          var idInJson = {};

          var updateEles = function updateEles(jsons, gr) {
            var toAdd = [];
            var toMod = [];

            for (var i = 0; i < jsons.length; i++) {
              var json = jsons[i];
              var id = '' + json.data.id; // id must be string

              var ele = cy.getElementById(id);
              idInJson[id] = true;

              if (ele.length !== 0) {
                // existing element should be updated
                toMod.push({
                  ele: ele,
                  json: json
                });
              } else {
                // otherwise should be added
                if (gr) {
                  json.group = gr;
                  toAdd.push(json);
                } else {
                  toAdd.push(json);
                }
              }
            }

            cy.add(toAdd);

            for (var _i = 0; _i < toMod.length; _i++) {
              var _toMod$_i = toMod[_i],
                  _ele = _toMod$_i.ele,
                  _json = _toMod$_i.json;

              _ele.json(_json);
            }
          };

          if (array(obj.elements)) {
            // elements: []
            updateEles(obj.elements);
          } else {
            // elements: { nodes: [], edges: [] }
            var grs = ['nodes', 'edges'];

            for (var i = 0; i < grs.length; i++) {
              var gr = grs[i];
              var elements = obj.elements[gr];

              if (array(elements)) {
                updateEles(elements, gr);
              }
            }
          }

          var parentsToRemove = cy.collection();
          eles.filter(function (ele) {
            return !idInJson[ele.id()];
          }).forEach(function (ele) {
            if (ele.isParent()) {
              parentsToRemove.merge(ele);
            } else {
              ele.remove();
            }
          }); // so that children are not removed w/parent

          parentsToRemove.forEach(function (ele) {
            return ele.children().move({
              parent: null
            });
          }); // intermediate parents may be moved by prior line, so make sure we remove by fresh refs

          parentsToRemove.forEach(function (ele) {
            return getFreshRef(ele).remove();
          });
        }

        if (obj.style) {
          cy.style(obj.style);
        }

        if (obj.zoom != null && obj.zoom !== _p.zoom) {
          cy.zoom(obj.zoom);
        }

        if (obj.pan) {
          if (obj.pan.x !== _p.pan.x || obj.pan.y !== _p.pan.y) {
            cy.pan(obj.pan);
          }
        }

        if (obj.data) {
          cy.data(obj.data);
        }

        var fields = ['minZoom', 'maxZoom', 'zoomingEnabled', 'userZoomingEnabled', 'panningEnabled', 'userPanningEnabled', 'boxSelectionEnabled', 'autolock', 'autoungrabify', 'autounselectify'];

        for (var _i2 = 0; _i2 < fields.length; _i2++) {
          var f = fields[_i2];

          if (obj[f] != null) {
            cy[f](obj[f]);
          }
        }

        cy.endBatch();
        return this; // chaining
      } else {
        // get
        var flat = !!obj;
        var json = {};

        if (flat) {
          json.elements = this.elements().map(function (ele) {
            return ele.json();
          });
        } else {
          json.elements = {};
          eles.forEach(function (ele) {
            var group = ele.group();

            if (!json.elements[group]) {
              json.elements[group] = [];
            }

            json.elements[group].push(ele.json());
          });
        }

        if (this._private.styleEnabled) {
          json.style = cy.style().json();
        }

        json.data = copy(cy.data());
        var options = _p.options;
        json.zoomingEnabled = _p.zoomingEnabled;
        json.userZoomingEnabled = _p.userZoomingEnabled;
        json.zoom = _p.zoom;
        json.minZoom = _p.minZoom;
        json.maxZoom = _p.maxZoom;
        json.panningEnabled = _p.panningEnabled;
        json.userPanningEnabled = _p.userPanningEnabled;
        json.pan = copy(_p.pan);
        json.boxSelectionEnabled = _p.boxSelectionEnabled;
        json.renderer = copy(options.renderer);
        json.hideEdgesOnViewport = options.hideEdgesOnViewport;
        json.textureOnViewport = options.textureOnViewport;
        json.wheelSensitivity = options.wheelSensitivity;
        json.motionBlur = options.motionBlur;
        return json;
      }
    }
  });
  corefn$9.$id = corefn$9.getElementById;
  [corefn, corefn$1, elesfn$v, corefn$2, corefn$3, corefn$4, corefn$5, corefn$6, corefn$7, corefn$8, fn$6].forEach(function (props) {
    extend(corefn$9, props);
  });

  /* eslint-disable no-unused-vars */

  var defaults$9 = {
    fit: true,
    // whether to fit the viewport to the graph
    directed: false,
    // whether the tree is directed downwards (or edges can point in any direction if false)
    padding: 30,
    // padding on fit
    circle: false,
    // put depths in concentric circles if true, put depths top down if false
    grid: false,
    // whether to create an even grid into which the DAG is placed (circle:false only)
    spacingFactor: 1.75,
    // positive spacing factor, larger => more space between nodes (N.B. n/a if causes overlap)
    boundingBox: undefined,
    // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
    avoidOverlap: true,
    // prevents node overlap, may overflow boundingBox if not enough space
    nodeDimensionsIncludeLabels: false,
    // Excludes the label when calculating node bounding boxes for the layout algorithm
    roots: undefined,
    // the roots of the trees
    maximal: false,
    // whether to shift nodes down their natural BFS depths in order to avoid upwards edges (DAGS only)
    animate: false,
    // whether to transition the node positions
    animationDuration: 500,
    // duration of animation in ms if enabled
    animationEasing: undefined,
    // easing of animation if enabled,
    animateFilter: function animateFilter(node, i) {
      return true;
    },
    // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
    ready: undefined,
    // callback on layoutready
    stop: undefined,
    // callback on layoutstop
    transform: function transform(node, position) {
      return position;
    } // transform a given node position. Useful for changing flow direction in discrete layouts

  };
  /* eslint-enable */

  var getInfo = function getInfo(ele) {
    return ele.scratch('breadthfirst');
  };

  var setInfo = function setInfo(ele, obj) {
    return ele.scratch('breadthfirst', obj);
  };

  function BreadthFirstLayout(options) {
    this.options = extend({}, defaults$9, options);
  }

  BreadthFirstLayout.prototype.run = function () {
    var params = this.options;
    var options = params;
    var cy = params.cy;
    var eles = options.eles;
    var nodes = eles.nodes().filter(function (n) {
      return !n.isParent();
    });
    var graph = eles;
    var directed = options.directed;
    var maximal = options.maximal || options.maximalAdjustments > 0; // maximalAdjustments for compat. w/ old code

    var bb = makeBoundingBox(options.boundingBox ? options.boundingBox : {
      x1: 0,
      y1: 0,
      w: cy.width(),
      h: cy.height()
    });
    var roots;

    if (elementOrCollection(options.roots)) {
      roots = options.roots;
    } else if (array(options.roots)) {
      var rootsArray = [];

      for (var i = 0; i < options.roots.length; i++) {
        var id = options.roots[i];
        var ele = cy.getElementById(id);
        rootsArray.push(ele);
      }

      roots = cy.collection(rootsArray);
    } else if (string(options.roots)) {
      roots = cy.$(options.roots);
    } else {
      if (directed) {
        roots = nodes.roots();
      } else {
        var components = eles.components();
        roots = cy.collection();

        var _loop = function _loop(_i) {
          var comp = components[_i];
          var maxDegree = comp.maxDegree(false);
          var compRoots = comp.filter(function (ele) {
            return ele.degree(false) === maxDegree;
          });
          roots = roots.add(compRoots);
        };

        for (var _i = 0; _i < components.length; _i++) {
          _loop(_i);
        }
      }
    }

    var depths = [];
    var foundByBfs = {};

    var addToDepth = function addToDepth(ele, d) {
      if (depths[d] == null) {
        depths[d] = [];
      }

      var i = depths[d].length;
      depths[d].push(ele);
      setInfo(ele, {
        index: i,
        depth: d
      });
    };

    var changeDepth = function changeDepth(ele, newDepth) {
      var _getInfo = getInfo(ele),
          depth = _getInfo.depth,
          index = _getInfo.index;

      depths[depth][index] = null;
      addToDepth(ele, newDepth);
    }; // find the depths of the nodes


    graph.bfs({
      roots: roots,
      directed: options.directed,
      visit: function visit(node, edge, pNode, i, depth) {
        var ele = node[0];
        var id = ele.id();
        addToDepth(ele, depth);
        foundByBfs[id] = true;
      }
    }); // check for nodes not found by bfs

    var orphanNodes = [];

    for (var _i2 = 0; _i2 < nodes.length; _i2++) {
      var _ele = nodes[_i2];

      if (foundByBfs[_ele.id()]) {
        continue;
      } else {
        orphanNodes.push(_ele);
      }
    } // assign the nodes a depth and index


    var assignDepthsAt = function assignDepthsAt(i) {
      var eles = depths[i];

      for (var j = 0; j < eles.length; j++) {
        var _ele2 = eles[j];

        if (_ele2 == null) {
          eles.splice(j, 1);
          j--;
          continue;
        }

        setInfo(_ele2, {
          depth: i,
          index: j
        });
      }
    };

    var assignDepths = function assignDepths() {
      for (var _i3 = 0; _i3 < depths.length; _i3++) {
        assignDepthsAt(_i3);
      }
    };

    var adjustMaximally = function adjustMaximally(ele, shifted) {
      var eInfo = getInfo(ele);
      var incomers = ele.incomers().filter(function (el) {
        return el.isNode() && eles.has(el);
      });
      var maxDepth = -1;
      var id = ele.id();

      for (var k = 0; k < incomers.length; k++) {
        var incmr = incomers[k];
        var iInfo = getInfo(incmr);
        maxDepth = Math.max(maxDepth, iInfo.depth);
      }

      if (eInfo.depth <= maxDepth) {
        if (shifted[id]) {
          return null;
        }

        changeDepth(ele, maxDepth + 1);
        shifted[id] = true;
        return true;
      }

      return false;
    }; // for the directed case, try to make the edges all go down (i.e. depth i => depth i + 1)


    if (directed && maximal) {
      var Q = [];
      var shifted = {};

      var enqueue = function enqueue(n) {
        return Q.push(n);
      };

      var dequeue = function dequeue() {
        return Q.shift();
      };

      nodes.forEach(function (n) {
        return Q.push(n);
      });

      while (Q.length > 0) {
        var _ele3 = dequeue();

        var didShift = adjustMaximally(_ele3, shifted);

        if (didShift) {
          _ele3.outgoers().filter(function (el) {
            return el.isNode() && eles.has(el);
          }).forEach(enqueue);
        } else if (didShift === null) {
          warn('Detected double maximal shift for node `' + _ele3.id() + '`.  Bailing maximal adjustment due to cycle.  Use `options.maximal: true` only on DAGs.');
          break; // exit on failure
        }
      }
    }

    assignDepths(); // clear holes
    // find min distance we need to leave between nodes

    var minDistance = 0;

    if (options.avoidOverlap) {
      for (var _i4 = 0; _i4 < nodes.length; _i4++) {
        var n = nodes[_i4];
        var nbb = n.layoutDimensions(options);
        var w = nbb.w;
        var h = nbb.h;
        minDistance = Math.max(minDistance, w, h);
      }
    } // get the weighted percent for an element based on its connectivity to other levels


    var cachedWeightedPercent = {};

    var getWeightedPercent = function getWeightedPercent(ele) {
      if (cachedWeightedPercent[ele.id()]) {
        return cachedWeightedPercent[ele.id()];
      }

      var eleDepth = getInfo(ele).depth;
      var neighbors = ele.neighborhood();
      var percent = 0;
      var samples = 0;

      for (var _i5 = 0; _i5 < neighbors.length; _i5++) {
        var neighbor = neighbors[_i5];

        if (neighbor.isEdge() || neighbor.isParent() || !nodes.has(neighbor)) {
          continue;
        }

        var bf = getInfo(neighbor);
        var index = bf.index;
        var depth = bf.depth; // unassigned neighbours shouldn't affect the ordering

        if (index == null || depth == null) {
          continue;
        }

        var nDepth = depths[depth].length;

        if (depth < eleDepth) {
          // only get influenced by elements above
          percent += index / nDepth;
          samples++;
        }
      }

      samples = Math.max(1, samples);
      percent = percent / samples;

      if (samples === 0) {
        // put lone nodes at the start
        percent = 0;
      }

      cachedWeightedPercent[ele.id()] = percent;
      return percent;
    }; // rearrange the indices in each depth level based on connectivity


    var sortFn = function sortFn(a, b) {
      var apct = getWeightedPercent(a);
      var bpct = getWeightedPercent(b);
      var diff = apct - bpct;

      if (diff === 0) {
        return ascending(a.id(), b.id()); // make sure sort doesn't have don't-care comparisons
      } else {
        return diff;
      }
    }; // sort each level to make connected nodes closer


    for (var _i6 = 0; _i6 < depths.length; _i6++) {
      depths[_i6].sort(sortFn);

      assignDepthsAt(_i6);
    } // assign orphan nodes to a new top-level depth


    var orphanDepth = [];

    for (var _i7 = 0; _i7 < orphanNodes.length; _i7++) {
      orphanDepth.push(orphanNodes[_i7]);
    }

    depths.unshift(orphanDepth);
    assignDepths();
    var biggestDepthSize = 0;

    for (var _i8 = 0; _i8 < depths.length; _i8++) {
      biggestDepthSize = Math.max(depths[_i8].length, biggestDepthSize);
    }

    var center = {
      x: bb.x1 + bb.w / 2,
      y: bb.x1 + bb.h / 2
    };
    var maxDepthSize = depths.reduce(function (max, eles) {
      return Math.max(max, eles.length);
    }, 0);

    var getPosition = function getPosition(ele) {
      var _getInfo2 = getInfo(ele),
          depth = _getInfo2.depth,
          index = _getInfo2.index;

      var depthSize = depths[depth].length;
      var distanceX = Math.max(bb.w / ((options.grid ? maxDepthSize : depthSize) + 1), minDistance);
      var distanceY = Math.max(bb.h / (depths.length + 1), minDistance);
      var radiusStepSize = Math.min(bb.w / 2 / depths.length, bb.h / 2 / depths.length);
      radiusStepSize = Math.max(radiusStepSize, minDistance);

      if (!options.circle) {
        var epos = {
          x: center.x + (index + 1 - (depthSize + 1) / 2) * distanceX,
          y: (depth + 1) * distanceY
        };
        return epos;
      } else {
        var radius = radiusStepSize * depth + radiusStepSize - (depths.length > 0 && depths[0].length <= 3 ? radiusStepSize / 2 : 0);
        var theta = 2 * Math.PI / depths[depth].length * index;

        if (depth === 0 && depths[0].length === 1) {
          radius = 1;
        }

        return {
          x: center.x + radius * Math.cos(theta),
          y: center.y + radius * Math.sin(theta)
        };
      }
    };

    nodes.layoutPositions(this, options, getPosition);
    return this; // chaining
  };

  var defaults$a = {
    fit: true,
    // whether to fit the viewport to the graph
    padding: 30,
    // the padding on fit
    boundingBox: undefined,
    // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
    avoidOverlap: true,
    // prevents node overlap, may overflow boundingBox and radius if not enough space
    nodeDimensionsIncludeLabels: false,
    // Excludes the label when calculating node bounding boxes for the layout algorithm
    spacingFactor: undefined,
    // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up
    radius: undefined,
    // the radius of the circle
    startAngle: 3 / 2 * Math.PI,
    // where nodes start in radians
    sweep: undefined,
    // how many radians should be between the first and last node (defaults to full circle)
    clockwise: true,
    // whether the layout should go clockwise (true) or counterclockwise/anticlockwise (false)
    sort: undefined,
    // a sorting function to order the nodes; e.g. function(a, b){ return a.data('weight') - b.data('weight') }
    animate: false,
    // whether to transition the node positions
    animationDuration: 500,
    // duration of animation in ms if enabled
    animationEasing: undefined,
    // easing of animation if enabled
    animateFilter: function animateFilter(node, i) {
      return true;
    },
    // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
    ready: undefined,
    // callback on layoutready
    stop: undefined,
    // callback on layoutstop
    transform: function transform(node, position) {
      return position;
    } // transform a given node position. Useful for changing flow direction in discrete layouts 

  };

  function CircleLayout(options) {
    this.options = extend({}, defaults$a, options);
  }

  CircleLayout.prototype.run = function () {
    var params = this.options;
    var options = params;
    var cy = params.cy;
    var eles = options.eles;
    var clockwise = options.counterclockwise !== undefined ? !options.counterclockwise : options.clockwise;
    var nodes = eles.nodes().not(':parent');

    if (options.sort) {
      nodes = nodes.sort(options.sort);
    }

    var bb = makeBoundingBox(options.boundingBox ? options.boundingBox : {
      x1: 0,
      y1: 0,
      w: cy.width(),
      h: cy.height()
    });
    var center = {
      x: bb.x1 + bb.w / 2,
      y: bb.y1 + bb.h / 2
    };
    var sweep = options.sweep === undefined ? 2 * Math.PI - 2 * Math.PI / nodes.length : options.sweep;
    var dTheta = sweep / Math.max(1, nodes.length - 1);
    var r;
    var minDistance = 0;

    for (var i = 0; i < nodes.length; i++) {
      var n = nodes[i];
      var nbb = n.layoutDimensions(options);
      var w = nbb.w;
      var h = nbb.h;
      minDistance = Math.max(minDistance, w, h);
    }

    if (number(options.radius)) {
      r = options.radius;
    } else if (nodes.length <= 1) {
      r = 0;
    } else {
      r = Math.min(bb.h, bb.w) / 2 - minDistance;
    } // calculate the radius


    if (nodes.length > 1 && options.avoidOverlap) {
      // but only if more than one node (can't overlap)
      minDistance *= 1.75; // just to have some nice spacing

      var dcos = Math.cos(dTheta) - Math.cos(0);
      var dsin = Math.sin(dTheta) - Math.sin(0);
      var rMin = Math.sqrt(minDistance * minDistance / (dcos * dcos + dsin * dsin)); // s.t. no nodes overlapping

      r = Math.max(rMin, r);
    }

    var getPos = function getPos(ele, i) {
      var theta = options.startAngle + i * dTheta * (clockwise ? 1 : -1);
      var rx = r * Math.cos(theta);
      var ry = r * Math.sin(theta);
      var pos = {
        x: center.x + rx,
        y: center.y + ry
      };
      return pos;
    };

    nodes.layoutPositions(this, options, getPos);
    return this; // chaining
  };

  var defaults$b = {
    fit: true,
    // whether to fit the viewport to the graph
    padding: 30,
    // the padding on fit
    startAngle: 3 / 2 * Math.PI,
    // where nodes start in radians
    sweep: undefined,
    // how many radians should be between the first and last node (defaults to full circle)
    clockwise: true,
    // whether the layout should go clockwise (true) or counterclockwise/anticlockwise (false)
    equidistant: false,
    // whether levels have an equal radial distance betwen them, may cause bounding box overflow
    minNodeSpacing: 10,
    // min spacing between outside of nodes (used for radius adjustment)
    boundingBox: undefined,
    // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
    avoidOverlap: true,
    // prevents node overlap, may overflow boundingBox if not enough space
    nodeDimensionsIncludeLabels: false,
    // Excludes the label when calculating node bounding boxes for the layout algorithm
    height: undefined,
    // height of layout area (overrides container height)
    width: undefined,
    // width of layout area (overrides container width)
    spacingFactor: undefined,
    // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up
    concentric: function concentric(node) {
      // returns numeric value for each node, placing higher nodes in levels towards the centre
      return node.degree();
    },
    levelWidth: function levelWidth(nodes) {
      // the letiation of concentric values in each level
      return nodes.maxDegree() / 4;
    },
    animate: false,
    // whether to transition the node positions
    animationDuration: 500,
    // duration of animation in ms if enabled
    animationEasing: undefined,
    // easing of animation if enabled
    animateFilter: function animateFilter(node, i) {
      return true;
    },
    // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
    ready: undefined,
    // callback on layoutready
    stop: undefined,
    // callback on layoutstop
    transform: function transform(node, position) {
      return position;
    } // transform a given node position. Useful for changing flow direction in discrete layouts

  };

  function ConcentricLayout(options) {
    this.options = extend({}, defaults$b, options);
  }

  ConcentricLayout.prototype.run = function () {
    var params = this.options;
    var options = params;
    var clockwise = options.counterclockwise !== undefined ? !options.counterclockwise : options.clockwise;
    var cy = params.cy;
    var eles = options.eles;
    var nodes = eles.nodes().not(':parent');
    var bb = makeBoundingBox(options.boundingBox ? options.boundingBox : {
      x1: 0,
      y1: 0,
      w: cy.width(),
      h: cy.height()
    });
    var center = {
      x: bb.x1 + bb.w / 2,
      y: bb.y1 + bb.h / 2
    };
    var nodeValues = []; // { node, value }

    var maxNodeSize = 0;

    for (var i = 0; i < nodes.length; i++) {
      var node = nodes[i];
      var value = void 0; // calculate the node value

      value = options.concentric(node);
      nodeValues.push({
        value: value,
        node: node
      }); // for style mapping

      node._private.scratch.concentric = value;
    } // in case we used the `concentric` in style


    nodes.updateStyle(); // calculate max size now based on potentially updated mappers

    for (var _i = 0; _i < nodes.length; _i++) {
      var _node = nodes[_i];

      var nbb = _node.layoutDimensions(options);

      maxNodeSize = Math.max(maxNodeSize, nbb.w, nbb.h);
    } // sort node values in descreasing order


    nodeValues.sort(function (a, b) {
      return b.value - a.value;
    });
    var levelWidth = options.levelWidth(nodes); // put the values into levels

    var levels = [[]];
    var currentLevel = levels[0];

    for (var _i2 = 0; _i2 < nodeValues.length; _i2++) {
      var val = nodeValues[_i2];

      if (currentLevel.length > 0) {
        var diff = Math.abs(currentLevel[0].value - val.value);

        if (diff >= levelWidth) {
          currentLevel = [];
          levels.push(currentLevel);
        }
      }

      currentLevel.push(val);
    } // create positions from levels


    var minDist = maxNodeSize + options.minNodeSpacing; // min dist between nodes

    if (!options.avoidOverlap) {
      // then strictly constrain to bb
      var firstLvlHasMulti = levels.length > 0 && levels[0].length > 1;
      var maxR = Math.min(bb.w, bb.h) / 2 - minDist;
      var rStep = maxR / (levels.length + firstLvlHasMulti ? 1 : 0);
      minDist = Math.min(minDist, rStep);
    } // find the metrics for each level


    var r = 0;

    for (var _i3 = 0; _i3 < levels.length; _i3++) {
      var level = levels[_i3];
      var sweep = options.sweep === undefined ? 2 * Math.PI - 2 * Math.PI / level.length : options.sweep;
      var dTheta = level.dTheta = sweep / Math.max(1, level.length - 1); // calculate the radius

      if (level.length > 1 && options.avoidOverlap) {
        // but only if more than one node (can't overlap)
        var dcos = Math.cos(dTheta) - Math.cos(0);
        var dsin = Math.sin(dTheta) - Math.sin(0);
        var rMin = Math.sqrt(minDist * minDist / (dcos * dcos + dsin * dsin)); // s.t. no nodes overlapping

        r = Math.max(rMin, r);
      }

      level.r = r;
      r += minDist;
    }

    if (options.equidistant) {
      var rDeltaMax = 0;
      var _r = 0;

      for (var _i4 = 0; _i4 < levels.length; _i4++) {
        var _level = levels[_i4];
        var rDelta = _level.r - _r;
        rDeltaMax = Math.max(rDeltaMax, rDelta);
      }

      _r = 0;

      for (var _i5 = 0; _i5 < levels.length; _i5++) {
        var _level2 = levels[_i5];

        if (_i5 === 0) {
          _r = _level2.r;
        }

        _level2.r = _r;
        _r += rDeltaMax;
      }
    } // calculate the node positions


    var pos = {}; // id => position

    for (var _i6 = 0; _i6 < levels.length; _i6++) {
      var _level3 = levels[_i6];
      var _dTheta = _level3.dTheta;
      var _r2 = _level3.r;

      for (var j = 0; j < _level3.length; j++) {
        var _val = _level3[j];
        var theta = options.startAngle + (clockwise ? 1 : -1) * _dTheta * j;
        var p = {
          x: center.x + _r2 * Math.cos(theta),
          y: center.y + _r2 * Math.sin(theta)
        };
        pos[_val.node.id()] = p;
      }
    } // position the nodes


    nodes.layoutPositions(this, options, function (ele) {
      var id = ele.id();
      return pos[id];
    });
    return this; // chaining
  };

  /*
  The CoSE layout was written by Gerardo Huck.
  https://www.linkedin.com/in/gerardohuck/

  Based on the following article:
  http://dl.acm.org/citation.cfm?id=1498047

  Modifications tracked on Github.
  */
  var DEBUG;
  /**
   * @brief :  default layout options
   */

  var defaults$c = {
    // Called on `layoutready`
    ready: function ready() {},
    // Called on `layoutstop`
    stop: function stop() {},
    // Whether to animate while running the layout
    // true : Animate continuously as the layout is running
    // false : Just show the end result
    // 'end' : Animate with the end result, from the initial positions to the end positions
    animate: true,
    // Easing of the animation for animate:'end'
    animationEasing: undefined,
    // The duration of the animation for animate:'end'
    animationDuration: undefined,
    // A function that determines whether the node should be animated
    // All nodes animated by default on animate enabled
    // Non-animated nodes are positioned immediately when the layout starts
    animateFilter: function animateFilter(node, i) {
      return true;
    },
    // The layout animates only after this many milliseconds for animate:true
    // (prevents flashing on fast runs)
    animationThreshold: 250,
    // Number of iterations between consecutive screen positions update
    refresh: 20,
    // Whether to fit the network view after when done
    fit: true,
    // Padding on fit
    padding: 30,
    // Constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
    boundingBox: undefined,
    // Excludes the label when calculating node bounding boxes for the layout algorithm
    nodeDimensionsIncludeLabels: false,
    // Randomize the initial positions of the nodes (true) or use existing positions (false)
    randomize: false,
    // Extra spacing between components in non-compound graphs
    componentSpacing: 40,
    // Node repulsion (non overlapping) multiplier
    nodeRepulsion: function nodeRepulsion(node) {
      return 2048;
    },
    // Node repulsion (overlapping) multiplier
    nodeOverlap: 4,
    // Ideal edge (non nested) length
    idealEdgeLength: function idealEdgeLength(edge) {
      return 32;
    },
    // Divisor to compute edge forces
    edgeElasticity: function edgeElasticity(edge) {
      return 32;
    },
    // Nesting factor (multiplier) to compute ideal edge length for nested edges
    nestingFactor: 1.2,
    // Gravity force (constant)
    gravity: 1,
    // Maximum number of iterations to perform
    numIter: 1000,
    // Initial temperature (maximum node displacement)
    initialTemp: 1000,
    // Cooling factor (how the temperature is reduced between consecutive iterations
    coolingFactor: 0.99,
    // Lower temperature threshold (below this point the layout will end)
    minTemp: 1.0
  };
  /**
   * @brief       : constructor
   * @arg options : object containing layout options
   */

  function CoseLayout(options) {
    this.options = extend({}, defaults$c, options);
    this.options.layout = this;
  }
  /**
   * @brief : runs the layout
   */


  CoseLayout.prototype.run = function () {
    var options = this.options;
    var cy = options.cy;
    var layout = this;
    layout.stopped = false;

    if (options.animate === true || options.animate === false) {
      layout.emit({
        type: 'layoutstart',
        layout: layout
      });
    } // Set DEBUG - Global variable


    if (true === options.debug) {
      DEBUG = true;
    } else {
      DEBUG = false;
    } // Initialize layout info


    var layoutInfo = createLayoutInfo(cy, layout, options); // Show LayoutInfo contents if debugging

    if (DEBUG) {
      printLayoutInfo(layoutInfo);
    } // If required, randomize node positions


    if (options.randomize) {
      randomizePositions(layoutInfo);
    }

    var startTime = performanceNow();

    var refresh = function refresh() {
      refreshPositions(layoutInfo, cy, options); // Fit the graph if necessary

      if (true === options.fit) {
        cy.fit(options.padding);
      }
    };

    var mainLoop = function mainLoop(i) {
      if (layout.stopped || i >= options.numIter) {
        // logDebug("Layout manually stopped. Stopping computation in step " + i);
        return false;
      } // Do one step in the phisical simulation


      step$1(layoutInfo, options); // Update temperature

      layoutInfo.temperature = layoutInfo.temperature * options.coolingFactor; // logDebug("New temperature: " + layoutInfo.temperature);

      if (layoutInfo.temperature < options.minTemp) {
        // logDebug("Temperature drop below minimum threshold. Stopping computation in step " + i);
        return false;
      }

      return true;
    };

    var done = function done() {
      if (options.animate === true || options.animate === false) {
        refresh(); // Layout has finished

        layout.one('layoutstop', options.stop);
        layout.emit({
          type: 'layoutstop',
          layout: layout
        });
      } else {
        var nodes = options.eles.nodes();
        var getScaledPos = getScaleInBoundsFn(layoutInfo, options, nodes);
        nodes.layoutPositions(layout, options, getScaledPos);
      }
    };

    var i = 0;
    var loopRet = true;

    if (options.animate === true) {
      var frame = function frame() {
        var f = 0;

        while (loopRet && f < options.refresh) {
          loopRet = mainLoop(i);
          i++;
          f++;
        }

        if (!loopRet) {
          // it's done
          separateComponents(layoutInfo, options);
          done();
        } else {
          var now = performanceNow();

          if (now - startTime >= options.animationThreshold) {
            refresh();
          }

          requestAnimationFrame(frame);
        }
      };

      frame();
    } else {
      while (loopRet) {
        loopRet = mainLoop(i);
        i++;
      }

      separateComponents(layoutInfo, options);
      done();
    }

    return this; // chaining
  };
  /**
   * @brief : called on continuous layouts to stop them before they finish
   */


  CoseLayout.prototype.stop = function () {
    this.stopped = true;

    if (this.thread) {
      this.thread.stop();
    }

    this.emit('layoutstop');
    return this; // chaining
  };

  CoseLayout.prototype.destroy = function () {
    if (this.thread) {
      this.thread.stop();
    }

    return this; // chaining
  };
  /**
   * @brief     : Creates an object which is contains all the data
   *              used in the layout process
   * @arg cy    : cytoscape.js object
   * @return    : layoutInfo object initialized
   */


  var createLayoutInfo = function createLayoutInfo(cy, layout, options) {
    // Shortcut
    var edges = options.eles.edges();
    var nodes = options.eles.nodes();
    var layoutInfo = {
      isCompound: cy.hasCompoundNodes(),
      layoutNodes: [],
      idToIndex: {},
      nodeSize: nodes.size(),
      graphSet: [],
      indexToGraph: [],
      layoutEdges: [],
      edgeSize: edges.size(),
      temperature: options.initialTemp,
      clientWidth: cy.width(),
      clientHeight: cy.width(),
      boundingBox: makeBoundingBox(options.boundingBox ? options.boundingBox : {
        x1: 0,
        y1: 0,
        w: cy.width(),
        h: cy.height()
      })
    };
    var components = options.eles.components();
    var id2cmptId = {};

    for (var i = 0; i < components.length; i++) {
      var component = components[i];

      for (var j = 0; j < component.length; j++) {
        var node = component[j];
        id2cmptId[node.id()] = i;
      }
    } // Iterate over all nodes, creating layout nodes


    for (var i = 0; i < layoutInfo.nodeSize; i++) {
      var n = nodes[i];
      var nbb = n.layoutDimensions(options);
      var tempNode = {};
      tempNode.isLocked = n.locked();
      tempNode.id = n.data('id');
      tempNode.parentId = n.data('parent');
      tempNode.cmptId = id2cmptId[n.id()];
      tempNode.children = [];
      tempNode.positionX = n.position('x');
      tempNode.positionY = n.position('y');
      tempNode.offsetX = 0;
      tempNode.offsetY = 0;
      tempNode.height = nbb.w;
      tempNode.width = nbb.h;
      tempNode.maxX = tempNode.positionX + tempNode.width / 2;
      tempNode.minX = tempNode.positionX - tempNode.width / 2;
      tempNode.maxY = tempNode.positionY + tempNode.height / 2;
      tempNode.minY = tempNode.positionY - tempNode.height / 2;
      tempNode.padLeft = parseFloat(n.style('padding'));
      tempNode.padRight = parseFloat(n.style('padding'));
      tempNode.padTop = parseFloat(n.style('padding'));
      tempNode.padBottom = parseFloat(n.style('padding')); // forces

      tempNode.nodeRepulsion = fn(options.nodeRepulsion) ? options.nodeRepulsion(n) : options.nodeRepulsion; // Add new node

      layoutInfo.layoutNodes.push(tempNode); // Add entry to id-index map

      layoutInfo.idToIndex[tempNode.id] = i;
    } // Inline implementation of a queue, used for traversing the graph in BFS order


    var queue = [];
    var start = 0; // Points to the start the queue

    var end = -1; // Points to the end of the queue

    var tempGraph = []; // Second pass to add child information and
    // initialize queue for hierarchical traversal

    for (var i = 0; i < layoutInfo.nodeSize; i++) {
      var n = layoutInfo.layoutNodes[i];
      var p_id = n.parentId; // Check if node n has a parent node

      if (null != p_id) {
        // Add node Id to parent's list of children
        layoutInfo.layoutNodes[layoutInfo.idToIndex[p_id]].children.push(n.id);
      } else {
        // If a node doesn't have a parent, then it's in the root graph
        queue[++end] = n.id;
        tempGraph.push(n.id);
      }
    } // Add root graph to graphSet


    layoutInfo.graphSet.push(tempGraph); // Traverse the graph, level by level,

    while (start <= end) {
      // Get the node to visit and remove it from queue
      var node_id = queue[start++];
      var node_ix = layoutInfo.idToIndex[node_id];
      var node = layoutInfo.layoutNodes[node_ix];
      var children = node.children;

      if (children.length > 0) {
        // Add children nodes as a new graph to graph set
        layoutInfo.graphSet.push(children); // Add children to que queue to be visited

        for (var i = 0; i < children.length; i++) {
          queue[++end] = children[i];
        }
      }
    } // Create indexToGraph map


    for (var i = 0; i < layoutInfo.graphSet.length; i++) {
      var graph = layoutInfo.graphSet[i];

      for (var j = 0; j < graph.length; j++) {
        var index = layoutInfo.idToIndex[graph[j]];
        layoutInfo.indexToGraph[index] = i;
      }
    } // Iterate over all edges, creating Layout Edges


    for (var i = 0; i < layoutInfo.edgeSize; i++) {
      var e = edges[i];
      var tempEdge = {};
      tempEdge.id = e.data('id');
      tempEdge.sourceId = e.data('source');
      tempEdge.targetId = e.data('target'); // Compute ideal length

      var idealLength = fn(options.idealEdgeLength) ? options.idealEdgeLength(e) : options.idealEdgeLength;
      var elasticity = fn(options.edgeElasticity) ? options.edgeElasticity(e) : options.edgeElasticity; // Check if it's an inter graph edge

      var sourceIx = layoutInfo.idToIndex[tempEdge.sourceId];
      var targetIx = layoutInfo.idToIndex[tempEdge.targetId];
      var sourceGraph = layoutInfo.indexToGraph[sourceIx];
      var targetGraph = layoutInfo.indexToGraph[targetIx];

      if (sourceGraph != targetGraph) {
        // Find lowest common graph ancestor
        var lca = findLCA(tempEdge.sourceId, tempEdge.targetId, layoutInfo); // Compute sum of node depths, relative to lca graph

        var lcaGraph = layoutInfo.graphSet[lca];
        var depth = 0; // Source depth

        var tempNode = layoutInfo.layoutNodes[sourceIx];

        while (-1 === lcaGraph.indexOf(tempNode.id)) {
          tempNode = layoutInfo.layoutNodes[layoutInfo.idToIndex[tempNode.parentId]];
          depth++;
        } // Target depth


        tempNode = layoutInfo.layoutNodes[targetIx];

        while (-1 === lcaGraph.indexOf(tempNode.id)) {
          tempNode = layoutInfo.layoutNodes[layoutInfo.idToIndex[tempNode.parentId]];
          depth++;
        } // logDebug('LCA of nodes ' + tempEdge.sourceId + ' and ' + tempEdge.targetId +
        //  ". Index: " + lca + " Contents: " + lcaGraph.toString() +
        //  ". Depth: " + depth);
        // Update idealLength


        idealLength *= depth * options.nestingFactor;
      }

      tempEdge.idealLength = idealLength;
      tempEdge.elasticity = elasticity;
      layoutInfo.layoutEdges.push(tempEdge);
    } // Finally, return layoutInfo object


    return layoutInfo;
  };
  /**
   * @brief : This function finds the index of the lowest common
   *          graph ancestor between 2 nodes in the subtree
   *          (from the graph hierarchy induced tree) whose
   *          root is graphIx
   *
   * @arg node1: node1's ID
   * @arg node2: node2's ID
   * @arg layoutInfo: layoutInfo object
   *
   */


  var findLCA = function findLCA(node1, node2, layoutInfo) {
    // Find their common ancester, starting from the root graph
    var res = findLCA_aux(node1, node2, 0, layoutInfo);

    if (2 > res.count) {
      // If aux function couldn't find the common ancester,
      // then it is the root graph
      return 0;
    } else {
      return res.graph;
    }
  };
  /**
   * @brief          : Auxiliary function used for LCA computation
   *
   * @arg node1      : node1's ID
   * @arg node2      : node2's ID
   * @arg graphIx    : subgraph index
   * @arg layoutInfo : layoutInfo object
   *
   * @return         : object of the form {count: X, graph: Y}, where:
   *                   X is the number of ancesters (max: 2) found in
   *                   graphIx (and it's subgraphs),
   *                   Y is the graph index of the lowest graph containing
   *                   all X nodes
   */


  var findLCA_aux = function findLCA_aux(node1, node2, graphIx, layoutInfo) {
    var graph = layoutInfo.graphSet[graphIx]; // If both nodes belongs to graphIx

    if (-1 < graph.indexOf(node1) && -1 < graph.indexOf(node2)) {
      return {
        count: 2,
        graph: graphIx
      };
    } // Make recursive calls for all subgraphs


    var c = 0;

    for (var i = 0; i < graph.length; i++) {
      var nodeId = graph[i];
      var nodeIx = layoutInfo.idToIndex[nodeId];
      var children = layoutInfo.layoutNodes[nodeIx].children; // If the node has no child, skip it

      if (0 === children.length) {
        continue;
      }

      var childGraphIx = layoutInfo.indexToGraph[layoutInfo.idToIndex[children[0]]];
      var result = findLCA_aux(node1, node2, childGraphIx, layoutInfo);

      if (0 === result.count) {
        // Neither node1 nor node2 are present in this subgraph
        continue;
      } else if (1 === result.count) {
        // One of (node1, node2) is present in this subgraph
        c++;

        if (2 === c) {
          // We've already found both nodes, no need to keep searching
          break;
        }
      } else {
        // Both nodes are present in this subgraph
        return result;
      }
    }

    return {
      count: c,
      graph: graphIx
    };
  };
  /**
   * @brief: printsLayoutInfo into js console
   *         Only used for debbuging
   */


  if (false) {
    var printLayoutInfo;
  }
  /**
   * @brief : Randomizes the position of all nodes
   */


  var randomizePositions = function randomizePositions(layoutInfo, cy) {
    var width = layoutInfo.clientWidth;
    var height = layoutInfo.clientHeight;

    for (var i = 0; i < layoutInfo.nodeSize; i++) {
      var n = layoutInfo.layoutNodes[i]; // No need to randomize compound nodes or locked nodes

      if (0 === n.children.length && !n.isLocked) {
        n.positionX = Math.random() * width;
        n.positionY = Math.random() * height;
      }
    }
  };

  var getScaleInBoundsFn = function getScaleInBoundsFn(layoutInfo, options, nodes) {
    var bb = layoutInfo.boundingBox;
    var coseBB = {
      x1: Infinity,
      x2: -Infinity,
      y1: Infinity,
      y2: -Infinity
    };

    if (options.boundingBox) {
      nodes.forEach(function (node) {
        var lnode = layoutInfo.layoutNodes[layoutInfo.idToIndex[node.data('id')]];
        coseBB.x1 = Math.min(coseBB.x1, lnode.positionX);
        coseBB.x2 = Math.max(coseBB.x2, lnode.positionX);
        coseBB.y1 = Math.min(coseBB.y1, lnode.positionY);
        coseBB.y2 = Math.max(coseBB.y2, lnode.positionY);
      });
      coseBB.w = coseBB.x2 - coseBB.x1;
      coseBB.h = coseBB.y2 - coseBB.y1;
    }

    return function (ele, i) {
      var lnode = layoutInfo.layoutNodes[layoutInfo.idToIndex[ele.data('id')]];

      if (options.boundingBox) {
        // then add extra bounding box constraint
        var pctX = (lnode.positionX - coseBB.x1) / coseBB.w;
        var pctY = (lnode.positionY - coseBB.y1) / coseBB.h;
        return {
          x: bb.x1 + pctX * bb.w,
          y: bb.y1 + pctY * bb.h
        };
      } else {
        return {
          x: lnode.positionX,
          y: lnode.positionY
        };
      }
    };
  };
  /**
   * @brief          : Updates the positions of nodes in the network
   * @arg layoutInfo : LayoutInfo object
   * @arg cy         : Cytoscape object
   * @arg options    : Layout options
   */


  var refreshPositions = function refreshPositions(layoutInfo, cy, options) {
    // var s = 'Refreshing positions';
    // logDebug(s);
    var layout = options.layout;
    var nodes = options.eles.nodes();
    var getScaledPos = getScaleInBoundsFn(layoutInfo, options, nodes);
    nodes.positions(getScaledPos); // Trigger layoutReady only on first call

    if (true !== layoutInfo.ready) {
      // s = 'Triggering layoutready';
      // logDebug(s);
      layoutInfo.ready = true;
      layout.one('layoutready', options.ready);
      layout.emit({
        type: 'layoutready',
        layout: this
      });
    }
  };
  /**
   * @brief : Logs a debug message in JS console, if DEBUG is ON
   */
  // var logDebug = function(text) {
  //   if (DEBUG) {
  //     console.debug(text);
  //   }
  // };

  /**
   * @brief          : Performs one iteration of the physical simulation
   * @arg layoutInfo : LayoutInfo object already initialized
   * @arg cy         : Cytoscape object
   * @arg options    : Layout options
   */


  var step$1 = function step(layoutInfo, options, _step) {
    // var s = "\n\n###############################";
    // s += "\nSTEP: " + step;
    // s += "\n###############################\n";
    // logDebug(s);
    // Calculate node repulsions
    calculateNodeForces(layoutInfo, options); // Calculate edge forces

    calculateEdgeForces(layoutInfo); // Calculate gravity forces

    calculateGravityForces(layoutInfo, options); // Propagate forces from parent to child

    propagateForces(layoutInfo); // Update positions based on calculated forces

    updatePositions(layoutInfo);
  };
  /**
   * @brief : Computes the node repulsion forces
   */


  var calculateNodeForces = function calculateNodeForces(layoutInfo, options) {
    // Go through each of the graphs in graphSet
    // Nodes only repel each other if they belong to the same graph
    // var s = 'calculateNodeForces';
    // logDebug(s);
    for (var i = 0; i < layoutInfo.graphSet.length; i++) {
      var graph = layoutInfo.graphSet[i];
      var numNodes = graph.length; // s = "Set: " + graph.toString();
      // logDebug(s);
      // Now get all the pairs of nodes
      // Only get each pair once, (A, B) = (B, A)

      for (var j = 0; j < numNodes; j++) {
        var node1 = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph[j]]];

        for (var k = j + 1; k < numNodes; k++) {
          var node2 = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph[k]]];
          nodeRepulsion(node1, node2, layoutInfo, options);
        }
      }
    }
  };

  var randomDistance = function randomDistance(max) {
    return -max + 2 * max * Math.random();
  };
  /**
   * @brief : Compute the node repulsion forces between a pair of nodes
   */


  var nodeRepulsion = function nodeRepulsion(node1, node2, layoutInfo, options) {
    // var s = "Node repulsion. Node1: " + node1.id + " Node2: " + node2.id;
    var cmptId1 = node1.cmptId;
    var cmptId2 = node2.cmptId;

    if (cmptId1 !== cmptId2 && !layoutInfo.isCompound) {
      return;
    } // Get direction of line connecting both node centers


    var directionX = node2.positionX - node1.positionX;
    var directionY = node2.positionY - node1.positionY;
    var maxRandDist = 1; // s += "\ndirectionX: " + directionX + ", directionY: " + directionY;
    // If both centers are the same, apply a random force

    if (0 === directionX && 0 === directionY) {
      directionX = randomDistance(maxRandDist);
      directionY = randomDistance(maxRandDist);
    }

    var overlap = nodesOverlap(node1, node2, directionX, directionY);

    if (overlap > 0) {
      // s += "\nNodes DO overlap.";
      // s += "\nOverlap: " + overlap;
      // If nodes overlap, repulsion force is proportional
      // to the overlap
      var force = options.nodeOverlap * overlap; // Compute the module and components of the force vector

      var distance = Math.sqrt(directionX * directionX + directionY * directionY); // s += "\nDistance: " + distance;

      var forceX = force * directionX / distance;
      var forceY = force * directionY / distance;
    } else {
      // s += "\nNodes do NOT overlap.";
      // If there's no overlap, force is inversely proportional
      // to squared distance
      // Get clipping points for both nodes
      var point1 = findClippingPoint(node1, directionX, directionY);
      var point2 = findClippingPoint(node2, -1 * directionX, -1 * directionY); // Use clipping points to compute distance

      var distanceX = point2.x - point1.x;
      var distanceY = point2.y - point1.y;
      var distanceSqr = distanceX * distanceX + distanceY * distanceY;
      var distance = Math.sqrt(distanceSqr); // s += "\nDistance: " + distance;
      // Compute the module and components of the force vector

      var force = (node1.nodeRepulsion + node2.nodeRepulsion) / distanceSqr;
      var forceX = force * distanceX / distance;
      var forceY = force * distanceY / distance;
    } // Apply force


    if (!node1.isLocked) {
      node1.offsetX -= forceX;
      node1.offsetY -= forceY;
    }

    if (!node2.isLocked) {
      node2.offsetX += forceX;
      node2.offsetY += forceY;
    } // s += "\nForceX: " + forceX + " ForceY: " + forceY;
    // logDebug(s);


    return;
  };
  /**
   * @brief  : Determines whether two nodes overlap or not
   * @return : Amount of overlapping (0 => no overlap)
   */


  var nodesOverlap = function nodesOverlap(node1, node2, dX, dY) {
    if (dX > 0) {
      var overlapX = node1.maxX - node2.minX;
    } else {
      var overlapX = node2.maxX - node1.minX;
    }

    if (dY > 0) {
      var overlapY = node1.maxY - node2.minY;
    } else {
      var overlapY = node2.maxY - node1.minY;
    }

    if (overlapX >= 0 && overlapY >= 0) {
      return Math.sqrt(overlapX * overlapX + overlapY * overlapY);
    } else {
      return 0;
    }
  };
  /**
   * @brief : Finds the point in which an edge (direction dX, dY) intersects
   *          the rectangular bounding box of it's source/target node
   */


  var findClippingPoint = function findClippingPoint(node, dX, dY) {
    // Shorcuts
    var X = node.positionX;
    var Y = node.positionY;
    var H = node.height || 1;
    var W = node.width || 1;
    var dirSlope = dY / dX;
    var nodeSlope = H / W; // var s = 'Computing clipping point of node ' + node.id +
    //   " . Height:  " + H + ", Width: " + W +
    //   "\nDirection " + dX + ", " + dY;
    //
    // Compute intersection

    var res = {}; // Case: Vertical direction (up)

    if (0 === dX && 0 < dY) {
      res.x = X; // s += "\nUp direction";

      res.y = Y + H / 2;
      return res;
    } // Case: Vertical direction (down)


    if (0 === dX && 0 > dY) {
      res.x = X;
      res.y = Y + H / 2; // s += "\nDown direction";

      return res;
    } // Case: Intersects the right border


    if (0 < dX && -1 * nodeSlope <= dirSlope && dirSlope <= nodeSlope) {
      res.x = X + W / 2;
      res.y = Y + W * dY / 2 / dX; // s += "\nRightborder";

      return res;
    } // Case: Intersects the left border


    if (0 > dX && -1 * nodeSlope <= dirSlope && dirSlope <= nodeSlope) {
      res.x = X - W / 2;
      res.y = Y - W * dY / 2 / dX; // s += "\nLeftborder";

      return res;
    } // Case: Intersects the top border


    if (0 < dY && (dirSlope <= -1 * nodeSlope || dirSlope >= nodeSlope)) {
      res.x = X + H * dX / 2 / dY;
      res.y = Y + H / 2; // s += "\nTop border";

      return res;
    } // Case: Intersects the bottom border


    if (0 > dY && (dirSlope <= -1 * nodeSlope || dirSlope >= nodeSlope)) {
      res.x = X - H * dX / 2 / dY;
      res.y = Y - H / 2; // s += "\nBottom border";

      return res;
    } // s += "\nClipping point found at " + res.x + ", " + res.y;
    // logDebug(s);


    return res;
  };
  /**
   * @brief : Calculates all edge forces
   */


  var calculateEdgeForces = function calculateEdgeForces(layoutInfo, options) {
    // Iterate over all edges
    for (var i = 0; i < layoutInfo.edgeSize; i++) {
      // Get edge, source & target nodes
      var edge = layoutInfo.layoutEdges[i];
      var sourceIx = layoutInfo.idToIndex[edge.sourceId];
      var source = layoutInfo.layoutNodes[sourceIx];
      var targetIx = layoutInfo.idToIndex[edge.targetId];
      var target = layoutInfo.layoutNodes[targetIx]; // Get direction of line connecting both node centers

      var directionX = target.positionX - source.positionX;
      var directionY = target.positionY - source.positionY; // If both centers are the same, do nothing.
      // A random force has already been applied as node repulsion

      if (0 === directionX && 0 === directionY) {
        continue;
      } // Get clipping points for both nodes


      var point1 = findClippingPoint(source, directionX, directionY);
      var point2 = findClippingPoint(target, -1 * directionX, -1 * directionY);
      var lx = point2.x - point1.x;
      var ly = point2.y - point1.y;
      var l = Math.sqrt(lx * lx + ly * ly);
      var force = Math.pow(edge.idealLength - l, 2) / edge.elasticity;

      if (0 !== l) {
        var forceX = force * lx / l;
        var forceY = force * ly / l;
      } else {
        var forceX = 0;
        var forceY = 0;
      } // Add this force to target and source nodes


      if (!source.isLocked) {
        source.offsetX += forceX;
        source.offsetY += forceY;
      }

      if (!target.isLocked) {
        target.offsetX -= forceX;
        target.offsetY -= forceY;
      } // var s = 'Edge force between nodes ' + source.id + ' and ' + target.id;
      // s += "\nDistance: " + l + " Force: (" + forceX + ", " + forceY + ")";
      // logDebug(s);

    }
  };
  /**
   * @brief : Computes gravity forces for all nodes
   */


  var calculateGravityForces = function calculateGravityForces(layoutInfo, options) {
    var distThreshold = 1; // var s = 'calculateGravityForces';
    // logDebug(s);

    for (var i = 0; i < layoutInfo.graphSet.length; i++) {
      var graph = layoutInfo.graphSet[i];
      var numNodes = graph.length; // s = "Set: " + graph.toString();
      // logDebug(s);
      // Compute graph center

      if (0 === i) {
        var centerX = layoutInfo.clientHeight / 2;
        var centerY = layoutInfo.clientWidth / 2;
      } else {
        // Get Parent node for this graph, and use its position as center
        var temp = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph[0]]];
        var parent = layoutInfo.layoutNodes[layoutInfo.idToIndex[temp.parentId]];
        var centerX = parent.positionX;
        var centerY = parent.positionY;
      } // s = "Center found at: " + centerX + ", " + centerY;
      // logDebug(s);
      // Apply force to all nodes in graph


      for (var j = 0; j < numNodes; j++) {
        var node = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph[j]]]; // s = "Node: " + node.id;

        if (node.isLocked) {
          continue;
        }

        var dx = centerX - node.positionX;
        var dy = centerY - node.positionY;
        var d = Math.sqrt(dx * dx + dy * dy);

        if (d > distThreshold) {
          var fx = options.gravity * dx / d;
          var fy = options.gravity * dy / d;
          node.offsetX += fx;
          node.offsetY += fy; // s += ": Applied force: " + fx + ", " + fy;
        } // s += ": skypped since it's too close to center";
          // logDebug(s);

      }
    }
  };
  /**
   * @brief          : This function propagates the existing offsets from
   *                   parent nodes to its descendents.
   * @arg layoutInfo : layoutInfo Object
   * @arg cy         : cytoscape Object
   * @arg options    : Layout options
   */


  var propagateForces = function propagateForces(layoutInfo, options) {
    // Inline implementation of a queue, used for traversing the graph in BFS order
    var queue = [];
    var start = 0; // Points to the start the queue

    var end = -1; // Points to the end of the queue
    // logDebug('propagateForces');
    // Start by visiting the nodes in the root graph

    queue.push.apply(queue, layoutInfo.graphSet[0]);
    end += layoutInfo.graphSet[0].length; // Traverse the graph, level by level,

    while (start <= end) {
      // Get the node to visit and remove it from queue
      var nodeId = queue[start++];
      var nodeIndex = layoutInfo.idToIndex[nodeId];
      var node = layoutInfo.layoutNodes[nodeIndex];
      var children = node.children; // We only need to process the node if it's compound

      if (0 < children.length && !node.isLocked) {
        var offX = node.offsetX;
        var offY = node.offsetY; // var s = "Propagating offset from parent node : " + node.id +
        //   ". OffsetX: " + offX + ". OffsetY: " + offY;
        // s += "\n Children: " + children.toString();
        // logDebug(s);

        for (var i = 0; i < children.length; i++) {
          var childNode = layoutInfo.layoutNodes[layoutInfo.idToIndex[children[i]]]; // Propagate offset

          childNode.offsetX += offX;
          childNode.offsetY += offY; // Add children to queue to be visited

          queue[++end] = children[i];
        } // Reset parent offsets


        node.offsetX = 0;
        node.offsetY = 0;
      }
    }
  };
  /**
   * @brief : Updates the layout model positions, based on
   *          the accumulated forces
   */


  var updatePositions = function updatePositions(layoutInfo, options) {
    // var s = 'Updating positions';
    // logDebug(s);
    // Reset boundaries for compound nodes
    for (var i = 0; i < layoutInfo.nodeSize; i++) {
      var n = layoutInfo.layoutNodes[i];

      if (0 < n.children.length) {
        // logDebug("Resetting boundaries of compound node: " + n.id);
        n.maxX = undefined;
        n.minX = undefined;
        n.maxY = undefined;
        n.minY = undefined;
      }
    }

    for (var i = 0; i < layoutInfo.nodeSize; i++) {
      var n = layoutInfo.layoutNodes[i];

      if (0 < n.children.length || n.isLocked) {
        // No need to set compound or locked node position
        // logDebug("Skipping position update of node: " + n.id);
        continue;
      } // s = "Node: " + n.id + " Previous position: (" +
      // n.positionX + ", " + n.positionY + ").";
      // Limit displacement in order to improve stability


      var tempForce = limitForce(n.offsetX, n.offsetY, layoutInfo.temperature);
      n.positionX += tempForce.x;
      n.positionY += tempForce.y;
      n.offsetX = 0;
      n.offsetY = 0;
      n.minX = n.positionX - n.width;
      n.maxX = n.positionX + n.width;
      n.minY = n.positionY - n.height;
      n.maxY = n.positionY + n.height; // s += " New Position: (" + n.positionX + ", " + n.positionY + ").";
      // logDebug(s);
      // Update ancestry boudaries

      updateAncestryBoundaries(n, layoutInfo);
    } // Update size, position of compund nodes


    for (var i = 0; i < layoutInfo.nodeSize; i++) {
      var n = layoutInfo.layoutNodes[i];

      if (0 < n.children.length && !n.isLocked) {
        n.positionX = (n.maxX + n.minX) / 2;
        n.positionY = (n.maxY + n.minY) / 2;
        n.width = n.maxX - n.minX;
        n.height = n.maxY - n.minY; // s = "Updating position, size of compound node " + n.id;
        // s += "\nPositionX: " + n.positionX + ", PositionY: " + n.positionY;
        // s += "\nWidth: " + n.width + ", Height: " + n.height;
        // logDebug(s);
      }
    }
  };
  /**
   * @brief : Limits a force (forceX, forceY) to be not
   *          greater (in modulo) than max.
   8          Preserves force direction.
    */


  var limitForce = function limitForce(forceX, forceY, max) {
    // var s = "Limiting force: (" + forceX + ", " + forceY + "). Max: " + max;
    var force = Math.sqrt(forceX * forceX + forceY * forceY);

    if (force > max) {
      var res = {
        x: max * forceX / force,
        y: max * forceY / force
      };
    } else {
      var res = {
        x: forceX,
        y: forceY
      };
    } // s += ".\nResult: (" + res.x + ", " + res.y + ")";
    // logDebug(s);


    return res;
  };
  /**
   * @brief : Function used for keeping track of compound node
   *          sizes, since they should bound all their subnodes.
   */


  var updateAncestryBoundaries = function updateAncestryBoundaries(node, layoutInfo) {
    // var s = "Propagating new position/size of node " + node.id;
    var parentId = node.parentId;

    if (null == parentId) {
      // If there's no parent, we are done
      // s += ". No parent node.";
      // logDebug(s);
      return;
    } // Get Parent Node


    var p = layoutInfo.layoutNodes[layoutInfo.idToIndex[parentId]];
    var flag = false; // MaxX

    if (null == p.maxX || node.maxX + p.padRight > p.maxX) {
      p.maxX = node.maxX + p.padRight;
      flag = true; // s += "\nNew maxX for parent node " + p.id + ": " + p.maxX;
    } // MinX


    if (null == p.minX || node.minX - p.padLeft < p.minX) {
      p.minX = node.minX - p.padLeft;
      flag = true; // s += "\nNew minX for parent node " + p.id + ": " + p.minX;
    } // MaxY


    if (null == p.maxY || node.maxY + p.padBottom > p.maxY) {
      p.maxY = node.maxY + p.padBottom;
      flag = true; // s += "\nNew maxY for parent node " + p.id + ": " + p.maxY;
    } // MinY


    if (null == p.minY || node.minY - p.padTop < p.minY) {
      p.minY = node.minY - p.padTop;
      flag = true; // s += "\nNew minY for parent node " + p.id + ": " + p.minY;
    } // If updated boundaries, propagate changes upward


    if (flag) {
      // logDebug(s);
      return updateAncestryBoundaries(p, layoutInfo);
    } // s += ". No changes in boundaries/position of parent node " + p.id;
    // logDebug(s);


    return;
  };

  var separateComponents = function separateComponents(layoutInfo, options) {
    var nodes = layoutInfo.layoutNodes;
    var components = [];

    for (var i = 0; i < nodes.length; i++) {
      var node = nodes[i];
      var cid = node.cmptId;
      var component = components[cid] = components[cid] || [];
      component.push(node);
    }

    var totalA = 0;

    for (var i = 0; i < components.length; i++) {
      var c = components[i];

      if (!c) {
        continue;
      }

      c.x1 = Infinity;
      c.x2 = -Infinity;
      c.y1 = Infinity;
      c.y2 = -Infinity;

      for (var j = 0; j < c.length; j++) {
        var n = c[j];
        c.x1 = Math.min(c.x1, n.positionX - n.width / 2);
        c.x2 = Math.max(c.x2, n.positionX + n.width / 2);
        c.y1 = Math.min(c.y1, n.positionY - n.height / 2);
        c.y2 = Math.max(c.y2, n.positionY + n.height / 2);
      }

      c.w = c.x2 - c.x1;
      c.h = c.y2 - c.y1;
      totalA += c.w * c.h;
    }

    components.sort(function (c1, c2) {
      return c2.w * c2.h - c1.w * c1.h;
    });
    var x = 0;
    var y = 0;
    var usedW = 0;
    var rowH = 0;
    var maxRowW = Math.sqrt(totalA) * layoutInfo.clientWidth / layoutInfo.clientHeight;

    for (var i = 0; i < components.length; i++) {
      var c = components[i];

      if (!c) {
        continue;
      }

      for (var j = 0; j < c.length; j++) {
        var n = c[j];

        if (!n.isLocked) {
          n.positionX += x - c.x1;
          n.positionY += y - c.y1;
        }
      }

      x += c.w + options.componentSpacing;
      usedW += c.w + options.componentSpacing;
      rowH = Math.max(rowH, c.h);

      if (usedW > maxRowW) {
        y += rowH + options.componentSpacing;
        x = 0;
        usedW = 0;
        rowH = 0;
      }
    }
  };

  var defaults$d = {
    fit: true,
    // whether to fit the viewport to the graph
    padding: 30,
    // padding used on fit
    boundingBox: undefined,
    // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
    avoidOverlap: true,
    // prevents node overlap, may overflow boundingBox if not enough space
    avoidOverlapPadding: 10,
    // extra spacing around nodes when avoidOverlap: true
    nodeDimensionsIncludeLabels: false,
    // Excludes the label when calculating node bounding boxes for the layout algorithm
    spacingFactor: undefined,
    // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up
    condense: false,
    // uses all available space on false, uses minimal space on true
    rows: undefined,
    // force num of rows in the grid
    cols: undefined,
    // force num of columns in the grid
    position: function position(node) {},
    // returns { row, col } for element
    sort: undefined,
    // a sorting function to order the nodes; e.g. function(a, b){ return a.data('weight') - b.data('weight') }
    animate: false,
    // whether to transition the node positions
    animationDuration: 500,
    // duration of animation in ms if enabled
    animationEasing: undefined,
    // easing of animation if enabled
    animateFilter: function animateFilter(node, i) {
      return true;
    },
    // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
    ready: undefined,
    // callback on layoutready
    stop: undefined,
    // callback on layoutstop
    transform: function transform(node, position) {
      return position;
    } // transform a given node position. Useful for changing flow direction in discrete layouts 

  };

  function GridLayout(options) {
    this.options = extend({}, defaults$d, options);
  }

  GridLayout.prototype.run = function () {
    var params = this.options;
    var options = params;
    var cy = params.cy;
    var eles = options.eles;
    var nodes = eles.nodes().not(':parent');

    if (options.sort) {
      nodes = nodes.sort(options.sort);
    }

    var bb = makeBoundingBox(options.boundingBox ? options.boundingBox : {
      x1: 0,
      y1: 0,
      w: cy.width(),
      h: cy.height()
    });

    if (bb.h === 0 || bb.w === 0) {
      nodes.layoutPositions(this, options, function (ele) {
        return {
          x: bb.x1,
          y: bb.y1
        };
      });
    } else {
      // width/height * splits^2 = cells where splits is number of times to split width
      var cells = nodes.size();
      var splits = Math.sqrt(cells * bb.h / bb.w);
      var rows = Math.round(splits);
      var cols = Math.round(bb.w / bb.h * splits);

      var small = function small(val) {
        if (val == null) {
          return Math.min(rows, cols);
        } else {
          var min = Math.min(rows, cols);

          if (min == rows) {
            rows = val;
          } else {
            cols = val;
          }
        }
      };

      var large = function large(val) {
        if (val == null) {
          return Math.max(rows, cols);
        } else {
          var max = Math.max(rows, cols);

          if (max == rows) {
            rows = val;
          } else {
            cols = val;
          }
        }
      };

      var oRows = options.rows;
      var oCols = options.cols != null ? options.cols : options.columns; // if rows or columns were set in options, use those values

      if (oRows != null && oCols != null) {
        rows = oRows;
        cols = oCols;
      } else if (oRows != null && oCols == null) {
        rows = oRows;
        cols = Math.ceil(cells / rows);
      } else if (oRows == null && oCols != null) {
        cols = oCols;
        rows = Math.ceil(cells / cols);
      } // otherwise use the automatic values and adjust accordingly
      // if rounding was up, see if we can reduce rows or columns
      else if (cols * rows > cells) {
          var sm = small();
          var lg = large(); // reducing the small side takes away the most cells, so try it first

          if ((sm - 1) * lg >= cells) {
            small(sm - 1);
          } else if ((lg - 1) * sm >= cells) {
            large(lg - 1);
          }
        } else {
          // if rounding was too low, add rows or columns
          while (cols * rows < cells) {
            var _sm = small();

            var _lg = large(); // try to add to larger side first (adds less in multiplication)


            if ((_lg + 1) * _sm >= cells) {
              large(_lg + 1);
            } else {
              small(_sm + 1);
            }
          }
        }

      var cellWidth = bb.w / cols;
      var cellHeight = bb.h / rows;

      if (options.condense) {
        cellWidth = 0;
        cellHeight = 0;
      }

      if (options.avoidOverlap) {
        for (var i = 0; i < nodes.length; i++) {
          var node = nodes[i];
          var pos = node._private.position;

          if (pos.x == null || pos.y == null) {
            // for bb
            pos.x = 0;
            pos.y = 0;
          }

          var nbb = node.layoutDimensions(options);
          var p = options.avoidOverlapPadding;
          var w = nbb.w + p;
          var h = nbb.h + p;
          cellWidth = Math.max(cellWidth, w);
          cellHeight = Math.max(cellHeight, h);
        }
      }

      var cellUsed = {}; // e.g. 'c-0-2' => true

      var used = function used(row, col) {
        return cellUsed['c-' + row + '-' + col] ? true : false;
      };

      var use = function use(row, col) {
        cellUsed['c-' + row + '-' + col] = true;
      }; // to keep track of current cell position


      var row = 0;
      var col = 0;

      var moveToNextCell = function moveToNextCell() {
        col++;

        if (col >= cols) {
          col = 0;
          row++;
        }
      }; // get a cache of all the manual positions


      var id2manPos = {};

      for (var _i = 0; _i < nodes.length; _i++) {
        var _node = nodes[_i];
        var rcPos = options.position(_node);

        if (rcPos && (rcPos.row !== undefined || rcPos.col !== undefined)) {
          // must have at least row or col def'd
          var _pos = {
            row: rcPos.row,
            col: rcPos.col
          };

          if (_pos.col === undefined) {
            // find unused col
            _pos.col = 0;

            while (used(_pos.row, _pos.col)) {
              _pos.col++;
            }
          } else if (_pos.row === undefined) {
            // find unused row
            _pos.row = 0;

            while (used(_pos.row, _pos.col)) {
              _pos.row++;
            }
          }

          id2manPos[_node.id()] = _pos;
          use(_pos.row, _pos.col);
        }
      }

      var getPos = function getPos(element, i) {
        var x, y;

        if (element.locked() || element.isParent()) {
          return false;
        } // see if we have a manual position set


        var rcPos = id2manPos[element.id()];

        if (rcPos) {
          x = rcPos.col * cellWidth + cellWidth / 2 + bb.x1;
          y = rcPos.row * cellHeight + cellHeight / 2 + bb.y1;
        } else {
          // otherwise set automatically
          while (used(row, col)) {
            moveToNextCell();
          }

          x = col * cellWidth + cellWidth / 2 + bb.x1;
          y = row * cellHeight + cellHeight / 2 + bb.y1;
          use(row, col);
          moveToNextCell();
        }

        return {
          x: x,
          y: y
        };
      };

      nodes.layoutPositions(this, options, getPos);
    }

    return this; // chaining
  };

  var defaults$e = {
    ready: function ready() {},
    // on layoutready
    stop: function stop() {} // on layoutstop

  }; // constructor
  // options : object containing layout options

  function NullLayout(options) {
    this.options = extend({}, defaults$e, options);
  } // runs the layout


  NullLayout.prototype.run = function () {
    var options = this.options;
    var eles = options.eles; // elements to consider in the layout

    var layout = this; // cy is automatically populated for us in the constructor
    // (disable eslint for next line as this serves as example layout code to external developers)
    // eslint-disable-next-line no-unused-vars

    var cy = options.cy;
    layout.emit('layoutstart'); // puts all nodes at (0, 0)
    // n.b. most layouts would use layoutPositions(), instead of positions() and manual events

    eles.nodes().positions(function () {
      return {
        x: 0,
        y: 0
      };
    }); // trigger layoutready when each node has had its position set at least once

    layout.one('layoutready', options.ready);
    layout.emit('layoutready'); // trigger layoutstop when the layout stops (e.g. finishes)

    layout.one('layoutstop', options.stop);
    layout.emit('layoutstop');
    return this; // chaining
  }; // called on continuous layouts to stop them before they finish


  NullLayout.prototype.stop = function () {
    return this; // chaining
  };

  var defaults$f = {
    positions: undefined,
    // map of (node id) => (position obj); or function(node){ return somPos; }
    zoom: undefined,
    // the zoom level to set (prob want fit = false if set)
    pan: undefined,
    // the pan level to set (prob want fit = false if set)
    fit: true,
    // whether to fit to viewport
    padding: 30,
    // padding on fit
    animate: false,
    // whether to transition the node positions
    animationDuration: 500,
    // duration of animation in ms if enabled
    animationEasing: undefined,
    // easing of animation if enabled
    animateFilter: function animateFilter(node, i) {
      return true;
    },
    // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
    ready: undefined,
    // callback on layoutready
    stop: undefined,
    // callback on layoutstop
    transform: function transform(node, position) {
      return position;
    } // transform a given node position. Useful for changing flow direction in discrete layouts

  };

  function PresetLayout(options) {
    this.options = extend({}, defaults$f, options);
  }

  PresetLayout.prototype.run = function () {
    var options = this.options;
    var eles = options.eles;
    var nodes = eles.nodes();
    var posIsFn = fn(options.positions);

    function getPosition(node) {
      if (options.positions == null) {
        return copyPosition(node.position());
      }

      if (posIsFn) {
        return options.positions(node);
      }

      var pos = options.positions[node._private.data.id];

      if (pos == null) {
        return null;
      }

      return pos;
    }

    nodes.layoutPositions(this, options, function (node, i) {
      var position = getPosition(node);

      if (node.locked() || position == null) {
        return false;
      }

      return position;
    });
    return this; // chaining
  };

  var defaults$g = {
    fit: true,
    // whether to fit to viewport
    padding: 30,
    // fit padding
    boundingBox: undefined,
    // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
    animate: false,
    // whether to transition the node positions
    animationDuration: 500,
    // duration of animation in ms if enabled
    animationEasing: undefined,
    // easing of animation if enabled
    animateFilter: function animateFilter(node, i) {
      return true;
    },
    // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
    ready: undefined,
    // callback on layoutready
    stop: undefined,
    // callback on layoutstop
    transform: function transform(node, position) {
      return position;
    } // transform a given node position. Useful for changing flow direction in discrete layouts 

  };

  function RandomLayout(options) {
    this.options = extend({}, defaults$g, options);
  }

  RandomLayout.prototype.run = function () {
    var options = this.options;
    var cy = options.cy;
    var eles = options.eles;
    var nodes = eles.nodes().not(':parent');
    var bb = makeBoundingBox(options.boundingBox ? options.boundingBox : {
      x1: 0,
      y1: 0,
      w: cy.width(),
      h: cy.height()
    });

    var getPos = function getPos(node, i) {
      return {
        x: bb.x1 + Math.round(Math.random() * bb.w),
        y: bb.y1 + Math.round(Math.random() * bb.h)
      };
    };

    nodes.layoutPositions(this, options, getPos);
    return this; // chaining
  };

  var layout = [{
    name: 'breadthfirst',
    impl: BreadthFirstLayout
  }, {
    name: 'circle',
    impl: CircleLayout
  }, {
    name: 'concentric',
    impl: ConcentricLayout
  }, {
    name: 'cose',
    impl: CoseLayout
  }, {
    name: 'grid',
    impl: GridLayout
  }, {
    name: 'null',
    impl: NullLayout
  }, {
    name: 'preset',
    impl: PresetLayout
  }, {
    name: 'random',
    impl: RandomLayout
  }];

  function NullRenderer(options) {
    this.options = options;
    this.notifications = 0; // for testing
  }

  var noop$1 = function noop() {};

  var throwImgErr = function throwImgErr() {
    throw new Error('A headless instance can not render images');
  };

  NullRenderer.prototype = {
    recalculateRenderedStyle: noop$1,
    notify: function notify() {
      this.notifications++;
    },
    init: noop$1,
    isHeadless: function isHeadless() {
      return true;
    },
    png: throwImgErr,
    jpg: throwImgErr
  };

  var BRp = {};
  BRp.arrowShapeWidth = 0.3;

  BRp.registerArrowShapes = function () {
    var arrowShapes = this.arrowShapes = {};
    var renderer = this; // Contract for arrow shapes:
    // 0, 0 is arrow tip
    // (0, 1) is direction towards node
    // (1, 0) is right
    //
    // functional api:
    // collide: check x, y in shape
    // roughCollide: called before collide, no false negatives
    // draw: draw
    // spacing: dist(arrowTip, nodeBoundary)
    // gap: dist(edgeTip, nodeBoundary), edgeTip may != arrowTip

    var bbCollide = function bbCollide(x, y, size, angle, translation, edgeWidth, padding) {
      var x1 = translation.x - size / 2 - padding;
      var x2 = translation.x + size / 2 + padding;
      var y1 = translation.y - size / 2 - padding;
      var y2 = translation.y + size / 2 + padding;
      var inside = x1 <= x && x <= x2 && y1 <= y && y <= y2;
      return inside;
    };

    var transform = function transform(x, y, size, angle, translation) {
      var xRotated = x * Math.cos(angle) - y * Math.sin(angle);
      var yRotated = x * Math.sin(angle) + y * Math.cos(angle);
      var xScaled = xRotated * size;
      var yScaled = yRotated * size;
      var xTranslated = xScaled + translation.x;
      var yTranslated = yScaled + translation.y;
      return {
        x: xTranslated,
        y: yTranslated
      };
    };

    var transformPoints = function transformPoints(pts, size, angle, translation) {
      var retPts = [];

      for (var i = 0; i < pts.length; i += 2) {
        var x = pts[i];
        var y = pts[i + 1];
        retPts.push(transform(x, y, size, angle, translation));
      }

      return retPts;
    };

    var pointsToArr = function pointsToArr(pts) {
      var ret = [];

      for (var i = 0; i < pts.length; i++) {
        var p = pts[i];
        ret.push(p.x, p.y);
      }

      return ret;
    };

    var standardGap = function standardGap(edge) {
      return edge.pstyle('width').pfValue * edge.pstyle('arrow-scale').pfValue * 2;
    };

    var defineArrowShape = function defineArrowShape(name, defn) {
      if (string(defn)) {
        defn = arrowShapes[defn];
      }

      arrowShapes[name] = extend({
        name: name,
        points: [-0.15, -0.3, 0.15, -0.3, 0.15, 0.3, -0.15, 0.3],
        collide: function collide(x, y, size, angle, translation, padding) {
          var points = pointsToArr(transformPoints(this.points, size + 2 * padding, angle, translation));
          var inside = pointInsidePolygonPoints(x, y, points);
          return inside;
        },
        roughCollide: bbCollide,
        draw: function draw(context, size, angle, translation) {
          var points = transformPoints(this.points, size, angle, translation);
          renderer.arrowShapeImpl('polygon')(context, points);
        },
        spacing: function spacing(edge) {
          return 0;
        },
        gap: standardGap
      }, defn);
    };

    defineArrowShape('none', {
      collide: falsify,
      roughCollide: falsify,
      draw: noop,
      spacing: zeroify,
      gap: zeroify
    });
    defineArrowShape('triangle', {
      points: [-0.15, -0.3, 0, 0, 0.15, -0.3]
    });
    defineArrowShape('arrow', 'triangle');
    defineArrowShape('triangle-backcurve', {
      points: arrowShapes['triangle'].points,
      controlPoint: [0, -0.15],
      roughCollide: bbCollide,
      draw: function draw(context, size, angle, translation, edgeWidth) {
        var ptsTrans = transformPoints(this.points, size, angle, translation);
        var ctrlPt = this.controlPoint;
        var ctrlPtTrans = transform(ctrlPt[0], ctrlPt[1], size, angle, translation);
        renderer.arrowShapeImpl(this.name)(context, ptsTrans, ctrlPtTrans);
      },
      gap: function gap(edge) {
        return standardGap(edge) * 0.8;
      }
    });
    defineArrowShape('triangle-tee', {
      points: [0, 0, 0.15, -0.3, -0.15, -0.3, 0, 0],
      pointsTee: [-0.15, -0.4, -0.15, -0.5, 0.15, -0.5, 0.15, -0.4],
      collide: function collide(x, y, size, angle, translation, edgeWidth, padding) {
        var triPts = pointsToArr(transformPoints(this.points, size + 2 * padding, angle, translation));
        var teePts = pointsToArr(transformPoints(this.pointsTee, size + 2 * padding, angle, translation));
        var inside = pointInsidePolygonPoints(x, y, triPts) || pointInsidePolygonPoints(x, y, teePts);
        return inside;
      },
      draw: function draw(context, size, angle, translation, edgeWidth) {
        var triPts = transformPoints(this.points, size, angle, translation);
        var teePts = transformPoints(this.pointsTee, size, angle, translation);
        renderer.arrowShapeImpl(this.name)(context, triPts, teePts);
      }
    });
    defineArrowShape('circle-triangle', {
      radius: 0.15,
      pointsTr: [0, -0.15, 0.15, -0.45, -0.15, -0.45, 0, -0.15],
      collide: function collide(x, y, size, angle, translation, edgeWidth, padding) {
        var t = translation;
        var circleInside = Math.pow(t.x - x, 2) + Math.pow(t.y - y, 2) <= Math.pow((size + 2 * padding) * this.radius, 2);
        var triPts = pointsToArr(transformPoints(this.points, size + 2 * padding, angle, translation));
        return pointInsidePolygonPoints(x, y, triPts) || circleInside;
      },
      draw: function draw(context, size, angle, translation, edgeWidth) {
        var triPts = transformPoints(this.pointsTr, size, angle, translation);
        renderer.arrowShapeImpl(this.name)(context, triPts, translation.x, translation.y, this.radius * size);
      },
      spacing: function spacing(edge) {
        return renderer.getArrowWidth(edge.pstyle('width').pfValue, edge.pstyle('arrow-scale').value) * this.radius;
      }
    });
    defineArrowShape('triangle-cross', {
      points: [0, 0, 0.15, -0.3, -0.15, -0.3, 0, 0],
      baseCrossLinePts: [-0.15, -0.4, // first half of the rectangle
      -0.15, -0.4, 0.15, -0.4, // second half of the rectangle
      0.15, -0.4],
      crossLinePts: function crossLinePts(size, edgeWidth) {
        // shift points so that the distance between the cross points matches edge width
        var p = this.baseCrossLinePts.slice();
        var shiftFactor = edgeWidth / size;
        var y0 = 3;
        var y1 = 5;
        p[y0] = p[y0] - shiftFactor;
        p[y1] = p[y1] - shiftFactor;
        return p;
      },
      collide: function collide(x, y, size, angle, translation, edgeWidth, padding) {
        var triPts = pointsToArr(transformPoints(this.points, size + 2 * padding, angle, translation));
        var teePts = pointsToArr(transformPoints(this.crossLinePts(size, edgeWidth), size + 2 * padding, angle, translation));
        var inside = pointInsidePolygonPoints(x, y, triPts) || pointInsidePolygonPoints(x, y, teePts);
        return inside;
      },
      draw: function draw(context, size, angle, translation, edgeWidth) {
        var triPts = transformPoints(this.points, size, angle, translation);
        var crossLinePts = transformPoints(this.crossLinePts(size, edgeWidth), size, angle, translation);
        renderer.arrowShapeImpl(this.name)(context, triPts, crossLinePts);
      }
    });
    defineArrowShape('vee', {
      points: [-0.15, -0.3, 0, 0, 0.15, -0.3, 0, -0.15],
      gap: function gap(edge) {
        return standardGap(edge) * 0.525;
      }
    });
    defineArrowShape('circle', {
      radius: 0.15,
      collide: function collide(x, y, size, angle, translation, edgeWidth, padding) {
        var t = translation;
        var inside = Math.pow(t.x - x, 2) + Math.pow(t.y - y, 2) <= Math.pow((size + 2 * padding) * this.radius, 2);
        return inside;
      },
      draw: function draw(context, size, angle, translation, edgeWidth) {
        renderer.arrowShapeImpl(this.name)(context, translation.x, translation.y, this.radius * size);
      },
      spacing: function spacing(edge) {
        return renderer.getArrowWidth(edge.pstyle('width').pfValue, edge.pstyle('arrow-scale').value) * this.radius;
      }
    });
    defineArrowShape('tee', {
      points: [-0.15, 0, -0.15, -0.1, 0.15, -0.1, 0.15, 0],
      spacing: function spacing(edge) {
        return 1;
      },
      gap: function gap(edge) {
        return 1;
      }
    });
    defineArrowShape('square', {
      points: [-0.15, 0.00, 0.15, 0.00, 0.15, -0.3, -0.15, -0.3]
    });
    defineArrowShape('diamond', {
      points: [-0.15, -0.15, 0, -0.3, 0.15, -0.15, 0, 0],
      gap: function gap(edge) {
        return edge.pstyle('width').pfValue * edge.pstyle('arrow-scale').value;
      }
    });
    defineArrowShape('chevron', {
      points: [0, 0, -0.15, -0.15, -0.1, -0.2, 0, -0.1, 0.1, -0.2, 0.15, -0.15],
      gap: function gap(edge) {
        return 0.95 * edge.pstyle('width').pfValue * edge.pstyle('arrow-scale').value;
      }
    });
  };

  var BRp$1 = {}; // Project mouse

  BRp$1.projectIntoViewport = function (clientX, clientY) {
    var cy = this.cy;
    var offsets = this.findContainerClientCoords();
    var offsetLeft = offsets[0];
    var offsetTop = offsets[1];
    var scale = offsets[4];
    var pan = cy.pan();
    var zoom = cy.zoom();
    var x = ((clientX - offsetLeft) / scale - pan.x) / zoom;
    var y = ((clientY - offsetTop) / scale - pan.y) / zoom;
    return [x, y];
  };

  BRp$1.findContainerClientCoords = function () {
    if (this.containerBB) {
      return this.containerBB;
    }

    var container = this.container;
    var rect = container.getBoundingClientRect();
    var style = window$1.getComputedStyle(container);

    var styleValue = function styleValue(name) {
      return parseFloat(style.getPropertyValue(name));
    };

    var padding = {
      left: styleValue('padding-left'),
      right: styleValue('padding-right'),
      top: styleValue('padding-top'),
      bottom: styleValue('padding-bottom')
    };
    var border = {
      left: styleValue('border-left-width'),
      right: styleValue('border-right-width'),
      top: styleValue('border-top-width'),
      bottom: styleValue('border-bottom-width')
    };
    var clientWidth = container.clientWidth;
    var clientHeight = container.clientHeight;
    var paddingHor = padding.left + padding.right;
    var paddingVer = padding.top + padding.bottom;
    var borderHor = border.left + border.right;
    var scale = rect.width / (clientWidth + borderHor);
    var unscaledW = clientWidth - paddingHor;
    var unscaledH = clientHeight - paddingVer;
    var left = rect.left + padding.left + border.left;
    var top = rect.top + padding.top + border.top;
    return this.containerBB = [left, top, unscaledW, unscaledH, scale];
  };

  BRp$1.invalidateContainerClientCoordsCache = function () {
    this.containerBB = null;
  };

  BRp$1.findNearestElement = function (x, y, interactiveElementsOnly, isTouch) {
    return this.findNearestElements(x, y, interactiveElementsOnly, isTouch)[0];
  };

  BRp$1.findNearestElements = function (x, y, interactiveElementsOnly, isTouch) {
    var self = this;
    var r = this;
    var eles = r.getCachedZSortedEles();
    var near = []; // 1 node max, 1 edge max

    var zoom = r.cy.zoom();
    var hasCompounds = r.cy.hasCompoundNodes();
    var edgeThreshold = (isTouch ? 24 : 8) / zoom;
    var nodeThreshold = (isTouch ? 8 : 2) / zoom;
    var labelThreshold = (isTouch ? 8 : 2) / zoom;
    var minSqDist = Infinity;
    var nearEdge;
    var nearNode;

    if (interactiveElementsOnly) {
      eles = eles.interactive;
    }

    function addEle(ele, sqDist) {
      if (ele.isNode()) {
        if (nearNode) {
          return; // can't replace node
        } else {
          nearNode = ele;
          near.push(ele);
        }
      }

      if (ele.isEdge() && (sqDist == null || sqDist < minSqDist)) {
        if (nearEdge) {
          // then replace existing edge
          // can replace only if same z-index
          if (nearEdge.pstyle('z-compound-depth').value === ele.pstyle('z-compound-depth').value && nearEdge.pstyle('z-compound-depth').value === ele.pstyle('z-compound-depth').value) {
            for (var i = 0; i < near.length; i++) {
              if (near[i].isEdge()) {
                near[i] = ele;
                nearEdge = ele;
                minSqDist = sqDist != null ? sqDist : minSqDist;
                break;
              }
            }
          }
        } else {
          near.push(ele);
          nearEdge = ele;
          minSqDist = sqDist != null ? sqDist : minSqDist;
        }
      }
    }

    function checkNode(node) {
      var width = node.outerWidth() + 2 * nodeThreshold;
      var height = node.outerHeight() + 2 * nodeThreshold;
      var hw = width / 2;
      var hh = height / 2;
      var pos = node.position();

      if (pos.x - hw <= x && x <= pos.x + hw // bb check x
      && pos.y - hh <= y && y <= pos.y + hh // bb check y
      ) {
          var shape = r.nodeShapes[self.getNodeShape(node)];

          if (shape.checkPoint(x, y, 0, width, height, pos.x, pos.y)) {
            addEle(node, 0);
            return true;
          }
        }
    }

    function checkEdge(edge) {
      var _p = edge._private;
      var rs = _p.rscratch;
      var styleWidth = edge.pstyle('width').pfValue;
      var scale = edge.pstyle('arrow-scale').value;
      var width = styleWidth / 2 + edgeThreshold; // more like a distance radius from centre

      var widthSq = width * width;
      var width2 = width * 2;
      var src = _p.source;
      var tgt = _p.target;
      var sqDist;

      if (rs.edgeType === 'segments' || rs.edgeType === 'straight' || rs.edgeType === 'haystack') {
        var pts = rs.allpts;

        for (var i = 0; i + 3 < pts.length; i += 2) {
          if (inLineVicinity(x, y, pts[i], pts[i + 1], pts[i + 2], pts[i + 3], width2) && widthSq > (sqDist = sqdistToFiniteLine(x, y, pts[i], pts[i + 1], pts[i + 2], pts[i + 3]))) {
            addEle(edge, sqDist);
            return true;
          }
        }
      } else if (rs.edgeType === 'bezier' || rs.edgeType === 'multibezier' || rs.edgeType === 'self' || rs.edgeType === 'compound') {
        var pts = rs.allpts;

        for (var i = 0; i + 5 < rs.allpts.length; i += 4) {
          if (inBezierVicinity(x, y, pts[i], pts[i + 1], pts[i + 2], pts[i + 3], pts[i + 4], pts[i + 5], width2) && widthSq > (sqDist = sqdistToQuadraticBezier(x, y, pts[i], pts[i + 1], pts[i + 2], pts[i + 3], pts[i + 4], pts[i + 5]))) {
            addEle(edge, sqDist);
            return true;
          }
        }
      } // if we're close to the edge but didn't hit it, maybe we hit its arrows


      var src = src || _p.source;
      var tgt = tgt || _p.target;
      var arSize = self.getArrowWidth(styleWidth, scale);
      var arrows = [{
        name: 'source',
        x: rs.arrowStartX,
        y: rs.arrowStartY,
        angle: rs.srcArrowAngle
      }, {
        name: 'target',
        x: rs.arrowEndX,
        y: rs.arrowEndY,
        angle: rs.tgtArrowAngle
      }, {
        name: 'mid-source',
        x: rs.midX,
        y: rs.midY,
        angle: rs.midsrcArrowAngle
      }, {
        name: 'mid-target',
        x: rs.midX,
        y: rs.midY,
        angle: rs.midtgtArrowAngle
      }];

      for (var i = 0; i < arrows.length; i++) {
        var ar = arrows[i];
        var shape = r.arrowShapes[edge.pstyle(ar.name + '-arrow-shape').value];
        var edgeWidth = edge.pstyle('width').pfValue;

        if (shape.roughCollide(x, y, arSize, ar.angle, {
          x: ar.x,
          y: ar.y
        }, edgeWidth, edgeThreshold) && shape.collide(x, y, arSize, ar.angle, {
          x: ar.x,
          y: ar.y
        }, edgeWidth, edgeThreshold)) {
          addEle(edge);
          return true;
        }
      } // for compound graphs, hitting edge may actually want a connected node instead (b/c edge may have greater z-index precedence)


      if (hasCompounds && near.length > 0) {
        checkNode(src);
        checkNode(tgt);
      }
    }

    function preprop(obj, name, pre) {
      return getPrefixedProperty(obj, name, pre);
    }

    function checkLabel(ele, prefix) {
      var _p = ele._private;
      var th = labelThreshold;
      var prefixDash;

      if (prefix) {
        prefixDash = prefix + '-';
      } else {
        prefixDash = '';
      }

      ele.boundingBox();
      var bb = _p.labelBounds[prefix || 'main'];
      var text = ele.pstyle(prefixDash + 'label').value;
      var eventsEnabled = ele.pstyle('text-events').strValue === 'yes';

      if (!eventsEnabled || !text) {
        return;
      }

      var rstyle = _p.rstyle;
      var lx = preprop(rstyle, 'labelX', prefix);
      var ly = preprop(rstyle, 'labelY', prefix);
      var theta = preprop(_p.rscratch, 'labelAngle', prefix);
      var lx1 = bb.x1 - th;
      var lx2 = bb.x2 + th;
      var ly1 = bb.y1 - th;
      var ly2 = bb.y2 + th;

      if (theta) {
        var cos = Math.cos(theta);
        var sin = Math.sin(theta);

        var rotate = function rotate(x, y) {
          x = x - lx;
          y = y - ly;
          return {
            x: x * cos - y * sin + lx,
            y: x * sin + y * cos + ly
          };
        };

        var px1y1 = rotate(lx1, ly1);
        var px1y2 = rotate(lx1, ly2);
        var px2y1 = rotate(lx2, ly1);
        var px2y2 = rotate(lx2, ly2);
        var points = [px1y1.x, px1y1.y, px2y1.x, px2y1.y, px2y2.x, px2y2.y, px1y2.x, px1y2.y];

        if (pointInsidePolygonPoints(x, y, points)) {
          addEle(ele);
          return true;
        }
      } else {
        // do a cheaper bb check
        if (inBoundingBox(bb, x, y)) {
          addEle(ele);
          return true;
        }
      }
    }

    for (var i = eles.length - 1; i >= 0; i--) {
      // reverse order for precedence
      var ele = eles[i];

      if (ele.isNode()) {
        checkNode(ele) || checkLabel(ele);
      } else {
        // then edge
        checkEdge(ele) || checkLabel(ele) || checkLabel(ele, 'source') || checkLabel(ele, 'target');
      }
    }

    return near;
  }; // 'Give me everything from this box'


  BRp$1.getAllInBox = function (x1, y1, x2, y2) {
    var eles = this.getCachedZSortedEles().interactive;
    var box = [];
    var x1c = Math.min(x1, x2);
    var x2c = Math.max(x1, x2);
    var y1c = Math.min(y1, y2);
    var y2c = Math.max(y1, y2);
    x1 = x1c;
    x2 = x2c;
    y1 = y1c;
    y2 = y2c;
    var boxBb = makeBoundingBox({
      x1: x1,
      y1: y1,
      x2: x2,
      y2: y2
    });

    for (var e = 0; e < eles.length; e++) {
      var ele = eles[e];

      if (ele.isNode()) {
        var node = ele;
        var nodeBb = node.boundingBox({
          includeNodes: true,
          includeEdges: false,
          includeLabels: false
        });

        if (boundingBoxesIntersect(boxBb, nodeBb) && !boundingBoxInBoundingBox(nodeBb, boxBb)) {
          box.push(node);
        }
      } else {
        var edge = ele;
        var _p = edge._private;
        var rs = _p.rscratch;

        if (rs.startX != null && rs.startY != null && !inBoundingBox(boxBb, rs.startX, rs.startY)) {
          continue;
        }

        if (rs.endX != null && rs.endY != null && !inBoundingBox(boxBb, rs.endX, rs.endY)) {
          continue;
        }

        if (rs.edgeType === 'bezier' || rs.edgeType === 'multibezier' || rs.edgeType === 'self' || rs.edgeType === 'compound' || rs.edgeType === 'segments' || rs.edgeType === 'haystack') {
          var pts = _p.rstyle.bezierPts || _p.rstyle.linePts || _p.rstyle.haystackPts;
          var allInside = true;

          for (var i = 0; i < pts.length; i++) {
            if (!pointInBoundingBox(boxBb, pts[i])) {
              allInside = false;
              break;
            }
          }

          if (allInside) {
            box.push(edge);
          }
        } else if (rs.edgeType === 'haystack' || rs.edgeType === 'straight') {
          box.push(edge);
        }
      }
    }

    return box;
  };

  var BRp$2 = {};

  BRp$2.calculateArrowAngles = function (edge) {
    var rs = edge._private.rscratch;
    var isHaystack = rs.edgeType === 'haystack';
    var isBezier = rs.edgeType === 'bezier';
    var isMultibezier = rs.edgeType === 'multibezier';
    var isSegments = rs.edgeType === 'segments';
    var isCompound = rs.edgeType === 'compound';
    var isSelf = rs.edgeType === 'self'; // Displacement gives direction for arrowhead orientation

    var dispX, dispY;
    var startX, startY, endX, endY, midX, midY;

    if (isHaystack) {
      startX = rs.haystackPts[0];
      startY = rs.haystackPts[1];
      endX = rs.haystackPts[2];
      endY = rs.haystackPts[3];
    } else {
      startX = rs.arrowStartX;
      startY = rs.arrowStartY;
      endX = rs.arrowEndX;
      endY = rs.arrowEndY;
    }

    midX = rs.midX;
    midY = rs.midY; // source
    //

    if (isSegments) {
      dispX = startX - rs.segpts[0];
      dispY = startY - rs.segpts[1];
    } else if (isMultibezier || isCompound || isSelf || isBezier) {
      var pts = rs.allpts;
      var bX = qbezierAt(pts[0], pts[2], pts[4], 0.1);
      var bY = qbezierAt(pts[1], pts[3], pts[5], 0.1);
      dispX = startX - bX;
      dispY = startY - bY;
    } else {
      dispX = startX - midX;
      dispY = startY - midY;
    }

    rs.srcArrowAngle = getAngleFromDisp(dispX, dispY); // mid target
    //

    var midX = rs.midX;
    var midY = rs.midY;

    if (isHaystack) {
      midX = (startX + endX) / 2;
      midY = (startY + endY) / 2;
    }

    dispX = endX - startX;
    dispY = endY - startY;

    if (isSegments) {
      var pts = rs.allpts;

      if (pts.length / 2 % 2 === 0) {
        var i2 = pts.length / 2;
        var i1 = i2 - 2;
        dispX = pts[i2] - pts[i1];
        dispY = pts[i2 + 1] - pts[i1 + 1];
      } else {
        var i2 = pts.length / 2 - 1;
        var i1 = i2 - 2;
        var i3 = i2 + 2;
        dispX = pts[i2] - pts[i1];
        dispY = pts[i2 + 1] - pts[i1 + 1];
      }
    } else if (isMultibezier || isCompound || isSelf) {
      var pts = rs.allpts;
      var cpts = rs.ctrlpts;
      var bp0x, bp0y;
      var bp1x, bp1y;

      if (cpts.length / 2 % 2 === 0) {
        var p0 = pts.length / 2 - 1; // startpt

        var ic = p0 + 2;
        var p1 = ic + 2;
        bp0x = qbezierAt(pts[p0], pts[ic], pts[p1], 0.0);
        bp0y = qbezierAt(pts[p0 + 1], pts[ic + 1], pts[p1 + 1], 0.0);
        bp1x = qbezierAt(pts[p0], pts[ic], pts[p1], 0.0001);
        bp1y = qbezierAt(pts[p0 + 1], pts[ic + 1], pts[p1 + 1], 0.0001);
      } else {
        var ic = pts.length / 2 - 1; // ctrpt

        var p0 = ic - 2; // startpt

        var p1 = ic + 2; // endpt

        bp0x = qbezierAt(pts[p0], pts[ic], pts[p1], 0.4999);
        bp0y = qbezierAt(pts[p0 + 1], pts[ic + 1], pts[p1 + 1], 0.4999);
        bp1x = qbezierAt(pts[p0], pts[ic], pts[p1], 0.5);
        bp1y = qbezierAt(pts[p0 + 1], pts[ic + 1], pts[p1 + 1], 0.5);
      }

      dispX = bp1x - bp0x;
      dispY = bp1y - bp0y;
    }

    rs.midtgtArrowAngle = getAngleFromDisp(dispX, dispY);
    rs.midDispX = dispX;
    rs.midDispY = dispY; // mid source
    //

    dispX *= -1;
    dispY *= -1;

    if (isSegments) {
      var pts = rs.allpts;

      if (pts.length / 2 % 2 === 0) ; else {
        var i2 = pts.length / 2 - 1;
        var i3 = i2 + 2;
        dispX = -(pts[i3] - pts[i2]);
        dispY = -(pts[i3 + 1] - pts[i2 + 1]);
      }
    }

    rs.midsrcArrowAngle = getAngleFromDisp(dispX, dispY); // target
    //

    if (isSegments) {
      dispX = endX - rs.segpts[rs.segpts.length - 2];
      dispY = endY - rs.segpts[rs.segpts.length - 1];
    } else if (isMultibezier || isCompound || isSelf || isBezier) {
      var pts = rs.allpts;
      var l = pts.length;
      var bX = qbezierAt(pts[l - 6], pts[l - 4], pts[l - 2], 0.9);
      var bY = qbezierAt(pts[l - 5], pts[l - 3], pts[l - 1], 0.9);
      dispX = endX - bX;
      dispY = endY - bY;
    } else {
      dispX = endX - midX;
      dispY = endY - midY;
    }

    rs.tgtArrowAngle = getAngleFromDisp(dispX, dispY);
  };

  BRp$2.getArrowWidth = BRp$2.getArrowHeight = function (edgeWidth, scale) {
    var cache = this.arrowWidthCache = this.arrowWidthCache || {};
    var cachedVal = cache[edgeWidth + ', ' + scale];

    if (cachedVal) {
      return cachedVal;
    }

    cachedVal = Math.max(Math.pow(edgeWidth * 13.37, 0.9), 29) * scale;
    cache[edgeWidth + ', ' + scale] = cachedVal;
    return cachedVal;
  };

  var BRp$3 = {};

  BRp$3.findHaystackPoints = function (edges) {
    for (var i = 0; i < edges.length; i++) {
      var edge = edges[i];
      var _p = edge._private;
      var rs = _p.rscratch;

      if (!rs.haystack) {
        var angle = Math.random() * 2 * Math.PI;
        rs.source = {
          x: Math.cos(angle),
          y: Math.sin(angle)
        };
        angle = Math.random() * 2 * Math.PI;
        rs.target = {
          x: Math.cos(angle),
          y: Math.sin(angle)
        };
      }

      var src = _p.source;
      var tgt = _p.target;
      var srcPos = src.position();
      var tgtPos = tgt.position();
      var srcW = src.width();
      var tgtW = tgt.width();
      var srcH = src.height();
      var tgtH = tgt.height();
      var radius = edge.pstyle('haystack-radius').value;
      var halfRadius = radius / 2; // b/c have to half width/height

      rs.haystackPts = rs.allpts = [rs.source.x * srcW * halfRadius + srcPos.x, rs.source.y * srcH * halfRadius + srcPos.y, rs.target.x * tgtW * halfRadius + tgtPos.x, rs.target.y * tgtH * halfRadius + tgtPos.y];
      rs.midX = (rs.allpts[0] + rs.allpts[2]) / 2;
      rs.midY = (rs.allpts[1] + rs.allpts[3]) / 2; // always override as haystack in case set to different type previously

      rs.edgeType = 'haystack';
      rs.haystack = true;
      this.storeEdgeProjections(edge);
      this.calculateArrowAngles(edge);
      this.recalculateEdgeLabelProjections(edge);
      this.calculateLabelAngles(edge);
    }
  };

  BRp$3.findSegmentsPoints = function (edge, pairInfo) {
    // Segments (multiple straight lines)
    var rs = edge._private.rscratch;
    var posPts = pairInfo.posPts,
        intersectionPts = pairInfo.intersectionPts,
        vectorNormInverse = pairInfo.vectorNormInverse;
    var edgeDistances = edge.pstyle('edge-distances').value;
    var segmentWs = edge.pstyle('segment-weights');
    var segmentDs = edge.pstyle('segment-distances');
    var segmentsN = Math.min(segmentWs.pfValue.length, segmentDs.pfValue.length);
    rs.edgeType = 'segments';
    rs.segpts = [];

    for (var s = 0; s < segmentsN; s++) {
      var w = segmentWs.pfValue[s];
      var d = segmentDs.pfValue[s];
      var w1 = 1 - w;
      var w2 = w;
      var midptPts = edgeDistances === 'node-position' ? posPts : intersectionPts;
      var adjustedMidpt = {
        x: midptPts.x1 * w1 + midptPts.x2 * w2,
        y: midptPts.y1 * w1 + midptPts.y2 * w2
      };
      rs.segpts.push(adjustedMidpt.x + vectorNormInverse.x * d, adjustedMidpt.y + vectorNormInverse.y * d);
    }
  };

  BRp$3.findLoopPoints = function (edge, pairInfo, i, edgeIsUnbundled) {
    // Self-edge
    var rs = edge._private.rscratch;
    var dirCounts = pairInfo.dirCounts,
        srcPos = pairInfo.srcPos;
    var ctrlptDists = edge.pstyle('control-point-distances');
    var ctrlptDist = ctrlptDists ? ctrlptDists.pfValue[0] : undefined;
    var loopDir = edge.pstyle('loop-direction').pfValue;
    var loopSwp = edge.pstyle('loop-sweep').pfValue;
    var stepSize = edge.pstyle('control-point-step-size').pfValue;
    rs.edgeType = 'self';
    var j = i;
    var loopDist = stepSize;

    if (edgeIsUnbundled) {
      j = 0;
      loopDist = ctrlptDist;
    }

    var loopAngle = loopDir - Math.PI / 2;
    var outAngle = loopAngle - loopSwp / 2;
    var inAngle = loopAngle + loopSwp / 2; // increase by step size for overlapping loops, keyed on direction and sweep values

    var dc = String(loopDir + '_' + loopSwp);
    j = dirCounts[dc] === undefined ? dirCounts[dc] = 0 : ++dirCounts[dc];
    rs.ctrlpts = [srcPos.x + Math.cos(outAngle) * 1.4 * loopDist * (j / 3 + 1), srcPos.y + Math.sin(outAngle) * 1.4 * loopDist * (j / 3 + 1), srcPos.x + Math.cos(inAngle) * 1.4 * loopDist * (j / 3 + 1), srcPos.y + Math.sin(inAngle) * 1.4 * loopDist * (j / 3 + 1)];
  };

  BRp$3.findCompoundLoopPoints = function (edge, pairInfo, i, edgeIsUnbundled) {
    // Compound edge
    var rs = edge._private.rscratch;
    rs.edgeType = 'compound';
    var srcPos = pairInfo.srcPos,
        tgtPos = pairInfo.tgtPos,
        srcW = pairInfo.srcW,
        srcH = pairInfo.srcH,
        tgtW = pairInfo.tgtW,
        tgtH = pairInfo.tgtH;
    var stepSize = edge.pstyle('control-point-step-size').pfValue;
    var ctrlptDists = edge.pstyle('control-point-distances');
    var ctrlptDist = ctrlptDists ? ctrlptDists.pfValue[0] : undefined;
    var j = i;
    var loopDist = stepSize;

    if (edgeIsUnbundled) {
      j = 0;
      loopDist = ctrlptDist;
    }

    var loopW = 50;
    var loopaPos = {
      x: srcPos.x - srcW / 2,
      y: srcPos.y - srcH / 2
    };
    var loopbPos = {
      x: tgtPos.x - tgtW / 2,
      y: tgtPos.y - tgtH / 2
    };
    var loopPos = {
      x: Math.min(loopaPos.x, loopbPos.x),
      y: Math.min(loopaPos.y, loopbPos.y)
    }; // avoids cases with impossible beziers

    var minCompoundStretch = 0.5;
    var compoundStretchA = Math.max(minCompoundStretch, Math.log(srcW * 0.01));
    var compoundStretchB = Math.max(minCompoundStretch, Math.log(tgtW * 0.01));
    rs.ctrlpts = [loopPos.x, loopPos.y - (1 + Math.pow(loopW, 1.12) / 100) * loopDist * (j / 3 + 1) * compoundStretchA, loopPos.x - (1 + Math.pow(loopW, 1.12) / 100) * loopDist * (j / 3 + 1) * compoundStretchB, loopPos.y];
  };

  BRp$3.findStraightEdgePoints = function (edge) {
    // Straight edge within bundle
    edge._private.rscratch.edgeType = 'straight';
  };

  BRp$3.findBezierPoints = function (edge, pairInfo, i, edgeIsUnbundled, edgeIsSwapped) {
    var rs = edge._private.rscratch;
    var vectorNormInverse = pairInfo.vectorNormInverse,
        posPts = pairInfo.posPts,
        intersectionPts = pairInfo.intersectionPts;
    var edgeDistances = edge.pstyle('edge-distances').value;
    var stepSize = edge.pstyle('control-point-step-size').pfValue;
    var ctrlptDists = edge.pstyle('control-point-distances');
    var ctrlptWs = edge.pstyle('control-point-weights');
    var bezierN = ctrlptDists && ctrlptWs ? Math.min(ctrlptDists.value.length, ctrlptWs.value.length) : 1;
    var ctrlptDist = ctrlptDists ? ctrlptDists.pfValue[0] : undefined;
    var ctrlptWeight = ctrlptWs.value[0]; // (Multi)bezier

    var multi = edgeIsUnbundled;
    rs.edgeType = multi ? 'multibezier' : 'bezier';
    rs.ctrlpts = [];

    for (var b = 0; b < bezierN; b++) {
      var normctrlptDist = (0.5 - pairInfo.eles.length / 2 + i) * stepSize * (edgeIsSwapped ? -1 : 1);
      var manctrlptDist = void 0;
      var sign = signum(normctrlptDist);

      if (multi) {
        ctrlptDist = ctrlptDists ? ctrlptDists.pfValue[b] : stepSize; // fall back on step size

        ctrlptWeight = ctrlptWs.value[b];
      }

      if (edgeIsUnbundled) {
        // multi or single unbundled
        manctrlptDist = ctrlptDist;
      } else {
        manctrlptDist = ctrlptDist !== undefined ? sign * ctrlptDist : undefined;
      }

      var distanceFromMidpoint = manctrlptDist !== undefined ? manctrlptDist : normctrlptDist;
      var w1 = 1 - ctrlptWeight;
      var w2 = ctrlptWeight;
      var midptPts = edgeDistances === 'node-position' ? posPts : intersectionPts;
      var adjustedMidpt = {
        x: midptPts.x1 * w1 + midptPts.x2 * w2,
        y: midptPts.y1 * w1 + midptPts.y2 * w2
      };
      rs.ctrlpts.push(adjustedMidpt.x + vectorNormInverse.x * distanceFromMidpoint, adjustedMidpt.y + vectorNormInverse.y * distanceFromMidpoint);
    }
  };

  BRp$3.findTaxiPoints = function (edge, pairInfo) {
    // Taxicab geometry with two turns maximum
    var rs = edge._private.rscratch;
    rs.edgeType = 'segments';
    var VERTICAL = 'vertical';
    var HORIZONTAL = 'horizontal';
    var LEFTWARD = 'leftward';
    var RIGHTWARD = 'rightward';
    var DOWNWARD = 'downward';
    var UPWARD = 'upward';
    var AUTO = 'auto';
    var posPts = pairInfo.posPts,
        srcW = pairInfo.srcW,
        srcH = pairInfo.srcH,
        tgtW = pairInfo.tgtW,
        tgtH = pairInfo.tgtH;
    var edgeDistances = edge.pstyle('edge-distances').value;
    var dIncludesNodeBody = edgeDistances !== 'node-position';
    var taxiDir = edge.pstyle('taxi-direction').value;
    var rawTaxiDir = taxiDir; // unprocessed value

    var taxiTurn = edge.pstyle('taxi-turn');
    var turnIsPercent = taxiTurn.units === '%';
    var taxiTurnPfVal = turnIsPercent && taxiTurn.pfValue < 0 ? 1 + taxiTurn.pfValue : taxiTurn.pfValue;
    var minD = edge.pstyle('taxi-turn-min-distance').pfValue;
    var dw = dIncludesNodeBody ? (srcW + tgtW) / 2 : 0;
    var dh = dIncludesNodeBody ? (srcH + tgtH) / 2 : 0;
    var pdx = posPts.x2 - posPts.x1;
    var pdy = posPts.y2 - posPts.y1; // take away the effective w/h from the magnitude of the delta value

    var subDWH = function subDWH(dxy, dwh) {
      if (dxy > 0) {
        return Math.max(dxy - dwh, 0);
      } else {
        return Math.min(dxy + dwh, 0);
      }
    };

    var dx = subDWH(pdx, dw);
    var dy = subDWH(pdy, dh);
    var isExplicitDir = false;

    if (taxiDir === AUTO) {
      taxiDir = Math.abs(dx) > Math.abs(dy) ? HORIZONTAL : VERTICAL;
    } else if (taxiDir === UPWARD || taxiDir === DOWNWARD) {
      taxiDir = VERTICAL;
      isExplicitDir = true;
    } else if (taxiDir === LEFTWARD || taxiDir === RIGHTWARD) {
      taxiDir = HORIZONTAL;
      isExplicitDir = true;
    }

    var isVert = taxiDir === VERTICAL;
    var l = isVert ? dy : dx;
    var pl = isVert ? pdy : pdx;
    var sgnL = signum(pl);
    var forcedDir = false;

    if (!(isExplicitDir && turnIsPercent) // forcing in this case would cause weird growing in the opposite direction
    && (rawTaxiDir === DOWNWARD && pl < 0 || rawTaxiDir === UPWARD && pl > 0 || rawTaxiDir === LEFTWARD && pl > 0 || rawTaxiDir === RIGHTWARD && pl < 0)) {
      sgnL *= -1;
      l = sgnL * Math.abs(l);
      forcedDir = true;
    }

    var d = turnIsPercent ? taxiTurnPfVal * l : taxiTurnPfVal * sgnL;

    var getIsTooClose = function getIsTooClose(d) {
      return Math.abs(d) < minD || Math.abs(d) >= Math.abs(l);
    };

    var isTooCloseSrc = getIsTooClose(d);
    var isTooCloseTgt = getIsTooClose(l - Math.abs(d));
    var isTooClose = isTooCloseSrc || isTooCloseTgt;

    if (isTooClose && !forcedDir) {
      // non-ideal routing
      if (isVert) {
        // vertical fallbacks
        var lShapeInsideSrc = Math.abs(pl) <= srcH / 2;
        var lShapeInsideTgt = Math.abs(pdx) <= tgtW / 2;

        if (lShapeInsideSrc) {
          // horizontal Z-shape (direction not respected)
          var x = (posPts.x1 + posPts.x2) / 2;
          var y1 = posPts.y1,
              y2 = posPts.y2;
          rs.segpts = [x, y1, x, y2];
        } else if (lShapeInsideTgt) {
          // vertical Z-shape (distance not respected)
          var y = (posPts.y1 + posPts.y2) / 2;
          var x1 = posPts.x1,
              x2 = posPts.x2;
          rs.segpts = [x1, y, x2, y];
        } else {
          // L-shape fallback (turn distance not respected, but works well with tree siblings)
          rs.segpts = [posPts.x1, posPts.y2];
        }
      } else {
        // horizontal fallbacks
        var _lShapeInsideSrc = Math.abs(pl) <= srcW / 2;

        var _lShapeInsideTgt = Math.abs(pdy) <= tgtH / 2;

        if (_lShapeInsideSrc) {
          // vertical Z-shape (direction not respected)
          var _y = (posPts.y1 + posPts.y2) / 2;

          var _x = posPts.x1,
              _x2 = posPts.x2;
          rs.segpts = [_x, _y, _x2, _y];
        } else if (_lShapeInsideTgt) {
          // horizontal Z-shape (turn distance not respected)
          var _x3 = (posPts.x1 + posPts.x2) / 2;

          var _y2 = posPts.y1,
              _y3 = posPts.y2;
          rs.segpts = [_x3, _y2, _x3, _y3];
        } else {
          // L-shape (turn distance not respected, but works well for tree siblings)
          rs.segpts = [posPts.x2, posPts.y1];
        }
      }
    } else {
      // ideal routing
      if (isVert) {
        var _y4 = (d < 0 ? posPts.y2 : posPts.y1) + d + (dIncludesNodeBody ? srcH / 2 * sgnL : 0);

        var _x4 = posPts.x1,
            _x5 = posPts.x2;
        rs.segpts = [_x4, _y4, _x5, _y4];
      } else {
        // horizontal
        var _x6 = (d < 0 ? posPts.x2 : posPts.x1) + d + (dIncludesNodeBody ? srcW / 2 * sgnL : 0);

        var _y5 = posPts.y1,
            _y6 = posPts.y2;
        rs.segpts = [_x6, _y5, _x6, _y6];
      }
    }
  };

  BRp$3.tryToCorrectInvalidPoints = function (edge, pairInfo) {
    var rs = edge._private.rscratch; // can only correct beziers for now...

    if (rs.edgeType === 'bezier') {
      var srcPos = pairInfo.srcPos,
          tgtPos = pairInfo.tgtPos,
          srcW = pairInfo.srcW,
          srcH = pairInfo.srcH,
          tgtW = pairInfo.tgtW,
          tgtH = pairInfo.tgtH,
          srcShape = pairInfo.srcShape,
          tgtShape = pairInfo.tgtShape;
      var badStart = !number(rs.startX) || !number(rs.startY);
      var badAStart = !number(rs.arrowStartX) || !number(rs.arrowStartY);
      var badEnd = !number(rs.endX) || !number(rs.endY);
      var badAEnd = !number(rs.arrowEndX) || !number(rs.arrowEndY);
      var minCpADistFactor = 3;
      var arrowW = this.getArrowWidth(edge.pstyle('width').pfValue, edge.pstyle('arrow-scale').value) * this.arrowShapeWidth;
      var minCpADist = minCpADistFactor * arrowW;
      var startACpDist = dist({
        x: rs.ctrlpts[0],
        y: rs.ctrlpts[1]
      }, {
        x: rs.startX,
        y: rs.startY
      });
      var closeStartACp = startACpDist < minCpADist;
      var endACpDist = dist({
        x: rs.ctrlpts[0],
        y: rs.ctrlpts[1]
      }, {
        x: rs.endX,
        y: rs.endY
      });
      var closeEndACp = endACpDist < minCpADist;
      var overlapping = false;

      if (badStart || badAStart || closeStartACp) {
        overlapping = true; // project control point along line from src centre to outside the src shape
        // (otherwise intersection will yield nothing)

        var cpD = {
          // delta
          x: rs.ctrlpts[0] - srcPos.x,
          y: rs.ctrlpts[1] - srcPos.y
        };
        var cpL = Math.sqrt(cpD.x * cpD.x + cpD.y * cpD.y); // length of line

        var cpM = {
          // normalised delta
          x: cpD.x / cpL,
          y: cpD.y / cpL
        };
        var radius = Math.max(srcW, srcH);
        var cpProj = {
          // *2 radius guarantees outside shape
          x: rs.ctrlpts[0] + cpM.x * 2 * radius,
          y: rs.ctrlpts[1] + cpM.y * 2 * radius
        };
        var srcCtrlPtIntn = srcShape.intersectLine(srcPos.x, srcPos.y, srcW, srcH, cpProj.x, cpProj.y, 0);

        if (closeStartACp) {
          rs.ctrlpts[0] = rs.ctrlpts[0] + cpM.x * (minCpADist - startACpDist);
          rs.ctrlpts[1] = rs.ctrlpts[1] + cpM.y * (minCpADist - startACpDist);
        } else {
          rs.ctrlpts[0] = srcCtrlPtIntn[0] + cpM.x * minCpADist;
          rs.ctrlpts[1] = srcCtrlPtIntn[1] + cpM.y * minCpADist;
        }
      }

      if (badEnd || badAEnd || closeEndACp) {
        overlapping = true; // project control point along line from tgt centre to outside the tgt shape
        // (otherwise intersection will yield nothing)

        var _cpD = {
          // delta
          x: rs.ctrlpts[0] - tgtPos.x,
          y: rs.ctrlpts[1] - tgtPos.y
        };

        var _cpL = Math.sqrt(_cpD.x * _cpD.x + _cpD.y * _cpD.y); // length of line


        var _cpM = {
          // normalised delta
          x: _cpD.x / _cpL,
          y: _cpD.y / _cpL
        };

        var _radius = Math.max(srcW, srcH);

        var _cpProj = {
          // *2 radius guarantees outside shape
          x: rs.ctrlpts[0] + _cpM.x * 2 * _radius,
          y: rs.ctrlpts[1] + _cpM.y * 2 * _radius
        };
        var tgtCtrlPtIntn = tgtShape.intersectLine(tgtPos.x, tgtPos.y, tgtW, tgtH, _cpProj.x, _cpProj.y, 0);

        if (closeEndACp) {
          rs.ctrlpts[0] = rs.ctrlpts[0] + _cpM.x * (minCpADist - endACpDist);
          rs.ctrlpts[1] = rs.ctrlpts[1] + _cpM.y * (minCpADist - endACpDist);
        } else {
          rs.ctrlpts[0] = tgtCtrlPtIntn[0] + _cpM.x * minCpADist;
          rs.ctrlpts[1] = tgtCtrlPtIntn[1] + _cpM.y * minCpADist;
        }
      }

      if (overlapping) {
        // recalc endpts
        this.findEndpoints(edge);
      }
    }
  };

  BRp$3.storeAllpts = function (edge) {
    var rs = edge._private.rscratch;

    if (rs.edgeType === 'multibezier' || rs.edgeType === 'bezier' || rs.edgeType === 'self' || rs.edgeType === 'compound') {
      rs.allpts = [];
      rs.allpts.push(rs.startX, rs.startY);

      for (var b = 0; b + 1 < rs.ctrlpts.length; b += 2) {
        // ctrl pt itself
        rs.allpts.push(rs.ctrlpts[b], rs.ctrlpts[b + 1]); // the midpt between ctrlpts as intermediate destination pts

        if (b + 3 < rs.ctrlpts.length) {
          rs.allpts.push((rs.ctrlpts[b] + rs.ctrlpts[b + 2]) / 2, (rs.ctrlpts[b + 1] + rs.ctrlpts[b + 3]) / 2);
        }
      }

      rs.allpts.push(rs.endX, rs.endY);
      var m, mt;

      if (rs.ctrlpts.length / 2 % 2 === 0) {
        m = rs.allpts.length / 2 - 1;
        rs.midX = rs.allpts[m];
        rs.midY = rs.allpts[m + 1];
      } else {
        m = rs.allpts.length / 2 - 3;
        mt = 0.5;
        rs.midX = qbezierAt(rs.allpts[m], rs.allpts[m + 2], rs.allpts[m + 4], mt);
        rs.midY = qbezierAt(rs.allpts[m + 1], rs.allpts[m + 3], rs.allpts[m + 5], mt);
      }
    } else if (rs.edgeType === 'straight') {
      // need to calc these after endpts
      rs.allpts = [rs.startX, rs.startY, rs.endX, rs.endY]; // default midpt for labels etc

      rs.midX = (rs.startX + rs.endX + rs.arrowStartX + rs.arrowEndX) / 4;
      rs.midY = (rs.startY + rs.endY + rs.arrowStartY + rs.arrowEndY) / 4;
    } else if (rs.edgeType === 'segments') {
      rs.allpts = [];
      rs.allpts.push(rs.startX, rs.startY);
      rs.allpts.push.apply(rs.allpts, rs.segpts);
      rs.allpts.push(rs.endX, rs.endY);

      if (rs.segpts.length % 4 === 0) {
        var i2 = rs.segpts.length / 2;
        var i1 = i2 - 2;
        rs.midX = (rs.segpts[i1] + rs.segpts[i2]) / 2;
        rs.midY = (rs.segpts[i1 + 1] + rs.segpts[i2 + 1]) / 2;
      } else {
        var _i = rs.segpts.length / 2 - 1;

        rs.midX = rs.segpts[_i];
        rs.midY = rs.segpts[_i + 1];
      }
    }
  };

  BRp$3.checkForInvalidEdgeWarning = function (edge) {
    var rs = edge[0]._private.rscratch;

    if (rs.nodesOverlap || number(rs.startX) && number(rs.startY) && number(rs.endX) && number(rs.endY)) {
      rs.loggedErr = false;
    } else {
      if (!rs.loggedErr) {
        rs.loggedErr = true;
        warn('Edge `' + edge.id() + '` has invalid endpoints and so it is impossible to draw.  Adjust your edge style (e.g. control points) accordingly or use an alternative edge type.  This is expected behaviour when the source node and the target node overlap.');
      }
    }
  };

  BRp$3.findEdgeControlPoints = function (edges) {
    var _this = this;

    if (!edges || edges.length === 0) {
      return;
    }

    var r = this;
    var cy = r.cy;
    var hasCompounds = cy.hasCompoundNodes();
    var hashTable = {
      map: new Map$1(),
      get: function get(pairId) {
        var map2 = this.map.get(pairId[0]);

        if (map2 != null) {
          return map2.get(pairId[1]);
        } else {
          return null;
        }
      },
      set: function set(pairId, val) {
        var map2 = this.map.get(pairId[0]);

        if (map2 == null) {
          map2 = new Map$1();
          this.map.set(pairId[0], map2);
        }

        map2.set(pairId[1], val);
      }
    };
    var pairIds = [];
    var haystackEdges = []; // create a table of edge (src, tgt) => list of edges between them

    for (var i = 0; i < edges.length; i++) {
      var edge = edges[i];
      var _p = edge._private;
      var curveStyle = edge.pstyle('curve-style').value; // ignore edges who are not to be displayed
      // they shouldn't take up space

      if (edge.removed() || !edge.takesUpSpace()) {
        continue;
      }

      if (curveStyle === 'haystack') {
        haystackEdges.push(edge);
        continue;
      }

      var edgeIsUnbundled = curveStyle === 'unbundled-bezier' || curveStyle === 'segments' || curveStyle === 'straight' || curveStyle === 'taxi';
      var edgeIsBezier = curveStyle === 'unbundled-bezier' || curveStyle === 'bezier';
      var src = _p.source;
      var tgt = _p.target;
      var srcIndex = src.poolIndex();
      var tgtIndex = tgt.poolIndex();
      var pairId = [srcIndex, tgtIndex].sort();
      var tableEntry = hashTable.get(pairId);

      if (tableEntry == null) {
        tableEntry = {
          eles: []
        };
        hashTable.set(pairId, tableEntry);
        pairIds.push(pairId);
      }

      tableEntry.eles.push(edge);

      if (edgeIsUnbundled) {
        tableEntry.hasUnbundled = true;
      }

      if (edgeIsBezier) {
        tableEntry.hasBezier = true;
      }
    } // for each pair (src, tgt), create the ctrl pts
    // Nested for loop is OK; total number of iterations for both loops = edgeCount


    var _loop = function _loop(p) {
      var pairId = pairIds[p];
      var pairInfo = hashTable.get(pairId);
      var swappedpairInfo = void 0;

      if (!pairInfo.hasUnbundled) {
        var pllEdges = pairInfo.eles[0].parallelEdges().filter(function (e) {
          return e.isBundledBezier();
        });
        clearArray(pairInfo.eles);
        pllEdges.forEach(function (edge) {
          return pairInfo.eles.push(edge);
        }); // for each pair id, the edges should be sorted by index

        pairInfo.eles.sort(function (edge1, edge2) {
          return edge1.poolIndex() - edge2.poolIndex();
        });
      }

      var firstEdge = pairInfo.eles[0];
      var src = firstEdge.source();
      var tgt = firstEdge.target(); // make sure src/tgt distinction is consistent w.r.t. pairId

      if (src.poolIndex() > tgt.poolIndex()) {
        var temp = src;
        src = tgt;
        tgt = temp;
      }

      var srcPos = pairInfo.srcPos = src.position();
      var tgtPos = pairInfo.tgtPos = tgt.position();
      var srcW = pairInfo.srcW = src.outerWidth();
      var srcH = pairInfo.srcH = src.outerHeight();
      var tgtW = pairInfo.tgtW = tgt.outerWidth();
      var tgtH = pairInfo.tgtH = tgt.outerHeight();

      var srcShape = pairInfo.srcShape = r.nodeShapes[_this.getNodeShape(src)];

      var tgtShape = pairInfo.tgtShape = r.nodeShapes[_this.getNodeShape(tgt)];

      pairInfo.dirCounts = {
        'north': 0,
        'west': 0,
        'south': 0,
        'east': 0,
        'northwest': 0,
        'southwest': 0,
        'northeast': 0,
        'southeast': 0
      };

      for (var _i2 = 0; _i2 < pairInfo.eles.length; _i2++) {
        var _edge = pairInfo.eles[_i2];
        var rs = _edge[0]._private.rscratch;

        var _curveStyle = _edge.pstyle('curve-style').value;

        var _edgeIsUnbundled = _curveStyle === 'unbundled-bezier' || _curveStyle === 'segments' || _curveStyle === 'taxi'; // whether the normalised pair order is the reverse of the edge's src-tgt order


        var edgeIsSwapped = !src.same(_edge.source());

        if (!pairInfo.calculatedIntersection && src !== tgt && (pairInfo.hasBezier || pairInfo.hasUnbundled)) {
          pairInfo.calculatedIntersection = true; // pt outside src shape to calc distance/displacement from src to tgt

          var srcOutside = srcShape.intersectLine(srcPos.x, srcPos.y, srcW, srcH, tgtPos.x, tgtPos.y, 0);
          var srcIntn = pairInfo.srcIntn = srcOutside; // pt outside tgt shape to calc distance/displacement from src to tgt

          var tgtOutside = tgtShape.intersectLine(tgtPos.x, tgtPos.y, tgtW, tgtH, srcPos.x, srcPos.y, 0);
          var tgtIntn = pairInfo.tgtIntn = tgtOutside;
          var intersectionPts = pairInfo.intersectionPts = {
            x1: srcOutside[0],
            x2: tgtOutside[0],
            y1: srcOutside[1],
            y2: tgtOutside[1]
          };
          var posPts = pairInfo.posPts = {
            x1: srcPos.x,
            x2: tgtPos.x,
            y1: srcPos.y,
            y2: tgtPos.y
          };
          var dy = tgtOutside[1] - srcOutside[1];
          var dx = tgtOutside[0] - srcOutside[0];
          var l = Math.sqrt(dx * dx + dy * dy);
          var vector = pairInfo.vector = {
            x: dx,
            y: dy
          };
          var vectorNorm = pairInfo.vectorNorm = {
            x: vector.x / l,
            y: vector.y / l
          };
          var vectorNormInverse = {
            x: -vectorNorm.y,
            y: vectorNorm.x
          }; // if node shapes overlap, then no ctrl pts to draw

          pairInfo.nodesOverlap = !number(l) || tgtShape.checkPoint(srcOutside[0], srcOutside[1], 0, tgtW, tgtH, tgtPos.x, tgtPos.y) || srcShape.checkPoint(tgtOutside[0], tgtOutside[1], 0, srcW, srcH, srcPos.x, srcPos.y);
          pairInfo.vectorNormInverse = vectorNormInverse;
          swappedpairInfo = {
            nodesOverlap: pairInfo.nodesOverlap,
            dirCounts: pairInfo.dirCounts,
            calculatedIntersection: true,
            hasBezier: pairInfo.hasBezier,
            hasUnbundled: pairInfo.hasUnbundled,
            eles: pairInfo.eles,
            srcPos: tgtPos,
            tgtPos: srcPos,
            srcW: tgtW,
            srcH: tgtH,
            tgtW: srcW,
            tgtH: srcH,
            srcIntn: tgtIntn,
            tgtIntn: srcIntn,
            srcShape: tgtShape,
            tgtShape: srcShape,
            posPts: {
              x1: posPts.x2,
              y1: posPts.y2,
              x2: posPts.x1,
              y2: posPts.y1
            },
            intersectionPts: {
              x1: intersectionPts.x2,
              y1: intersectionPts.y2,
              x2: intersectionPts.x1,
              y2: intersectionPts.y1
            },
            vector: {
              x: -vector.x,
              y: -vector.y
            },
            vectorNorm: {
              x: -vectorNorm.x,
              y: -vectorNorm.y
            },
            vectorNormInverse: {
              x: -vectorNormInverse.x,
              y: -vectorNormInverse.y
            }
          };
        }

        var passedPairInfo = edgeIsSwapped ? swappedpairInfo : pairInfo;
        rs.nodesOverlap = passedPairInfo.nodesOverlap;
        rs.srcIntn = passedPairInfo.srcIntn;
        rs.tgtIntn = passedPairInfo.tgtIntn;

        if (hasCompounds && (src.isParent() || src.isChild() || tgt.isParent() || tgt.isChild()) && (src.parents().anySame(tgt) || tgt.parents().anySame(src) || src.same(tgt) && src.isParent())) {
          _this.findCompoundLoopPoints(_edge, passedPairInfo, _i2, _edgeIsUnbundled);
        } else if (src === tgt) {
          _this.findLoopPoints(_edge, passedPairInfo, _i2, _edgeIsUnbundled);
        } else if (_curveStyle === 'segments') {
          _this.findSegmentsPoints(_edge, passedPairInfo);
        } else if (_curveStyle === 'taxi') {
          _this.findTaxiPoints(_edge, passedPairInfo);
        } else if (_curveStyle === 'straight' || !_edgeIsUnbundled && pairInfo.eles.length % 2 === 1 && _i2 === Math.floor(pairInfo.eles.length / 2)) {
          _this.findStraightEdgePoints(_edge);
        } else {
          _this.findBezierPoints(_edge, passedPairInfo, _i2, _edgeIsUnbundled, edgeIsSwapped);
        }

        _this.findEndpoints(_edge);

        _this.tryToCorrectInvalidPoints(_edge, passedPairInfo);

        _this.checkForInvalidEdgeWarning(_edge);

        _this.storeAllpts(_edge);

        _this.storeEdgeProjections(_edge);

        _this.calculateArrowAngles(_edge);

        _this.recalculateEdgeLabelProjections(_edge);

        _this.calculateLabelAngles(_edge);
      } // for pair edges

    };

    for (var p = 0; p < pairIds.length; p++) {
      _loop(p);
    } // for pair ids
    // haystacks avoid the expense of pairInfo stuff (intersections etc.)


    this.findHaystackPoints(haystackEdges);
  };

  function getPts(pts) {
    var retPts = [];

    if (pts == null) {
      return;
    }

    for (var i = 0; i < pts.length; i += 2) {
      var x = pts[i];
      var y = pts[i + 1];
      retPts.push({
        x: x,
        y: y
      });
    }

    return retPts;
  }

  BRp$3.getSegmentPoints = function (edge) {
    var rs = edge[0]._private.rscratch;
    var type = rs.edgeType;

    if (type === 'segments') {
      this.recalculateRenderedStyle(edge);
      return getPts(rs.segpts);
    }
  };

  BRp$3.getControlPoints = function (edge) {
    var rs = edge[0]._private.rscratch;
    var type = rs.edgeType;

    if (type === 'bezier' || type === 'multibezier' || type === 'self' || type === 'compound') {
      this.recalculateRenderedStyle(edge);
      return getPts(rs.ctrlpts);
    }
  };

  BRp$3.getEdgeMidpoint = function (edge) {
    var rs = edge[0]._private.rscratch;
    this.recalculateRenderedStyle(edge);
    return {
      x: rs.midX,
      y: rs.midY
    };
  };

  var BRp$4 = {};

  BRp$4.manualEndptToPx = function (node, prop) {
    var r = this;
    var npos = node.position();
    var w = node.outerWidth();
    var h = node.outerHeight();

    if (prop.value.length === 2) {
      var p = [prop.pfValue[0], prop.pfValue[1]];

      if (prop.units[0] === '%') {
        p[0] = p[0] * w;
      }

      if (prop.units[1] === '%') {
        p[1] = p[1] * h;
      }

      p[0] += npos.x;
      p[1] += npos.y;
      return p;
    } else {
      var angle = prop.pfValue[0];
      angle = -Math.PI / 2 + angle; // start at 12 o'clock

      var l = 2 * Math.max(w, h);
      var _p = [npos.x + Math.cos(angle) * l, npos.y + Math.sin(angle) * l];
      return r.nodeShapes[this.getNodeShape(node)].intersectLine(npos.x, npos.y, w, h, _p[0], _p[1], 0);
    }
  };

  BRp$4.findEndpoints = function (edge) {
    var r = this;
    var intersect;
    var source = edge.source()[0];
    var target = edge.target()[0];
    var srcPos = source.position();
    var tgtPos = target.position();
    var tgtArShape = edge.pstyle('target-arrow-shape').value;
    var srcArShape = edge.pstyle('source-arrow-shape').value;
    var tgtDist = edge.pstyle('target-distance-from-node').pfValue;
    var srcDist = edge.pstyle('source-distance-from-node').pfValue;
    var curveStyle = edge.pstyle('curve-style').value;
    var rs = edge._private.rscratch;
    var et = rs.edgeType;
    var taxi = curveStyle === 'taxi';
    var self = et === 'self' || et === 'compound';
    var bezier = et === 'bezier' || et === 'multibezier' || self;
    var multi = et !== 'bezier';
    var lines = et === 'straight' || et === 'segments';
    var segments = et === 'segments';
    var hasEndpts = bezier || multi || lines;
    var overrideEndpts = self || taxi;
    var srcManEndpt = edge.pstyle('source-endpoint');
    var srcManEndptVal = overrideEndpts ? 'outside-to-node' : srcManEndpt.value;
    var tgtManEndpt = edge.pstyle('target-endpoint');
    var tgtManEndptVal = overrideEndpts ? 'outside-to-node' : tgtManEndpt.value;
    rs.srcManEndpt = srcManEndpt;
    rs.tgtManEndpt = tgtManEndpt;
    var p1; // last known point of edge on target side

    var p2; // last known point of edge on source side

    var p1_i; // point to intersect with target shape

    var p2_i; // point to intersect with source shape

    if (bezier) {
      var cpStart = [rs.ctrlpts[0], rs.ctrlpts[1]];
      var cpEnd = multi ? [rs.ctrlpts[rs.ctrlpts.length - 2], rs.ctrlpts[rs.ctrlpts.length - 1]] : cpStart;
      p1 = cpEnd;
      p2 = cpStart;
    } else if (lines) {
      var srcArrowFromPt = !segments ? [tgtPos.x, tgtPos.y] : rs.segpts.slice(0, 2);
      var tgtArrowFromPt = !segments ? [srcPos.x, srcPos.y] : rs.segpts.slice(rs.segpts.length - 2);
      p1 = tgtArrowFromPt;
      p2 = srcArrowFromPt;
    }

    if (tgtManEndptVal === 'inside-to-node') {
      intersect = [tgtPos.x, tgtPos.y];
    } else if (tgtManEndpt.units) {
      intersect = this.manualEndptToPx(target, tgtManEndpt);
    } else if (tgtManEndptVal === 'outside-to-line') {
      intersect = rs.tgtIntn; // use cached value from ctrlpt calc
    } else {
      if (tgtManEndptVal === 'outside-to-node' || tgtManEndptVal === 'outside-to-node-or-label') {
        p1_i = p1;
      } else if (tgtManEndptVal === 'outside-to-line' || tgtManEndptVal === 'outside-to-line-or-label') {
        p1_i = [srcPos.x, srcPos.y];
      }

      intersect = r.nodeShapes[this.getNodeShape(target)].intersectLine(tgtPos.x, tgtPos.y, target.outerWidth(), target.outerHeight(), p1_i[0], p1_i[1], 0);

      if (tgtManEndptVal === 'outside-to-node-or-label' || tgtManEndptVal === 'outside-to-line-or-label') {
        var trs = target._private.rscratch;
        var lw = trs.labelWidth;
        var lh = trs.labelHeight;
        var lx = trs.labelX;
        var ly = trs.labelY;
        var lw2 = lw / 2;
        var lh2 = lh / 2;
        var va = target.pstyle('text-valign').value;

        if (va === 'top') {
          ly -= lh2;
        } else if (va === 'bottom') {
          ly += lh2;
        }

        var ha = target.pstyle('text-halign').value;

        if (ha === 'left') {
          lx -= lw2;
        } else if (ha === 'right') {
          lx += lw2;
        }

        var labelIntersect = polygonIntersectLine(p1_i[0], p1_i[1], [lx - lw2, ly - lh2, lx + lw2, ly - lh2, lx + lw2, ly + lh2, lx - lw2, ly + lh2], tgtPos.x, tgtPos.y);

        if (labelIntersect.length > 0) {
          var refPt = srcPos;
          var intSqdist = sqdist(refPt, array2point(intersect));
          var labIntSqdist = sqdist(refPt, array2point(labelIntersect));
          var minSqDist = intSqdist;

          if (labIntSqdist < intSqdist) {
            intersect = labelIntersect;
            minSqDist = labIntSqdist;
          }

          if (labelIntersect.length > 2) {
            var labInt2SqDist = sqdist(refPt, {
              x: labelIntersect[2],
              y: labelIntersect[3]
            });

            if (labInt2SqDist < minSqDist) {
              intersect = [labelIntersect[2], labelIntersect[3]];
            }
          }
        }
      }
    }

    var arrowEnd = shortenIntersection(intersect, p1, r.arrowShapes[tgtArShape].spacing(edge) + tgtDist);
    var edgeEnd = shortenIntersection(intersect, p1, r.arrowShapes[tgtArShape].gap(edge) + tgtDist);
    rs.endX = edgeEnd[0];
    rs.endY = edgeEnd[1];
    rs.arrowEndX = arrowEnd[0];
    rs.arrowEndY = arrowEnd[1];

    if (srcManEndptVal === 'inside-to-node') {
      intersect = [srcPos.x, srcPos.y];
    } else if (srcManEndpt.units) {
      intersect = this.manualEndptToPx(source, srcManEndpt);
    } else if (srcManEndptVal === 'outside-to-line') {
      intersect = rs.srcIntn; // use cached value from ctrlpt calc
    } else {
      if (srcManEndptVal === 'outside-to-node' || srcManEndptVal === 'outside-to-node-or-label') {
        p2_i = p2;
      } else if (srcManEndptVal === 'outside-to-line' || srcManEndptVal === 'outside-to-line-or-label') {
        p2_i = [tgtPos.x, tgtPos.y];
      }

      intersect = r.nodeShapes[this.getNodeShape(source)].intersectLine(srcPos.x, srcPos.y, source.outerWidth(), source.outerHeight(), p2_i[0], p2_i[1], 0);

      if (srcManEndptVal === 'outside-to-node-or-label' || srcManEndptVal === 'outside-to-line-or-label') {
        var srs = source._private.rscratch;
        var _lw = srs.labelWidth;
        var _lh = srs.labelHeight;
        var _lx = srs.labelX;
        var _ly = srs.labelY;

        var _lw2 = _lw / 2;

        var _lh2 = _lh / 2;

        var _va = source.pstyle('text-valign').value;

        if (_va === 'top') {
          _ly -= _lh2;
        } else if (_va === 'bottom') {
          _ly += _lh2;
        }

        var _ha = source.pstyle('text-halign').value;

        if (_ha === 'left') {
          _lx -= _lw2;
        } else if (_ha === 'right') {
          _lx += _lw2;
        }

        var _labelIntersect = polygonIntersectLine(p2_i[0], p2_i[1], [_lx - _lw2, _ly - _lh2, _lx + _lw2, _ly - _lh2, _lx + _lw2, _ly + _lh2, _lx - _lw2, _ly + _lh2], srcPos.x, srcPos.y);

        if (_labelIntersect.length > 0) {
          var _refPt = tgtPos;

          var _intSqdist = sqdist(_refPt, array2point(intersect));

          var _labIntSqdist = sqdist(_refPt, array2point(_labelIntersect));

          var _minSqDist = _intSqdist;

          if (_labIntSqdist < _intSqdist) {
            intersect = [_labelIntersect[0], _labelIntersect[1]];
            _minSqDist = _labIntSqdist;
          }

          if (_labelIntersect.length > 2) {
            var _labInt2SqDist = sqdist(_refPt, {
              x: _labelIntersect[2],
              y: _labelIntersect[3]
            });

            if (_labInt2SqDist < _minSqDist) {
              intersect = [_labelIntersect[2], _labelIntersect[3]];
            }
          }
        }
      }
    }

    var arrowStart = shortenIntersection(intersect, p2, r.arrowShapes[srcArShape].spacing(edge) + srcDist);
    var edgeStart = shortenIntersection(intersect, p2, r.arrowShapes[srcArShape].gap(edge) + srcDist);
    rs.startX = edgeStart[0];
    rs.startY = edgeStart[1];
    rs.arrowStartX = arrowStart[0];
    rs.arrowStartY = arrowStart[1];

    if (hasEndpts) {
      if (!number(rs.startX) || !number(rs.startY) || !number(rs.endX) || !number(rs.endY)) {
        rs.badLine = true;
      } else {
        rs.badLine = false;
      }
    }
  };

  BRp$4.getSourceEndpoint = function (edge) {
    var rs = edge[0]._private.rscratch;
    this.recalculateRenderedStyle(edge);

    switch (rs.edgeType) {
      case 'haystack':
        return {
          x: rs.haystackPts[0],
          y: rs.haystackPts[1]
        };

      default:
        return {
          x: rs.arrowStartX,
          y: rs.arrowStartY
        };
    }
  };

  BRp$4.getTargetEndpoint = function (edge) {
    var rs = edge[0]._private.rscratch;
    this.recalculateRenderedStyle(edge);

    switch (rs.edgeType) {
      case 'haystack':
        return {
          x: rs.haystackPts[2],
          y: rs.haystackPts[3]
        };

      default:
        return {
          x: rs.arrowEndX,
          y: rs.arrowEndY
        };
    }
  };

  var BRp$5 = {};

  function pushBezierPts(r, edge, pts) {
    var qbezierAt$1 = function qbezierAt$1(p1, p2, p3, t) {
      return qbezierAt(p1, p2, p3, t);
    };

    var _p = edge._private;
    var bpts = _p.rstyle.bezierPts;

    for (var i = 0; i < r.bezierProjPcts.length; i++) {
      var p = r.bezierProjPcts[i];
      bpts.push({
        x: qbezierAt$1(pts[0], pts[2], pts[4], p),
        y: qbezierAt$1(pts[1], pts[3], pts[5], p)
      });
    }
  }

  BRp$5.storeEdgeProjections = function (edge) {
    var _p = edge._private;
    var rs = _p.rscratch;
    var et = rs.edgeType; // clear the cached points state

    _p.rstyle.bezierPts = null;
    _p.rstyle.linePts = null;
    _p.rstyle.haystackPts = null;

    if (et === 'multibezier' || et === 'bezier' || et === 'self' || et === 'compound') {
      _p.rstyle.bezierPts = [];

      for (var i = 0; i + 5 < rs.allpts.length; i += 4) {
        pushBezierPts(this, edge, rs.allpts.slice(i, i + 6));
      }
    } else if (et === 'segments') {
      var lpts = _p.rstyle.linePts = [];

      for (var i = 0; i + 1 < rs.allpts.length; i += 2) {
        lpts.push({
          x: rs.allpts[i],
          y: rs.allpts[i + 1]
        });
      }
    } else if (et === 'haystack') {
      var hpts = rs.haystackPts;
      _p.rstyle.haystackPts = [{
        x: hpts[0],
        y: hpts[1]
      }, {
        x: hpts[2],
        y: hpts[3]
      }];
    }

    _p.rstyle.arrowWidth = this.getArrowWidth(edge.pstyle('width').pfValue, edge.pstyle('arrow-scale').value) * this.arrowShapeWidth;
  };

  BRp$5.recalculateEdgeProjections = function (edges) {
    this.findEdgeControlPoints(edges);
  };

  var BRp$6 = {};

  BRp$6.recalculateNodeLabelProjection = function (node) {
    var content = node.pstyle('label').strValue;

    if (emptyString(content)) {
      return;
    }

    var textX, textY;
    var _p = node._private;
    var nodeWidth = node.width();
    var nodeHeight = node.height();
    var padding = node.padding();
    var nodePos = node.position();
    var textHalign = node.pstyle('text-halign').strValue;
    var textValign = node.pstyle('text-valign').strValue;
    var rs = _p.rscratch;
    var rstyle = _p.rstyle;

    switch (textHalign) {
      case 'left':
        textX = nodePos.x - nodeWidth / 2 - padding;
        break;

      case 'right':
        textX = nodePos.x + nodeWidth / 2 + padding;
        break;

      default:
        // e.g. center
        textX = nodePos.x;
    }

    switch (textValign) {
      case 'top':
        textY = nodePos.y - nodeHeight / 2 - padding;
        break;

      case 'bottom':
        textY = nodePos.y + nodeHeight / 2 + padding;
        break;

      default:
        // e.g. middle
        textY = nodePos.y;
    }

    rs.labelX = textX;
    rs.labelY = textY;
    rstyle.labelX = textX;
    rstyle.labelY = textY;
    this.applyLabelDimensions(node);
  };

  var lineAngleFromDelta = function lineAngleFromDelta(dx, dy) {
    var angle = Math.atan(dy / dx);

    if (dx === 0 && angle < 0) {
      angle = angle * -1;
    }

    return angle;
  };

  var lineAngle = function lineAngle(p0, p1) {
    var dx = p1.x - p0.x;
    var dy = p1.y - p0.y;
    return lineAngleFromDelta(dx, dy);
  };

  var bezierAngle = function bezierAngle(p0, p1, p2, t) {
    var t0 = bound(0, t - 0.001, 1);
    var t1 = bound(0, t + 0.001, 1);
    var lp0 = qbezierPtAt(p0, p1, p2, t0);
    var lp1 = qbezierPtAt(p0, p1, p2, t1);
    return lineAngle(lp0, lp1);
  };

  BRp$6.recalculateEdgeLabelProjections = function (edge) {
    var p;
    var _p = edge._private;
    var rs = _p.rscratch;
    var r = this;
    var content = {
      mid: edge.pstyle('label').strValue,
      source: edge.pstyle('source-label').strValue,
      target: edge.pstyle('target-label').strValue
    };

    if (content.mid || content.source || content.target) ; else {
        return; // no labels => no calcs
      } // add center point to style so bounding box calculations can use it
    //


    p = {
      x: rs.midX,
      y: rs.midY
    };

    var setRs = function setRs(propName, prefix, value) {
      setPrefixedProperty(_p.rscratch, propName, prefix, value);
      setPrefixedProperty(_p.rstyle, propName, prefix, value);
    };

    setRs('labelX', null, p.x);
    setRs('labelY', null, p.y);
    var midAngle = lineAngleFromDelta(rs.midDispX, rs.midDispY);
    setRs('labelAutoAngle', null, midAngle);

    var createControlPointInfo = function createControlPointInfo() {
      if (createControlPointInfo.cache) {
        return createControlPointInfo.cache;
      } // use cache so only 1x per edge


      var ctrlpts = []; // store each ctrlpt info init

      for (var i = 0; i + 5 < rs.allpts.length; i += 4) {
        var p0 = {
          x: rs.allpts[i],
          y: rs.allpts[i + 1]
        };
        var p1 = {
          x: rs.allpts[i + 2],
          y: rs.allpts[i + 3]
        }; // ctrlpt

        var p2 = {
          x: rs.allpts[i + 4],
          y: rs.allpts[i + 5]
        };
        ctrlpts.push({
          p0: p0,
          p1: p1,
          p2: p2,
          startDist: 0,
          length: 0,
          segments: []
        });
      }

      var bpts = _p.rstyle.bezierPts;
      var nProjs = r.bezierProjPcts.length;

      function addSegment(cp, p0, p1, t0, t1) {
        var length = dist(p0, p1);
        var prevSegment = cp.segments[cp.segments.length - 1];
        var segment = {
          p0: p0,
          p1: p1,
          t0: t0,
          t1: t1,
          startDist: prevSegment ? prevSegment.startDist + prevSegment.length : 0,
          length: length
        };
        cp.segments.push(segment);
        cp.length += length;
      } // update each ctrlpt with segment info


      for (var _i = 0; _i < ctrlpts.length; _i++) {
        var cp = ctrlpts[_i];
        var prevCp = ctrlpts[_i - 1];

        if (prevCp) {
          cp.startDist = prevCp.startDist + prevCp.length;
        }

        addSegment(cp, cp.p0, bpts[_i * nProjs], 0, r.bezierProjPcts[0]); // first

        for (var j = 0; j < nProjs - 1; j++) {
          addSegment(cp, bpts[_i * nProjs + j], bpts[_i * nProjs + j + 1], r.bezierProjPcts[j], r.bezierProjPcts[j + 1]);
        }

        addSegment(cp, bpts[_i * nProjs + nProjs - 1], cp.p2, r.bezierProjPcts[nProjs - 1], 1); // last
      }

      return createControlPointInfo.cache = ctrlpts;
    };

    var calculateEndProjection = function calculateEndProjection(prefix) {
      var angle;
      var isSrc = prefix === 'source';

      if (!content[prefix]) {
        return;
      }

      var offset = edge.pstyle(prefix + '-text-offset').pfValue;

      switch (rs.edgeType) {
        case 'self':
        case 'compound':
        case 'bezier':
        case 'multibezier':
          {
            var cps = createControlPointInfo();
            var selected;
            var startDist = 0;
            var totalDist = 0; // find the segment we're on

            for (var i = 0; i < cps.length; i++) {
              var _cp = cps[isSrc ? i : cps.length - 1 - i];

              for (var j = 0; j < _cp.segments.length; j++) {
                var _seg = _cp.segments[isSrc ? j : _cp.segments.length - 1 - j];
                var lastSeg = i === cps.length - 1 && j === _cp.segments.length - 1;
                startDist = totalDist;
                totalDist += _seg.length;

                if (totalDist >= offset || lastSeg) {
                  selected = {
                    cp: _cp,
                    segment: _seg
                  };
                  break;
                }
              }

              if (selected) {
                break;
              }
            }

            var cp = selected.cp;
            var seg = selected.segment;
            var tSegment = (offset - startDist) / seg.length;
            var segDt = seg.t1 - seg.t0;
            var t = isSrc ? seg.t0 + segDt * tSegment : seg.t1 - segDt * tSegment;
            t = bound(0, t, 1);
            p = qbezierPtAt(cp.p0, cp.p1, cp.p2, t);
            angle = bezierAngle(cp.p0, cp.p1, cp.p2, t);
            break;
          }

        case 'straight':
        case 'segments':
        case 'haystack':
          {
            var d = 0,
                di,
                d0;
            var p0, p1;
            var l = rs.allpts.length;

            for (var _i2 = 0; _i2 + 3 < l; _i2 += 2) {
              if (isSrc) {
                p0 = {
                  x: rs.allpts[_i2],
                  y: rs.allpts[_i2 + 1]
                };
                p1 = {
                  x: rs.allpts[_i2 + 2],
                  y: rs.allpts[_i2 + 3]
                };
              } else {
                p0 = {
                  x: rs.allpts[l - 2 - _i2],
                  y: rs.allpts[l - 1 - _i2]
                };
                p1 = {
                  x: rs.allpts[l - 4 - _i2],
                  y: rs.allpts[l - 3 - _i2]
                };
              }

              di = dist(p0, p1);
              d0 = d;
              d += di;

              if (d >= offset) {
                break;
              }
            }

            var pD = offset - d0;

            var _t = pD / di;

            _t = bound(0, _t, 1);
            p = lineAt(p0, p1, _t);
            angle = lineAngle(p0, p1);
            break;
          }
      }

      setRs('labelX', prefix, p.x);
      setRs('labelY', prefix, p.y);
      setRs('labelAutoAngle', prefix, angle);
    };

    calculateEndProjection('source');
    calculateEndProjection('target');
    this.applyLabelDimensions(edge);
  };

  BRp$6.applyLabelDimensions = function (ele) {
    this.applyPrefixedLabelDimensions(ele);

    if (ele.isEdge()) {
      this.applyPrefixedLabelDimensions(ele, 'source');
      this.applyPrefixedLabelDimensions(ele, 'target');
    }
  };

  BRp$6.applyPrefixedLabelDimensions = function (ele, prefix) {
    var _p = ele._private;
    var text = this.getLabelText(ele, prefix);
    var labelDims = this.calculateLabelDimensions(ele, text);
    var lineHeight = ele.pstyle('line-height').pfValue;
    var textWrap = ele.pstyle('text-wrap').strValue;
    var lines = getPrefixedProperty(_p.rscratch, 'labelWrapCachedLines', prefix) || [];
    var numLines = textWrap !== 'wrap' ? 1 : Math.max(lines.length, 1);
    var normPerLineHeight = labelDims.height / numLines;
    var labelLineHeight = normPerLineHeight * lineHeight;
    var width = labelDims.width;
    var height = labelDims.height + (numLines - 1) * (lineHeight - 1) * normPerLineHeight;
    setPrefixedProperty(_p.rstyle, 'labelWidth', prefix, width);
    setPrefixedProperty(_p.rscratch, 'labelWidth', prefix, width);
    setPrefixedProperty(_p.rstyle, 'labelHeight', prefix, height);
    setPrefixedProperty(_p.rscratch, 'labelHeight', prefix, height);
    setPrefixedProperty(_p.rscratch, 'labelLineHeight', prefix, labelLineHeight);
  };

  BRp$6.getLabelText = function (ele, prefix) {
    var _p = ele._private;
    var pfd = prefix ? prefix + '-' : '';
    var text = ele.pstyle(pfd + 'label').strValue;
    var textTransform = ele.pstyle('text-transform').value;

    var rscratch = function rscratch(propName, value) {
      if (value) {
        setPrefixedProperty(_p.rscratch, propName, prefix, value);
        return value;
      } else {
        return getPrefixedProperty(_p.rscratch, propName, prefix);
      }
    }; // for empty text, skip all processing


    if (!text) {
      return '';
    }

    if (textTransform == 'none') ; else if (textTransform == 'uppercase') {
      text = text.toUpperCase();
    } else if (textTransform == 'lowercase') {
      text = text.toLowerCase();
    }

    var wrapStyle = ele.pstyle('text-wrap').value;

    if (wrapStyle === 'wrap') {
      var labelKey = rscratch('labelKey'); // save recalc if the label is the same as before

      if (labelKey != null && rscratch('labelWrapKey') === labelKey) {
        return rscratch('labelWrapCachedText');
      }

      var zwsp = "\u200B";
      var lines = text.split('\n');
      var maxW = ele.pstyle('text-max-width').pfValue;
      var overflow = ele.pstyle('text-overflow-wrap').value;
      var overflowAny = overflow === 'anywhere';
      var wrappedLines = [];
      var wordsRegex = /[\s\u200b]+/;
      var wordSeparator = overflowAny ? '' : ' ';

      for (var l = 0; l < lines.length; l++) {
        var line = lines[l];
        var lineDims = this.calculateLabelDimensions(ele, line);
        var lineW = lineDims.width;

        if (overflowAny) {
          var processedLine = line.split('').join(zwsp);
          line = processedLine;
        }

        if (lineW > maxW) {
          // line is too long
          var words = line.split(wordsRegex);
          var subline = '';

          for (var w = 0; w < words.length; w++) {
            var word = words[w];
            var testLine = subline.length === 0 ? word : subline + wordSeparator + word;
            var testDims = this.calculateLabelDimensions(ele, testLine);
            var testW = testDims.width;

            if (testW <= maxW) {
              // word fits on current line
              subline += word + wordSeparator;
            } else {
              // word starts new line
              if (subline) {
                wrappedLines.push(subline);
              }

              subline = word + wordSeparator;
            }
          } // if there's remaining text, put it in a wrapped line


          if (!subline.match(/^[\s\u200b]+$/)) {
            wrappedLines.push(subline);
          }
        } else {
          // line is already short enough
          wrappedLines.push(line);
        }
      } // for


      rscratch('labelWrapCachedLines', wrappedLines);
      text = rscratch('labelWrapCachedText', wrappedLines.join('\n'));
      rscratch('labelWrapKey', labelKey);
    } else if (wrapStyle === 'ellipsis') {
      var _maxW = ele.pstyle('text-max-width').pfValue;
      var ellipsized = '';
      var ellipsis = "\u2026";
      var incLastCh = false;

      for (var i = 0; i < text.length; i++) {
        var widthWithNextCh = this.calculateLabelDimensions(ele, ellipsized + text[i] + ellipsis).width;

        if (widthWithNextCh > _maxW) {
          break;
        }

        ellipsized += text[i];

        if (i === text.length - 1) {
          incLastCh = true;
        }
      }

      if (!incLastCh) {
        ellipsized += ellipsis;
      }

      return ellipsized;
    } // if ellipsize


    return text;
  };

  BRp$6.getLabelJustification = function (ele) {
    var justification = ele.pstyle('text-justification').strValue;
    var textHalign = ele.pstyle('text-halign').strValue;

    if (justification === 'auto') {
      if (ele.isNode()) {
        switch (textHalign) {
          case 'left':
            return 'right';

          case 'right':
            return 'left';

          default:
            return 'center';
        }
      } else {
        return 'center';
      }
    } else {
      return justification;
    }
  };

  BRp$6.calculateLabelDimensions = function (ele, text) {
    var r = this;
    var cacheKey = hashString(text, ele._private.labelDimsKey);
    var cache = r.labelDimCache || (r.labelDimCache = []);
    var existingVal = cache[cacheKey];

    if (existingVal != null) {
      return existingVal;
    }

    var sizeMult = 1; // increase the scale to increase accuracy w.r.t. zoomed text

    var fStyle = ele.pstyle('font-style').strValue;
    var size = sizeMult * ele.pstyle('font-size').pfValue + 'px';
    var family = ele.pstyle('font-family').strValue;
    var weight = ele.pstyle('font-weight').strValue;
    var div = this.labelCalcDiv;

    if (!div) {
      div = this.labelCalcDiv = document.createElement('div'); // eslint-disable-line no-undef

      document.body.appendChild(div); // eslint-disable-line no-undef
    }

    var ds = div.style; // from ele style

    ds.fontFamily = family;
    ds.fontStyle = fStyle;
    ds.fontSize = size;
    ds.fontWeight = weight; // forced style

    ds.position = 'absolute';
    ds.left = '-9999px';
    ds.top = '-9999px';
    ds.zIndex = '-1';
    ds.visibility = 'hidden';
    ds.pointerEvents = 'none';
    ds.padding = '0';
    ds.lineHeight = '1'; // - newlines must be taken into account for text-wrap:wrap
    // - since spaces are not collapsed, each space must be taken into account

    ds.whiteSpace = 'pre'; // put label content in div

    div.textContent = text;
    return cache[cacheKey] = {
      width: Math.ceil(div.clientWidth / sizeMult),
      height: Math.ceil(div.clientHeight / sizeMult)
    };
  };

  BRp$6.calculateLabelAngle = function (ele, prefix) {
    var _p = ele._private;
    var rs = _p.rscratch;
    var isEdge = ele.isEdge();
    var prefixDash = prefix ? prefix + '-' : '';
    var rot = ele.pstyle(prefixDash + 'text-rotation');
    var rotStr = rot.strValue;

    if (rotStr === 'none') {
      return 0;
    } else if (isEdge && rotStr === 'autorotate') {
      return rs.labelAutoAngle;
    } else if (rotStr === 'autorotate') {
      return 0;
    } else {
      return rot.pfValue;
    }
  };

  BRp$6.calculateLabelAngles = function (ele) {
    var r = this;
    var isEdge = ele.isEdge();
    var _p = ele._private;
    var rs = _p.rscratch;
    rs.labelAngle = r.calculateLabelAngle(ele);

    if (isEdge) {
      rs.sourceLabelAngle = r.calculateLabelAngle(ele, 'source');
      rs.targetLabelAngle = r.calculateLabelAngle(ele, 'target');
    }
  };

  var BRp$7 = {};
  var TOO_SMALL_CUT_RECT = 28;
  var warnedCutRect = false;

  BRp$7.getNodeShape = function (node) {
    var r = this;
    var shape = node.pstyle('shape').value;

    if (shape === 'cutrectangle' && (node.width() < TOO_SMALL_CUT_RECT || node.height() < TOO_SMALL_CUT_RECT)) {
      if (!warnedCutRect) {
        warn('The `cutrectangle` node shape can not be used at small sizes so `rectangle` is used instead');
        warnedCutRect = true;
      }

      return 'rectangle';
    }

    if (node.isParent()) {
      if (shape === 'rectangle' || shape === 'roundrectangle' || shape === 'cutrectangle' || shape === 'barrel') {
        return shape;
      } else {
        return 'rectangle';
      }
    }

    if (shape === 'polygon') {
      var points = node.pstyle('shape-polygon-points').value;
      return r.nodeShapes.makePolygon(points).name;
    }

    return shape;
  };

  var BRp$8 = {};

  BRp$8.registerCalculationListeners = function () {
    var cy = this.cy;
    var elesToUpdate = cy.collection();
    var r = this;

    var enqueue = function enqueue(eles) {
      var dirtyStyleCaches = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      elesToUpdate.merge(eles);

      if (dirtyStyleCaches) {
        for (var i = 0; i < eles.length; i++) {
          var ele = eles[i];
          var _p = ele._private;
          var rstyle = _p.rstyle;
          rstyle.clean = false;
          rstyle.cleanConnected = false;
        }
      }
    };

    r.binder(cy).on('bounds.* dirty.*', function onDirtyBounds(e) {
      var ele = e.target;
      enqueue(ele);
    }).on('style.* background.*', function onDirtyStyle(e) {
      var ele = e.target;
      enqueue(ele, false);
    });

    var updateEleCalcs = function updateEleCalcs(willDraw) {
      if (willDraw) {
        var fns = r.onUpdateEleCalcsFns;

        for (var i = 0; i < elesToUpdate.length; i++) {
          var ele = elesToUpdate[i];
          var rstyle = ele._private.rstyle;

          if (ele.isNode() && !rstyle.cleanConnected) {
            enqueue(ele.connectedEdges());
            rstyle.cleanConnected = true;
          }
        }

        if (fns) {
          for (var _i = 0; _i < fns.length; _i++) {
            var fn = fns[_i];
            fn(willDraw, elesToUpdate);
          }
        }

        r.recalculateRenderedStyle(elesToUpdate);
        elesToUpdate = cy.collection();
      }
    };

    r.flushRenderedStyleQueue = function () {
      updateEleCalcs(true);
    };

    r.beforeRender(updateEleCalcs, r.beforeRenderPriorities.eleCalcs);
  };

  BRp$8.onUpdateEleCalcs = function (fn) {
    var fns = this.onUpdateEleCalcsFns = this.onUpdateEleCalcsFns || [];
    fns.push(fn);
  };

  BRp$8.recalculateRenderedStyle = function (eles, useCache) {
    var isCleanConnected = function isCleanConnected(ele) {
      return ele._private.rstyle.cleanConnected;
    };

    var edges = [];
    var nodes = []; // the renderer can't be used for calcs when destroyed, e.g. ele.boundingBox()

    if (this.destroyed) {
      return;
    } // use cache by default for perf


    if (useCache === undefined) {
      useCache = true;
    }

    for (var i = 0; i < eles.length; i++) {
      var ele = eles[i];
      var _p = ele._private;
      var rstyle = _p.rstyle; // an edge may be implicitly dirty b/c of one of its connected nodes
      // (and a request for recalc may come in between frames)

      if (ele.isEdge() && (!isCleanConnected(ele.source()) || !isCleanConnected(ele.target()))) {
        rstyle.clean = false;
      } // only update if dirty and in graph


      if (useCache && rstyle.clean || ele.removed()) {
        continue;
      } // only update if not display: none


      if (ele.pstyle('display').value === 'none') {
        continue;
      }

      if (_p.group === 'nodes') {
        nodes.push(ele);
      } else {
        // edges
        edges.push(ele);
      }

      rstyle.clean = true;
    } // update node data from projections


    for (var _i2 = 0; _i2 < nodes.length; _i2++) {
      var _ele = nodes[_i2];
      var _p2 = _ele._private;
      var _rstyle = _p2.rstyle;

      var pos = _ele.position();

      this.recalculateNodeLabelProjection(_ele);
      _rstyle.nodeX = pos.x;
      _rstyle.nodeY = pos.y;
      _rstyle.nodeW = _ele.pstyle('width').pfValue;
      _rstyle.nodeH = _ele.pstyle('height').pfValue;
    }

    this.recalculateEdgeProjections(edges); // update edge data from projections

    for (var _i3 = 0; _i3 < edges.length; _i3++) {
      var _ele2 = edges[_i3];
      var _p3 = _ele2._private;
      var _rstyle2 = _p3.rstyle;
      var rs = _p3.rscratch; // update rstyle positions

      _rstyle2.srcX = rs.arrowStartX;
      _rstyle2.srcY = rs.arrowStartY;
      _rstyle2.tgtX = rs.arrowEndX;
      _rstyle2.tgtY = rs.arrowEndY;
      _rstyle2.midX = rs.midX;
      _rstyle2.midY = rs.midY;
      _rstyle2.labelAngle = rs.labelAngle;
      _rstyle2.sourceLabelAngle = rs.sourceLabelAngle;
      _rstyle2.targetLabelAngle = rs.targetLabelAngle;
    }
  };

  var BRp$9 = {};

  BRp$9.updateCachedGrabbedEles = function () {
    var eles = this.cachedZSortedEles;

    if (!eles) {
      // just let this be recalculated on the next z sort tick
      return;
    }

    eles.drag = [];
    eles.nondrag = [];
    var grabTargets = [];

    for (var i = 0; i < eles.length; i++) {
      var ele = eles[i];
      var rs = ele._private.rscratch;

      if (ele.grabbed() && !ele.isParent()) {
        grabTargets.push(ele);
      } else if (rs.inDragLayer) {
        eles.drag.push(ele);
      } else {
        eles.nondrag.push(ele);
      }
    } // put the grab target nodes last so it's on top of its neighbourhood


    for (var i = 0; i < grabTargets.length; i++) {
      var ele = grabTargets[i];
      eles.drag.push(ele);
    }
  };

  BRp$9.invalidateCachedZSortedEles = function () {
    this.cachedZSortedEles = null;
  };

  BRp$9.getCachedZSortedEles = function (forceRecalc) {
    if (forceRecalc || !this.cachedZSortedEles) {
      var eles = this.cy.mutableElements().toArray();
      eles.sort(zIndexSort);
      eles.interactive = eles.filter(function (ele) {
        return ele.interactive();
      });
      this.cachedZSortedEles = eles;
      this.updateCachedGrabbedEles();
    } else {
      eles = this.cachedZSortedEles;
    }

    return eles;
  };

  var BRp$a = {};
  [BRp$1, BRp$2, BRp$3, BRp$4, BRp$5, BRp$6, BRp$7, BRp$8, BRp$9].forEach(function (props) {
    extend(BRp$a, props);
  });

  var BRp$b = {};

  BRp$b.getCachedImage = function (url, crossOrigin, onLoad) {
    var r = this;
    var imageCache = r.imageCache = r.imageCache || {};
    var cache = imageCache[url];

    if (cache) {
      if (!cache.image.complete) {
        cache.image.addEventListener('load', onLoad);
      }

      return cache.image;
    } else {
      cache = imageCache[url] = imageCache[url] || {};
      var image = cache.image = new Image(); // eslint-disable-line no-undef

      image.addEventListener('load', onLoad);
      image.addEventListener('error', function () {
        image.error = true;
      }); // #1582 safari doesn't load data uris with crossOrigin properly
      // https://bugs.webkit.org/show_bug.cgi?id=123978

      var dataUriPrefix = 'data:';
      var isDataUri = url.substring(0, dataUriPrefix.length).toLowerCase() === dataUriPrefix;

      if (!isDataUri) {
        image.crossOrigin = crossOrigin; // prevent tainted canvas
      }

      image.src = url;
      return image;
    }
  };

  var BRp$c = {};
  /* global document, window, ResizeObserver, MutationObserver */

  BRp$c.registerBinding = function (target, event, handler, useCapture) {
    // eslint-disable-line no-unused-vars
    var args = Array.prototype.slice.apply(arguments, [1]); // copy

    var b = this.binder(target);
    return b.on.apply(b, args);
  };

  BRp$c.binder = function (tgt) {
    var r = this;
    var tgtIsDom = tgt === window || tgt === document || tgt === document.body || domElement(tgt);

    if (r.supportsPassiveEvents == null) {
      // from https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md#feature-detection
      var supportsPassive = false;

      try {
        var opts = Object.defineProperty({}, 'passive', {
          get: function get() {
            supportsPassive = true;
            return true;
          }
        });
        window.addEventListener('test', null, opts);
      } catch (err) {// not supported
      }

      r.supportsPassiveEvents = supportsPassive;
    }

    var on = function on(event, handler, useCapture) {
      var args = Array.prototype.slice.call(arguments);

      if (tgtIsDom && r.supportsPassiveEvents) {
        // replace useCapture w/ opts obj
        args[2] = {
          capture: useCapture != null ? useCapture : false,
          passive: false,
          once: false
        };
      }

      r.bindings.push({
        target: tgt,
        args: args
      });
      (tgt.addEventListener || tgt.on).apply(tgt, args);
      return this;
    };

    return {
      on: on,
      addEventListener: on,
      addListener: on,
      bind: on
    };
  };

  BRp$c.nodeIsDraggable = function (node) {
    return node && node.isNode() && !node.locked() && node.grabbable();
  };

  BRp$c.nodeIsGrabbable = function (node) {
    return this.nodeIsDraggable(node) && node.interactive();
  };

  BRp$c.load = function () {
    var r = this;

    var isSelected = function isSelected(ele) {
      return ele.selected();
    };

    var triggerEvents = function triggerEvents(target, names, e, position) {
      if (target == null) {
        target = r.cy;
      }

      for (var i = 0; i < names.length; i++) {
        var name = names[i];
        target.emit({
          originalEvent: e,
          type: name,
          position: position
        });
      }
    };

    var isMultSelKeyDown = function isMultSelKeyDown(e) {
      return e.shiftKey || e.metaKey || e.ctrlKey; // maybe e.altKey
    };

    var allowPanningPassthrough = function allowPanningPassthrough(down, downs) {
      var allowPassthrough = true;

      if (r.cy.hasCompoundNodes() && down && down.pannable()) {
        // a grabbable compound node below the ele => no passthrough panning
        for (var i = 0; downs && i < downs.length; i++) {
          var down = downs[i];

          if (down.isNode() && down.isParent()) {
            allowPassthrough = false;
            break;
          }
        }
      } else {
        allowPassthrough = true;
      }

      return allowPassthrough;
    };

    var setGrabbed = function setGrabbed(ele) {
      ele[0]._private.grabbed = true;
    };

    var setFreed = function setFreed(ele) {
      ele[0]._private.grabbed = false;
    };

    var setInDragLayer = function setInDragLayer(ele) {
      ele[0]._private.rscratch.inDragLayer = true;
    };

    var setOutDragLayer = function setOutDragLayer(ele) {
      ele[0]._private.rscratch.inDragLayer = false;
    };

    var setGrabTarget = function setGrabTarget(ele) {
      ele[0]._private.rscratch.isGrabTarget = true;
    };

    var removeGrabTarget = function removeGrabTarget(ele) {
      ele[0]._private.rscratch.isGrabTarget = false;
    };

    var addToDragList = function addToDragList(ele, opts) {
      var list = opts.addToList;
      var listHasEle = list.has(ele);

      if (!listHasEle) {
        list.merge(ele);
        setGrabbed(ele);
      }
    }; // helper function to determine which child nodes and inner edges
    // of a compound node to be dragged as well as the grabbed and selected nodes


    var addDescendantsToDrag = function addDescendantsToDrag(node, opts) {
      if (!node.cy().hasCompoundNodes()) {
        return;
      }

      if (opts.inDragLayer == null && opts.addToList == null) {
        return;
      } // nothing to do


      var innerNodes = node.descendants();

      if (opts.inDragLayer) {
        innerNodes.forEach(setInDragLayer);
        innerNodes.connectedEdges().forEach(setInDragLayer);
      }

      if (opts.addToList) {
        opts.addToList.unmerge(innerNodes);
      }
    }; // adds the given nodes and its neighbourhood to the drag layer


    var addNodesToDrag = function addNodesToDrag(nodes, opts) {
      opts = opts || {};
      var hasCompoundNodes = nodes.cy().hasCompoundNodes();

      if (opts.inDragLayer) {
        nodes.forEach(setInDragLayer);
        nodes.neighborhood().stdFilter(function (ele) {
          return !hasCompoundNodes || ele.isEdge();
        }).forEach(setInDragLayer);
      }

      if (opts.addToList) {
        nodes.forEach(function (ele) {
          addToDragList(ele, opts);
        });
      }

      addDescendantsToDrag(nodes, opts); // always add to drag
      // also add nodes and edges related to the topmost ancestor

      updateAncestorsInDragLayer(nodes, {
        inDragLayer: opts.inDragLayer
      });
      r.updateCachedGrabbedEles();
    };

    var addNodeToDrag = addNodesToDrag;

    var freeDraggedElements = function freeDraggedElements(grabbedEles) {
      if (!grabbedEles) {
        return;
      } // just go over all elements rather than doing a bunch of (possibly expensive) traversals


      r.getCachedZSortedEles().forEach(function (ele) {
        setFreed(ele);
        setOutDragLayer(ele);
        removeGrabTarget(ele);
      });
      r.updateCachedGrabbedEles();
    }; // helper function to determine which ancestor nodes and edges should go
    // to the drag layer (or should be removed from drag layer).


    var updateAncestorsInDragLayer = function updateAncestorsInDragLayer(node, opts) {
      if (opts.inDragLayer == null && opts.addToList == null) {
        return;
      } // nothing to do


      if (!node.cy().hasCompoundNodes()) {
        return;
      } // find top-level parent


      var parent = node.ancestors().orphans(); // no parent node: no nodes to add to the drag layer

      if (parent.same(node)) {
        return;
      }

      var nodes = parent.descendants().spawnSelf().merge(parent).unmerge(node).unmerge(node.descendants());
      var edges = nodes.connectedEdges();

      if (opts.inDragLayer) {
        edges.forEach(setInDragLayer);
        nodes.forEach(setInDragLayer);
      }

      if (opts.addToList) {
        nodes.forEach(function (ele) {
          addToDragList(ele, opts);
        });
      }
    };

    var blurActiveDomElement = function blurActiveDomElement() {
      if (document.activeElement != null && document.activeElement.blur != null) {
        document.activeElement.blur();
      }
    };

    var haveMutationsApi = typeof MutationObserver !== 'undefined';
    var haveResizeObserverApi = typeof ResizeObserver !== 'undefined'; // watch for when the cy container is removed from the dom

    if (haveMutationsApi) {
      r.removeObserver = new MutationObserver(function (mutns) {
        // eslint-disable-line no-undef
        for (var i = 0; i < mutns.length; i++) {
          var mutn = mutns[i];
          var rNodes = mutn.removedNodes;

          if (rNodes) {
            for (var j = 0; j < rNodes.length; j++) {
              var rNode = rNodes[j];

              if (rNode === r.container) {
                r.destroy();
                break;
              }
            }
          }
        }
      });

      if (r.container.parentNode) {
        r.removeObserver.observe(r.container.parentNode, {
          childList: true
        });
      }
    } else {
      r.registerBinding(r.container, 'DOMNodeRemoved', function (e) {
        // eslint-disable-line no-unused-vars
        r.destroy();
      });
    }

    var onResize = util(function () {
      r.cy.resize();
    }, 100);

    if (haveMutationsApi) {
      r.styleObserver = new MutationObserver(onResize); // eslint-disable-line no-undef

      r.styleObserver.observe(r.container, {
        attributes: true
      });
    } // auto resize


    r.registerBinding(window, 'resize', onResize); // eslint-disable-line no-undef

    if (haveResizeObserverApi) {
      r.resizeObserver = new ResizeObserver(onResize); // eslint-disable-line no-undef

      r.resizeObserver.observe(r.container);
    }

    var forEachUp = function forEachUp(domEle, fn) {
      while (domEle != null) {
        fn(domEle);
        domEle = domEle.parentNode;
      }
    };

    var invalidateCoords = function invalidateCoords() {
      r.invalidateContainerClientCoordsCache();
    };

    forEachUp(r.container, function (domEle) {
      r.registerBinding(domEle, 'transitionend', invalidateCoords);
      r.registerBinding(domEle, 'animationend', invalidateCoords);
      r.registerBinding(domEle, 'scroll', invalidateCoords);
    }); // stop right click menu from appearing on cy

    r.registerBinding(r.container, 'contextmenu', function (e) {
      e.preventDefault();
    });

    var inBoxSelection = function inBoxSelection() {
      return r.selection[4] !== 0;
    };

    var eventInContainer = function eventInContainer(e) {
      // save cycles if mouse events aren't to be captured
      var containerPageCoords = r.findContainerClientCoords();
      var x = containerPageCoords[0];
      var y = containerPageCoords[1];
      var width = containerPageCoords[2];
      var height = containerPageCoords[3];
      var positions = e.touches ? e.touches : [e];
      var atLeastOnePosInside = false;

      for (var i = 0; i < positions.length; i++) {
        var p = positions[i];

        if (x <= p.clientX && p.clientX <= x + width && y <= p.clientY && p.clientY <= y + height) {
          atLeastOnePosInside = true;
          break;
        }
      }

      if (!atLeastOnePosInside) {
        return false;
      }

      var container = r.container;
      var target = e.target;
      var tParent = target.parentNode;
      var containerIsTarget = false;

      while (tParent) {
        if (tParent === container) {
          containerIsTarget = true;
          break;
        }

        tParent = tParent.parentNode;
      }

      if (!containerIsTarget) {
        return false;
      } // if target is outisde cy container, then this event is not for us


      return true;
    }; // Primary key


    r.registerBinding(r.container, 'mousedown', function mousedownHandler(e) {
      if (!eventInContainer(e)) {
        return;
      }

      e.preventDefault();
      blurActiveDomElement();
      r.hoverData.capture = true;
      r.hoverData.which = e.which;
      var cy = r.cy;
      var gpos = [e.clientX, e.clientY];
      var pos = r.projectIntoViewport(gpos[0], gpos[1]);
      var select = r.selection;
      var nears = r.findNearestElements(pos[0], pos[1], true, false);
      var near = nears[0];
      var draggedElements = r.dragData.possibleDragElements;
      r.hoverData.mdownPos = pos;
      r.hoverData.mdownGPos = gpos;

      var checkForTaphold = function checkForTaphold() {
        r.hoverData.tapholdCancelled = false;
        clearTimeout(r.hoverData.tapholdTimeout);
        r.hoverData.tapholdTimeout = setTimeout(function () {
          if (r.hoverData.tapholdCancelled) {
            return;
          } else {
            var ele = r.hoverData.down;

            if (ele) {
              ele.emit({
                originalEvent: e,
                type: 'taphold',
                position: {
                  x: pos[0],
                  y: pos[1]
                }
              });
            } else {
              cy.emit({
                originalEvent: e,
                type: 'taphold',
                position: {
                  x: pos[0],
                  y: pos[1]
                }
              });
            }
          }
        }, r.tapholdDuration);
      }; // Right click button


      if (e.which == 3) {
        r.hoverData.cxtStarted = true;
        var cxtEvt = {
          originalEvent: e,
          type: 'cxttapstart',
          position: {
            x: pos[0],
            y: pos[1]
          }
        };

        if (near) {
          near.activate();
          near.emit(cxtEvt);
          r.hoverData.down = near;
        } else {
          cy.emit(cxtEvt);
        }

        r.hoverData.downTime = new Date().getTime();
        r.hoverData.cxtDragged = false; // Primary button
      } else if (e.which == 1) {
        if (near) {
          near.activate();
        } // Element dragging


        {
          // If something is under the cursor and it is draggable, prepare to grab it
          if (near != null) {
            if (r.nodeIsGrabbable(near)) {
              var makeEvent = function makeEvent(type) {
                return {
                  originalEvent: e,
                  type: type,
                  position: {
                    x: pos[0],
                    y: pos[1]
                  }
                };
              };

              var triggerGrab = function triggerGrab(ele) {
                ele.emit(makeEvent('grab'));
              };

              setGrabTarget(near);

              if (!near.selected()) {
                draggedElements = r.dragData.possibleDragElements = cy.collection();
                addNodeToDrag(near, {
                  addToList: draggedElements
                });
                near.emit(makeEvent('grabon')).emit(makeEvent('grab'));
              } else {
                draggedElements = r.dragData.possibleDragElements = cy.collection();
                var selectedNodes = cy.$(function (ele) {
                  return ele.isNode() && ele.selected() && r.nodeIsGrabbable(ele);
                });
                addNodesToDrag(selectedNodes, {
                  addToList: draggedElements
                });
                near.emit(makeEvent('grabon'));
                selectedNodes.forEach(triggerGrab);
              }

              r.redrawHint('eles', true);
              r.redrawHint('drag', true);
            }
          }

          r.hoverData.down = near;
          r.hoverData.downs = nears;
          r.hoverData.downTime = new Date().getTime();
        }
        triggerEvents(near, ['mousedown', 'tapstart', 'vmousedown'], e, {
          x: pos[0],
          y: pos[1]
        });

        if (near == null) {
          select[4] = 1;
          r.data.bgActivePosistion = {
            x: pos[0],
            y: pos[1]
          };
          r.redrawHint('select', true);
          r.redraw();
        } else if (near.pannable()) {
          select[4] = 1; // for future pan
        }

        checkForTaphold();
      } // Initialize selection box coordinates


      select[0] = select[2] = pos[0];
      select[1] = select[3] = pos[1];
    }, false);
    r.registerBinding(window, 'mousemove', function mousemoveHandler(e) {
      // eslint-disable-line no-undef
      var capture = r.hoverData.capture;

      if (!capture && !eventInContainer(e)) {
        return;
      }

      var preventDefault = false;
      var cy = r.cy;
      var zoom = cy.zoom();
      var gpos = [e.clientX, e.clientY];
      var pos = r.projectIntoViewport(gpos[0], gpos[1]);
      var mdownPos = r.hoverData.mdownPos;
      var mdownGPos = r.hoverData.mdownGPos;
      var select = r.selection;
      var near = null;

      if (!r.hoverData.draggingEles && !r.hoverData.dragging && !r.hoverData.selecting) {
        near = r.findNearestElement(pos[0], pos[1], true, false);
      }

      var last = r.hoverData.last;
      var down = r.hoverData.down;
      var disp = [pos[0] - select[2], pos[1] - select[3]];
      var draggedElements = r.dragData.possibleDragElements;
      var isOverThresholdDrag;

      if (mdownGPos) {
        var dx = gpos[0] - mdownGPos[0];
        var dx2 = dx * dx;
        var dy = gpos[1] - mdownGPos[1];
        var dy2 = dy * dy;
        var dist2 = dx2 + dy2;
        r.hoverData.isOverThresholdDrag = isOverThresholdDrag = dist2 >= r.desktopTapThreshold2;
      }

      var multSelKeyDown = isMultSelKeyDown(e);

      if (isOverThresholdDrag) {
        r.hoverData.tapholdCancelled = true;
      }

      var updateDragDelta = function updateDragDelta() {
        var dragDelta = r.hoverData.dragDelta = r.hoverData.dragDelta || [];

        if (dragDelta.length === 0) {
          dragDelta.push(disp[0]);
          dragDelta.push(disp[1]);
        } else {
          dragDelta[0] += disp[0];
          dragDelta[1] += disp[1];
        }
      };

      preventDefault = true;
      triggerEvents(near, ['mousemove', 'vmousemove', 'tapdrag'], e, {
        x: pos[0],
        y: pos[1]
      });

      var goIntoBoxMode = function goIntoBoxMode() {
        r.data.bgActivePosistion = undefined;

        if (!r.hoverData.selecting) {
          cy.emit({
            originalEvent: e,
            type: 'boxstart',
            position: {
              x: pos[0],
              y: pos[1]
            }
          });
        }

        select[4] = 1;
        r.hoverData.selecting = true;
        r.redrawHint('select', true);
        r.redraw();
      }; // trigger context drag if rmouse down


      if (r.hoverData.which === 3) {
        // but only if over threshold
        if (isOverThresholdDrag) {
          var cxtEvt = {
            originalEvent: e,
            type: 'cxtdrag',
            position: {
              x: pos[0],
              y: pos[1]
            }
          };

          if (down) {
            down.emit(cxtEvt);
          } else {
            cy.emit(cxtEvt);
          }

          r.hoverData.cxtDragged = true;

          if (!r.hoverData.cxtOver || near !== r.hoverData.cxtOver) {
            if (r.hoverData.cxtOver) {
              r.hoverData.cxtOver.emit({
                originalEvent: e,
                type: 'cxtdragout',
                position: {
                  x: pos[0],
                  y: pos[1]
                }
              });
            }

            r.hoverData.cxtOver = near;

            if (near) {
              near.emit({
                originalEvent: e,
                type: 'cxtdragover',
                position: {
                  x: pos[0],
                  y: pos[1]
                }
              });
            }
          }
        } // Check if we are drag panning the entire graph

      } else if (r.hoverData.dragging) {
        preventDefault = true;

        if (cy.panningEnabled() && cy.userPanningEnabled()) {
          var deltaP;

          if (r.hoverData.justStartedPan) {
            var mdPos = r.hoverData.mdownPos;
            deltaP = {
              x: (pos[0] - mdPos[0]) * zoom,
              y: (pos[1] - mdPos[1]) * zoom
            };
            r.hoverData.justStartedPan = false;
          } else {
            deltaP = {
              x: disp[0] * zoom,
              y: disp[1] * zoom
            };
          }

          cy.panBy(deltaP);
          r.hoverData.dragged = true;
        } // Needs reproject due to pan changing viewport


        pos = r.projectIntoViewport(e.clientX, e.clientY); // Checks primary button down & out of time & mouse not moved much
      } else if (select[4] == 1 && (down == null || down.pannable())) {
        if (isOverThresholdDrag) {
          if (!r.hoverData.dragging && cy.boxSelectionEnabled() && (multSelKeyDown || !cy.panningEnabled() || !cy.userPanningEnabled())) {
            goIntoBoxMode();
          } else if (!r.hoverData.selecting && cy.panningEnabled() && cy.userPanningEnabled()) {
            var allowPassthrough = allowPanningPassthrough(down, r.hoverData.downs);

            if (allowPassthrough) {
              r.hoverData.dragging = true;
              r.hoverData.justStartedPan = true;
              select[4] = 0;
              r.data.bgActivePosistion = array2point(mdownPos);
              r.redrawHint('select', true);
              r.redraw();
            }
          }

          if (down && down.pannable() && down.active()) {
            down.unactivate();
          }
        }
      } else {
        if (down && down.pannable() && down.active()) {
          down.unactivate();
        }

        if ((!down || !down.grabbed()) && near != last) {
          if (last) {
            triggerEvents(last, ['mouseout', 'tapdragout'], e, {
              x: pos[0],
              y: pos[1]
            });
          }

          if (near) {
            triggerEvents(near, ['mouseover', 'tapdragover'], e, {
              x: pos[0],
              y: pos[1]
            });
          }

          r.hoverData.last = near;
        }

        if (down) {
          if (isOverThresholdDrag) {
            // then we can take action
            if (cy.boxSelectionEnabled() && multSelKeyDown) {
              // then selection overrides
              if (down && down.grabbed()) {
                freeDraggedElements(draggedElements);
                down.emit('freeon');
                draggedElements.emit('free');

                if (r.dragData.didDrag) {
                  down.emit('dragfreeon');
                  draggedElements.emit('dragfree');
                }
              }

              goIntoBoxMode();
            } else if (down && down.grabbed() && r.nodeIsDraggable(down)) {
              // drag node
              var justStartedDrag = !r.dragData.didDrag;

              if (justStartedDrag) {
                r.redrawHint('eles', true);
              }

              r.dragData.didDrag = true; // indicate that we actually did drag the node

              var toTrigger = cy.collection(); // now, add the elements to the drag layer if not done already

              if (!r.hoverData.draggingEles) {
                addNodesToDrag(draggedElements, {
                  inDragLayer: true
                });
              }

              var totalShift = {
                x: 0,
                y: 0
              };

              if (number(disp[0]) && number(disp[1])) {
                totalShift.x += disp[0];
                totalShift.y += disp[1];

                if (justStartedDrag) {
                  var dragDelta = r.hoverData.dragDelta;

                  if (dragDelta && number(dragDelta[0]) && number(dragDelta[1])) {
                    totalShift.x += dragDelta[0];
                    totalShift.y += dragDelta[1];
                  }
                }
              }

              for (var i = 0; i < draggedElements.length; i++) {
                var dEle = draggedElements[i];

                if (r.nodeIsDraggable(dEle) && dEle.grabbed()) {
                  toTrigger.merge(dEle);
                }
              }

              r.hoverData.draggingEles = true;
              toTrigger.silentShift(totalShift).emit('position drag');
              r.redrawHint('drag', true);
              r.redraw();
            }
          } else {
            // otherwise save drag delta for when we actually start dragging so the relative grab pos is constant
            updateDragDelta();
          }
        } // prevent the dragging from triggering text selection on the page


        preventDefault = true;
      }

      select[2] = pos[0];
      select[3] = pos[1];

      if (preventDefault) {
        if (e.stopPropagation) e.stopPropagation();
        if (e.preventDefault) e.preventDefault();
        return false;
      }
    }, false);
    r.registerBinding(window, 'mouseup', function mouseupHandler(e) {
      // eslint-disable-line no-undef
      var capture = r.hoverData.capture;

      if (!capture) {
        return;
      }

      r.hoverData.capture = false;
      var cy = r.cy;
      var pos = r.projectIntoViewport(e.clientX, e.clientY);
      var select = r.selection;
      var near = r.findNearestElement(pos[0], pos[1], true, false);
      var draggedElements = r.dragData.possibleDragElements;
      var down = r.hoverData.down;
      var multSelKeyDown = isMultSelKeyDown(e);

      if (r.data.bgActivePosistion) {
        r.redrawHint('select', true);
        r.redraw();
      }

      r.hoverData.tapholdCancelled = true;
      r.data.bgActivePosistion = undefined; // not active bg now

      if (down) {
        down.unactivate();
      }

      if (r.hoverData.which === 3) {
        var cxtEvt = {
          originalEvent: e,
          type: 'cxttapend',
          position: {
            x: pos[0],
            y: pos[1]
          }
        };

        if (down) {
          down.emit(cxtEvt);
        } else {
          cy.emit(cxtEvt);
        }

        if (!r.hoverData.cxtDragged) {
          var cxtTap = {
            originalEvent: e,
            type: 'cxttap',
            position: {
              x: pos[0],
              y: pos[1]
            }
          };

          if (down) {
            down.emit(cxtTap);
          } else {
            cy.emit(cxtTap);
          }
        }

        r.hoverData.cxtDragged = false;
        r.hoverData.which = null;
      } else if (r.hoverData.which === 1) {
        triggerEvents(near, ['mouseup', 'tapend', 'vmouseup'], e, {
          x: pos[0],
          y: pos[1]
        });

        if (!r.dragData.didDrag // didn't move a node around
        && !r.hoverData.dragged // didn't pan
        && !r.hoverData.selecting // not box selection
        && !r.hoverData.isOverThresholdDrag // didn't move too much
        ) {
            triggerEvents(down, ['click', 'tap', 'vclick'], e, {
              x: pos[0],
              y: pos[1]
            });
          } // Deselect all elements if nothing is currently under the mouse cursor and we aren't dragging something


        if (down == null && // not mousedown on node
        !r.dragData.didDrag // didn't move the node around
        && !r.hoverData.selecting // not box selection
        && !r.hoverData.dragged // didn't pan
        && !isMultSelKeyDown(e)) {
          cy.$(isSelected).unselect(['tapunselect']);

          if (draggedElements.length > 0) {
            r.redrawHint('eles', true);
          }

          r.dragData.possibleDragElements = draggedElements = cy.collection();
        } // Single selection


        if (near == down && !r.dragData.didDrag && !r.hoverData.selecting) {
          if (near != null && near._private.selectable) {
            if (r.hoverData.dragging) ; else if (cy.selectionType() === 'additive' || multSelKeyDown) {
              if (near.selected()) {
                near.unselect(['tapunselect']);
              } else {
                near.select(['tapselect']);
              }
            } else {
              if (!multSelKeyDown) {
                cy.$(isSelected).unmerge(near).unselect(['tapunselect']);
                near.select(['tapselect']);
              }
            }

            r.redrawHint('eles', true);
          }
        }

        if (r.hoverData.selecting) {
          var box = cy.collection(r.getAllInBox(select[0], select[1], select[2], select[3]));
          r.redrawHint('select', true);

          if (box.length > 0) {
            r.redrawHint('eles', true);
          }

          cy.emit({
            type: 'boxend',
            originalEvent: e,
            position: {
              x: pos[0],
              y: pos[1]
            }
          });

          var eleWouldBeSelected = function eleWouldBeSelected(ele) {
            return ele.selectable() && !ele.selected();
          };

          if (cy.selectionType() === 'additive') {
            box.emit('box').stdFilter(eleWouldBeSelected).select().emit('boxselect');
          } else {
            if (!multSelKeyDown) {
              cy.$(isSelected).unmerge(box).unselect();
            }

            box.emit('box').stdFilter(eleWouldBeSelected).select().emit('boxselect');
          } // always need redraw in case eles unselectable


          r.redraw();
        } // Cancel drag pan


        if (r.hoverData.dragging) {
          r.hoverData.dragging = false;
          r.redrawHint('select', true);
          r.redrawHint('eles', true);
          r.redraw();
        }

        if (!select[4]) {
          r.redrawHint('drag', true);
          r.redrawHint('eles', true);
          var downWasGrabbed = down && down.grabbed();
          freeDraggedElements(draggedElements);

          if (downWasGrabbed) {
            down.emit('freeon');
            draggedElements.emit('free');

            if (r.dragData.didDrag) {
              down.emit('dragfreeon');
              draggedElements.emit('dragfree');
            }
          }
        }
      } // else not right mouse


      select[4] = 0;
      r.hoverData.down = null;
      r.hoverData.cxtStarted = false;
      r.hoverData.draggingEles = false;
      r.hoverData.selecting = false;
      r.hoverData.isOverThresholdDrag = false;
      r.dragData.didDrag = false;
      r.hoverData.dragged = false;
      r.hoverData.dragDelta = [];
      r.hoverData.mdownPos = null;
      r.hoverData.mdownGPos = null;
    }, false);

    var wheelHandler = function wheelHandler(e) {
      if (r.scrollingPage) {
        return;
      } // while scrolling, ignore wheel-to-zoom


      var cy = r.cy;
      var zoom = cy.zoom();
      var pan = cy.pan();
      var pos = r.projectIntoViewport(e.clientX, e.clientY);
      var rpos = [pos[0] * zoom + pan.x, pos[1] * zoom + pan.y];

      if (r.hoverData.draggingEles || r.hoverData.dragging || r.hoverData.cxtStarted || inBoxSelection()) {
        // if pan dragging or cxt dragging, wheel movements make no zoom
        e.preventDefault();
        return;
      }

      if (cy.panningEnabled() && cy.userPanningEnabled() && cy.zoomingEnabled() && cy.userZoomingEnabled()) {
        e.preventDefault();
        r.data.wheelZooming = true;
        clearTimeout(r.data.wheelTimeout);
        r.data.wheelTimeout = setTimeout(function () {
          r.data.wheelZooming = false;
          r.redrawHint('eles', true);
          r.redraw();
        }, 150);
        var diff;

        if (e.deltaY != null) {
          diff = e.deltaY / -250;
        } else if (e.wheelDeltaY != null) {
          diff = e.wheelDeltaY / 1000;
        } else {
          diff = e.wheelDelta / 1000;
        }

        diff = diff * r.wheelSensitivity;
        var needsWheelFix = e.deltaMode === 1;

        if (needsWheelFix) {
          // fixes slow wheel events on ff/linux and ff/windows
          diff *= 33;
        }

        var newZoom = cy.zoom() * Math.pow(10, diff);

        if (e.type === 'gesturechange') {
          newZoom = r.gestureStartZoom * e.scale;
        }

        cy.zoom({
          level: newZoom,
          renderedPosition: {
            x: rpos[0],
            y: rpos[1]
          }
        });
      }
    }; // Functions to help with whether mouse wheel should trigger zooming
    // --


    r.registerBinding(r.container, 'wheel', wheelHandler, true); // disable nonstandard wheel events
    // r.registerBinding(r.container, 'mousewheel', wheelHandler, true);
    // r.registerBinding(r.container, 'DOMMouseScroll', wheelHandler, true);
    // r.registerBinding(r.container, 'MozMousePixelScroll', wheelHandler, true); // older firefox

    r.registerBinding(window, 'scroll', function scrollHandler(e) {
      // eslint-disable-line no-unused-vars
      r.scrollingPage = true;
      clearTimeout(r.scrollingPageTimeout);
      r.scrollingPageTimeout = setTimeout(function () {
        r.scrollingPage = false;
      }, 250);
    }, true); // desktop safari pinch to zoom start

    r.registerBinding(r.container, 'gesturestart', function gestureStartHandler(e) {
      r.gestureStartZoom = r.cy.zoom();

      if (!r.hasTouchStarted) {
        // don't affect touch devices like iphone
        e.preventDefault();
      }
    }, true);
    r.registerBinding(r.container, 'gesturechange', function (e) {
      if (!r.hasTouchStarted) {
        // don't affect touch devices like iphone
        wheelHandler(e);
      }
    }, true); // Functions to help with handling mouseout/mouseover on the Cytoscape container
    // Handle mouseout on Cytoscape container

    r.registerBinding(r.container, 'mouseout', function mouseOutHandler(e) {
      var pos = r.projectIntoViewport(e.clientX, e.clientY);
      r.cy.emit({
        originalEvent: e,
        type: 'mouseout',
        position: {
          x: pos[0],
          y: pos[1]
        }
      });
    }, false);
    r.registerBinding(r.container, 'mouseover', function mouseOverHandler(e) {
      var pos = r.projectIntoViewport(e.clientX, e.clientY);
      r.cy.emit({
        originalEvent: e,
        type: 'mouseover',
        position: {
          x: pos[0],
          y: pos[1]
        }
      });
    }, false);
    var f1x1, f1y1, f2x1, f2y1; // starting points for pinch-to-zoom

    var distance1, distance1Sq; // initial distance between finger 1 and finger 2 for pinch-to-zoom

    var center1, modelCenter1; // center point on start pinch to zoom

    var offsetLeft, offsetTop;
    var containerWidth, containerHeight;
    var twoFingersStartInside;

    var distance = function distance(x1, y1, x2, y2) {
      return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
    };

    var distanceSq = function distanceSq(x1, y1, x2, y2) {
      return (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);
    };

    var touchstartHandler;
    r.registerBinding(r.container, 'touchstart', touchstartHandler = function touchstartHandler(e) {
      r.hasTouchStarted = true;

      if (!eventInContainer(e)) {
        return;
      }

      blurActiveDomElement();
      r.touchData.capture = true;
      r.data.bgActivePosistion = undefined;
      var cy = r.cy;
      var now = r.touchData.now;
      var earlier = r.touchData.earlier;

      if (e.touches[0]) {
        var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);
        now[0] = pos[0];
        now[1] = pos[1];
      }

      if (e.touches[1]) {
        var pos = r.projectIntoViewport(e.touches[1].clientX, e.touches[1].clientY);
        now[2] = pos[0];
        now[3] = pos[1];
      }

      if (e.touches[2]) {
        var pos = r.projectIntoViewport(e.touches[2].clientX, e.touches[2].clientY);
        now[4] = pos[0];
        now[5] = pos[1];
      } // record starting points for pinch-to-zoom


      if (e.touches[1]) {
        r.touchData.singleTouchMoved = true;
        freeDraggedElements(r.dragData.touchDragEles);
        var offsets = r.findContainerClientCoords();
        offsetLeft = offsets[0];
        offsetTop = offsets[1];
        containerWidth = offsets[2];
        containerHeight = offsets[3];
        f1x1 = e.touches[0].clientX - offsetLeft;
        f1y1 = e.touches[0].clientY - offsetTop;
        f2x1 = e.touches[1].clientX - offsetLeft;
        f2y1 = e.touches[1].clientY - offsetTop;
        twoFingersStartInside = 0 <= f1x1 && f1x1 <= containerWidth && 0 <= f2x1 && f2x1 <= containerWidth && 0 <= f1y1 && f1y1 <= containerHeight && 0 <= f2y1 && f2y1 <= containerHeight;
        var pan = cy.pan();
        var zoom = cy.zoom();
        distance1 = distance(f1x1, f1y1, f2x1, f2y1);
        distance1Sq = distanceSq(f1x1, f1y1, f2x1, f2y1);
        center1 = [(f1x1 + f2x1) / 2, (f1y1 + f2y1) / 2];
        modelCenter1 = [(center1[0] - pan.x) / zoom, (center1[1] - pan.y) / zoom]; // consider context tap

        var cxtDistThreshold = 200;
        var cxtDistThresholdSq = cxtDistThreshold * cxtDistThreshold;

        if (distance1Sq < cxtDistThresholdSq && !e.touches[2]) {
          var near1 = r.findNearestElement(now[0], now[1], true, true);
          var near2 = r.findNearestElement(now[2], now[3], true, true);

          if (near1 && near1.isNode()) {
            near1.activate().emit({
              originalEvent: e,
              type: 'cxttapstart',
              position: {
                x: now[0],
                y: now[1]
              }
            });
            r.touchData.start = near1;
          } else if (near2 && near2.isNode()) {
            near2.activate().emit({
              originalEvent: e,
              type: 'cxttapstart',
              position: {
                x: now[0],
                y: now[1]
              }
            });
            r.touchData.start = near2;
          } else {
            cy.emit({
              originalEvent: e,
              type: 'cxttapstart',
              position: {
                x: now[0],
                y: now[1]
              }
            });
          }

          if (r.touchData.start) {
            r.touchData.start._private.grabbed = false;
          }

          r.touchData.cxt = true;
          r.touchData.cxtDragged = false;
          r.data.bgActivePosistion = undefined;
          r.redraw();
          return;
        }
      }

      if (e.touches[2]) {
        // ignore
        // safari on ios pans the page otherwise (normally you should be able to preventdefault on touchmove...)
        if (cy.boxSelectionEnabled()) {
          e.preventDefault();
        }
      } else if (e.touches[1]) ; else if (e.touches[0]) {
        var nears = r.findNearestElements(now[0], now[1], true, true);
        var near = nears[0];

        if (near != null) {
          near.activate();
          r.touchData.start = near;
          r.touchData.starts = nears;

          if (r.nodeIsGrabbable(near)) {
            var draggedEles = r.dragData.touchDragEles = cy.collection();
            var selectedNodes = null;
            r.redrawHint('eles', true);
            r.redrawHint('drag', true);

            if (near.selected()) {
              // reset drag elements, since near will be added again
              selectedNodes = cy.$(function (ele) {
                return ele.selected() && r.nodeIsGrabbable(ele);
              });
              addNodesToDrag(selectedNodes, {
                addToList: draggedEles
              });
            } else {
              addNodeToDrag(near, {
                addToList: draggedEles
              });
            }

            setGrabTarget(near);

            var makeEvent = function makeEvent(type) {
              return {
                originalEvent: e,
                type: type,
                position: {
                  x: now[0],
                  y: now[1]
                }
              };
            };

            near.emit(makeEvent('grabon'));

            if (selectedNodes) {
              selectedNodes.forEach(function (n) {
                n.emit(makeEvent('grab'));
              });
            } else {
              near.emit(makeEvent('grab'));
            }
          }
        }

        triggerEvents(near, ['touchstart', 'tapstart', 'vmousedown'], e, {
          x: now[0],
          y: now[1]
        });

        if (near == null) {
          r.data.bgActivePosistion = {
            x: pos[0],
            y: pos[1]
          };
          r.redrawHint('select', true);
          r.redraw();
        } // Tap, taphold
        // -----


        r.touchData.singleTouchMoved = false;
        r.touchData.singleTouchStartTime = +new Date();
        clearTimeout(r.touchData.tapholdTimeout);
        r.touchData.tapholdTimeout = setTimeout(function () {
          if (r.touchData.singleTouchMoved === false && !r.pinching // if pinching, then taphold unselect shouldn't take effect
          && !r.touchData.selecting // box selection shouldn't allow taphold through
          ) {
              triggerEvents(r.touchData.start, ['taphold'], e, {
                x: now[0],
                y: now[1]
              });
            }
        }, r.tapholdDuration);
      }

      if (e.touches.length >= 1) {
        var sPos = r.touchData.startPosition = [];

        for (var i = 0; i < now.length; i++) {
          sPos[i] = earlier[i] = now[i];
        }

        var touch0 = e.touches[0];
        r.touchData.startGPosition = [touch0.clientX, touch0.clientY];
      }
    }, false);
    var touchmoveHandler;
    r.registerBinding(window, 'touchmove', touchmoveHandler = function touchmoveHandler(e) {
      // eslint-disable-line no-undef
      var capture = r.touchData.capture;

      if (!capture && !eventInContainer(e)) {
        return;
      }

      var select = r.selection;
      var cy = r.cy;
      var now = r.touchData.now;
      var earlier = r.touchData.earlier;
      var zoom = cy.zoom();

      if (e.touches[0]) {
        var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);
        now[0] = pos[0];
        now[1] = pos[1];
      }

      if (e.touches[1]) {
        var pos = r.projectIntoViewport(e.touches[1].clientX, e.touches[1].clientY);
        now[2] = pos[0];
        now[3] = pos[1];
      }

      if (e.touches[2]) {
        var pos = r.projectIntoViewport(e.touches[2].clientX, e.touches[2].clientY);
        now[4] = pos[0];
        now[5] = pos[1];
      }

      var startGPos = r.touchData.startGPosition;
      var isOverThresholdDrag;

      if (capture && e.touches[0] && startGPos) {
        var disp = [];

        for (var j = 0; j < now.length; j++) {
          disp[j] = now[j] - earlier[j];
        }

        var dx = e.touches[0].clientX - startGPos[0];
        var dx2 = dx * dx;
        var dy = e.touches[0].clientY - startGPos[1];
        var dy2 = dy * dy;
        var dist2 = dx2 + dy2;
        isOverThresholdDrag = dist2 >= r.touchTapThreshold2;
      } // context swipe cancelling


      if (capture && r.touchData.cxt) {
        e.preventDefault();
        var f1x2 = e.touches[0].clientX - offsetLeft,
            f1y2 = e.touches[0].clientY - offsetTop;
        var f2x2 = e.touches[1].clientX - offsetLeft,
            f2y2 = e.touches[1].clientY - offsetTop; // var distance2 = distance( f1x2, f1y2, f2x2, f2y2 );

        var distance2Sq = distanceSq(f1x2, f1y2, f2x2, f2y2);
        var factorSq = distance2Sq / distance1Sq;
        var distThreshold = 150;
        var distThresholdSq = distThreshold * distThreshold;
        var factorThreshold = 1.5;
        var factorThresholdSq = factorThreshold * factorThreshold; // cancel ctx gestures if the distance b/t the fingers increases

        if (factorSq >= factorThresholdSq || distance2Sq >= distThresholdSq) {
          r.touchData.cxt = false;
          r.data.bgActivePosistion = undefined;
          r.redrawHint('select', true);
          var cxtEvt = {
            originalEvent: e,
            type: 'cxttapend',
            position: {
              x: now[0],
              y: now[1]
            }
          };

          if (r.touchData.start) {
            r.touchData.start.unactivate().emit(cxtEvt);
            r.touchData.start = null;
          } else {
            cy.emit(cxtEvt);
          }
        }
      } // context swipe


      if (capture && r.touchData.cxt) {
        var cxtEvt = {
          originalEvent: e,
          type: 'cxtdrag',
          position: {
            x: now[0],
            y: now[1]
          }
        };
        r.data.bgActivePosistion = undefined;
        r.redrawHint('select', true);

        if (r.touchData.start) {
          r.touchData.start.emit(cxtEvt);
        } else {
          cy.emit(cxtEvt);
        }

        if (r.touchData.start) {
          r.touchData.start._private.grabbed = false;
        }

        r.touchData.cxtDragged = true;
        var near = r.findNearestElement(now[0], now[1], true, true);

        if (!r.touchData.cxtOver || near !== r.touchData.cxtOver) {
          if (r.touchData.cxtOver) {
            r.touchData.cxtOver.emit({
              originalEvent: e,
              type: 'cxtdragout',
              position: {
                x: now[0],
                y: now[1]
              }
            });
          }

          r.touchData.cxtOver = near;

          if (near) {
            near.emit({
              originalEvent: e,
              type: 'cxtdragover',
              position: {
                x: now[0],
                y: now[1]
              }
            });
          }
        } // box selection

      } else if (capture && e.touches[2] && cy.boxSelectionEnabled()) {
        e.preventDefault();
        r.data.bgActivePosistion = undefined;
        this.lastThreeTouch = +new Date();

        if (!r.touchData.selecting) {
          cy.emit({
            originalEvent: e,
            type: 'boxstart',
            position: {
              x: now[0],
              y: now[1]
            }
          });
        }

        r.touchData.selecting = true;
        r.touchData.didSelect = true;
        select[4] = 1;

        if (!select || select.length === 0 || select[0] === undefined) {
          select[0] = (now[0] + now[2] + now[4]) / 3;
          select[1] = (now[1] + now[3] + now[5]) / 3;
          select[2] = (now[0] + now[2] + now[4]) / 3 + 1;
          select[3] = (now[1] + now[3] + now[5]) / 3 + 1;
        } else {
          select[2] = (now[0] + now[2] + now[4]) / 3;
          select[3] = (now[1] + now[3] + now[5]) / 3;
        }

        r.redrawHint('select', true);
        r.redraw(); // pinch to zoom
      } else if (capture && e.touches[1] && !r.touchData.didSelect // don't allow box selection to degrade to pinch-to-zoom
      && cy.zoomingEnabled() && cy.panningEnabled() && cy.userZoomingEnabled() && cy.userPanningEnabled()) {
        // two fingers => pinch to zoom
        e.preventDefault();
        r.data.bgActivePosistion = undefined;
        r.redrawHint('select', true);
        var draggedEles = r.dragData.touchDragEles;

        if (draggedEles) {
          r.redrawHint('drag', true);

          for (var i = 0; i < draggedEles.length; i++) {
            var de_p = draggedEles[i]._private;
            de_p.grabbed = false;
            de_p.rscratch.inDragLayer = false;
          }
        }

        var _start = r.touchData.start; // (x2, y2) for fingers 1 and 2

        var f1x2 = e.touches[0].clientX - offsetLeft,
            f1y2 = e.touches[0].clientY - offsetTop;
        var f2x2 = e.touches[1].clientX - offsetLeft,
            f2y2 = e.touches[1].clientY - offsetTop;
        var distance2 = distance(f1x2, f1y2, f2x2, f2y2); // var distance2Sq = distanceSq( f1x2, f1y2, f2x2, f2y2 );
        // var factor = Math.sqrt( distance2Sq ) / Math.sqrt( distance1Sq );

        var factor = distance2 / distance1;

        if (twoFingersStartInside) {
          // delta finger1
          var df1x = f1x2 - f1x1;
          var df1y = f1y2 - f1y1; // delta finger 2

          var df2x = f2x2 - f2x1;
          var df2y = f2y2 - f2y1; // translation is the normalised vector of the two fingers movement
          // i.e. so pinching cancels out and moving together pans

          var tx = (df1x + df2x) / 2;
          var ty = (df1y + df2y) / 2; // now calculate the zoom

          var zoom1 = cy.zoom();
          var zoom2 = zoom1 * factor;
          var pan1 = cy.pan(); // the model center point converted to the current rendered pos

          var ctrx = modelCenter1[0] * zoom1 + pan1.x;
          var ctry = modelCenter1[1] * zoom1 + pan1.y;
          var pan2 = {
            x: -zoom2 / zoom1 * (ctrx - pan1.x - tx) + ctrx,
            y: -zoom2 / zoom1 * (ctry - pan1.y - ty) + ctry
          }; // remove dragged eles

          if (_start && _start.active()) {
            var draggedEles = r.dragData.touchDragEles;
            freeDraggedElements(draggedEles);
            r.redrawHint('drag', true);
            r.redrawHint('eles', true);

            _start.unactivate().emit('freeon');

            draggedEles.emit('free');

            if (r.dragData.didDrag) {
              _start.emit('dragfreeon');

              draggedEles.emit('dragfree');
            }
          }

          cy.viewport({
            zoom: zoom2,
            pan: pan2,
            cancelOnFailedZoom: true
          });
          distance1 = distance2;
          f1x1 = f1x2;
          f1y1 = f1y2;
          f2x1 = f2x2;
          f2y1 = f2y2;
          r.pinching = true;
        } // Re-project


        if (e.touches[0]) {
          var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);
          now[0] = pos[0];
          now[1] = pos[1];
        }

        if (e.touches[1]) {
          var pos = r.projectIntoViewport(e.touches[1].clientX, e.touches[1].clientY);
          now[2] = pos[0];
          now[3] = pos[1];
        }

        if (e.touches[2]) {
          var pos = r.projectIntoViewport(e.touches[2].clientX, e.touches[2].clientY);
          now[4] = pos[0];
          now[5] = pos[1];
        }
      } else if (e.touches[0] && !r.touchData.didSelect // don't allow box selection to degrade to single finger events like panning
      ) {
          var start = r.touchData.start;
          var last = r.touchData.last;
          var near;

          if (!r.hoverData.draggingEles && !r.swipePanning) {
            near = r.findNearestElement(now[0], now[1], true, true);
          }

          if (capture && start != null) {
            e.preventDefault();
          } // dragging nodes


          if (capture && start != null && r.nodeIsDraggable(start)) {
            if (isOverThresholdDrag) {
              // then dragging can happen
              var draggedEles = r.dragData.touchDragEles;
              var justStartedDrag = !r.dragData.didDrag;

              if (justStartedDrag) {
                addNodesToDrag(draggedEles, {
                  inDragLayer: true
                });
              }

              r.dragData.didDrag = true;
              var totalShift = {
                x: 0,
                y: 0
              };

              if (number(disp[0]) && number(disp[1])) {
                totalShift.x += disp[0];
                totalShift.y += disp[1];

                if (justStartedDrag) {
                  r.redrawHint('eles', true);
                  var dragDelta = r.touchData.dragDelta;

                  if (dragDelta && number(dragDelta[0]) && number(dragDelta[1])) {
                    totalShift.x += dragDelta[0];
                    totalShift.y += dragDelta[1];
                  }
                }
              }

              r.hoverData.draggingEles = true;
              draggedEles.silentShift(totalShift).emit('position drag');
              r.redrawHint('drag', true);

              if (r.touchData.startPosition[0] == earlier[0] && r.touchData.startPosition[1] == earlier[1]) {
                r.redrawHint('eles', true);
              }

              r.redraw();
            } else {
              // otherise keep track of drag delta for later
              var dragDelta = r.touchData.dragDelta = r.touchData.dragDelta || [];

              if (dragDelta.length === 0) {
                dragDelta.push(disp[0]);
                dragDelta.push(disp[1]);
              } else {
                dragDelta[0] += disp[0];
                dragDelta[1] += disp[1];
              }
            }
          } // touchmove


          {
            triggerEvents(start || near, ['touchmove', 'tapdrag', 'vmousemove'], e, {
              x: now[0],
              y: now[1]
            });

            if ((!start || !start.grabbed()) && near != last) {
              if (last) {
                last.emit({
                  originalEvent: e,
                  type: 'tapdragout',
                  position: {
                    x: now[0],
                    y: now[1]
                  }
                });
              }

              if (near) {
                near.emit({
                  originalEvent: e,
                  type: 'tapdragover',
                  position: {
                    x: now[0],
                    y: now[1]
                  }
                });
              }
            }

            r.touchData.last = near;
          } // check to cancel taphold

          if (capture) {
            for (var i = 0; i < now.length; i++) {
              if (now[i] && r.touchData.startPosition[i] && isOverThresholdDrag) {
                r.touchData.singleTouchMoved = true;
              }
            }
          } // panning


          if (capture && (start == null || start.pannable()) && cy.panningEnabled() && cy.userPanningEnabled()) {
            var allowPassthrough = allowPanningPassthrough(start, r.touchData.starts);

            if (allowPassthrough) {
              e.preventDefault();

              if (!r.data.bgActivePosistion) {
                r.data.bgActivePosistion = array2point(r.touchData.startPosition);
              }

              if (r.swipePanning) {
                cy.panBy({
                  x: disp[0] * zoom,
                  y: disp[1] * zoom
                });
              } else if (isOverThresholdDrag) {
                r.swipePanning = true;
                cy.panBy({
                  x: dx * zoom,
                  y: dy * zoom
                });

                if (start) {
                  start.unactivate();
                  r.redrawHint('select', true);
                  r.touchData.start = null;
                }
              }
            } // Re-project


            var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);
            now[0] = pos[0];
            now[1] = pos[1];
          }
        }

      for (var j = 0; j < now.length; j++) {
        earlier[j] = now[j];
      } // the active bg indicator should be removed when making a swipe that is neither for dragging nodes or panning


      if (capture && e.touches.length > 0 && !r.hoverData.draggingEles && !r.swipePanning && r.data.bgActivePosistion != null) {
        r.data.bgActivePosistion = undefined;
        r.redrawHint('select', true);
        r.redraw();
      }
    }, false);
    var touchcancelHandler;
    r.registerBinding(window, 'touchcancel', touchcancelHandler = function touchcancelHandler(e) {
      // eslint-disable-line no-unused-vars
      var start = r.touchData.start;
      r.touchData.capture = false;

      if (start) {
        start.unactivate();
      }
    });
    var touchendHandler;
    r.registerBinding(window, 'touchend', touchendHandler = function touchendHandler(e) {
      // eslint-disable-line no-unused-vars
      var start = r.touchData.start;
      var capture = r.touchData.capture;

      if (capture) {
        if (e.touches.length === 0) {
          r.touchData.capture = false;
        }

        e.preventDefault();
      } else {
        return;
      }

      var select = r.selection;
      r.swipePanning = false;
      r.hoverData.draggingEles = false;
      var cy = r.cy;
      var zoom = cy.zoom();
      var now = r.touchData.now;
      var earlier = r.touchData.earlier;

      if (e.touches[0]) {
        var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);
        now[0] = pos[0];
        now[1] = pos[1];
      }

      if (e.touches[1]) {
        var pos = r.projectIntoViewport(e.touches[1].clientX, e.touches[1].clientY);
        now[2] = pos[0];
        now[3] = pos[1];
      }

      if (e.touches[2]) {
        var pos = r.projectIntoViewport(e.touches[2].clientX, e.touches[2].clientY);
        now[4] = pos[0];
        now[5] = pos[1];
      }

      if (start) {
        start.unactivate();
      }

      var ctxTapend;

      if (r.touchData.cxt) {
        ctxTapend = {
          originalEvent: e,
          type: 'cxttapend',
          position: {
            x: now[0],
            y: now[1]
          }
        };

        if (start) {
          start.emit(ctxTapend);
        } else {
          cy.emit(ctxTapend);
        }

        if (!r.touchData.cxtDragged) {
          var ctxTap = {
            originalEvent: e,
            type: 'cxttap',
            position: {
              x: now[0],
              y: now[1]
            }
          };

          if (start) {
            start.emit(ctxTap);
          } else {
            cy.emit(ctxTap);
          }
        }

        if (r.touchData.start) {
          r.touchData.start._private.grabbed = false;
        }

        r.touchData.cxt = false;
        r.touchData.start = null;
        r.redraw();
        return;
      } // no more box selection if we don't have three fingers


      if (!e.touches[2] && cy.boxSelectionEnabled() && r.touchData.selecting) {
        r.touchData.selecting = false;
        var box = cy.collection(r.getAllInBox(select[0], select[1], select[2], select[3]));
        select[0] = undefined;
        select[1] = undefined;
        select[2] = undefined;
        select[3] = undefined;
        select[4] = 0;
        r.redrawHint('select', true);
        cy.emit({
          type: 'boxend',
          originalEvent: e,
          position: {
            x: now[0],
            y: now[1]
          }
        });

        var eleWouldBeSelected = function eleWouldBeSelected(ele) {
          return ele.selectable() && !ele.selected();
        };

        box.emit('box').stdFilter(eleWouldBeSelected).select().emit('boxselect');

        if (box.nonempty()) {
          r.redrawHint('eles', true);
        }

        r.redraw();
      }

      if (start != null) {
        start.unactivate();
      }

      if (e.touches[2]) {
        r.data.bgActivePosistion = undefined;
        r.redrawHint('select', true);
      } else if (e.touches[1]) ; else if (e.touches[0]) ; else if (!e.touches[0]) {
        r.data.bgActivePosistion = undefined;
        r.redrawHint('select', true);
        var draggedEles = r.dragData.touchDragEles;

        if (start != null) {
          var startWasGrabbed = start._private.grabbed;
          freeDraggedElements(draggedEles);
          r.redrawHint('drag', true);
          r.redrawHint('eles', true);

          if (startWasGrabbed) {
            start.emit('freeon');
            draggedEles.emit('free');

            if (r.dragData.didDrag) {
              start.emit('dragfreeon');
              draggedEles.emit('dragfree');
            }
          }

          triggerEvents(start, ['touchend', 'tapend', 'vmouseup', 'tapdragout'], e, {
            x: now[0],
            y: now[1]
          });
          start.unactivate();
          r.touchData.start = null;
        } else {
          var near = r.findNearestElement(now[0], now[1], true, true);
          triggerEvents(near, ['touchend', 'tapend', 'vmouseup', 'tapdragout'], e, {
            x: now[0],
            y: now[1]
          });
        }

        var dx = r.touchData.startPosition[0] - now[0];
        var dx2 = dx * dx;
        var dy = r.touchData.startPosition[1] - now[1];
        var dy2 = dy * dy;
        var dist2 = dx2 + dy2;
        var rdist2 = dist2 * zoom * zoom; // Tap event, roughly same as mouse click event for touch

        if (!r.touchData.singleTouchMoved) {
          if (!start) {
            cy.$(':selected').unselect(['tapunselect']);
          }

          triggerEvents(start, ['tap', 'vclick'], e, {
            x: now[0],
            y: now[1]
          });
        } // Prepare to select the currently touched node, only if it hasn't been dragged past a certain distance


        if (start != null && !r.dragData.didDrag // didn't drag nodes around
        && start._private.selectable && rdist2 < r.touchTapThreshold2 && !r.pinching // pinch to zoom should not affect selection
        ) {
            if (cy.selectionType() === 'single') {
              cy.$(isSelected).unmerge(start).unselect(['tapunselect']);
              start.select(['tapselect']);
            } else {
              if (start.selected()) {
                start.unselect(['tapunselect']);
              } else {
                start.select(['tapselect']);
              }
            }

            r.redrawHint('eles', true);
          }

        r.touchData.singleTouchMoved = true;
      }

      for (var j = 0; j < now.length; j++) {
        earlier[j] = now[j];
      }

      r.dragData.didDrag = false; // reset for next touchstart

      if (e.touches.length === 0) {
        r.touchData.dragDelta = [];
        r.touchData.startPosition = null;
        r.touchData.startGPosition = null;
        r.touchData.didSelect = false;
      }

      if (e.touches.length < 2) {
        if (e.touches.length === 1) {
          // the old start global pos'n may not be the same finger that remains
          r.touchData.startGPosition = [e.touches[0].clientX, e.touches[0].clientY];
        }

        r.pinching = false;
        r.redrawHint('eles', true);
        r.redraw();
      } //r.redraw();

    }, false); // fallback compatibility layer for ms pointer events

    if (typeof TouchEvent === 'undefined') {
      var pointers = [];

      var makeTouch = function makeTouch(e) {
        return {
          clientX: e.clientX,
          clientY: e.clientY,
          force: 1,
          identifier: e.pointerId,
          pageX: e.pageX,
          pageY: e.pageY,
          radiusX: e.width / 2,
          radiusY: e.height / 2,
          screenX: e.screenX,
          screenY: e.screenY,
          target: e.target
        };
      };

      var makePointer = function makePointer(e) {
        return {
          event: e,
          touch: makeTouch(e)
        };
      };

      var addPointer = function addPointer(e) {
        pointers.push(makePointer(e));
      };

      var removePointer = function removePointer(e) {
        for (var i = 0; i < pointers.length; i++) {
          var p = pointers[i];

          if (p.event.pointerId === e.pointerId) {
            pointers.splice(i, 1);
            return;
          }
        }
      };

      var updatePointer = function updatePointer(e) {
        var p = pointers.filter(function (p) {
          return p.event.pointerId === e.pointerId;
        })[0];
        p.event = e;
        p.touch = makeTouch(e);
      };

      var addTouchesToEvent = function addTouchesToEvent(e) {
        e.touches = pointers.map(function (p) {
          return p.touch;
        });
      };

      var pointerIsMouse = function pointerIsMouse(e) {
        return e.pointerType === 'mouse' || e.pointerType === 4;
      };

      r.registerBinding(r.container, 'pointerdown', function (e) {
        if (pointerIsMouse(e)) {
          return;
        } // mouse already handled


        e.preventDefault();
        addPointer(e);
        addTouchesToEvent(e);
        touchstartHandler(e);
      });
      r.registerBinding(r.container, 'pointerup', function (e) {
        if (pointerIsMouse(e)) {
          return;
        } // mouse already handled


        removePointer(e);
        addTouchesToEvent(e);
        touchendHandler(e);
      });
      r.registerBinding(r.container, 'pointercancel', function (e) {
        if (pointerIsMouse(e)) {
          return;
        } // mouse already handled


        removePointer(e);
        addTouchesToEvent(e);
        touchcancelHandler(e);
      });
      r.registerBinding(r.container, 'pointermove', function (e) {
        if (pointerIsMouse(e)) {
          return;
        } // mouse already handled


        e.preventDefault();
        updatePointer(e);
        addTouchesToEvent(e);
        touchmoveHandler(e);
      });
    }
  };

  var BRp$d = {};

  BRp$d.generatePolygon = function (name, points) {
    return this.nodeShapes[name] = {
      renderer: this,
      name: name,
      points: points,
      draw: function draw(context, centerX, centerY, width, height) {
        this.renderer.nodeShapeImpl('polygon', context, centerX, centerY, width, height, this.points);
      },
      intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding) {
        return polygonIntersectLine(x, y, this.points, nodeX, nodeY, width / 2, height / 2, padding);
      },
      checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY) {
        return pointInsidePolygon(x, y, this.points, centerX, centerY, width, height, [0, -1], padding);
      }
    };
  };

  BRp$d.generateEllipse = function () {
    return this.nodeShapes['ellipse'] = {
      renderer: this,
      name: 'ellipse',
      draw: function draw(context, centerX, centerY, width, height) {
        this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width, height);
      },
      intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding) {
        return intersectLineEllipse(x, y, nodeX, nodeY, width / 2 + padding, height / 2 + padding);
      },
      checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY) {
        return checkInEllipse(x, y, width, height, centerX, centerY, padding);
      }
    };
  };

  BRp$d.generateRoundPolygon = function (name, points) {
    // Pre-compute control points
    // Since these points depend on the radius length (which in turns depend on the width/height of the node) we will only pre-compute
    // the unit vectors.
    // For simplicity the layout will be:
    // [ p0, UnitVectorP0P1, p1, UniVectorP1P2, ..., pn, UnitVectorPnP0 ]
    var allPoints = new Array(points.length * 2);

    for (var i = 0; i < points.length / 2; i++) {
      var sourceIndex = i * 2;
      var destIndex = void 0;

      if (i < points.length / 2 - 1) {
        destIndex = (i + 1) * 2;
      } else {
        destIndex = 0;
      }

      allPoints[i * 4] = points[sourceIndex];
      allPoints[i * 4 + 1] = points[sourceIndex + 1];
      var xDest = points[destIndex] - points[sourceIndex];
      var yDest = points[destIndex + 1] - points[sourceIndex + 1];
      var norm = Math.sqrt(xDest * xDest + yDest * yDest);
      allPoints[i * 4 + 2] = xDest / norm;
      allPoints[i * 4 + 3] = yDest / norm;
    }

    return this.nodeShapes[name] = {
      renderer: this,
      name: name,
      points: allPoints,
      draw: function draw(context, centerX, centerY, width, height) {
        this.renderer.nodeShapeImpl('round-polygon', context, centerX, centerY, width, height, this.points);
      },
      intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding) {
        return roundPolygonIntersectLine(x, y, this.points, nodeX, nodeY, width, height);
      },
      checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY) {
        return pointInsideRoundPolygon(x, y, this.points, centerX, centerY, width, height);
      }
    };
  };

  BRp$d.generateRoundRectangle = function () {
    return this.nodeShapes['round-rectangle'] = this.nodeShapes['roundrectangle'] = {
      renderer: this,
      name: 'round-rectangle',
      points: generateUnitNgonPointsFitToSquare(4, 0),
      draw: function draw(context, centerX, centerY, width, height) {
        this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width, height);
      },
      intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding) {
        return roundRectangleIntersectLine(x, y, nodeX, nodeY, width, height, padding);
      },
      checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY) {
        var cornerRadius = getRoundRectangleRadius(width, height);
        var diam = cornerRadius * 2; // Check hBox

        if (pointInsidePolygon(x, y, this.points, centerX, centerY, width, height - diam, [0, -1], padding)) {
          return true;
        } // Check vBox


        if (pointInsidePolygon(x, y, this.points, centerX, centerY, width - diam, height, [0, -1], padding)) {
          return true;
        } // Check top left quarter circle


        if (checkInEllipse(x, y, diam, diam, centerX - width / 2 + cornerRadius, centerY - height / 2 + cornerRadius, padding)) {
          return true;
        } // Check top right quarter circle


        if (checkInEllipse(x, y, diam, diam, centerX + width / 2 - cornerRadius, centerY - height / 2 + cornerRadius, padding)) {
          return true;
        } // Check bottom right quarter circle


        if (checkInEllipse(x, y, diam, diam, centerX + width / 2 - cornerRadius, centerY + height / 2 - cornerRadius, padding)) {
          return true;
        } // Check bottom left quarter circle


        if (checkInEllipse(x, y, diam, diam, centerX - width / 2 + cornerRadius, centerY + height / 2 - cornerRadius, padding)) {
          return true;
        }

        return false;
      }
    };
  };

  BRp$d.generateCutRectangle = function () {
    return this.nodeShapes['cut-rectangle'] = this.nodeShapes['cutrectangle'] = {
      renderer: this,
      name: 'cut-rectangle',
      cornerLength: getCutRectangleCornerLength(),
      points: generateUnitNgonPointsFitToSquare(4, 0),
      draw: function draw(context, centerX, centerY, width, height) {
        this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width, height);
      },
      generateCutTrianglePts: function generateCutTrianglePts(width, height, centerX, centerY) {
        var cl = this.cornerLength;
        var hh = height / 2;
        var hw = width / 2;
        var xBegin = centerX - hw;
        var xEnd = centerX + hw;
        var yBegin = centerY - hh;
        var yEnd = centerY + hh; // points are in clockwise order, inner (imaginary) triangle pt on [4, 5]

        return {
          topLeft: [xBegin, yBegin + cl, xBegin + cl, yBegin, xBegin + cl, yBegin + cl],
          topRight: [xEnd - cl, yBegin, xEnd, yBegin + cl, xEnd - cl, yBegin + cl],
          bottomRight: [xEnd, yEnd - cl, xEnd - cl, yEnd, xEnd - cl, yEnd - cl],
          bottomLeft: [xBegin + cl, yEnd, xBegin, yEnd - cl, xBegin + cl, yEnd - cl]
        };
      },
      intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding) {
        var cPts = this.generateCutTrianglePts(width + 2 * padding, height + 2 * padding, nodeX, nodeY);
        var pts = [].concat.apply([], [cPts.topLeft.splice(0, 4), cPts.topRight.splice(0, 4), cPts.bottomRight.splice(0, 4), cPts.bottomLeft.splice(0, 4)]);
        return polygonIntersectLine(x, y, pts, nodeX, nodeY);
      },
      checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY) {
        // Check hBox
        if (pointInsidePolygon(x, y, this.points, centerX, centerY, width, height - 2 * this.cornerLength, [0, -1], padding)) {
          return true;
        } // Check vBox


        if (pointInsidePolygon(x, y, this.points, centerX, centerY, width - 2 * this.cornerLength, height, [0, -1], padding)) {
          return true;
        }

        var cutTrianglePts = this.generateCutTrianglePts(width, height, centerX, centerY);
        return pointInsidePolygonPoints(x, y, cutTrianglePts.topLeft) || pointInsidePolygonPoints(x, y, cutTrianglePts.topRight) || pointInsidePolygonPoints(x, y, cutTrianglePts.bottomRight) || pointInsidePolygonPoints(x, y, cutTrianglePts.bottomLeft);
      }
    };
  };

  BRp$d.generateBarrel = function () {
    return this.nodeShapes['barrel'] = {
      renderer: this,
      name: 'barrel',
      points: generateUnitNgonPointsFitToSquare(4, 0),
      draw: function draw(context, centerX, centerY, width, height) {
        this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width, height);
      },
      intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding) {
        // use two fixed t values for the bezier curve approximation
        var t0 = 0.15;
        var t1 = 0.5;
        var t2 = 0.85;
        var bPts = this.generateBarrelBezierPts(width + 2 * padding, height + 2 * padding, nodeX, nodeY);

        var approximateBarrelCurvePts = function approximateBarrelCurvePts(pts) {
          // approximate curve pts based on the two t values
          var m0 = qbezierPtAt({
            x: pts[0],
            y: pts[1]
          }, {
            x: pts[2],
            y: pts[3]
          }, {
            x: pts[4],
            y: pts[5]
          }, t0);
          var m1 = qbezierPtAt({
            x: pts[0],
            y: pts[1]
          }, {
            x: pts[2],
            y: pts[3]
          }, {
            x: pts[4],
            y: pts[5]
          }, t1);
          var m2 = qbezierPtAt({
            x: pts[0],
            y: pts[1]
          }, {
            x: pts[2],
            y: pts[3]
          }, {
            x: pts[4],
            y: pts[5]
          }, t2);
          return [pts[0], pts[1], m0.x, m0.y, m1.x, m1.y, m2.x, m2.y, pts[4], pts[5]];
        };

        var pts = [].concat(approximateBarrelCurvePts(bPts.topLeft), approximateBarrelCurvePts(bPts.topRight), approximateBarrelCurvePts(bPts.bottomRight), approximateBarrelCurvePts(bPts.bottomLeft));
        return polygonIntersectLine(x, y, pts, nodeX, nodeY);
      },
      generateBarrelBezierPts: function generateBarrelBezierPts(width, height, centerX, centerY) {
        var hh = height / 2;
        var hw = width / 2;
        var xBegin = centerX - hw;
        var xEnd = centerX + hw;
        var yBegin = centerY - hh;
        var yEnd = centerY + hh;
        var curveConstants = getBarrelCurveConstants(width, height);
        var hOffset = curveConstants.heightOffset;
        var wOffset = curveConstants.widthOffset;
        var ctrlPtXOffset = curveConstants.ctrlPtOffsetPct * width; // points are in clockwise order, inner (imaginary) control pt on [4, 5]

        var pts = {
          topLeft: [xBegin, yBegin + hOffset, xBegin + ctrlPtXOffset, yBegin, xBegin + wOffset, yBegin],
          topRight: [xEnd - wOffset, yBegin, xEnd - ctrlPtXOffset, yBegin, xEnd, yBegin + hOffset],
          bottomRight: [xEnd, yEnd - hOffset, xEnd - ctrlPtXOffset, yEnd, xEnd - wOffset, yEnd],
          bottomLeft: [xBegin + wOffset, yEnd, xBegin + ctrlPtXOffset, yEnd, xBegin, yEnd - hOffset]
        };
        pts.topLeft.isTop = true;
        pts.topRight.isTop = true;
        pts.bottomLeft.isBottom = true;
        pts.bottomRight.isBottom = true;
        return pts;
      },
      checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY) {
        var curveConstants = getBarrelCurveConstants(width, height);
        var hOffset = curveConstants.heightOffset;
        var wOffset = curveConstants.widthOffset; // Check hBox

        if (pointInsidePolygon(x, y, this.points, centerX, centerY, width, height - 2 * hOffset, [0, -1], padding)) {
          return true;
        } // Check vBox


        if (pointInsidePolygon(x, y, this.points, centerX, centerY, width - 2 * wOffset, height, [0, -1], padding)) {
          return true;
        }

        var barrelCurvePts = this.generateBarrelBezierPts(width, height, centerX, centerY);

        var getCurveT = function getCurveT(x, y, curvePts) {
          var x0 = curvePts[4];
          var x1 = curvePts[2];
          var x2 = curvePts[0];
          var y0 = curvePts[5]; // var y1 = curvePts[ 3 ];

          var y2 = curvePts[1];
          var xMin = Math.min(x0, x2);
          var xMax = Math.max(x0, x2);
          var yMin = Math.min(y0, y2);
          var yMax = Math.max(y0, y2);

          if (xMin <= x && x <= xMax && yMin <= y && y <= yMax) {
            var coeff = bezierPtsToQuadCoeff(x0, x1, x2);
            var roots = solveQuadratic(coeff[0], coeff[1], coeff[2], x);
            var validRoots = roots.filter(function (r) {
              return 0 <= r && r <= 1;
            });

            if (validRoots.length > 0) {
              return validRoots[0];
            }
          }

          return null;
        };

        var curveRegions = Object.keys(barrelCurvePts);

        for (var i = 0; i < curveRegions.length; i++) {
          var corner = curveRegions[i];
          var cornerPts = barrelCurvePts[corner];
          var t = getCurveT(x, y, cornerPts);

          if (t == null) {
            continue;
          }

          var y0 = cornerPts[5];
          var y1 = cornerPts[3];
          var y2 = cornerPts[1];
          var bezY = qbezierAt(y0, y1, y2, t);

          if (cornerPts.isTop && bezY <= y) {
            return true;
          }

          if (cornerPts.isBottom && y <= bezY) {
            return true;
          }
        }

        return false;
      }
    };
  };

  BRp$d.generateBottomRoundrectangle = function () {
    return this.nodeShapes['bottom-round-rectangle'] = this.nodeShapes['bottomroundrectangle'] = {
      renderer: this,
      name: 'bottom-round-rectangle',
      points: generateUnitNgonPointsFitToSquare(4, 0),
      draw: function draw(context, centerX, centerY, width, height) {
        this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width, height);
      },
      intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding) {
        var topStartX = nodeX - (width / 2 + padding);
        var topStartY = nodeY - (height / 2 + padding);
        var topEndY = topStartY;
        var topEndX = nodeX + (width / 2 + padding);
        var topIntersections = finiteLinesIntersect(x, y, nodeX, nodeY, topStartX, topStartY, topEndX, topEndY, false);

        if (topIntersections.length > 0) {
          return topIntersections;
        }

        return roundRectangleIntersectLine(x, y, nodeX, nodeY, width, height, padding);
      },
      checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY) {
        var cornerRadius = getRoundRectangleRadius(width, height);
        var diam = 2 * cornerRadius; // Check hBox

        if (pointInsidePolygon(x, y, this.points, centerX, centerY, width, height - diam, [0, -1], padding)) {
          return true;
        } // Check vBox


        if (pointInsidePolygon(x, y, this.points, centerX, centerY, width - diam, height, [0, -1], padding)) {
          return true;
        } // check non-rounded top side


        var outerWidth = width / 2 + 2 * padding;
        var outerHeight = height / 2 + 2 * padding;
        var points = [centerX - outerWidth, centerY - outerHeight, centerX - outerWidth, centerY, centerX + outerWidth, centerY, centerX + outerWidth, centerY - outerHeight];

        if (pointInsidePolygonPoints(x, y, points)) {
          return true;
        } // Check bottom right quarter circle


        if (checkInEllipse(x, y, diam, diam, centerX + width / 2 - cornerRadius, centerY + height / 2 - cornerRadius, padding)) {
          return true;
        } // Check bottom left quarter circle


        if (checkInEllipse(x, y, diam, diam, centerX - width / 2 + cornerRadius, centerY + height / 2 - cornerRadius, padding)) {
          return true;
        }

        return false;
      }
    };
  };

  BRp$d.registerNodeShapes = function () {
    var nodeShapes = this.nodeShapes = {};
    var renderer = this;
    this.generateEllipse();
    this.generatePolygon('triangle', generateUnitNgonPointsFitToSquare(3, 0));
    this.generateRoundPolygon('round-triangle', generateUnitNgonPointsFitToSquare(3, 0));
    this.generatePolygon('rectangle', generateUnitNgonPointsFitToSquare(4, 0));
    nodeShapes['square'] = nodeShapes['rectangle'];
    this.generateRoundRectangle();
    this.generateCutRectangle();
    this.generateBarrel();
    this.generateBottomRoundrectangle();
    {
      var diamondPoints = [0, 1, 1, 0, 0, -1, -1, 0];
      this.generatePolygon('diamond', diamondPoints);
      this.generateRoundPolygon('round-diamond', diamondPoints);
    }
    this.generatePolygon('pentagon', generateUnitNgonPointsFitToSquare(5, 0));
    this.generateRoundPolygon('round-pentagon', generateUnitNgonPointsFitToSquare(5, 0));
    this.generatePolygon('hexagon', generateUnitNgonPointsFitToSquare(6, 0));
    this.generateRoundPolygon('round-hexagon', generateUnitNgonPointsFitToSquare(6, 0));
    this.generatePolygon('heptagon', generateUnitNgonPointsFitToSquare(7, 0));
    this.generateRoundPolygon('round-heptagon', generateUnitNgonPointsFitToSquare(7, 0));
    this.generatePolygon('octagon', generateUnitNgonPointsFitToSquare(8, 0));
    this.generateRoundPolygon('round-octagon', generateUnitNgonPointsFitToSquare(8, 0));
    var star5Points = new Array(20);
    {
      var outerPoints = generateUnitNgonPoints(5, 0);
      var innerPoints = generateUnitNgonPoints(5, Math.PI / 5); // Outer radius is 1; inner radius of star is smaller

      var innerRadius = 0.5 * (3 - Math.sqrt(5));
      innerRadius *= 1.57;

      for (var i = 0; i < innerPoints.length / 2; i++) {
        innerPoints[i * 2] *= innerRadius;
        innerPoints[i * 2 + 1] *= innerRadius;
      }

      for (var i = 0; i < 20 / 4; i++) {
        star5Points[i * 4] = outerPoints[i * 2];
        star5Points[i * 4 + 1] = outerPoints[i * 2 + 1];
        star5Points[i * 4 + 2] = innerPoints[i * 2];
        star5Points[i * 4 + 3] = innerPoints[i * 2 + 1];
      }
    }
    star5Points = fitPolygonToSquare(star5Points);
    this.generatePolygon('star', star5Points);
    this.generatePolygon('vee', [-1, -1, 0, -0.333, 1, -1, 0, 1]);
    this.generatePolygon('rhomboid', [-1, -1, 0.333, -1, 1, 1, -0.333, 1]);
    this.nodeShapes['concavehexagon'] = this.generatePolygon('concave-hexagon', [-1, -0.95, -0.75, 0, -1, 0.95, 1, 0.95, 0.75, 0, 1, -0.95]);
    {
      var tagPoints = [-1, -1, 0.25, -1, 1, 0, 0.25, 1, -1, 1];
      this.generatePolygon('tag', tagPoints);
      this.generateRoundPolygon('round-tag', tagPoints);
    }

    nodeShapes.makePolygon = function (points) {
      // use caching on user-specified polygons so they are as fast as native shapes
      var key = points.join('$');
      var name = 'polygon-' + key;
      var shape;

      if (shape = this[name]) {
        // got cached shape
        return shape;
      } // create and cache new shape


      return renderer.generatePolygon(name, points);
    };
  };

  var BRp$e = {};

  BRp$e.timeToRender = function () {
    return this.redrawTotalTime / this.redrawCount;
  };

  BRp$e.redraw = function (options) {
    options = options || staticEmptyObject();
    var r = this;

    if (r.averageRedrawTime === undefined) {
      r.averageRedrawTime = 0;
    }

    if (r.lastRedrawTime === undefined) {
      r.lastRedrawTime = 0;
    }

    if (r.lastDrawTime === undefined) {
      r.lastDrawTime = 0;
    }

    r.requestedFrame = true;
    r.renderOptions = options;
  };

  BRp$e.beforeRender = function (fn, priority) {
    // the renderer can't add tick callbacks when destroyed
    if (this.destroyed) {
      return;
    }

    if (priority == null) {
      error('Priority is not optional for beforeRender');
    }

    var cbs = this.beforeRenderCallbacks;
    cbs.push({
      fn: fn,
      priority: priority
    }); // higher priority callbacks executed first

    cbs.sort(function (a, b) {
      return b.priority - a.priority;
    });
  };

  var beforeRenderCallbacks = function beforeRenderCallbacks(r, willDraw, startTime) {
    var cbs = r.beforeRenderCallbacks;

    for (var i = 0; i < cbs.length; i++) {
      cbs[i].fn(willDraw, startTime);
    }
  };

  BRp$e.startRenderLoop = function () {
    var r = this;
    var cy = r.cy;

    if (r.renderLoopStarted) {
      return;
    } else {
      r.renderLoopStarted = true;
    }

    var renderFn = function renderFn(requestTime) {
      if (r.destroyed) {
        return;
      }

      if (cy.batching()) ; else if (r.requestedFrame && !r.skipFrame) {
        beforeRenderCallbacks(r, true, requestTime);
        var startTime = performanceNow();
        r.render(r.renderOptions);
        var endTime = r.lastDrawTime = performanceNow();

        if (r.averageRedrawTime === undefined) {
          r.averageRedrawTime = endTime - startTime;
        }

        if (r.redrawCount === undefined) {
          r.redrawCount = 0;
        }

        r.redrawCount++;

        if (r.redrawTotalTime === undefined) {
          r.redrawTotalTime = 0;
        }

        var duration = endTime - startTime;
        r.redrawTotalTime += duration;
        r.lastRedrawTime = duration; // use a weighted average with a bias from the previous average so we don't spike so easily

        r.averageRedrawTime = r.averageRedrawTime / 2 + duration / 2;
        r.requestedFrame = false;
      } else {
        beforeRenderCallbacks(r, false, requestTime);
      }

      r.skipFrame = false;
      requestAnimationFrame(renderFn);
    };

    requestAnimationFrame(renderFn);
  };

  var BaseRenderer = function BaseRenderer(options) {
    this.init(options);
  };

  var BR = BaseRenderer;
  var BRp$f = BR.prototype;
  BRp$f.clientFunctions = ['redrawHint', 'render', 'renderTo', 'matchCanvasSize', 'nodeShapeImpl', 'arrowShapeImpl'];

  BRp$f.init = function (options) {
    var r = this;
    r.options = options;
    r.cy = options.cy;
    var ctr = r.container = options.cy.container(); // prepend a stylesheet in the head such that

    if (window$1) {
      var document = window$1.document;
      var head = document.head;
      var stylesheetId = '__________cytoscape_stylesheet';
      var className = '__________cytoscape_container';
      var stylesheetAlreadyExists = document.getElementById(stylesheetId) != null;

      if (ctr.className.indexOf(className) < 0) {
        ctr.className = (ctr.className || '') + ' ' + className;
      }

      if (!stylesheetAlreadyExists) {
        var stylesheet = document.createElement('style');
        stylesheet.id = stylesheetId;
        stylesheet.innerHTML = '.' + className + ' { position: relative; }';
        head.insertBefore(stylesheet, head.children[0]); // first so lowest priority
      }

      var computedStyle = window$1.getComputedStyle(ctr);
      var position = computedStyle.getPropertyValue('position');

      if (position === 'static') {
        warn('A Cytoscape container has style position:static and so can not use UI extensions properly');
      }
    }

    r.selection = [undefined, undefined, undefined, undefined, 0]; // Coordinates for selection box, plus enabled flag

    r.bezierProjPcts = [0.05, 0.225, 0.4, 0.5, 0.6, 0.775, 0.95]; //--Pointer-related data

    r.hoverData = {
      down: null,
      last: null,
      downTime: null,
      triggerMode: null,
      dragging: false,
      initialPan: [null, null],
      capture: false
    };
    r.dragData = {
      possibleDragElements: []
    };
    r.touchData = {
      start: null,
      capture: false,
      // These 3 fields related to tap, taphold events
      startPosition: [null, null, null, null, null, null],
      singleTouchStartTime: null,
      singleTouchMoved: true,
      now: [null, null, null, null, null, null],
      earlier: [null, null, null, null, null, null]
    };
    r.redraws = 0;
    r.showFps = options.showFps;
    r.debug = options.debug;
    r.hideEdgesOnViewport = options.hideEdgesOnViewport;
    r.textureOnViewport = options.textureOnViewport;
    r.wheelSensitivity = options.wheelSensitivity;
    r.motionBlurEnabled = options.motionBlur; // on by default

    r.forcedPixelRatio = number(options.pixelRatio) ? options.pixelRatio : null;
    r.motionBlur = options.motionBlur; // for initial kick off

    r.motionBlurOpacity = options.motionBlurOpacity;
    r.motionBlurTransparency = 1 - r.motionBlurOpacity;
    r.motionBlurPxRatio = 1;
    r.mbPxRBlurry = 1; //0.8;

    r.minMbLowQualFrames = 4;
    r.fullQualityMb = false;
    r.clearedForMotionBlur = [];
    r.desktopTapThreshold = options.desktopTapThreshold;
    r.desktopTapThreshold2 = options.desktopTapThreshold * options.desktopTapThreshold;
    r.touchTapThreshold = options.touchTapThreshold;
    r.touchTapThreshold2 = options.touchTapThreshold * options.touchTapThreshold;
    r.tapholdDuration = 500;
    r.bindings = [];
    r.beforeRenderCallbacks = [];
    r.beforeRenderPriorities = {
      // higher priority execs before lower one
      animations: 400,
      eleCalcs: 300,
      eleTxrDeq: 200,
      lyrTxrDeq: 150,
      lyrTxrSkip: 100
    };
    r.registerNodeShapes();
    r.registerArrowShapes();
    r.registerCalculationListeners();
  };

  BRp$f.notify = function (eventName, eles) {
    var r = this;
    var cy = r.cy; // the renderer can't be notified after it's destroyed

    if (this.destroyed) {
      return;
    }

    if (eventName === 'init') {
      r.load();
      return;
    }

    if (eventName === 'destroy') {
      r.destroy();
      return;
    }

    if (eventName === 'add' || eventName === 'remove' || eventName === 'move' && cy.hasCompoundNodes() || eventName === 'load' || eventName === 'zorder' || eventName === 'mount') {
      r.invalidateCachedZSortedEles();
    }

    if (eventName === 'viewport') {
      r.redrawHint('select', true);
    }

    if (eventName === 'load' || eventName === 'resize' || eventName === 'mount') {
      r.invalidateContainerClientCoordsCache();
      r.matchCanvasSize(r.container);
    }

    r.redrawHint('eles', true);
    r.redrawHint('drag', true);
    this.startRenderLoop();
    this.redraw();
  };

  BRp$f.destroy = function () {
    var r = this;
    r.destroyed = true;
    r.cy.stopAnimationLoop();

    for (var i = 0; i < r.bindings.length; i++) {
      var binding = r.bindings[i];
      var b = binding;
      var tgt = b.target;
      (tgt.off || tgt.removeEventListener).apply(tgt, b.args);
    }

    r.bindings = [];
    r.beforeRenderCallbacks = [];
    r.onUpdateEleCalcsFns = [];

    if (r.removeObserver) {
      r.removeObserver.disconnect();
    }

    if (r.styleObserver) {
      r.styleObserver.disconnect();
    }

    if (r.resizeObserver) {
      r.resizeObserver.disconnect();
    }

    if (r.labelCalcDiv) {
      try {
        document.body.removeChild(r.labelCalcDiv); // eslint-disable-line no-undef
      } catch (e) {// ie10 issue #1014
      }
    }
  };

  BRp$f.isHeadless = function () {
    return false;
  };

  [BRp, BRp$a, BRp$b, BRp$c, BRp$d, BRp$e].forEach(function (props) {
    extend(BRp$f, props);
  });

  var fullFpsTime = 1000 / 60; // assume 60 frames per second

  var defs = {
    setupDequeueing: function setupDequeueing(opts) {
      return function setupDequeueingImpl() {
        var self = this;
        var r = this.renderer;

        if (self.dequeueingSetup) {
          return;
        } else {
          self.dequeueingSetup = true;
        }

        var queueRedraw = util(function () {
          r.redrawHint('eles', true);
          r.redrawHint('drag', true);
          r.redraw();
        }, opts.deqRedrawThreshold);

        var dequeue = function dequeue(willDraw, frameStartTime) {
          var startTime = performanceNow();
          var avgRenderTime = r.averageRedrawTime;
          var renderTime = r.lastRedrawTime;
          var deqd = [];
          var extent = r.cy.extent();
          var pixelRatio = r.getPixelRatio(); // if we aren't in a tick that causes a draw, then the rendered style
          // queue won't automatically be flushed before dequeueing starts

          if (!willDraw) {
            r.flushRenderedStyleQueue();
          }

          while (true) {
            // eslint-disable-line no-constant-condition
            var now = performanceNow();
            var duration = now - startTime;
            var frameDuration = now - frameStartTime;

            if (renderTime < fullFpsTime) {
              // if we're rendering faster than the ideal fps, then do dequeueing
              // during all of the remaining frame time
              var timeAvailable = fullFpsTime - (willDraw ? avgRenderTime : 0);

              if (frameDuration >= opts.deqFastCost * timeAvailable) {
                break;
              }
            } else {
              if (willDraw) {
                if (duration >= opts.deqCost * renderTime || duration >= opts.deqAvgCost * avgRenderTime) {
                  break;
                }
              } else if (frameDuration >= opts.deqNoDrawCost * fullFpsTime) {
                break;
              }
            }

            var thisDeqd = opts.deq(self, pixelRatio, extent);

            if (thisDeqd.length > 0) {
              for (var i = 0; i < thisDeqd.length; i++) {
                deqd.push(thisDeqd[i]);
              }
            } else {
              break;
            }
          } // callbacks on dequeue


          if (deqd.length > 0) {
            opts.onDeqd(self, deqd);

            if (!willDraw && opts.shouldRedraw(self, deqd, pixelRatio, extent)) {
              queueRedraw();
            }
          }
        };

        var priority = opts.priority || noop;
        r.beforeRender(dequeue, priority(self));
      };
    }
  };

  // Uses keys so elements may share the same cache.

  var ElementTextureCacheLookup =
  /*#__PURE__*/
  function () {
    function ElementTextureCacheLookup(getKey) {
      var doesEleInvalidateKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : falsify;

      _classCallCheck(this, ElementTextureCacheLookup);

      this.idsByKey = new Map$1();
      this.keyForId = new Map$1();
      this.cachesByLvl = new Map$1();
      this.lvls = [];
      this.getKey = getKey;
      this.doesEleInvalidateKey = doesEleInvalidateKey;
    }

    _createClass(ElementTextureCacheLookup, [{
      key: "getIdsFor",
      value: function getIdsFor(key) {
        if (key == null) {
          error("Can not get id list for null key");
        }

        var idsByKey = this.idsByKey;
        var ids = this.idsByKey.get(key);

        if (!ids) {
          ids = new Set$1();
          idsByKey.set(key, ids);
        }

        return ids;
      }
    }, {
      key: "addIdForKey",
      value: function addIdForKey(key, id) {
        if (key != null) {
          this.getIdsFor(key).add(id);
        }
      }
    }, {
      key: "deleteIdForKey",
      value: function deleteIdForKey(key, id) {
        if (key != null) {
          this.getIdsFor(key)["delete"](id);
        }
      }
    }, {
      key: "getNumberOfIdsForKey",
      value: function getNumberOfIdsForKey(key) {
        if (key == null) {
          return 0;
        } else {
          return this.getIdsFor(key).size;
        }
      }
    }, {
      key: "updateKeyMappingFor",
      value: function updateKeyMappingFor(ele) {
        var id = ele.id();
        var prevKey = this.keyForId.get(id);
        var currKey = this.getKey(ele);
        this.deleteIdForKey(prevKey, id);
        this.addIdForKey(currKey, id);
        this.keyForId.set(id, currKey);
      }
    }, {
      key: "deleteKeyMappingFor",
      value: function deleteKeyMappingFor(ele) {
        var id = ele.id();
        var prevKey = this.keyForId.get(id);
        this.deleteIdForKey(prevKey, id);
        this.keyForId["delete"](id);
      }
    }, {
      key: "keyHasChangedFor",
      value: function keyHasChangedFor(ele) {
        var id = ele.id();
        var prevKey = this.keyForId.get(id);
        var newKey = this.getKey(ele);
        return prevKey !== newKey;
      }
    }, {
      key: "isInvalid",
      value: function isInvalid(ele) {
        return this.keyHasChangedFor(ele) || this.doesEleInvalidateKey(ele);
      }
    }, {
      key: "getCachesAt",
      value: function getCachesAt(lvl) {
        var cachesByLvl = this.cachesByLvl,
            lvls = this.lvls;
        var caches = cachesByLvl.get(lvl);

        if (!caches) {
          caches = new Map$1();
          cachesByLvl.set(lvl, caches);
          lvls.push(lvl);
        }

        return caches;
      }
    }, {
      key: "getCache",
      value: function getCache(key, lvl) {
        return this.getCachesAt(lvl).get(key);
      }
    }, {
      key: "get",
      value: function get(ele, lvl) {
        var key = this.getKey(ele);
        var cache = this.getCache(key, lvl); // getting for an element may need to add to the id list b/c eles can share keys

        if (cache != null) {
          this.updateKeyMappingFor(ele);
        }

        return cache;
      }
    }, {
      key: "getForCachedKey",
      value: function getForCachedKey(ele, lvl) {
        var key = this.keyForId.get(ele.id()); // n.b. use cached key, not newly computed key

        var cache = this.getCache(key, lvl);
        return cache;
      }
    }, {
      key: "hasCache",
      value: function hasCache(key, lvl) {
        return this.getCachesAt(lvl).has(key);
      }
    }, {
      key: "has",
      value: function has(ele, lvl) {
        var key = this.getKey(ele);
        return this.hasCache(key, lvl);
      }
    }, {
      key: "setCache",
      value: function setCache(key, lvl, cache) {
        cache.key = key;
        this.getCachesAt(lvl).set(key, cache);
      }
    }, {
      key: "set",
      value: function set(ele, lvl, cache) {
        var key = this.getKey(ele);
        this.setCache(key, lvl, cache);
        this.updateKeyMappingFor(ele);
      }
    }, {
      key: "deleteCache",
      value: function deleteCache(key, lvl) {
        this.getCachesAt(lvl)["delete"](key);
      }
    }, {
      key: "delete",
      value: function _delete(ele, lvl) {
        var key = this.getKey(ele);
        this.deleteCache(key, lvl);
      }
    }, {
      key: "invalidateKey",
      value: function invalidateKey(key) {
        var _this = this;

        this.lvls.forEach(function (lvl) {
          return _this.deleteCache(key, lvl);
        });
      } // returns true if no other eles reference the invalidated cache (n.b. other eles may need the cache with the same key)

    }, {
      key: "invalidate",
      value: function invalidate(ele) {
        var id = ele.id();
        var key = this.keyForId.get(id); // n.b. use stored key rather than current (potential key)

        this.deleteKeyMappingFor(ele);
        var entireKeyInvalidated = this.doesEleInvalidateKey(ele);

        if (entireKeyInvalidated) {
          // clear mapping for current key
          this.invalidateKey(key);
        }

        return entireKeyInvalidated || this.getNumberOfIdsForKey(key) === 0;
      }
    }]);

    return ElementTextureCacheLookup;
  }();

  var minTxrH = 25; // the size of the texture cache for small height eles (special case)

  var txrStepH = 50; // the min size of the regular cache, and the size it increases with each step up

  var minLvl = -4; // when scaling smaller than that we don't need to re-render

  var maxLvl = 3; // when larger than this scale just render directly (caching is not helpful)

  var maxZoom = 7.99; // beyond this zoom level, layered textures are not used

  var eleTxrSpacing = 8; // spacing between elements on textures to avoid blitting overlaps

  var defTxrWidth = 1024; // default/minimum texture width

  var maxTxrW = 1024; // the maximum width of a texture

  var maxTxrH = 1024; // the maximum height of a texture

  var minUtility = 0.2; // if usage of texture is less than this, it is retired

  var maxFullness = 0.8; // fullness of texture after which queue removal is checked

  var maxFullnessChecks = 10; // dequeued after this many checks

  var deqCost = 0.15; // % of add'l rendering cost allowed for dequeuing ele caches each frame

  var deqAvgCost = 0.1; // % of add'l rendering cost compared to average overall redraw time

  var deqNoDrawCost = 0.9; // % of avg frame time that can be used for dequeueing when not drawing

  var deqFastCost = 0.9; // % of frame time to be used when >60fps

  var deqRedrawThreshold = 100; // time to batch redraws together from dequeueing to allow more dequeueing calcs to happen in the meanwhile

  var maxDeqSize = 1; // number of eles to dequeue and render at higher texture in each batch

  var getTxrReasons = {
    dequeue: 'dequeue',
    downscale: 'downscale',
    highQuality: 'highQuality'
  };
  var initDefaults = defaults({
    getKey: null,
    doesEleInvalidateKey: falsify,
    drawElement: null,
    getBoundingBox: null,
    getRotationPoint: null,
    getRotationOffset: null,
    isVisible: trueify,
    allowEdgeTxrCaching: true,
    allowParentTxrCaching: true
  });

  var ElementTextureCache = function ElementTextureCache(renderer, initOptions) {
    var self = this;
    self.renderer = renderer;
    self.onDequeues = [];
    var opts = initDefaults(initOptions);
    extend(self, opts);
    self.lookup = new ElementTextureCacheLookup(opts.getKey, opts.doesEleInvalidateKey);
    self.setupDequeueing();
  };

  var ETCp = ElementTextureCache.prototype;
  ETCp.reasons = getTxrReasons; // the list of textures in which new subtextures for elements can be placed

  ETCp.getTextureQueue = function (txrH) {
    var self = this;
    self.eleImgCaches = self.eleImgCaches || {};
    return self.eleImgCaches[txrH] = self.eleImgCaches[txrH] || [];
  }; // the list of usused textures which can be recycled (in use in texture queue)


  ETCp.getRetiredTextureQueue = function (txrH) {
    var self = this;
    var rtxtrQs = self.eleImgCaches.retired = self.eleImgCaches.retired || {};
    var rtxtrQ = rtxtrQs[txrH] = rtxtrQs[txrH] || [];
    return rtxtrQ;
  }; // queue of element draw requests at different scale levels


  ETCp.getElementQueue = function () {
    var self = this;
    var q = self.eleCacheQueue = self.eleCacheQueue || new Heap(function (a, b) {
      return b.reqs - a.reqs;
    });
    return q;
  }; // queue of element draw requests at different scale levels (element id lookup)


  ETCp.getElementKeyToQueue = function () {
    var self = this;
    var k2q = self.eleKeyToCacheQueue = self.eleKeyToCacheQueue || {};
    return k2q;
  };

  ETCp.getElement = function (ele, bb, pxRatio, lvl, reason) {
    var self = this;
    var r = this.renderer;
    var zoom = r.cy.zoom();
    var lookup = this.lookup;

    if (bb.w === 0 || bb.h === 0 || isNaN(bb.w) || isNaN(bb.h) || !ele.visible()) {
      return null;
    }

    if (!self.allowEdgeTxrCaching && ele.isEdge() || !self.allowParentTxrCaching && ele.isParent()) {
      return null;
    }

    if (lvl == null) {
      lvl = Math.ceil(log2(zoom * pxRatio));
    }

    if (lvl < minLvl) {
      lvl = minLvl;
    } else if (zoom >= maxZoom || lvl > maxLvl) {
      return null;
    }

    var scale = Math.pow(2, lvl);
    var eleScaledH = bb.h * scale;
    var eleScaledW = bb.w * scale;
    var scaledLabelShown = r.eleTextBiggerThanMin(ele, scale);

    if (!this.isVisible(ele, scaledLabelShown)) {
      return null;
    }

    var eleCache = lookup.get(ele, lvl); // if this get was on an unused/invalidated cache, then restore the texture usage metric

    if (eleCache && eleCache.invalidated) {
      eleCache.invalidated = false;
      eleCache.texture.invalidatedWidth -= eleCache.width;
    }

    if (eleCache) {
      return eleCache;
    }

    var txrH; // which texture height this ele belongs to

    if (eleScaledH <= minTxrH) {
      txrH = minTxrH;
    } else if (eleScaledH <= txrStepH) {
      txrH = txrStepH;
    } else {
      txrH = Math.ceil(eleScaledH / txrStepH) * txrStepH;
    }

    if (eleScaledH > maxTxrH || eleScaledW > maxTxrW) {
      return null; // caching large elements is not efficient
    }

    var txrQ = self.getTextureQueue(txrH); // first try the second last one in case it has space at the end

    var txr = txrQ[txrQ.length - 2];

    var addNewTxr = function addNewTxr() {
      return self.recycleTexture(txrH, eleScaledW) || self.addTexture(txrH, eleScaledW);
    }; // try the last one if there is no second last one


    if (!txr) {
      txr = txrQ[txrQ.length - 1];
    } // if the last one doesn't exist, we need a first one


    if (!txr) {
      txr = addNewTxr();
    } // if there's no room in the current texture, we need a new one


    if (txr.width - txr.usedWidth < eleScaledW) {
      txr = addNewTxr();
    }

    var scalableFrom = function scalableFrom(otherCache) {
      return otherCache && otherCache.scaledLabelShown === scaledLabelShown;
    };

    var deqing = reason && reason === getTxrReasons.dequeue;
    var highQualityReq = reason && reason === getTxrReasons.highQuality;
    var downscaleReq = reason && reason === getTxrReasons.downscale;
    var higherCache; // the nearest cache with a higher level

    for (var l = lvl + 1; l <= maxLvl; l++) {
      var c = lookup.get(ele, l);

      if (c) {
        higherCache = c;
        break;
      }
    }

    var oneUpCache = higherCache && higherCache.level === lvl + 1 ? higherCache : null;

    var downscale = function downscale() {
      txr.context.drawImage(oneUpCache.texture.canvas, oneUpCache.x, 0, oneUpCache.width, oneUpCache.height, txr.usedWidth, 0, eleScaledW, eleScaledH);
    }; // reset ele area in texture


    txr.context.setTransform(1, 0, 0, 1, 0, 0);
    txr.context.clearRect(txr.usedWidth, 0, eleScaledW, txrH);

    if (scalableFrom(oneUpCache)) {
      // then we can relatively cheaply rescale the existing image w/o rerendering
      downscale();
    } else if (scalableFrom(higherCache)) {
      // then use the higher cache for now and queue the next level down
      // to cheaply scale towards the smaller level
      if (highQualityReq) {
        for (var _l = higherCache.level; _l > lvl; _l--) {
          oneUpCache = self.getElement(ele, bb, pxRatio, _l, getTxrReasons.downscale);
        }

        downscale();
      } else {
        self.queueElement(ele, higherCache.level - 1);
        return higherCache;
      }
    } else {
      var lowerCache; // the nearest cache with a lower level

      if (!deqing && !highQualityReq && !downscaleReq) {
        for (var _l2 = lvl - 1; _l2 >= minLvl; _l2--) {
          var _c = lookup.get(ele, _l2);

          if (_c) {
            lowerCache = _c;
            break;
          }
        }
      }

      if (scalableFrom(lowerCache)) {
        // then use the lower quality cache for now and queue the better one for later
        self.queueElement(ele, lvl);
        return lowerCache;
      }

      txr.context.translate(txr.usedWidth, 0);
      txr.context.scale(scale, scale);
      this.drawElement(txr.context, ele, bb, scaledLabelShown, false);
      txr.context.scale(1 / scale, 1 / scale);
      txr.context.translate(-txr.usedWidth, 0);
    }

    eleCache = {
      x: txr.usedWidth,
      texture: txr,
      level: lvl,
      scale: scale,
      width: eleScaledW,
      height: eleScaledH,
      scaledLabelShown: scaledLabelShown
    };
    txr.usedWidth += Math.ceil(eleScaledW + eleTxrSpacing);
    txr.eleCaches.push(eleCache);
    lookup.set(ele, lvl, eleCache);
    self.checkTextureFullness(txr);
    return eleCache;
  };

  ETCp.invalidateElements = function (eles) {
    for (var i = 0; i < eles.length; i++) {
      this.invalidateElement(eles[i]);
    }
  };

  ETCp.invalidateElement = function (ele) {
    var self = this;
    var lookup = self.lookup;
    var caches = [];
    var invalid = lookup.isInvalid(ele);

    if (!invalid) {
      return; // override the invalidation request if the element key has not changed
    }

    for (var lvl = minLvl; lvl <= maxLvl; lvl++) {
      var cache = lookup.getForCachedKey(ele, lvl);

      if (cache) {
        caches.push(cache);
      }
    }

    var noOtherElesUseCache = lookup.invalidate(ele);

    if (noOtherElesUseCache) {
      for (var i = 0; i < caches.length; i++) {
        var _cache = caches[i];
        var txr = _cache.texture; // remove space from the texture it belongs to

        txr.invalidatedWidth += _cache.width; // mark the cache as invalidated

        _cache.invalidated = true; // retire the texture if its utility is low

        self.checkTextureUtility(txr);
      }
    } // remove from queue since the old req was for the old state


    self.removeFromQueue(ele);
  };

  ETCp.checkTextureUtility = function (txr) {
    // invalidate all entries in the cache if the cache size is small
    if (txr.invalidatedWidth >= minUtility * txr.width) {
      this.retireTexture(txr);
    }
  };

  ETCp.checkTextureFullness = function (txr) {
    // if texture has been mostly filled and passed over several times, remove
    // it from the queue so we don't need to waste time looking at it to put new things
    var self = this;
    var txrQ = self.getTextureQueue(txr.height);

    if (txr.usedWidth / txr.width > maxFullness && txr.fullnessChecks >= maxFullnessChecks) {
      removeFromArray(txrQ, txr);
    } else {
      txr.fullnessChecks++;
    }
  };

  ETCp.retireTexture = function (txr) {
    var self = this;
    var txrH = txr.height;
    var txrQ = self.getTextureQueue(txrH);
    var lookup = this.lookup; // retire the texture from the active / searchable queue:

    removeFromArray(txrQ, txr);
    txr.retired = true; // remove the refs from the eles to the caches:

    var eleCaches = txr.eleCaches;

    for (var i = 0; i < eleCaches.length; i++) {
      var eleCache = eleCaches[i];
      lookup.deleteCache(eleCache.key, eleCache.level);
    }

    clearArray(eleCaches); // add the texture to a retired queue so it can be recycled in future:

    var rtxtrQ = self.getRetiredTextureQueue(txrH);
    rtxtrQ.push(txr);
  };

  ETCp.addTexture = function (txrH, minW) {
    var self = this;
    var txrQ = self.getTextureQueue(txrH);
    var txr = {};
    txrQ.push(txr);
    txr.eleCaches = [];
    txr.height = txrH;
    txr.width = Math.max(defTxrWidth, minW);
    txr.usedWidth = 0;
    txr.invalidatedWidth = 0;
    txr.fullnessChecks = 0;
    txr.canvas = self.renderer.makeOffscreenCanvas(txr.width, txr.height);
    txr.context = txr.canvas.getContext('2d');
    return txr;
  };

  ETCp.recycleTexture = function (txrH, minW) {
    var self = this;
    var txrQ = self.getTextureQueue(txrH);
    var rtxtrQ = self.getRetiredTextureQueue(txrH);

    for (var i = 0; i < rtxtrQ.length; i++) {
      var txr = rtxtrQ[i];

      if (txr.width >= minW) {
        txr.retired = false;
        txr.usedWidth = 0;
        txr.invalidatedWidth = 0;
        txr.fullnessChecks = 0;
        clearArray(txr.eleCaches);
        txr.context.setTransform(1, 0, 0, 1, 0, 0);
        txr.context.clearRect(0, 0, txr.width, txr.height);
        removeFromArray(rtxtrQ, txr);
        txrQ.push(txr);
        return txr;
      }
    }
  };

  ETCp.queueElement = function (ele, lvl) {
    var self = this;
    var q = self.getElementQueue();
    var k2q = self.getElementKeyToQueue();
    var key = this.getKey(ele);
    var existingReq = k2q[key];

    if (existingReq) {
      // use the max lvl b/c in between lvls are cheap to make
      existingReq.level = Math.max(existingReq.level, lvl);
      existingReq.eles.merge(ele);
      existingReq.reqs++;
      q.updateItem(existingReq);
    } else {
      var req = {
        eles: ele.spawn().merge(ele),
        level: lvl,
        reqs: 1,
        key: key
      };
      q.push(req);
      k2q[key] = req;
    }
  };

  ETCp.dequeue = function (pxRatio
  /*, extent*/
  ) {
    var self = this;
    var q = self.getElementQueue();
    var k2q = self.getElementKeyToQueue();
    var dequeued = [];
    var lookup = self.lookup;

    for (var i = 0; i < maxDeqSize; i++) {
      if (q.size() > 0) {
        var req = q.pop();
        var key = req.key;
        var ele = req.eles[0]; // all eles have the same key

        var cacheExists = lookup.hasCache(ele, req.level); // clear out the key to req lookup

        k2q[key] = null; // dequeueing isn't necessary with an existing cache

        if (cacheExists) {
          continue;
        }

        dequeued.push(req);
        var bb = self.getBoundingBox(ele);
        self.getElement(ele, bb, pxRatio, req.level, getTxrReasons.dequeue);
      } else {
        break;
      }
    }

    return dequeued;
  };

  ETCp.removeFromQueue = function (ele) {
    var self = this;
    var q = self.getElementQueue();
    var k2q = self.getElementKeyToQueue();
    var key = this.getKey(ele);
    var req = k2q[key];

    if (req != null) {
      if (req.eles.length === 1) {
        // remove if last ele in the req
        // bring to front of queue
        req.reqs = MAX_INT;
        q.updateItem(req);
        q.pop(); // remove from queue

        k2q[key] = null; // remove from lookup map
      } else {
        // otherwise just remove ele from req
        req.eles.unmerge(ele);
      }
    }
  };

  ETCp.onDequeue = function (fn) {
    this.onDequeues.push(fn);
  };

  ETCp.offDequeue = function (fn) {
    removeFromArray(this.onDequeues, fn);
  };

  ETCp.setupDequeueing = defs.setupDequeueing({
    deqRedrawThreshold: deqRedrawThreshold,
    deqCost: deqCost,
    deqAvgCost: deqAvgCost,
    deqNoDrawCost: deqNoDrawCost,
    deqFastCost: deqFastCost,
    deq: function deq(self, pxRatio, extent) {
      return self.dequeue(pxRatio, extent);
    },
    onDeqd: function onDeqd(self, deqd) {
      for (var i = 0; i < self.onDequeues.length; i++) {
        var fn = self.onDequeues[i];
        fn(deqd);
      }
    },
    shouldRedraw: function shouldRedraw(self, deqd, pxRatio, extent) {
      for (var i = 0; i < deqd.length; i++) {
        var eles = deqd[i].eles;

        for (var j = 0; j < eles.length; j++) {
          var bb = eles[j].boundingBox();

          if (boundingBoxesIntersect(bb, extent)) {
            return true;
          }
        }
      }

      return false;
    },
    priority: function priority(self) {
      return self.renderer.beforeRenderPriorities.eleTxrDeq;
    }
  });

  var defNumLayers = 1; // default number of layers to use

  var minLvl$1 = -4; // when scaling smaller than that we don't need to re-render

  var maxLvl$1 = 2; // when larger than this scale just render directly (caching is not helpful)

  var maxZoom$1 = 3.99; // beyond this zoom level, layered textures are not used

  var deqRedrawThreshold$1 = 50; // time to batch redraws together from dequeueing to allow more dequeueing calcs to happen in the meanwhile

  var refineEleDebounceTime = 50; // time to debounce sharper ele texture updates

  var deqCost$1 = 0.15; // % of add'l rendering cost allowed for dequeuing ele caches each frame

  var deqAvgCost$1 = 0.1; // % of add'l rendering cost compared to average overall redraw time

  var deqNoDrawCost$1 = 0.9; // % of avg frame time that can be used for dequeueing when not drawing

  var deqFastCost$1 = 0.9; // % of frame time to be used when >60fps

  var maxDeqSize$1 = 1; // number of eles to dequeue and render at higher texture in each batch

  var invalidThreshold = 250; // time threshold for disabling b/c of invalidations

  var maxLayerArea = 4000 * 4000; // layers can't be bigger than this

  var useHighQualityEleTxrReqs = true; // whether to use high quality ele txr requests (generally faster and cheaper in the longterm)
  // var log = function(){ console.log.apply( console, arguments ); };

  var LayeredTextureCache = function LayeredTextureCache(renderer) {
    var self = this;
    var r = self.renderer = renderer;
    var cy = r.cy;
    self.layersByLevel = {}; // e.g. 2 => [ layer1, layer2, ..., layerN ]

    self.firstGet = true;
    self.lastInvalidationTime = performanceNow() - 2 * invalidThreshold;
    self.skipping = false;
    self.eleTxrDeqs = cy.collection();
    self.scheduleElementRefinement = util(function () {
      self.refineElementTextures(self.eleTxrDeqs);
      self.eleTxrDeqs.unmerge(self.eleTxrDeqs);
    }, refineEleDebounceTime);
    r.beforeRender(function (willDraw, now) {
      if (now - self.lastInvalidationTime <= invalidThreshold) {
        self.skipping = true;
      } else {
        self.skipping = false;
      }
    }, r.beforeRenderPriorities.lyrTxrSkip);

    var qSort = function qSort(a, b) {
      return b.reqs - a.reqs;
    };

    self.layersQueue = new Heap(qSort);
    self.setupDequeueing();
  };

  var LTCp = LayeredTextureCache.prototype;
  var layerIdPool = 0;
  var MAX_INT$1 = Math.pow(2, 53) - 1;

  LTCp.makeLayer = function (bb, lvl) {
    var scale = Math.pow(2, lvl);
    var w = Math.ceil(bb.w * scale);
    var h = Math.ceil(bb.h * scale);
    var canvas = this.renderer.makeOffscreenCanvas(w, h);
    var layer = {
      id: layerIdPool = ++layerIdPool % MAX_INT$1,
      bb: bb,
      level: lvl,
      width: w,
      height: h,
      canvas: canvas,
      context: canvas.getContext('2d'),
      eles: [],
      elesQueue: [],
      reqs: 0
    }; // log('make layer %s with w %s and h %s and lvl %s', layer.id, layer.width, layer.height, layer.level);

    var cxt = layer.context;
    var dx = -layer.bb.x1;
    var dy = -layer.bb.y1; // do the transform on creation to save cycles (it's the same for all eles)

    cxt.scale(scale, scale);
    cxt.translate(dx, dy);
    return layer;
  };

  LTCp.getLayers = function (eles, pxRatio, lvl) {
    var self = this;
    var r = self.renderer;
    var cy = r.cy;
    var zoom = cy.zoom();
    var firstGet = self.firstGet;
    self.firstGet = false; // log('--\nget layers with %s eles', eles.length);
    //log eles.map(function(ele){ return ele.id() }) );

    if (lvl == null) {
      lvl = Math.ceil(log2(zoom * pxRatio));

      if (lvl < minLvl$1) {
        lvl = minLvl$1;
      } else if (zoom >= maxZoom$1 || lvl > maxLvl$1) {
        return null;
      }
    }

    self.validateLayersElesOrdering(lvl, eles);
    var layersByLvl = self.layersByLevel;
    var scale = Math.pow(2, lvl);
    var layers = layersByLvl[lvl] = layersByLvl[lvl] || [];
    var bb;
    var lvlComplete = self.levelIsComplete(lvl, eles);
    var tmpLayers;

    var checkTempLevels = function checkTempLevels() {
      var canUseAsTmpLvl = function canUseAsTmpLvl(l) {
        self.validateLayersElesOrdering(l, eles);

        if (self.levelIsComplete(l, eles)) {
          tmpLayers = layersByLvl[l];
          return true;
        }
      };

      var checkLvls = function checkLvls(dir) {
        if (tmpLayers) {
          return;
        }

        for (var l = lvl + dir; minLvl$1 <= l && l <= maxLvl$1; l += dir) {
          if (canUseAsTmpLvl(l)) {
            break;
          }
        }
      };

      checkLvls(+1);
      checkLvls(-1); // remove the invalid layers; they will be replaced as needed later in this function

      for (var i = layers.length - 1; i >= 0; i--) {
        var layer = layers[i];

        if (layer.invalid) {
          removeFromArray(layers, layer);
        }
      }
    };

    if (!lvlComplete) {
      // if the current level is incomplete, then use the closest, best quality layerset temporarily
      // and later queue the current layerset so we can get the proper quality level soon
      checkTempLevels();
    } else {
      // log('level complete, using existing layers\n--');
      return layers;
    }

    var getBb = function getBb() {
      if (!bb) {
        bb = makeBoundingBox();

        for (var i = 0; i < eles.length; i++) {
          updateBoundingBox(bb, eles[i].boundingBox());
        }
      }

      return bb;
    };

    var makeLayer = function makeLayer(opts) {
      opts = opts || {};
      var after = opts.after;
      getBb();
      var area = bb.w * scale * (bb.h * scale);

      if (area > maxLayerArea) {
        return null;
      }

      var layer = self.makeLayer(bb, lvl);

      if (after != null) {
        var index = layers.indexOf(after) + 1;
        layers.splice(index, 0, layer);
      } else if (opts.insert === undefined || opts.insert) {
        // no after specified => first layer made so put at start
        layers.unshift(layer);
      } // if( tmpLayers ){
      //self.queueLayer( layer );
      // }


      return layer;
    };

    if (self.skipping && !firstGet) {
      // log('skip layers');
      return null;
    } // log('do layers');


    var layer = null;
    var maxElesPerLayer = eles.length / defNumLayers;
    var allowLazyQueueing =  !firstGet;

    for (var i = 0; i < eles.length; i++) {
      var ele = eles[i];
      var rs = ele._private.rscratch;
      var caches = rs.imgLayerCaches = rs.imgLayerCaches || {}; // log('look at ele', ele.id());

      var existingLayer = caches[lvl];

      if (existingLayer) {
        // reuse layer for later eles
        // log('reuse layer for', ele.id());
        layer = existingLayer;
        continue;
      }

      if (!layer || layer.eles.length >= maxElesPerLayer || !boundingBoxInBoundingBox(layer.bb, ele.boundingBox())) {
        // log('make new layer for ele %s', ele.id());
        layer = makeLayer({
          insert: true,
          after: layer
        }); // if now layer can be built then we can't use layers at this level

        if (!layer) {
          return null;
        } // log('new layer with id %s', layer.id);

      }

      if (tmpLayers || allowLazyQueueing) {
        // log('queue ele %s in layer %s', ele.id(), layer.id);
        self.queueLayer(layer, ele);
      } else {
        // log('draw ele %s in layer %s', ele.id(), layer.id);
        self.drawEleInLayer(layer, ele, lvl, pxRatio);
      }

      layer.eles.push(ele);
      caches[lvl] = layer;
    } // log('--');


    if (tmpLayers) {
      // then we only queued the current layerset and can't draw it yet
      return tmpLayers;
    }

    if (allowLazyQueueing) {
      // log('lazy queue level', lvl);
      return null;
    }

    return layers;
  }; // a layer may want to use an ele cache of a higher level to avoid blurriness
  // so the layer level might not equal the ele level


  LTCp.getEleLevelForLayerLevel = function (lvl, pxRatio) {
    return lvl;
  };

  LTCp.drawEleInLayer = function (layer, ele, lvl, pxRatio) {
    var self = this;
    var r = this.renderer;
    var context = layer.context;
    var bb = ele.boundingBox();

    if (bb.w === 0 || bb.h === 0 || !ele.visible()) {
      return;
    }

    lvl = self.getEleLevelForLayerLevel(lvl, pxRatio);

    {
      r.setImgSmoothing(context, false);
    }

    {
      r.drawCachedElement(context, ele, null, null, lvl, useHighQualityEleTxrReqs);
    }

    {
      r.setImgSmoothing(context, true);
    }
  };

  LTCp.levelIsComplete = function (lvl, eles) {
    var self = this;
    var layers = self.layersByLevel[lvl];

    if (!layers || layers.length === 0) {
      return false;
    }

    var numElesInLayers = 0;

    for (var i = 0; i < layers.length; i++) {
      var layer = layers[i]; // if there are any eles needed to be drawn yet, the level is not complete

      if (layer.reqs > 0) {
        return false;
      } // if the layer is invalid, the level is not complete


      if (layer.invalid) {
        return false;
      }

      numElesInLayers += layer.eles.length;
    } // we should have exactly the number of eles passed in to be complete


    if (numElesInLayers !== eles.length) {
      return false;
    }

    return true;
  };

  LTCp.validateLayersElesOrdering = function (lvl, eles) {
    var layers = this.layersByLevel[lvl];

    if (!layers) {
      return;
    } // if in a layer the eles are not in the same order, then the layer is invalid
    // (i.e. there is an ele in between the eles in the layer)


    for (var i = 0; i < layers.length; i++) {
      var layer = layers[i];
      var offset = -1; // find the offset

      for (var j = 0; j < eles.length; j++) {
        if (layer.eles[0] === eles[j]) {
          offset = j;
          break;
        }
      }

      if (offset < 0) {
        // then the layer has nonexistant elements and is invalid
        this.invalidateLayer(layer);
        continue;
      } // the eles in the layer must be in the same continuous order, else the layer is invalid


      var o = offset;

      for (var j = 0; j < layer.eles.length; j++) {
        if (layer.eles[j] !== eles[o + j]) {
          // log('invalidate based on ordering', layer.id);
          this.invalidateLayer(layer);
          break;
        }
      }
    }
  };

  LTCp.updateElementsInLayers = function (eles, update) {
    var self = this;
    var isEles = element(eles[0]); // collect udpated elements (cascaded from the layers) and update each
    // layer itself along the way

    for (var i = 0; i < eles.length; i++) {
      var req = isEles ? null : eles[i];
      var ele = isEles ? eles[i] : eles[i].ele;
      var rs = ele._private.rscratch;
      var caches = rs.imgLayerCaches = rs.imgLayerCaches || {};

      for (var l = minLvl$1; l <= maxLvl$1; l++) {
        var layer = caches[l];

        if (!layer) {
          continue;
        } // if update is a request from the ele cache, then it affects only
        // the matching level


        if (req && self.getEleLevelForLayerLevel(layer.level) !== req.level) {
          continue;
        }

        update(layer, ele, req);
      }
    }
  };

  LTCp.haveLayers = function () {
    var self = this;
    var haveLayers = false;

    for (var l = minLvl$1; l <= maxLvl$1; l++) {
      var layers = self.layersByLevel[l];

      if (layers && layers.length > 0) {
        haveLayers = true;
        break;
      }
    }

    return haveLayers;
  };

  LTCp.invalidateElements = function (eles) {
    var self = this;

    if (eles.length === 0) {
      return;
    }

    self.lastInvalidationTime = performanceNow(); // log('update invalidate layer time from eles');

    if (eles.length === 0 || !self.haveLayers()) {
      return;
    }

    self.updateElementsInLayers(eles, function invalAssocLayers(layer, ele, req) {
      self.invalidateLayer(layer);
    });
  };

  LTCp.invalidateLayer = function (layer) {
    // log('update invalidate layer time');
    this.lastInvalidationTime = performanceNow();

    if (layer.invalid) {
      return;
    } // save cycles


    var lvl = layer.level;
    var eles = layer.eles;
    var layers = this.layersByLevel[lvl]; // log('invalidate layer', layer.id );

    removeFromArray(layers, layer); // layer.eles = [];

    layer.elesQueue = [];
    layer.invalid = true;

    if (layer.replacement) {
      layer.replacement.invalid = true;
    }

    for (var i = 0; i < eles.length; i++) {
      var caches = eles[i]._private.rscratch.imgLayerCaches;

      if (caches) {
        caches[lvl] = null;
      }
    }
  };

  LTCp.refineElementTextures = function (eles) {
    var self = this; // log('refine', eles.length);

    self.updateElementsInLayers(eles, function refineEachEle(layer, ele, req) {
      var rLyr = layer.replacement;

      if (!rLyr) {
        rLyr = layer.replacement = self.makeLayer(layer.bb, layer.level);
        rLyr.replaces = layer;
        rLyr.eles = layer.eles; // log('make replacement layer %s for %s with level %s', rLyr.id, layer.id, rLyr.level);
      }

      if (!rLyr.reqs) {
        for (var i = 0; i < rLyr.eles.length; i++) {
          self.queueLayer(rLyr, rLyr.eles[i]);
        } // log('queue replacement layer refinement', rLyr.id);

      }
    });
  };

  LTCp.enqueueElementRefinement = function (ele) {

    this.eleTxrDeqs.merge(ele);
    this.scheduleElementRefinement();
  };

  LTCp.queueLayer = function (layer, ele) {
    var self = this;
    var q = self.layersQueue;
    var elesQ = layer.elesQueue;
    var hasId = elesQ.hasId = elesQ.hasId || {}; // if a layer is going to be replaced, queuing is a waste of time

    if (layer.replacement) {
      return;
    }

    if (ele) {
      if (hasId[ele.id()]) {
        return;
      }

      elesQ.push(ele);
      hasId[ele.id()] = true;
    }

    if (layer.reqs) {
      layer.reqs++;
      q.updateItem(layer);
    } else {
      layer.reqs = 1;
      q.push(layer);
    }
  };

  LTCp.dequeue = function (pxRatio) {
    var self = this;
    var q = self.layersQueue;
    var deqd = [];
    var eleDeqs = 0;

    while (eleDeqs < maxDeqSize$1) {
      if (q.size() === 0) {
        break;
      }

      var layer = q.peek(); // if a layer has been or will be replaced, then don't waste time with it

      if (layer.replacement) {
        // log('layer %s in queue skipped b/c it already has a replacement', layer.id);
        q.pop();
        continue;
      } // if this is a replacement layer that has been superceded, then forget it


      if (layer.replaces && layer !== layer.replaces.replacement) {
        // log('layer is no longer the most uptodate replacement; dequeued', layer.id)
        q.pop();
        continue;
      }

      if (layer.invalid) {
        // log('replacement layer %s is invalid; dequeued', layer.id);
        q.pop();
        continue;
      }

      var ele = layer.elesQueue.shift();

      if (ele) {
        // log('dequeue layer %s', layer.id);
        self.drawEleInLayer(layer, ele, layer.level, pxRatio);
        eleDeqs++;
      }

      if (deqd.length === 0) {
        // we need only one entry in deqd to queue redrawing etc
        deqd.push(true);
      } // if the layer has all its eles done, then remove from the queue


      if (layer.elesQueue.length === 0) {
        q.pop();
        layer.reqs = 0; // log('dequeue of layer %s complete', layer.id);
        // when a replacement layer is dequeued, it replaces the old layer in the level

        if (layer.replaces) {
          self.applyLayerReplacement(layer);
        }

        self.requestRedraw();
      }
    }

    return deqd;
  };

  LTCp.applyLayerReplacement = function (layer) {
    var self = this;
    var layersInLevel = self.layersByLevel[layer.level];
    var replaced = layer.replaces;
    var index = layersInLevel.indexOf(replaced); // if the replaced layer is not in the active list for the level, then replacing
    // refs would be a mistake (i.e. overwriting the true active layer)

    if (index < 0 || replaced.invalid) {
      // log('replacement layer would have no effect', layer.id);
      return;
    }

    layersInLevel[index] = layer; // replace level ref
    // replace refs in eles

    for (var i = 0; i < layer.eles.length; i++) {
      var _p = layer.eles[i]._private;
      var cache = _p.imgLayerCaches = _p.imgLayerCaches || {};

      if (cache) {
        cache[layer.level] = layer;
      }
    } // log('apply replacement layer %s over %s', layer.id, replaced.id);


    self.requestRedraw();
  };

  LTCp.requestRedraw = util(function () {
    var r = this.renderer;
    r.redrawHint('eles', true);
    r.redrawHint('drag', true);
    r.redraw();
  }, 100);
  LTCp.setupDequeueing = defs.setupDequeueing({
    deqRedrawThreshold: deqRedrawThreshold$1,
    deqCost: deqCost$1,
    deqAvgCost: deqAvgCost$1,
    deqNoDrawCost: deqNoDrawCost$1,
    deqFastCost: deqFastCost$1,
    deq: function deq(self, pxRatio) {
      return self.dequeue(pxRatio);
    },
    onDeqd: noop,
    shouldRedraw: trueify,
    priority: function priority(self) {
      return self.renderer.beforeRenderPriorities.lyrTxrDeq;
    }
  });

  var CRp = {};
  var impl;

  function polygon(context, points) {
    for (var i = 0; i < points.length; i++) {
      var pt = points[i];
      context.lineTo(pt.x, pt.y);
    }
  }

  function triangleBackcurve(context, points, controlPoint) {
    var firstPt;

    for (var i = 0; i < points.length; i++) {
      var pt = points[i];

      if (i === 0) {
        firstPt = pt;
      }

      context.lineTo(pt.x, pt.y);
    }

    context.quadraticCurveTo(controlPoint.x, controlPoint.y, firstPt.x, firstPt.y);
  }

  function triangleTee(context, trianglePoints, teePoints) {
    if (context.beginPath) {
      context.beginPath();
    }

    var triPts = trianglePoints;

    for (var i = 0; i < triPts.length; i++) {
      var pt = triPts[i];
      context.lineTo(pt.x, pt.y);
    }

    var teePts = teePoints;
    var firstTeePt = teePoints[0];
    context.moveTo(firstTeePt.x, firstTeePt.y);

    for (var i = 1; i < teePts.length; i++) {
      var pt = teePts[i];
      context.lineTo(pt.x, pt.y);
    }

    if (context.closePath) {
      context.closePath();
    }
  }

  function circleTriangle(context, trianglePoints, rx, ry, r) {
    if (context.beginPath) {
      context.beginPath();
    }

    context.arc(rx, ry, r, 0, Math.PI * 2, false);
    var triPts = trianglePoints;
    var firstTrPt = triPts[0];
    context.moveTo(firstTrPt.x, firstTrPt.y);

    for (var i = 0; i < triPts.length; i++) {
      var pt = triPts[i];
      context.lineTo(pt.x, pt.y);
    }

    if (context.closePath) {
      context.closePath();
    }
  }

  function circle(context, rx, ry, r) {
    context.arc(rx, ry, r, 0, Math.PI * 2, false);
  }

  CRp.arrowShapeImpl = function (name) {
    return (impl || (impl = {
      'polygon': polygon,
      'triangle-backcurve': triangleBackcurve,
      'triangle-tee': triangleTee,
      'circle-triangle': circleTriangle,
      'triangle-cross': triangleTee,
      'circle': circle
    }))[name];
  };

  var CRp$1 = {};

  CRp$1.drawElement = function (context, ele, shiftToOriginWithBb, showLabel, showOverlay, showOpacity) {
    var r = this;

    if (ele.isNode()) {
      r.drawNode(context, ele, shiftToOriginWithBb, showLabel, showOverlay, showOpacity);
    } else {
      r.drawEdge(context, ele, shiftToOriginWithBb, showLabel, showOverlay, showOpacity);
    }
  };

  CRp$1.drawElementOverlay = function (context, ele) {
    var r = this;

    if (ele.isNode()) {
      r.drawNodeOverlay(context, ele);
    } else {
      r.drawEdgeOverlay(context, ele);
    }
  };

  CRp$1.drawCachedElementPortion = function (context, ele, eleTxrCache, pxRatio, lvl, reason, getRotation, getOpacity) {
    var r = this;
    var bb = eleTxrCache.getBoundingBox(ele);

    if (bb.w === 0 || bb.h === 0) {
      return;
    } // ignore zero size case


    var eleCache = eleTxrCache.getElement(ele, bb, pxRatio, lvl, reason);

    if (eleCache != null) {
      var opacity = getOpacity(r, ele);

      if (opacity === 0) {
        return;
      }

      var theta = getRotation(r, ele);
      var x1 = bb.x1,
          y1 = bb.y1,
          w = bb.w,
          h = bb.h;
      var x, y, sx, sy, smooth;

      if (theta !== 0) {
        var rotPt = eleTxrCache.getRotationPoint(ele);
        sx = rotPt.x;
        sy = rotPt.y;
        context.translate(sx, sy);
        context.rotate(theta);
        smooth = r.getImgSmoothing(context);

        if (!smooth) {
          r.setImgSmoothing(context, true);
        }

        var off = eleTxrCache.getRotationOffset(ele);
        x = off.x;
        y = off.y;
      } else {
        x = x1;
        y = y1;
      }

      var oldGlobalAlpha;

      if (opacity !== 1) {
        oldGlobalAlpha = context.globalAlpha;
        context.globalAlpha = oldGlobalAlpha * opacity;
      }

      context.drawImage(eleCache.texture.canvas, eleCache.x, 0, eleCache.width, eleCache.height, x, y, w, h);

      if (opacity !== 1) {
        context.globalAlpha = oldGlobalAlpha;
      }

      if (theta !== 0) {
        context.rotate(-theta);
        context.translate(-sx, -sy);

        if (!smooth) {
          r.setImgSmoothing(context, false);
        }
      }
    } else {
      eleTxrCache.drawElement(context, ele); // direct draw fallback
    }
  };

  var getZeroRotation = function getZeroRotation() {
    return 0;
  };

  var getLabelRotation = function getLabelRotation(r, ele) {
    return r.getTextAngle(ele, null);
  };

  var getSourceLabelRotation = function getSourceLabelRotation(r, ele) {
    return r.getTextAngle(ele, 'source');
  };

  var getTargetLabelRotation = function getTargetLabelRotation(r, ele) {
    return r.getTextAngle(ele, 'target');
  };

  var getOpacity = function getOpacity(r, ele) {
    return ele.effectiveOpacity();
  };

  var getTextOpacity = function getTextOpacity(e, ele) {
    return ele.pstyle('text-opacity').pfValue * ele.effectiveOpacity();
  };

  CRp$1.drawCachedElement = function (context, ele, pxRatio, extent, lvl, requestHighQuality) {
    var r = this;
    var _r$data = r.data,
        eleTxrCache = _r$data.eleTxrCache,
        lblTxrCache = _r$data.lblTxrCache,
        slbTxrCache = _r$data.slbTxrCache,
        tlbTxrCache = _r$data.tlbTxrCache;
    var bb = ele.boundingBox();
    var reason = requestHighQuality === true ? eleTxrCache.reasons.highQuality : null;

    if (bb.w === 0 || bb.h === 0 || !ele.visible()) {
      return;
    }

    if (!extent || boundingBoxesIntersect(bb, extent)) {
      var isEdge = ele.isEdge();

      var badLine = ele.element()._private.rscratch.badLine;

      r.drawCachedElementPortion(context, ele, eleTxrCache, pxRatio, lvl, reason, getZeroRotation, getOpacity);

      if (!isEdge || !badLine) {
        r.drawCachedElementPortion(context, ele, lblTxrCache, pxRatio, lvl, reason, getLabelRotation, getTextOpacity);
      }

      if (isEdge && !badLine) {
        r.drawCachedElementPortion(context, ele, slbTxrCache, pxRatio, lvl, reason, getSourceLabelRotation, getTextOpacity);
        r.drawCachedElementPortion(context, ele, tlbTxrCache, pxRatio, lvl, reason, getTargetLabelRotation, getTextOpacity);
      }

      r.drawElementOverlay(context, ele);
    }
  };

  CRp$1.drawElements = function (context, eles) {
    var r = this;

    for (var i = 0; i < eles.length; i++) {
      var ele = eles[i];
      r.drawElement(context, ele);
    }
  };

  CRp$1.drawCachedElements = function (context, eles, pxRatio, extent) {
    var r = this;

    for (var i = 0; i < eles.length; i++) {
      var ele = eles[i];
      r.drawCachedElement(context, ele, pxRatio, extent);
    }
  };

  CRp$1.drawCachedNodes = function (context, eles, pxRatio, extent) {
    var r = this;

    for (var i = 0; i < eles.length; i++) {
      var ele = eles[i];

      if (!ele.isNode()) {
        continue;
      }

      r.drawCachedElement(context, ele, pxRatio, extent);
    }
  };

  CRp$1.drawLayeredElements = function (context, eles, pxRatio, extent) {
    var r = this;
    var layers = r.data.lyrTxrCache.getLayers(eles, pxRatio);

    if (layers) {
      for (var i = 0; i < layers.length; i++) {
        var layer = layers[i];
        var bb = layer.bb;

        if (bb.w === 0 || bb.h === 0) {
          continue;
        }

        context.drawImage(layer.canvas, bb.x1, bb.y1, bb.w, bb.h);
      }
    } else {
      // fall back on plain caching if no layers
      r.drawCachedElements(context, eles, pxRatio, extent);
    }
  };

  /* global Path2D */
  var CRp$2 = {};

  CRp$2.drawEdge = function (context, edge, shiftToOriginWithBb) {
    var drawLabel = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
    var shouldDrawOverlay = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
    var shouldDrawOpacity = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;
    var r = this;
    var rs = edge._private.rscratch;

    if (shouldDrawOpacity && !edge.visible()) {
      return;
    } // if bezier ctrl pts can not be calculated, then die


    if (rs.badLine || rs.allpts == null || isNaN(rs.allpts[0])) {
      // isNaN in case edge is impossible and browser bugs (e.g. safari)
      return;
    }

    var bb;

    if (shiftToOriginWithBb) {
      bb = shiftToOriginWithBb;
      context.translate(-bb.x1, -bb.y1);
    }

    var opacity = shouldDrawOpacity ? edge.pstyle('opacity').value : 1;
    var lineStyle = edge.pstyle('line-style').value;
    var edgeWidth = edge.pstyle('width').pfValue;
    var lineCap = edge.pstyle('line-cap').value;

    var drawLine = function drawLine() {
      var strokeOpacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : opacity;
      context.lineWidth = edgeWidth;
      context.lineCap = lineCap;
      r.eleStrokeStyle(context, edge, strokeOpacity);
      r.drawEdgePath(edge, context, rs.allpts, lineStyle);
      context.lineCap = 'butt'; // reset for other drawing functions
    };

    var drawOverlay = function drawOverlay() {
      if (!shouldDrawOverlay) {
        return;
      }

      r.drawEdgeOverlay(context, edge);
    };

    var drawArrows = function drawArrows() {
      var arrowOpacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : opacity;
      r.drawArrowheads(context, edge, arrowOpacity);
    };

    var drawText = function drawText() {
      r.drawElementText(context, edge, null, drawLabel);
    };

    context.lineJoin = 'round';
    var ghost = edge.pstyle('ghost').value === 'yes';

    if (ghost) {
      var gx = edge.pstyle('ghost-offset-x').pfValue;
      var gy = edge.pstyle('ghost-offset-y').pfValue;
      var ghostOpacity = edge.pstyle('ghost-opacity').value;
      var effectiveGhostOpacity = opacity * ghostOpacity;
      context.translate(gx, gy);
      drawLine(effectiveGhostOpacity);
      drawArrows(effectiveGhostOpacity);
      context.translate(-gx, -gy);
    }

    drawLine();
    drawArrows();
    drawOverlay();
    drawText();

    if (shiftToOriginWithBb) {
      context.translate(bb.x1, bb.y1);
    }
  };

  CRp$2.drawEdgeOverlay = function (context, edge) {
    if (!edge.visible()) {
      return;
    }

    var overlayOpacity = edge.pstyle('overlay-opacity').value;

    if (overlayOpacity === 0) {
      return;
    }

    var r = this;
    var usePaths = r.usePaths();
    var rs = edge._private.rscratch;
    var overlayPadding = edge.pstyle('overlay-padding').pfValue;
    var overlayWidth = 2 * overlayPadding;
    var overlayColor = edge.pstyle('overlay-color').value;
    context.lineWidth = overlayWidth;

    if (rs.edgeType === 'self' && !usePaths) {
      context.lineCap = 'butt';
    } else {
      context.lineCap = 'round';
    }

    r.colorStrokeStyle(context, overlayColor[0], overlayColor[1], overlayColor[2], overlayOpacity);
    r.drawEdgePath(edge, context, rs.allpts, 'solid');
  };

  CRp$2.drawEdgePath = function (edge, context, pts, type) {
    var rs = edge._private.rscratch;
    var canvasCxt = context;
    var path;
    var pathCacheHit = false;
    var usePaths = this.usePaths();
    var lineDashPattern = edge.pstyle('line-dash-pattern').pfValue;
    var lineDashOffset = edge.pstyle('line-dash-offset').pfValue;

    if (usePaths) {
      var pathCacheKey = pts.join('$');
      var keyMatches = rs.pathCacheKey && rs.pathCacheKey === pathCacheKey;

      if (keyMatches) {
        path = context = rs.pathCache;
        pathCacheHit = true;
      } else {
        path = context = new Path2D();
        rs.pathCacheKey = pathCacheKey;
        rs.pathCache = path;
      }
    }

    if (canvasCxt.setLineDash) {
      // for very outofdate browsers
      switch (type) {
        case 'dotted':
          canvasCxt.setLineDash([1, 1]);
          break;

        case 'dashed':
          canvasCxt.setLineDash(lineDashPattern);
          canvasCxt.lineDashOffset = lineDashOffset;
          break;

        case 'solid':
          canvasCxt.setLineDash([]);
          break;
      }
    }

    if (!pathCacheHit && !rs.badLine) {
      if (context.beginPath) {
        context.beginPath();
      }

      context.moveTo(pts[0], pts[1]);

      switch (rs.edgeType) {
        case 'bezier':
        case 'self':
        case 'compound':
        case 'multibezier':
          for (var i = 2; i + 3 < pts.length; i += 4) {
            context.quadraticCurveTo(pts[i], pts[i + 1], pts[i + 2], pts[i + 3]);
          }

          break;

        case 'straight':
        case 'segments':
        case 'haystack':
          for (var _i = 2; _i + 1 < pts.length; _i += 2) {
            context.lineTo(pts[_i], pts[_i + 1]);
          }

          break;
      }
    }

    context = canvasCxt;

    if (usePaths) {
      context.stroke(path);
    } else {
      context.stroke();
    } // reset any line dashes


    if (context.setLineDash) {
      // for very outofdate browsers
      context.setLineDash([]);
    }
  };

  CRp$2.drawArrowheads = function (context, edge, opacity) {
    var rs = edge._private.rscratch;
    var isHaystack = rs.edgeType === 'haystack';

    if (!isHaystack) {
      this.drawArrowhead(context, edge, 'source', rs.arrowStartX, rs.arrowStartY, rs.srcArrowAngle, opacity);
    }

    this.drawArrowhead(context, edge, 'mid-target', rs.midX, rs.midY, rs.midtgtArrowAngle, opacity);
    this.drawArrowhead(context, edge, 'mid-source', rs.midX, rs.midY, rs.midsrcArrowAngle, opacity);

    if (!isHaystack) {
      this.drawArrowhead(context, edge, 'target', rs.arrowEndX, rs.arrowEndY, rs.tgtArrowAngle, opacity);
    }
  };

  CRp$2.drawArrowhead = function (context, edge, prefix, x, y, angle, opacity) {
    if (isNaN(x) || x == null || isNaN(y) || y == null || isNaN(angle) || angle == null) {
      return;
    }

    var self = this;
    var arrowShape = edge.pstyle(prefix + '-arrow-shape').value;

    if (arrowShape === 'none') {
      return;
    }

    var arrowClearFill = edge.pstyle(prefix + '-arrow-fill').value === 'hollow' ? 'both' : 'filled';
    var arrowFill = edge.pstyle(prefix + '-arrow-fill').value;
    var edgeWidth = edge.pstyle('width').pfValue;
    var edgeOpacity = edge.pstyle('opacity').value;

    if (opacity === undefined) {
      opacity = edgeOpacity;
    }

    var gco = context.globalCompositeOperation;

    if (opacity !== 1 || arrowFill === 'hollow') {
      // then extra clear is needed
      context.globalCompositeOperation = 'destination-out';
      self.colorFillStyle(context, 255, 255, 255, 1);
      self.colorStrokeStyle(context, 255, 255, 255, 1);
      self.drawArrowShape(edge, context, arrowClearFill, edgeWidth, arrowShape, x, y, angle);
      context.globalCompositeOperation = gco;
    } // otherwise, the opaque arrow clears it for free :)


    var color = edge.pstyle(prefix + '-arrow-color').value;
    self.colorFillStyle(context, color[0], color[1], color[2], opacity);
    self.colorStrokeStyle(context, color[0], color[1], color[2], opacity);
    self.drawArrowShape(edge, context, arrowFill, edgeWidth, arrowShape, x, y, angle);
  };

  CRp$2.drawArrowShape = function (edge, context, fill, edgeWidth, shape, x, y, angle) {
    var r = this;
    var usePaths = this.usePaths() && shape !== 'triangle-cross';
    var pathCacheHit = false;
    var path;
    var canvasContext = context;
    var translation = {
      x: x,
      y: y
    };
    var scale = edge.pstyle('arrow-scale').value;
    var size = this.getArrowWidth(edgeWidth, scale);
    var shapeImpl = r.arrowShapes[shape];

    if (usePaths) {
      var cache = r.arrowPathCache = r.arrowPathCache || [];
      var key = hashString(shape);
      var cachedPath = cache[key];

      if (cachedPath != null) {
        path = context = cachedPath;
        pathCacheHit = true;
      } else {
        path = context = new Path2D();
        cache[key] = path;
      }
    }

    if (!pathCacheHit) {
      if (context.beginPath) {
        context.beginPath();
      }

      if (usePaths) {
        // store in the path cache with values easily manipulated later
        shapeImpl.draw(context, 1, 0, {
          x: 0,
          y: 0
        }, 1);
      } else {
        shapeImpl.draw(context, size, angle, translation, edgeWidth);
      }

      if (context.closePath) {
        context.closePath();
      }
    }

    context = canvasContext;

    if (usePaths) {
      // set transform to arrow position/orientation
      context.translate(x, y);
      context.rotate(angle);
      context.scale(size, size);
    }

    if (fill === 'filled' || fill === 'both') {
      if (usePaths) {
        context.fill(path);
      } else {
        context.fill();
      }
    }

    if (fill === 'hollow' || fill === 'both') {
      context.lineWidth = (shapeImpl.matchEdgeWidth ? edgeWidth : 1) / (usePaths ? size : 1);
      context.lineJoin = 'miter';

      if (usePaths) {
        context.stroke(path);
      } else {
        context.stroke();
      }
    }

    if (usePaths) {
      // reset transform by applying inverse
      context.scale(1 / size, 1 / size);
      context.rotate(-angle);
      context.translate(-x, -y);
    }
  };

  var CRp$3 = {};

  CRp$3.safeDrawImage = function (context, img, ix, iy, iw, ih, x, y, w, h) {
    // detect problematic cases for old browsers with bad images (cheaper than try-catch)
    if (iw <= 0 || ih <= 0 || w <= 0 || h <= 0) {
      return;
    }

    context.drawImage(img, ix, iy, iw, ih, x, y, w, h);
  };

  CRp$3.drawInscribedImage = function (context, img, node, index, nodeOpacity) {
    var r = this;
    var pos = node.position();
    var nodeX = pos.x;
    var nodeY = pos.y;
    var styleObj = node.cy().style();
    var getIndexedStyle = styleObj.getIndexedStyle.bind(styleObj);
    var fit = getIndexedStyle(node, 'background-fit', 'value', index);
    var repeat = getIndexedStyle(node, 'background-repeat', 'value', index);
    var nodeW = node.width();
    var nodeH = node.height();
    var paddingX2 = node.padding() * 2;
    var nodeTW = nodeW + (getIndexedStyle(node, 'background-width-relative-to', 'value', index) === 'inner' ? 0 : paddingX2);
    var nodeTH = nodeH + (getIndexedStyle(node, 'background-height-relative-to', 'value', index) === 'inner' ? 0 : paddingX2);
    var rs = node._private.rscratch;
    var clip = getIndexedStyle(node, 'background-clip', 'value', index);
    var shouldClip = clip === 'node';
    var imgOpacity = getIndexedStyle(node, 'background-image-opacity', 'value', index) * nodeOpacity;
    var imgW = img.width || img.cachedW;
    var imgH = img.height || img.cachedH; // workaround for broken browsers like ie

    if (null == imgW || null == imgH) {
      document.body.appendChild(img); // eslint-disable-line no-undef

      imgW = img.cachedW = img.width || img.offsetWidth;
      imgH = img.cachedH = img.height || img.offsetHeight;
      document.body.removeChild(img); // eslint-disable-line no-undef
    }

    var w = imgW;
    var h = imgH;

    if (getIndexedStyle(node, 'background-width', 'value', index) !== 'auto') {
      if (getIndexedStyle(node, 'background-width', 'units', index) === '%') {
        w = getIndexedStyle(node, 'background-width', 'pfValue', index) * nodeTW;
      } else {
        w = getIndexedStyle(node, 'background-width', 'pfValue', index);
      }
    }

    if (getIndexedStyle(node, 'background-height', 'value', index) !== 'auto') {
      if (getIndexedStyle(node, 'background-height', 'units', index) === '%') {
        h = getIndexedStyle(node, 'background-height', 'pfValue', index) * nodeTH;
      } else {
        h = getIndexedStyle(node, 'background-height', 'pfValue', index);
      }
    }

    if (w === 0 || h === 0) {
      return; // no point in drawing empty image (and chrome is broken in this case)
    }

    if (fit === 'contain') {
      var scale = Math.min(nodeTW / w, nodeTH / h);
      w *= scale;
      h *= scale;
    } else if (fit === 'cover') {
      var scale = Math.max(nodeTW / w, nodeTH / h);
      w *= scale;
      h *= scale;
    }

    var x = nodeX - nodeTW / 2; // left

    var posXUnits = getIndexedStyle(node, 'background-position-x', 'units', index);
    var posXPfVal = getIndexedStyle(node, 'background-position-x', 'pfValue', index);

    if (posXUnits === '%') {
      x += (nodeTW - w) * posXPfVal;
    } else {
      x += posXPfVal;
    }

    var offXUnits = getIndexedStyle(node, 'background-offset-x', 'units', index);
    var offXPfVal = getIndexedStyle(node, 'background-offset-x', 'pfValue', index);

    if (offXUnits === '%') {
      x += (nodeTW - w) * offXPfVal;
    } else {
      x += offXPfVal;
    }

    var y = nodeY - nodeTH / 2; // top

    var posYUnits = getIndexedStyle(node, 'background-position-y', 'units', index);
    var posYPfVal = getIndexedStyle(node, 'background-position-y', 'pfValue', index);

    if (posYUnits === '%') {
      y += (nodeTH - h) * posYPfVal;
    } else {
      y += posYPfVal;
    }

    var offYUnits = getIndexedStyle(node, 'background-offset-y', 'units', index);
    var offYPfVal = getIndexedStyle(node, 'background-offset-y', 'pfValue', index);

    if (offYUnits === '%') {
      y += (nodeTH - h) * offYPfVal;
    } else {
      y += offYPfVal;
    }

    if (rs.pathCache) {
      x -= nodeX;
      y -= nodeY;
      nodeX = 0;
      nodeY = 0;
    }

    var gAlpha = context.globalAlpha;
    context.globalAlpha = imgOpacity;

    if (repeat === 'no-repeat') {
      if (shouldClip) {
        context.save();

        if (rs.pathCache) {
          context.clip(rs.pathCache);
        } else {
          r.nodeShapes[r.getNodeShape(node)].draw(context, nodeX, nodeY, nodeTW, nodeTH);
          context.clip();
        }
      }

      r.safeDrawImage(context, img, 0, 0, imgW, imgH, x, y, w, h);

      if (shouldClip) {
        context.restore();
      }
    } else {
      var pattern = context.createPattern(img, repeat);
      context.fillStyle = pattern;
      r.nodeShapes[r.getNodeShape(node)].draw(context, nodeX, nodeY, nodeTW, nodeTH);
      context.translate(x, y);
      context.fill();
      context.translate(-x, -y);
    }

    context.globalAlpha = gAlpha;
  };

  var CRp$4 = {};

  CRp$4.eleTextBiggerThanMin = function (ele, scale) {
    if (!scale) {
      var zoom = ele.cy().zoom();
      var pxRatio = this.getPixelRatio();
      var lvl = Math.ceil(log2(zoom * pxRatio)); // the effective texture level

      scale = Math.pow(2, lvl);
    }

    var computedSize = ele.pstyle('font-size').pfValue * scale;
    var minSize = ele.pstyle('min-zoomed-font-size').pfValue;

    if (computedSize < minSize) {
      return false;
    }

    return true;
  };

  CRp$4.drawElementText = function (context, ele, shiftToOriginWithBb, force, prefix) {
    var useEleOpacity = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;
    var r = this;

    if (force == null) {
      if (useEleOpacity && !r.eleTextBiggerThanMin(ele)) {
        return;
      }
    } else if (force === false) {
      return;
    }

    if (ele.isNode()) {
      var label = ele.pstyle('label');

      if (!label || !label.value) {
        return;
      }

      var justification = r.getLabelJustification(ele);
      context.textAlign = justification;
      context.textBaseline = 'bottom';
    } else {
      var badLine = ele.element()._private.rscratch.badLine;

      var _label = ele.pstyle('label');

      var srcLabel = ele.pstyle('source-label');
      var tgtLabel = ele.pstyle('target-label');

      if (badLine || (!_label || !_label.value) && (!srcLabel || !srcLabel.value) && (!tgtLabel || !tgtLabel.value)) {
        return;
      }

      context.textAlign = 'center';
      context.textBaseline = 'bottom';
    }

    var applyRotation = !shiftToOriginWithBb;
    var bb;

    if (shiftToOriginWithBb) {
      bb = shiftToOriginWithBb;
      context.translate(-bb.x1, -bb.y1);
    }

    if (prefix == null) {
      r.drawText(context, ele, null, applyRotation, useEleOpacity);

      if (ele.isEdge()) {
        r.drawText(context, ele, 'source', applyRotation, useEleOpacity);
        r.drawText(context, ele, 'target', applyRotation, useEleOpacity);
      }
    } else {
      r.drawText(context, ele, prefix, applyRotation, useEleOpacity);
    }

    if (shiftToOriginWithBb) {
      context.translate(bb.x1, bb.y1);
    }
  };

  CRp$4.getFontCache = function (context) {
    var cache;
    this.fontCaches = this.fontCaches || [];

    for (var i = 0; i < this.fontCaches.length; i++) {
      cache = this.fontCaches[i];

      if (cache.context === context) {
        return cache;
      }
    }

    cache = {
      context: context
    };
    this.fontCaches.push(cache);
    return cache;
  }; // set up canvas context with font
  // returns transformed text string


  CRp$4.setupTextStyle = function (context, ele) {
    var useEleOpacity = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    // Font style
    var labelStyle = ele.pstyle('font-style').strValue;
    var labelSize = ele.pstyle('font-size').pfValue + 'px';
    var labelFamily = ele.pstyle('font-family').strValue;
    var labelWeight = ele.pstyle('font-weight').strValue;
    var opacity = useEleOpacity ? ele.effectiveOpacity() * ele.pstyle('text-opacity').value : 1;
    var outlineOpacity = ele.pstyle('text-outline-opacity').value * opacity;
    var color = ele.pstyle('color').value;
    var outlineColor = ele.pstyle('text-outline-color').value;
    context.font = labelStyle + ' ' + labelWeight + ' ' + labelSize + ' ' + labelFamily;
    context.lineJoin = 'round'; // so text outlines aren't jagged

    this.colorFillStyle(context, color[0], color[1], color[2], opacity);
    this.colorStrokeStyle(context, outlineColor[0], outlineColor[1], outlineColor[2], outlineOpacity);
  }; // TODO ensure re-used


  function roundRect(ctx, x, y, width, height) {
    var radius = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 5;
    ctx.beginPath();
    ctx.moveTo(x + radius, y);
    ctx.lineTo(x + width - radius, y);
    ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
    ctx.lineTo(x + width, y + height - radius);
    ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
    ctx.lineTo(x + radius, y + height);
    ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
    ctx.lineTo(x, y + radius);
    ctx.quadraticCurveTo(x, y, x + radius, y);
    ctx.closePath();
    ctx.fill();
  }

  CRp$4.getTextAngle = function (ele, prefix) {
    var theta;
    var _p = ele._private;
    var rscratch = _p.rscratch;
    var pdash = prefix ? prefix + '-' : '';
    var rotation = ele.pstyle(pdash + 'text-rotation');
    var textAngle = getPrefixedProperty(rscratch, 'labelAngle', prefix);

    if (rotation.strValue === 'autorotate') {
      theta = ele.isEdge() ? textAngle : 0;
    } else if (rotation.strValue === 'none') {
      theta = 0;
    } else {
      theta = rotation.pfValue;
    }

    return theta;
  };

  CRp$4.drawText = function (context, ele, prefix) {
    var applyRotation = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
    var useEleOpacity = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
    var _p = ele._private;
    var rscratch = _p.rscratch;
    var parentOpacity = useEleOpacity ? ele.effectiveOpacity() : 1;

    if (useEleOpacity && (parentOpacity === 0 || ele.pstyle('text-opacity').value === 0)) {
      return;
    } // use 'main' as an alias for the main label (i.e. null prefix)


    if (prefix === 'main') {
      prefix = null;
    }

    var textX = getPrefixedProperty(rscratch, 'labelX', prefix);
    var textY = getPrefixedProperty(rscratch, 'labelY', prefix);
    var orgTextX, orgTextY; // used for rotation

    var text = this.getLabelText(ele, prefix);

    if (text != null && text !== '' && !isNaN(textX) && !isNaN(textY)) {
      this.setupTextStyle(context, ele, useEleOpacity);
      var pdash = prefix ? prefix + '-' : '';
      var textW = getPrefixedProperty(rscratch, 'labelWidth', prefix);
      var textH = getPrefixedProperty(rscratch, 'labelHeight', prefix);
      var marginX = ele.pstyle(pdash + 'text-margin-x').pfValue;
      var marginY = ele.pstyle(pdash + 'text-margin-y').pfValue;
      var isEdge = ele.isEdge();
      var halign = ele.pstyle('text-halign').value;
      var valign = ele.pstyle('text-valign').value;

      if (isEdge) {
        halign = 'center';
        valign = 'center';
      }

      textX += marginX;
      textY += marginY;
      var theta;

      if (!applyRotation) {
        theta = 0;
      } else {
        theta = this.getTextAngle(ele, prefix);
      }

      if (theta !== 0) {
        orgTextX = textX;
        orgTextY = textY;
        context.translate(orgTextX, orgTextY);
        context.rotate(theta);
        textX = 0;
        textY = 0;
      }

      switch (valign) {
        case 'top':
          break;

        case 'center':
          textY += textH / 2;
          break;

        case 'bottom':
          textY += textH;
          break;
      }

      var backgroundOpacity = ele.pstyle('text-background-opacity').value;
      var borderOpacity = ele.pstyle('text-border-opacity').value;
      var textBorderWidth = ele.pstyle('text-border-width').pfValue;
      var backgroundPadding = ele.pstyle('text-background-padding').pfValue;

      if (backgroundOpacity > 0 || textBorderWidth > 0 && borderOpacity > 0) {
        var bgX = textX - backgroundPadding;

        switch (halign) {
          case 'left':
            bgX -= textW;
            break;

          case 'center':
            bgX -= textW / 2;
            break;
        }

        var bgY = textY - textH - backgroundPadding;
        var bgW = textW + 2 * backgroundPadding;
        var bgH = textH + 2 * backgroundPadding;

        if (backgroundOpacity > 0) {
          var textFill = context.fillStyle;
          var textBackgroundColor = ele.pstyle('text-background-color').value;
          context.fillStyle = 'rgba(' + textBackgroundColor[0] + ',' + textBackgroundColor[1] + ',' + textBackgroundColor[2] + ',' + backgroundOpacity * parentOpacity + ')';
          var styleShape = ele.pstyle('text-background-shape').strValue;

          if (styleShape.indexOf('round') === 0) {
            roundRect(context, bgX, bgY, bgW, bgH, 2);
          } else {
            context.fillRect(bgX, bgY, bgW, bgH);
          }

          context.fillStyle = textFill;
        }

        if (textBorderWidth > 0 && borderOpacity > 0) {
          var textStroke = context.strokeStyle;
          var textLineWidth = context.lineWidth;
          var textBorderColor = ele.pstyle('text-border-color').value;
          var textBorderStyle = ele.pstyle('text-border-style').value;
          context.strokeStyle = 'rgba(' + textBorderColor[0] + ',' + textBorderColor[1] + ',' + textBorderColor[2] + ',' + borderOpacity * parentOpacity + ')';
          context.lineWidth = textBorderWidth;

          if (context.setLineDash) {
            // for very outofdate browsers
            switch (textBorderStyle) {
              case 'dotted':
                context.setLineDash([1, 1]);
                break;

              case 'dashed':
                context.setLineDash([4, 2]);
                break;

              case 'double':
                context.lineWidth = textBorderWidth / 4; // 50% reserved for white between the two borders

                context.setLineDash([]);
                break;

              case 'solid':
                context.setLineDash([]);
                break;
            }
          }

          context.strokeRect(bgX, bgY, bgW, bgH);

          if (textBorderStyle === 'double') {
            var whiteWidth = textBorderWidth / 2;
            context.strokeRect(bgX + whiteWidth, bgY + whiteWidth, bgW - whiteWidth * 2, bgH - whiteWidth * 2);
          }

          if (context.setLineDash) {
            // for very outofdate browsers
            context.setLineDash([]);
          }

          context.lineWidth = textLineWidth;
          context.strokeStyle = textStroke;
        }
      }

      var lineWidth = 2 * ele.pstyle('text-outline-width').pfValue; // *2 b/c the stroke is drawn centred on the middle

      if (lineWidth > 0) {
        context.lineWidth = lineWidth;
      }

      if (ele.pstyle('text-wrap').value === 'wrap') {
        var lines = getPrefixedProperty(rscratch, 'labelWrapCachedLines', prefix);
        var lineHeight = getPrefixedProperty(rscratch, 'labelLineHeight', prefix);
        var halfTextW = textW / 2;
        var justification = this.getLabelJustification(ele);

        if (justification === 'auto') ; else if (halign === 'left') {
          // auto justification : right
          if (justification === 'left') {
            textX += -textW;
          } else if (justification === 'center') {
            textX += -halfTextW;
          } // else same as auto

        } else if (halign === 'center') {
          // auto justfication : center
          if (justification === 'left') {
            textX += -halfTextW;
          } else if (justification === 'right') {
            textX += halfTextW;
          } // else same as auto

        } else if (halign === 'right') {
          // auto justification : left
          if (justification === 'center') {
            textX += halfTextW;
          } else if (justification === 'right') {
            textX += textW;
          } // else same as auto

        }

        switch (valign) {
          case 'top':
            textY -= (lines.length - 1) * lineHeight;
            break;

          case 'center':
          case 'bottom':
            textY -= (lines.length - 1) * lineHeight;
            break;
        }

        for (var l = 0; l < lines.length; l++) {
          if (lineWidth > 0) {
            context.strokeText(lines[l], textX, textY);
          }

          context.fillText(lines[l], textX, textY);
          textY += lineHeight;
        }
      } else {
        if (lineWidth > 0) {
          context.strokeText(text, textX, textY);
        }

        context.fillText(text, textX, textY);
      }

      if (theta !== 0) {
        context.rotate(-theta);
        context.translate(-orgTextX, -orgTextY);
      }
    }
  };

  /* global Path2D */
  var CRp$5 = {};

  CRp$5.drawNode = function (context, node, shiftToOriginWithBb) {
    var drawLabel = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
    var shouldDrawOverlay = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
    var shouldDrawOpacity = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;
    var r = this;
    var nodeWidth, nodeHeight;
    var _p = node._private;
    var rs = _p.rscratch;
    var pos = node.position();

    if (!number(pos.x) || !number(pos.y)) {
      return; // can't draw node with undefined position
    }

    if (shouldDrawOpacity && !node.visible()) {
      return;
    }

    var eleOpacity = shouldDrawOpacity ? node.effectiveOpacity() : 1;
    var usePaths = r.usePaths();
    var path;
    var pathCacheHit = false;
    var padding = node.padding();
    nodeWidth = node.width() + 2 * padding;
    nodeHeight = node.height() + 2 * padding; //
    // setup shift

    var bb;

    if (shiftToOriginWithBb) {
      bb = shiftToOriginWithBb;
      context.translate(-bb.x1, -bb.y1);
    } //
    // load bg image


    var bgImgProp = node.pstyle('background-image');
    var urls = bgImgProp.value;
    var urlDefined = new Array(urls.length);
    var image = new Array(urls.length);
    var numImages = 0;

    for (var i = 0; i < urls.length; i++) {
      var url = urls[i];
      var defd = urlDefined[i] = url != null && url !== 'none';

      if (defd) {
        var bgImgCrossOrigin = node.cy().style().getIndexedStyle(node, 'background-image-crossorigin', 'value', i);
        numImages++; // get image, and if not loaded then ask to redraw when later loaded

        image[i] = r.getCachedImage(url, bgImgCrossOrigin, function () {
          _p.backgroundTimestamp = Date.now();
          node.emitAndNotify('background');
        });
      }
    } //
    // setup styles


    var darkness = node.pstyle('background-blacken').value;
    var borderWidth = node.pstyle('border-width').pfValue;
    var bgOpacity = node.pstyle('background-opacity').value * eleOpacity;
    var borderColor = node.pstyle('border-color').value;
    var borderStyle = node.pstyle('border-style').value;
    var borderOpacity = node.pstyle('border-opacity').value * eleOpacity;
    context.lineJoin = 'miter'; // so borders are square with the node shape

    var setupShapeColor = function setupShapeColor() {
      var bgOpy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : bgOpacity;
      r.eleFillStyle(context, node, bgOpy);
    };

    var setupBorderColor = function setupBorderColor() {
      var bdrOpy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : borderOpacity;
      r.colorStrokeStyle(context, borderColor[0], borderColor[1], borderColor[2], bdrOpy);
    }; //
    // setup shape


    var styleShape = node.pstyle('shape').strValue;
    var shapePts = node.pstyle('shape-polygon-points').pfValue;

    if (usePaths) {
      context.translate(pos.x, pos.y);
      var pathCache = r.nodePathCache = r.nodePathCache || [];
      var key = hashStrings(styleShape === 'polygon' ? styleShape + ',' + shapePts.join(',') : styleShape, '' + nodeHeight, '' + nodeWidth);
      var cachedPath = pathCache[key];

      if (cachedPath != null) {
        path = cachedPath;
        pathCacheHit = true;
        rs.pathCache = path;
      } else {
        path = new Path2D();
        pathCache[key] = rs.pathCache = path;
      }
    }

    var drawShape = function drawShape() {
      if (!pathCacheHit) {
        var npos = pos;

        if (usePaths) {
          npos = {
            x: 0,
            y: 0
          };
        }

        r.nodeShapes[r.getNodeShape(node)].draw(path || context, npos.x, npos.y, nodeWidth, nodeHeight);
      }

      if (usePaths) {
        context.fill(path);
      } else {
        context.fill();
      }
    };

    var drawImages = function drawImages() {
      var nodeOpacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : eleOpacity;
      var prevBging = _p.backgrounding;
      var totalCompleted = 0;

      for (var _i = 0; _i < image.length; _i++) {
        if (urlDefined[_i] && image[_i].complete && !image[_i].error) {
          totalCompleted++;
          r.drawInscribedImage(context, image[_i], node, _i, nodeOpacity);
        }
      }

      _p.backgrounding = !(totalCompleted === numImages);

      if (prevBging !== _p.backgrounding) {
        // update style b/c :backgrounding state changed
        node.updateStyle(false);
      }
    };

    var drawPie = function drawPie() {
      var redrawShape = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var pieOpacity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : eleOpacity;

      if (r.hasPie(node)) {
        r.drawPie(context, node, pieOpacity); // redraw/restore path if steps after pie need it

        if (redrawShape) {
          if (!usePaths) {
            r.nodeShapes[r.getNodeShape(node)].draw(context, pos.x, pos.y, nodeWidth, nodeHeight);
          }
        }
      }
    };

    var darken = function darken() {
      var darkenOpacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : eleOpacity;
      var opacity = (darkness > 0 ? darkness : -darkness) * darkenOpacity;
      var c = darkness > 0 ? 0 : 255;

      if (darkness !== 0) {
        r.colorFillStyle(context, c, c, c, opacity);

        if (usePaths) {
          context.fill(path);
        } else {
          context.fill();
        }
      }
    };

    var drawBorder = function drawBorder() {
      if (borderWidth > 0) {
        context.lineWidth = borderWidth;
        context.lineCap = 'butt';

        if (context.setLineDash) {
          // for very outofdate browsers
          switch (borderStyle) {
            case 'dotted':
              context.setLineDash([1, 1]);
              break;

            case 'dashed':
              context.setLineDash([4, 2]);
              break;

            case 'solid':
            case 'double':
              context.setLineDash([]);
              break;
          }
        }

        if (usePaths) {
          context.stroke(path);
        } else {
          context.stroke();
        }

        if (borderStyle === 'double') {
          context.lineWidth = borderWidth / 3;
          var gco = context.globalCompositeOperation;
          context.globalCompositeOperation = 'destination-out';

          if (usePaths) {
            context.stroke(path);
          } else {
            context.stroke();
          }

          context.globalCompositeOperation = gco;
        } // reset in case we changed the border style


        if (context.setLineDash) {
          // for very outofdate browsers
          context.setLineDash([]);
        }
      }
    };

    var drawOverlay = function drawOverlay() {
      if (shouldDrawOverlay) {
        r.drawNodeOverlay(context, node, pos, nodeWidth, nodeHeight);
      }
    };

    var drawText = function drawText() {
      r.drawElementText(context, node, null, drawLabel);
    };

    var ghost = node.pstyle('ghost').value === 'yes';

    if (ghost) {
      var gx = node.pstyle('ghost-offset-x').pfValue;
      var gy = node.pstyle('ghost-offset-y').pfValue;
      var ghostOpacity = node.pstyle('ghost-opacity').value;
      var effGhostOpacity = ghostOpacity * eleOpacity;
      context.translate(gx, gy);
      setupShapeColor(ghostOpacity * bgOpacity);
      drawShape();
      drawImages(effGhostOpacity);
      drawPie(darkness !== 0 || borderWidth !== 0);
      darken(effGhostOpacity);
      setupBorderColor(ghostOpacity * borderOpacity);
      drawBorder();
      context.translate(-gx, -gy);
    }

    setupShapeColor();
    drawShape();
    drawImages();
    drawPie(darkness !== 0 || borderWidth !== 0);
    darken();
    setupBorderColor();
    drawBorder();

    if (usePaths) {
      context.translate(-pos.x, -pos.y);
    }

    drawText();
    drawOverlay(); //
    // clean up shift

    if (shiftToOriginWithBb) {
      context.translate(bb.x1, bb.y1);
    }
  };

  CRp$5.drawNodeOverlay = function (context, node, pos, nodeWidth, nodeHeight) {
    var r = this;

    if (!node.visible()) {
      return;
    }

    var overlayPadding = node.pstyle('overlay-padding').pfValue;
    var overlayOpacity = node.pstyle('overlay-opacity').value;
    var overlayColor = node.pstyle('overlay-color').value;

    if (overlayOpacity > 0) {
      pos = pos || node.position();

      if (nodeWidth == null || nodeHeight == null) {
        var padding = node.padding();
        nodeWidth = node.width() + 2 * padding;
        nodeHeight = node.height() + 2 * padding;
      }

      r.colorFillStyle(context, overlayColor[0], overlayColor[1], overlayColor[2], overlayOpacity);
      r.nodeShapes['roundrectangle'].draw(context, pos.x, pos.y, nodeWidth + overlayPadding * 2, nodeHeight + overlayPadding * 2);
      context.fill();
    }
  }; // does the node have at least one pie piece?


  CRp$5.hasPie = function (node) {
    node = node[0]; // ensure ele ref

    return node._private.hasPie;
  };

  CRp$5.drawPie = function (context, node, nodeOpacity, pos) {
    node = node[0]; // ensure ele ref

    pos = pos || node.position();
    var cyStyle = node.cy().style();
    var pieSize = node.pstyle('pie-size');
    var x = pos.x;
    var y = pos.y;
    var nodeW = node.width();
    var nodeH = node.height();
    var radius = Math.min(nodeW, nodeH) / 2; // must fit in node

    var lastPercent = 0; // what % to continue drawing pie slices from on [0, 1]

    var usePaths = this.usePaths();

    if (usePaths) {
      x = 0;
      y = 0;
    }

    if (pieSize.units === '%') {
      radius = radius * pieSize.pfValue;
    } else if (pieSize.pfValue !== undefined) {
      radius = pieSize.pfValue / 2;
    }

    for (var i = 1; i <= cyStyle.pieBackgroundN; i++) {
      // 1..N
      var size = node.pstyle('pie-' + i + '-background-size').value;
      var color = node.pstyle('pie-' + i + '-background-color').value;
      var opacity = node.pstyle('pie-' + i + '-background-opacity').value * nodeOpacity;
      var percent = size / 100; // map integer range [0, 100] to [0, 1]
      // percent can't push beyond 1

      if (percent + lastPercent > 1) {
        percent = 1 - lastPercent;
      }

      var angleStart = 1.5 * Math.PI + 2 * Math.PI * lastPercent; // start at 12 o'clock and go clockwise

      var angleDelta = 2 * Math.PI * percent;
      var angleEnd = angleStart + angleDelta; // ignore if
      // - zero size
      // - we're already beyond the full circle
      // - adding the current slice would go beyond the full circle

      if (size === 0 || lastPercent >= 1 || lastPercent + percent > 1) {
        continue;
      }

      context.beginPath();
      context.moveTo(x, y);
      context.arc(x, y, radius, angleStart, angleEnd);
      context.closePath();
      this.colorFillStyle(context, color[0], color[1], color[2], opacity);
      context.fill();
      lastPercent += percent;
    }
  };

  var CRp$6 = {};
  var motionBlurDelay = 100; // var isFirefox = typeof InstallTrigger !== 'undefined';

  CRp$6.getPixelRatio = function () {
    var context = this.data.contexts[0];

    if (this.forcedPixelRatio != null) {
      return this.forcedPixelRatio;
    }

    var backingStore = context.backingStorePixelRatio || context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio || context.backingStorePixelRatio || 1;
    return (window.devicePixelRatio || 1) / backingStore; // eslint-disable-line no-undef
  };

  CRp$6.paintCache = function (context) {
    var caches = this.paintCaches = this.paintCaches || [];
    var needToCreateCache = true;
    var cache;

    for (var i = 0; i < caches.length; i++) {
      cache = caches[i];

      if (cache.context === context) {
        needToCreateCache = false;
        break;
      }
    }

    if (needToCreateCache) {
      cache = {
        context: context
      };
      caches.push(cache);
    }

    return cache;
  };

  CRp$6.createGradientStyleFor = function (context, shapeStyleName, ele, fill, opacity) {
    var gradientStyle;
    var usePaths = this.usePaths();
    var colors = ele.pstyle(shapeStyleName + '-gradient-stop-colors').value,
        positions = ele.pstyle(shapeStyleName + '-gradient-stop-positions').pfValue;

    if (fill === 'radial-gradient') {
      if (ele.isEdge()) {
        var start = ele.sourceEndpoint(),
            end = ele.targetEndpoint(),
            mid = ele.midpoint();
        var d1 = dist(start, mid);
        var d2 = dist(end, mid);
        gradientStyle = context.createRadialGradient(mid.x, mid.y, 0, mid.x, mid.y, Math.max(d1, d2));
      } else {
        var pos = usePaths ? {
          x: 0,
          y: 0
        } : ele.position(),
            width = ele.paddedWidth(),
            height = ele.paddedHeight();
        gradientStyle = context.createRadialGradient(pos.x, pos.y, 0, pos.x, pos.y, Math.max(width, height));
      }
    } else {
      if (ele.isEdge()) {
        var _start = ele.sourceEndpoint(),
            _end = ele.targetEndpoint();

        gradientStyle = context.createLinearGradient(_start.x, _start.y, _end.x, _end.y);
      } else {
        var _pos = usePaths ? {
          x: 0,
          y: 0
        } : ele.position(),
            _width = ele.paddedWidth(),
            _height = ele.paddedHeight(),
            halfWidth = _width / 2,
            halfHeight = _height / 2;

        var direction = ele.pstyle('background-gradient-direction').value;

        switch (direction) {
          case 'to-bottom':
            gradientStyle = context.createLinearGradient(_pos.x, _pos.y - halfHeight, _pos.x, _pos.y + halfHeight);
            break;

          case 'to-top':
            gradientStyle = context.createLinearGradient(_pos.x, _pos.y + halfHeight, _pos.x, _pos.y - halfHeight);
            break;

          case 'to-left':
            gradientStyle = context.createLinearGradient(_pos.x + halfWidth, _pos.y, _pos.x - halfWidth, _pos.y);
            break;

          case 'to-right':
            gradientStyle = context.createLinearGradient(_pos.x - halfWidth, _pos.y, _pos.x + halfWidth, _pos.y);
            break;

          case 'to-bottom-right':
          case 'to-right-bottom':
            gradientStyle = context.createLinearGradient(_pos.x - halfWidth, _pos.y - halfHeight, _pos.x + halfWidth, _pos.y + halfHeight);
            break;

          case 'to-top-right':
          case 'to-right-top':
            gradientStyle = context.createLinearGradient(_pos.x - halfWidth, _pos.y + halfHeight, _pos.x + halfWidth, _pos.y - halfHeight);
            break;

          case 'to-bottom-left':
          case 'to-left-bottom':
            gradientStyle = context.createLinearGradient(_pos.x + halfWidth, _pos.y - halfHeight, _pos.x - halfWidth, _pos.y + halfHeight);
            break;

          case 'to-top-left':
          case 'to-left-top':
            gradientStyle = context.createLinearGradient(_pos.x + halfWidth, _pos.y + halfHeight, _pos.x - halfWidth, _pos.y - halfHeight);
            break;
        }
      }
    }

    if (!gradientStyle) return null; // invalid gradient style

    var hasPositions = positions.length === colors.length;
    var length = colors.length;

    for (var i = 0; i < length; i++) {
      gradientStyle.addColorStop(hasPositions ? positions[i] : i / (length - 1), 'rgba(' + colors[i][0] + ',' + colors[i][1] + ',' + colors[i][2] + ',' + opacity + ')');
    }

    return gradientStyle;
  };

  CRp$6.gradientFillStyle = function (context, ele, fill, opacity) {
    var gradientStyle = this.createGradientStyleFor(context, 'background', ele, fill, opacity);
    if (!gradientStyle) return null; // error

    context.fillStyle = gradientStyle;
  };

  CRp$6.colorFillStyle = function (context, r, g, b, a) {
    context.fillStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')'; // turn off for now, seems context does its own caching
    // var cache = this.paintCache(context);
    // var fillStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';
    // if( cache.fillStyle !== fillStyle ){
    //   context.fillStyle = cache.fillStyle = fillStyle;
    // }
  };

  CRp$6.eleFillStyle = function (context, ele, opacity) {
    var backgroundFill = ele.pstyle('background-fill').value;

    if (backgroundFill === 'linear-gradient' || backgroundFill === 'radial-gradient') {
      this.gradientFillStyle(context, ele, backgroundFill, opacity);
    } else {
      var backgroundColor = ele.pstyle('background-color').value;
      this.colorFillStyle(context, backgroundColor[0], backgroundColor[1], backgroundColor[2], opacity);
    }
  };

  CRp$6.gradientStrokeStyle = function (context, ele, fill, opacity) {
    var gradientStyle = this.createGradientStyleFor(context, 'line', ele, fill, opacity);
    if (!gradientStyle) return null; // error

    context.strokeStyle = gradientStyle;
  };

  CRp$6.colorStrokeStyle = function (context, r, g, b, a) {
    context.strokeStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')'; // turn off for now, seems context does its own caching
    // var cache = this.paintCache(context);
    // var strokeStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';
    // if( cache.strokeStyle !== strokeStyle ){
    //   context.strokeStyle = cache.strokeStyle = strokeStyle;
    // }
  };

  CRp$6.eleStrokeStyle = function (context, ele, opacity) {
    var lineFill = ele.pstyle('line-fill').value;

    if (lineFill === 'linear-gradient' || lineFill === 'radial-gradient') {
      this.gradientStrokeStyle(context, ele, lineFill, opacity);
    } else {
      var lineColor = ele.pstyle('line-color').value;
      this.colorStrokeStyle(context, lineColor[0], lineColor[1], lineColor[2], opacity);
    }
  }; // Resize canvas


  CRp$6.matchCanvasSize = function (container) {
    var r = this;
    var data = r.data;
    var bb = r.findContainerClientCoords();
    var width = bb[2];
    var height = bb[3];
    var pixelRatio = r.getPixelRatio();
    var mbPxRatio = r.motionBlurPxRatio;

    if (container === r.data.bufferCanvases[r.MOTIONBLUR_BUFFER_NODE] || container === r.data.bufferCanvases[r.MOTIONBLUR_BUFFER_DRAG]) {
      pixelRatio = mbPxRatio;
    }

    var canvasWidth = width * pixelRatio;
    var canvasHeight = height * pixelRatio;
    var canvas;

    if (canvasWidth === r.canvasWidth && canvasHeight === r.canvasHeight) {
      return; // save cycles if same
    }

    r.fontCaches = null; // resizing resets the style

    var canvasContainer = data.canvasContainer;
    canvasContainer.style.width = width + 'px';
    canvasContainer.style.height = height + 'px';

    for (var i = 0; i < r.CANVAS_LAYERS; i++) {
      canvas = data.canvases[i];
      canvas.width = canvasWidth;
      canvas.height = canvasHeight;
      canvas.style.width = width + 'px';
      canvas.style.height = height + 'px';
    }

    for (var i = 0; i < r.BUFFER_COUNT; i++) {
      canvas = data.bufferCanvases[i];
      canvas.width = canvasWidth;
      canvas.height = canvasHeight;
      canvas.style.width = width + 'px';
      canvas.style.height = height + 'px';
    }

    r.textureMult = 1;

    if (pixelRatio <= 1) {
      canvas = data.bufferCanvases[r.TEXTURE_BUFFER];
      r.textureMult = 2;
      canvas.width = canvasWidth * r.textureMult;
      canvas.height = canvasHeight * r.textureMult;
    }

    r.canvasWidth = canvasWidth;
    r.canvasHeight = canvasHeight;
  };

  CRp$6.renderTo = function (cxt, zoom, pan, pxRatio) {
    this.render({
      forcedContext: cxt,
      forcedZoom: zoom,
      forcedPan: pan,
      drawAllLayers: true,
      forcedPxRatio: pxRatio
    });
  };

  CRp$6.render = function (options) {
    options = options || staticEmptyObject();
    var forcedContext = options.forcedContext;
    var drawAllLayers = options.drawAllLayers;
    var drawOnlyNodeLayer = options.drawOnlyNodeLayer;
    var forcedZoom = options.forcedZoom;
    var forcedPan = options.forcedPan;
    var r = this;
    var pixelRatio = options.forcedPxRatio === undefined ? this.getPixelRatio() : options.forcedPxRatio;
    var cy = r.cy;
    var data = r.data;
    var needDraw = data.canvasNeedsRedraw;
    var textureDraw = r.textureOnViewport && !forcedContext && (r.pinching || r.hoverData.dragging || r.swipePanning || r.data.wheelZooming);
    var motionBlur = options.motionBlur !== undefined ? options.motionBlur : r.motionBlur;
    var mbPxRatio = r.motionBlurPxRatio;
    var hasCompoundNodes = cy.hasCompoundNodes();
    var inNodeDragGesture = r.hoverData.draggingEles;
    var inBoxSelection = r.hoverData.selecting || r.touchData.selecting ? true : false;
    motionBlur = motionBlur && !forcedContext && r.motionBlurEnabled && !inBoxSelection;
    var motionBlurFadeEffect = motionBlur;

    if (!forcedContext) {
      if (r.prevPxRatio !== pixelRatio) {
        r.invalidateContainerClientCoordsCache();
        r.matchCanvasSize(r.container);
        r.redrawHint('eles', true);
        r.redrawHint('drag', true);
      }

      r.prevPxRatio = pixelRatio;
    }

    if (!forcedContext && r.motionBlurTimeout) {
      clearTimeout(r.motionBlurTimeout);
    }

    if (motionBlur) {
      if (r.mbFrames == null) {
        r.mbFrames = 0;
      }

      r.mbFrames++;

      if (r.mbFrames < 3) {
        // need several frames before even high quality motionblur
        motionBlurFadeEffect = false;
      } // go to lower quality blurry frames when several m/b frames have been rendered (avoids flashing)


      if (r.mbFrames > r.minMbLowQualFrames) {
        //r.fullQualityMb = false;
        r.motionBlurPxRatio = r.mbPxRBlurry;
      }
    }

    if (r.clearingMotionBlur) {
      r.motionBlurPxRatio = 1;
    } // b/c drawToContext() may be async w.r.t. redraw(), keep track of last texture frame
    // because a rogue async texture frame would clear needDraw


    if (r.textureDrawLastFrame && !textureDraw) {
      needDraw[r.NODE] = true;
      needDraw[r.SELECT_BOX] = true;
    }

    var style = cy.style();
    var zoom = cy.zoom();
    var effectiveZoom = forcedZoom !== undefined ? forcedZoom : zoom;
    var pan = cy.pan();
    var effectivePan = {
      x: pan.x,
      y: pan.y
    };
    var vp = {
      zoom: zoom,
      pan: {
        x: pan.x,
        y: pan.y
      }
    };
    var prevVp = r.prevViewport;
    var viewportIsDiff = prevVp === undefined || vp.zoom !== prevVp.zoom || vp.pan.x !== prevVp.pan.x || vp.pan.y !== prevVp.pan.y; // we want the low quality motionblur only when the viewport is being manipulated etc (where it's not noticed)

    if (!viewportIsDiff && !(inNodeDragGesture && !hasCompoundNodes)) {
      r.motionBlurPxRatio = 1;
    }

    if (forcedPan) {
      effectivePan = forcedPan;
    } // apply pixel ratio


    effectiveZoom *= pixelRatio;
    effectivePan.x *= pixelRatio;
    effectivePan.y *= pixelRatio;
    var eles = r.getCachedZSortedEles();

    function mbclear(context, x, y, w, h) {
      var gco = context.globalCompositeOperation;
      context.globalCompositeOperation = 'destination-out';
      r.colorFillStyle(context, 255, 255, 255, r.motionBlurTransparency);
      context.fillRect(x, y, w, h);
      context.globalCompositeOperation = gco;
    }

    function setContextTransform(context, clear) {
      var ePan, eZoom, w, h;

      if (!r.clearingMotionBlur && (context === data.bufferContexts[r.MOTIONBLUR_BUFFER_NODE] || context === data.bufferContexts[r.MOTIONBLUR_BUFFER_DRAG])) {
        ePan = {
          x: pan.x * mbPxRatio,
          y: pan.y * mbPxRatio
        };
        eZoom = zoom * mbPxRatio;
        w = r.canvasWidth * mbPxRatio;
        h = r.canvasHeight * mbPxRatio;
      } else {
        ePan = effectivePan;
        eZoom = effectiveZoom;
        w = r.canvasWidth;
        h = r.canvasHeight;
      }

      context.setTransform(1, 0, 0, 1, 0, 0);

      if (clear === 'motionBlur') {
        mbclear(context, 0, 0, w, h);
      } else if (!forcedContext && (clear === undefined || clear)) {
        context.clearRect(0, 0, w, h);
      }

      if (!drawAllLayers) {
        context.translate(ePan.x, ePan.y);
        context.scale(eZoom, eZoom);
      }

      if (forcedPan) {
        context.translate(forcedPan.x, forcedPan.y);
      }

      if (forcedZoom) {
        context.scale(forcedZoom, forcedZoom);
      }
    }

    if (!textureDraw) {
      r.textureDrawLastFrame = false;
    }

    if (textureDraw) {
      r.textureDrawLastFrame = true;

      if (!r.textureCache) {
        r.textureCache = {};
        r.textureCache.bb = cy.mutableElements().boundingBox();
        r.textureCache.texture = r.data.bufferCanvases[r.TEXTURE_BUFFER];
        var cxt = r.data.bufferContexts[r.TEXTURE_BUFFER];
        cxt.setTransform(1, 0, 0, 1, 0, 0);
        cxt.clearRect(0, 0, r.canvasWidth * r.textureMult, r.canvasHeight * r.textureMult);
        r.render({
          forcedContext: cxt,
          drawOnlyNodeLayer: true,
          forcedPxRatio: pixelRatio * r.textureMult
        });
        var vp = r.textureCache.viewport = {
          zoom: cy.zoom(),
          pan: cy.pan(),
          width: r.canvasWidth,
          height: r.canvasHeight
        };
        vp.mpan = {
          x: (0 - vp.pan.x) / vp.zoom,
          y: (0 - vp.pan.y) / vp.zoom
        };
      }

      needDraw[r.DRAG] = false;
      needDraw[r.NODE] = false;
      var context = data.contexts[r.NODE];
      var texture = r.textureCache.texture;
      var vp = r.textureCache.viewport;
      context.setTransform(1, 0, 0, 1, 0, 0);

      if (motionBlur) {
        mbclear(context, 0, 0, vp.width, vp.height);
      } else {
        context.clearRect(0, 0, vp.width, vp.height);
      }

      var outsideBgColor = style.core('outside-texture-bg-color').value;
      var outsideBgOpacity = style.core('outside-texture-bg-opacity').value;
      r.colorFillStyle(context, outsideBgColor[0], outsideBgColor[1], outsideBgColor[2], outsideBgOpacity);
      context.fillRect(0, 0, vp.width, vp.height);
      var zoom = cy.zoom();
      setContextTransform(context, false);
      context.clearRect(vp.mpan.x, vp.mpan.y, vp.width / vp.zoom / pixelRatio, vp.height / vp.zoom / pixelRatio);
      context.drawImage(texture, vp.mpan.x, vp.mpan.y, vp.width / vp.zoom / pixelRatio, vp.height / vp.zoom / pixelRatio);
    } else if (r.textureOnViewport && !forcedContext) {
      // clear the cache since we don't need it
      r.textureCache = null;
    }

    var extent = cy.extent();
    var vpManip = r.pinching || r.hoverData.dragging || r.swipePanning || r.data.wheelZooming || r.hoverData.draggingEles || r.cy.animated();
    var hideEdges = r.hideEdgesOnViewport && vpManip;
    var needMbClear = [];
    needMbClear[r.NODE] = !needDraw[r.NODE] && motionBlur && !r.clearedForMotionBlur[r.NODE] || r.clearingMotionBlur;

    if (needMbClear[r.NODE]) {
      r.clearedForMotionBlur[r.NODE] = true;
    }

    needMbClear[r.DRAG] = !needDraw[r.DRAG] && motionBlur && !r.clearedForMotionBlur[r.DRAG] || r.clearingMotionBlur;

    if (needMbClear[r.DRAG]) {
      r.clearedForMotionBlur[r.DRAG] = true;
    }

    if (needDraw[r.NODE] || drawAllLayers || drawOnlyNodeLayer || needMbClear[r.NODE]) {
      var useBuffer = motionBlur && !needMbClear[r.NODE] && mbPxRatio !== 1;
      var context = forcedContext || (useBuffer ? r.data.bufferContexts[r.MOTIONBLUR_BUFFER_NODE] : data.contexts[r.NODE]);
      var clear = motionBlur && !useBuffer ? 'motionBlur' : undefined;
      setContextTransform(context, clear);

      if (hideEdges) {
        r.drawCachedNodes(context, eles.nondrag, pixelRatio, extent);
      } else {
        r.drawLayeredElements(context, eles.nondrag, pixelRatio, extent);
      }

      if (r.debug) {
        r.drawDebugPoints(context, eles.nondrag);
      }

      if (!drawAllLayers && !motionBlur) {
        needDraw[r.NODE] = false;
      }
    }

    if (!drawOnlyNodeLayer && (needDraw[r.DRAG] || drawAllLayers || needMbClear[r.DRAG])) {
      var useBuffer = motionBlur && !needMbClear[r.DRAG] && mbPxRatio !== 1;
      var context = forcedContext || (useBuffer ? r.data.bufferContexts[r.MOTIONBLUR_BUFFER_DRAG] : data.contexts[r.DRAG]);
      setContextTransform(context, motionBlur && !useBuffer ? 'motionBlur' : undefined);

      if (hideEdges) {
        r.drawCachedNodes(context, eles.drag, pixelRatio, extent);
      } else {
        r.drawCachedElements(context, eles.drag, pixelRatio, extent);
      }

      if (r.debug) {
        r.drawDebugPoints(context, eles.drag);
      }

      if (!drawAllLayers && !motionBlur) {
        needDraw[r.DRAG] = false;
      }
    }

    if (r.showFps || !drawOnlyNodeLayer && needDraw[r.SELECT_BOX] && !drawAllLayers) {
      var context = forcedContext || data.contexts[r.SELECT_BOX];
      setContextTransform(context);

      if (r.selection[4] == 1 && (r.hoverData.selecting || r.touchData.selecting)) {
        var zoom = r.cy.zoom();
        var borderWidth = style.core('selection-box-border-width').value / zoom;
        context.lineWidth = borderWidth;
        context.fillStyle = 'rgba(' + style.core('selection-box-color').value[0] + ',' + style.core('selection-box-color').value[1] + ',' + style.core('selection-box-color').value[2] + ',' + style.core('selection-box-opacity').value + ')';
        context.fillRect(r.selection[0], r.selection[1], r.selection[2] - r.selection[0], r.selection[3] - r.selection[1]);

        if (borderWidth > 0) {
          context.strokeStyle = 'rgba(' + style.core('selection-box-border-color').value[0] + ',' + style.core('selection-box-border-color').value[1] + ',' + style.core('selection-box-border-color').value[2] + ',' + style.core('selection-box-opacity').value + ')';
          context.strokeRect(r.selection[0], r.selection[1], r.selection[2] - r.selection[0], r.selection[3] - r.selection[1]);
        }
      }

      if (data.bgActivePosistion && !r.hoverData.selecting) {
        var zoom = r.cy.zoom();
        var pos = data.bgActivePosistion;
        context.fillStyle = 'rgba(' + style.core('active-bg-color').value[0] + ',' + style.core('active-bg-color').value[1] + ',' + style.core('active-bg-color').value[2] + ',' + style.core('active-bg-opacity').value + ')';
        context.beginPath();
        context.arc(pos.x, pos.y, style.core('active-bg-size').pfValue / zoom, 0, 2 * Math.PI);
        context.fill();
      }

      var timeToRender = r.lastRedrawTime;

      if (r.showFps && timeToRender) {
        timeToRender = Math.round(timeToRender);
        var fps = Math.round(1000 / timeToRender);
        context.setTransform(1, 0, 0, 1, 0, 0);
        context.fillStyle = 'rgba(255, 0, 0, 0.75)';
        context.strokeStyle = 'rgba(255, 0, 0, 0.75)';
        context.lineWidth = 1;
        context.fillText('1 frame = ' + timeToRender + ' ms = ' + fps + ' fps', 0, 20);
        var maxFps = 60;
        context.strokeRect(0, 30, 250, 20);
        context.fillRect(0, 30, 250 * Math.min(fps / maxFps, 1), 20);
      }

      if (!drawAllLayers) {
        needDraw[r.SELECT_BOX] = false;
      }
    } // motionblur: blit rendered blurry frames


    if (motionBlur && mbPxRatio !== 1) {
      var cxtNode = data.contexts[r.NODE];
      var txtNode = r.data.bufferCanvases[r.MOTIONBLUR_BUFFER_NODE];
      var cxtDrag = data.contexts[r.DRAG];
      var txtDrag = r.data.bufferCanvases[r.MOTIONBLUR_BUFFER_DRAG];

      var drawMotionBlur = function drawMotionBlur(cxt, txt, needClear) {
        cxt.setTransform(1, 0, 0, 1, 0, 0);

        if (needClear || !motionBlurFadeEffect) {
          cxt.clearRect(0, 0, r.canvasWidth, r.canvasHeight);
        } else {
          mbclear(cxt, 0, 0, r.canvasWidth, r.canvasHeight);
        }

        var pxr = mbPxRatio;
        cxt.drawImage(txt, // img
        0, 0, // sx, sy
        r.canvasWidth * pxr, r.canvasHeight * pxr, // sw, sh
        0, 0, // x, y
        r.canvasWidth, r.canvasHeight // w, h
        );
      };

      if (needDraw[r.NODE] || needMbClear[r.NODE]) {
        drawMotionBlur(cxtNode, txtNode, needMbClear[r.NODE]);
        needDraw[r.NODE] = false;
      }

      if (needDraw[r.DRAG] || needMbClear[r.DRAG]) {
        drawMotionBlur(cxtDrag, txtDrag, needMbClear[r.DRAG]);
        needDraw[r.DRAG] = false;
      }
    }

    r.prevViewport = vp;

    if (r.clearingMotionBlur) {
      r.clearingMotionBlur = false;
      r.motionBlurCleared = true;
      r.motionBlur = true;
    }

    if (motionBlur) {
      r.motionBlurTimeout = setTimeout(function () {
        r.motionBlurTimeout = null;
        r.clearedForMotionBlur[r.NODE] = false;
        r.clearedForMotionBlur[r.DRAG] = false;
        r.motionBlur = false;
        r.clearingMotionBlur = !textureDraw;
        r.mbFrames = 0;
        needDraw[r.NODE] = true;
        needDraw[r.DRAG] = true;
        r.redraw();
      }, motionBlurDelay);
    }

    if (!forcedContext) {
      cy.emit('render');
    }
  };

  var CRp$7 = {}; // @O Polygon drawing

  CRp$7.drawPolygonPath = function (context, x, y, width, height, points) {
    var halfW = width / 2;
    var halfH = height / 2;

    if (context.beginPath) {
      context.beginPath();
    }

    context.moveTo(x + halfW * points[0], y + halfH * points[1]);

    for (var i = 1; i < points.length / 2; i++) {
      context.lineTo(x + halfW * points[i * 2], y + halfH * points[i * 2 + 1]);
    }

    context.closePath();
  };

  CRp$7.drawRoundPolygonPath = function (context, x, y, width, height, points) {
    var halfW = width / 2;
    var halfH = height / 2;
    var cornerRadius = getRoundPolygonRadius(width, height);

    if (context.beginPath) {
      context.beginPath();
    }

    for (var _i = 0; _i < points.length / 4; _i++) {
      var sourceUv = void 0,
          destUv = void 0;

      if (_i === 0) {
        sourceUv = points.length - 2;
      } else {
        sourceUv = _i * 4 - 2;
      }

      destUv = _i * 4 + 2;
      var px = x + halfW * points[_i * 4];
      var py = y + halfH * points[_i * 4 + 1];
      var cosTheta = -points[sourceUv] * points[destUv] - points[sourceUv + 1] * points[destUv + 1];
      var offset = cornerRadius / Math.tan(Math.acos(cosTheta) / 2);
      var cp0x = px - offset * points[sourceUv];
      var cp0y = py - offset * points[sourceUv + 1];
      var cp1x = px + offset * points[destUv];
      var cp1y = py + offset * points[destUv + 1];

      if (_i === 0) {
        context.moveTo(cp0x, cp0y);
      } else {
        context.lineTo(cp0x, cp0y);
      }

      context.arcTo(px, py, cp1x, cp1y, cornerRadius);
    }

    context.closePath();
  }; // Round rectangle drawing


  CRp$7.drawRoundRectanglePath = function (context, x, y, width, height) {
    var halfWidth = width / 2;
    var halfHeight = height / 2;
    var cornerRadius = getRoundRectangleRadius(width, height);

    if (context.beginPath) {
      context.beginPath();
    } // Start at top middle


    context.moveTo(x, y - halfHeight); // Arc from middle top to right side

    context.arcTo(x + halfWidth, y - halfHeight, x + halfWidth, y, cornerRadius); // Arc from right side to bottom

    context.arcTo(x + halfWidth, y + halfHeight, x, y + halfHeight, cornerRadius); // Arc from bottom to left side

    context.arcTo(x - halfWidth, y + halfHeight, x - halfWidth, y, cornerRadius); // Arc from left side to topBorder

    context.arcTo(x - halfWidth, y - halfHeight, x, y - halfHeight, cornerRadius); // Join line

    context.lineTo(x, y - halfHeight);
    context.closePath();
  };

  CRp$7.drawBottomRoundRectanglePath = function (context, x, y, width, height) {
    var halfWidth = width / 2;
    var halfHeight = height / 2;
    var cornerRadius = getRoundRectangleRadius(width, height);

    if (context.beginPath) {
      context.beginPath();
    } // Start at top middle


    context.moveTo(x, y - halfHeight);
    context.lineTo(x + halfWidth, y - halfHeight);
    context.lineTo(x + halfWidth, y);
    context.arcTo(x + halfWidth, y + halfHeight, x, y + halfHeight, cornerRadius);
    context.arcTo(x - halfWidth, y + halfHeight, x - halfWidth, y, cornerRadius);
    context.lineTo(x - halfWidth, y - halfHeight);
    context.lineTo(x, y - halfHeight);
    context.closePath();
  };

  CRp$7.drawCutRectanglePath = function (context, x, y, width, height) {
    var halfWidth = width / 2;
    var halfHeight = height / 2;
    var cornerLength = getCutRectangleCornerLength();

    if (context.beginPath) {
      context.beginPath();
    }

    context.moveTo(x - halfWidth + cornerLength, y - halfHeight);
    context.lineTo(x + halfWidth - cornerLength, y - halfHeight);
    context.lineTo(x + halfWidth, y - halfHeight + cornerLength);
    context.lineTo(x + halfWidth, y + halfHeight - cornerLength);
    context.lineTo(x + halfWidth - cornerLength, y + halfHeight);
    context.lineTo(x - halfWidth + cornerLength, y + halfHeight);
    context.lineTo(x - halfWidth, y + halfHeight - cornerLength);
    context.lineTo(x - halfWidth, y - halfHeight + cornerLength);
    context.closePath();
  };

  CRp$7.drawBarrelPath = function (context, x, y, width, height) {
    var halfWidth = width / 2;
    var halfHeight = height / 2;
    var xBegin = x - halfWidth;
    var xEnd = x + halfWidth;
    var yBegin = y - halfHeight;
    var yEnd = y + halfHeight;
    var barrelCurveConstants = getBarrelCurveConstants(width, height);
    var wOffset = barrelCurveConstants.widthOffset;
    var hOffset = barrelCurveConstants.heightOffset;
    var ctrlPtXOffset = barrelCurveConstants.ctrlPtOffsetPct * wOffset;

    if (context.beginPath) {
      context.beginPath();
    }

    context.moveTo(xBegin, yBegin + hOffset);
    context.lineTo(xBegin, yEnd - hOffset);
    context.quadraticCurveTo(xBegin + ctrlPtXOffset, yEnd, xBegin + wOffset, yEnd);
    context.lineTo(xEnd - wOffset, yEnd);
    context.quadraticCurveTo(xEnd - ctrlPtXOffset, yEnd, xEnd, yEnd - hOffset);
    context.lineTo(xEnd, yBegin + hOffset);
    context.quadraticCurveTo(xEnd - ctrlPtXOffset, yBegin, xEnd - wOffset, yBegin);
    context.lineTo(xBegin + wOffset, yBegin);
    context.quadraticCurveTo(xBegin + ctrlPtXOffset, yBegin, xBegin, yBegin + hOffset);
    context.closePath();
  };

  var sin0 = Math.sin(0);
  var cos0 = Math.cos(0);
  var sin = {};
  var cos = {};
  var ellipseStepSize = Math.PI / 40;

  for (var i = 0 * Math.PI; i < 2 * Math.PI; i += ellipseStepSize) {
    sin[i] = Math.sin(i);
    cos[i] = Math.cos(i);
  }

  CRp$7.drawEllipsePath = function (context, centerX, centerY, width, height) {
    if (context.beginPath) {
      context.beginPath();
    }

    if (context.ellipse) {
      context.ellipse(centerX, centerY, width / 2, height / 2, 0, 0, 2 * Math.PI);
    } else {
      var xPos, yPos;
      var rw = width / 2;
      var rh = height / 2;

      for (var i = 0 * Math.PI; i < 2 * Math.PI; i += ellipseStepSize) {
        xPos = centerX - rw * sin[i] * sin0 + rw * cos[i] * cos0;
        yPos = centerY + rh * cos[i] * sin0 + rh * sin[i] * cos0;

        if (i === 0) {
          context.moveTo(xPos, yPos);
        } else {
          context.lineTo(xPos, yPos);
        }
      }
    }

    context.closePath();
  };

  /* global atob, ArrayBuffer, Uint8Array, Blob */
  var CRp$8 = {};

  CRp$8.createBuffer = function (w, h) {
    var buffer = document.createElement('canvas'); // eslint-disable-line no-undef

    buffer.width = w;
    buffer.height = h;
    return [buffer, buffer.getContext('2d')];
  };

  CRp$8.bufferCanvasImage = function (options) {
    var cy = this.cy;
    var eles = cy.mutableElements();
    var bb = eles.boundingBox();
    var ctrRect = this.findContainerClientCoords();
    var width = options.full ? Math.ceil(bb.w) : ctrRect[2];
    var height = options.full ? Math.ceil(bb.h) : ctrRect[3];
    var specdMaxDims = number(options.maxWidth) || number(options.maxHeight);
    var pxRatio = this.getPixelRatio();
    var scale = 1;

    if (options.scale !== undefined) {
      width *= options.scale;
      height *= options.scale;
      scale = options.scale;
    } else if (specdMaxDims) {
      var maxScaleW = Infinity;
      var maxScaleH = Infinity;

      if (number(options.maxWidth)) {
        maxScaleW = scale * options.maxWidth / width;
      }

      if (number(options.maxHeight)) {
        maxScaleH = scale * options.maxHeight / height;
      }

      scale = Math.min(maxScaleW, maxScaleH);
      width *= scale;
      height *= scale;
    }

    if (!specdMaxDims) {
      width *= pxRatio;
      height *= pxRatio;
      scale *= pxRatio;
    }

    var buffCanvas = document.createElement('canvas'); // eslint-disable-line no-undef

    buffCanvas.width = width;
    buffCanvas.height = height;
    buffCanvas.style.width = width + 'px';
    buffCanvas.style.height = height + 'px';
    var buffCxt = buffCanvas.getContext('2d'); // Rasterize the layers, but only if container has nonzero size

    if (width > 0 && height > 0) {
      buffCxt.clearRect(0, 0, width, height);
      buffCxt.globalCompositeOperation = 'source-over';
      var zsortedEles = this.getCachedZSortedEles();

      if (options.full) {
        // draw the full bounds of the graph
        buffCxt.translate(-bb.x1 * scale, -bb.y1 * scale);
        buffCxt.scale(scale, scale);
        this.drawElements(buffCxt, zsortedEles);
        buffCxt.scale(1 / scale, 1 / scale);
        buffCxt.translate(bb.x1 * scale, bb.y1 * scale);
      } else {
        // draw the current view
        var pan = cy.pan();
        var translation = {
          x: pan.x * scale,
          y: pan.y * scale
        };
        scale *= cy.zoom();
        buffCxt.translate(translation.x, translation.y);
        buffCxt.scale(scale, scale);
        this.drawElements(buffCxt, zsortedEles);
        buffCxt.scale(1 / scale, 1 / scale);
        buffCxt.translate(-translation.x, -translation.y);
      } // need to fill bg at end like this in order to fill cleared transparent pixels in jpgs


      if (options.bg) {
        buffCxt.globalCompositeOperation = 'destination-over';
        buffCxt.fillStyle = options.bg;
        buffCxt.rect(0, 0, width, height);
        buffCxt.fill();
      }
    }

    return buffCanvas;
  };

  function b64ToBlob(b64, mimeType) {
    var bytes = atob(b64);
    var buff = new ArrayBuffer(bytes.length);
    var buffUint8 = new Uint8Array(buff);

    for (var i = 0; i < bytes.length; i++) {
      buffUint8[i] = bytes.charCodeAt(i);
    }

    return new Blob([buff], {
      type: mimeType
    });
  }

  function b64UriToB64(b64uri) {
    var i = b64uri.indexOf(',');
    return b64uri.substr(i + 1);
  }

  function output(options, canvas, mimeType) {
    var getB64Uri = function getB64Uri() {
      return canvas.toDataURL(mimeType, options.quality);
    };

    switch (options.output) {
      case 'blob-promise':
        return new Promise$1(function (resolve, reject) {
          try {
            canvas.toBlob(function (blob) {
              if (blob != null) {
                resolve(blob);
              } else {
                reject(new Error('`canvas.toBlob()` sent a null value in its callback'));
              }
            }, mimeType, options.quality);
          } catch (err) {
            reject(err);
          }
        });

      case 'blob':
        return b64ToBlob(b64UriToB64(getB64Uri()), mimeType);

      case 'base64':
        return b64UriToB64(getB64Uri());

      case 'base64uri':
      default:
        return getB64Uri();
    }
  }

  CRp$8.png = function (options) {
    return output(options, this.bufferCanvasImage(options), 'image/png');
  };

  CRp$8.jpg = function (options) {
    return output(options, this.bufferCanvasImage(options), 'image/jpeg');
  };

  var CRp$9 = {};

  CRp$9.nodeShapeImpl = function (name, context, centerX, centerY, width, height, points) {
    switch (name) {
      case 'ellipse':
        return this.drawEllipsePath(context, centerX, centerY, width, height);

      case 'polygon':
        return this.drawPolygonPath(context, centerX, centerY, width, height, points);

      case 'round-polygon':
        return this.drawRoundPolygonPath(context, centerX, centerY, width, height, points);

      case 'roundrectangle':
      case 'round-rectangle':
        return this.drawRoundRectanglePath(context, centerX, centerY, width, height);

      case 'cutrectangle':
      case 'cut-rectangle':
        return this.drawCutRectanglePath(context, centerX, centerY, width, height);

      case 'bottomroundrectangle':
      case 'bottom-round-rectangle':
        return this.drawBottomRoundRectanglePath(context, centerX, centerY, width, height);

      case 'barrel':
        return this.drawBarrelPath(context, centerX, centerY, width, height);
    }
  };

  var CR = CanvasRenderer;
  var CRp$a = CanvasRenderer.prototype;
  CRp$a.CANVAS_LAYERS = 3; //

  CRp$a.SELECT_BOX = 0;
  CRp$a.DRAG = 1;
  CRp$a.NODE = 2;
  CRp$a.BUFFER_COUNT = 3; //

  CRp$a.TEXTURE_BUFFER = 0;
  CRp$a.MOTIONBLUR_BUFFER_NODE = 1;
  CRp$a.MOTIONBLUR_BUFFER_DRAG = 2;

  function CanvasRenderer(options) {
    var r = this;
    r.data = {
      canvases: new Array(CRp$a.CANVAS_LAYERS),
      contexts: new Array(CRp$a.CANVAS_LAYERS),
      canvasNeedsRedraw: new Array(CRp$a.CANVAS_LAYERS),
      bufferCanvases: new Array(CRp$a.BUFFER_COUNT),
      bufferContexts: new Array(CRp$a.CANVAS_LAYERS)
    };
    var tapHlOffAttr = '-webkit-tap-highlight-color';
    var tapHlOffStyle = 'rgba(0,0,0,0)';
    r.data.canvasContainer = document.createElement('div'); // eslint-disable-line no-undef

    var containerStyle = r.data.canvasContainer.style;
    r.data.canvasContainer.style[tapHlOffAttr] = tapHlOffStyle;
    containerStyle.position = 'relative';
    containerStyle.zIndex = '0';
    containerStyle.overflow = 'hidden';
    var container = options.cy.container();
    container.appendChild(r.data.canvasContainer);
    container.style[tapHlOffAttr] = tapHlOffStyle;
    var styleMap = {
      '-webkit-user-select': 'none',
      '-moz-user-select': '-moz-none',
      'user-select': 'none',
      '-webkit-tap-highlight-color': 'rgba(0,0,0,0)',
      'outline-style': 'none'
    };

    if (ms()) {
      styleMap['-ms-touch-action'] = 'none';
      styleMap['touch-action'] = 'none';
    }

    for (var i = 0; i < CRp$a.CANVAS_LAYERS; i++) {
      var canvas = r.data.canvases[i] = document.createElement('canvas'); // eslint-disable-line no-undef

      r.data.contexts[i] = canvas.getContext('2d');
      Object.keys(styleMap).forEach(function (k) {
        canvas.style[k] = styleMap[k];
      });
      canvas.style.position = 'absolute';
      canvas.setAttribute('data-id', 'layer' + i);
      canvas.style.zIndex = String(CRp$a.CANVAS_LAYERS - i);
      r.data.canvasContainer.appendChild(canvas);
      r.data.canvasNeedsRedraw[i] = false;
    }

    r.data.topCanvas = r.data.canvases[0];
    r.data.canvases[CRp$a.NODE].setAttribute('data-id', 'layer' + CRp$a.NODE + '-node');
    r.data.canvases[CRp$a.SELECT_BOX].setAttribute('data-id', 'layer' + CRp$a.SELECT_BOX + '-selectbox');
    r.data.canvases[CRp$a.DRAG].setAttribute('data-id', 'layer' + CRp$a.DRAG + '-drag');

    for (var i = 0; i < CRp$a.BUFFER_COUNT; i++) {
      r.data.bufferCanvases[i] = document.createElement('canvas'); // eslint-disable-line no-undef

      r.data.bufferContexts[i] = r.data.bufferCanvases[i].getContext('2d');
      r.data.bufferCanvases[i].style.position = 'absolute';
      r.data.bufferCanvases[i].setAttribute('data-id', 'buffer' + i);
      r.data.bufferCanvases[i].style.zIndex = String(-i - 1);
      r.data.bufferCanvases[i].style.visibility = 'hidden'; //r.data.canvasContainer.appendChild(r.data.bufferCanvases[i]);
    }

    r.pathsEnabled = true;
    var emptyBb = makeBoundingBox();

    var getBoxCenter = function getBoxCenter(bb) {
      return {
        x: (bb.x1 + bb.x2) / 2,
        y: (bb.y1 + bb.y2) / 2
      };
    };

    var getCenterOffset = function getCenterOffset(bb) {
      return {
        x: -bb.w / 2,
        y: -bb.h / 2
      };
    };

    var backgroundTimestampHasChanged = function backgroundTimestampHasChanged(ele) {
      var _p = ele[0]._private;
      var same = _p.oldBackgroundTimestamp === _p.backgroundTimestamp;
      return !same;
    };

    var getStyleKey = function getStyleKey(ele) {
      return ele[0]._private.nodeKey;
    };

    var getLabelKey = function getLabelKey(ele) {
      return ele[0]._private.labelStyleKey;
    };

    var getSourceLabelKey = function getSourceLabelKey(ele) {
      return ele[0]._private.sourceLabelStyleKey;
    };

    var getTargetLabelKey = function getTargetLabelKey(ele) {
      return ele[0]._private.targetLabelStyleKey;
    };

    var drawElement = function drawElement(context, ele, bb, scaledLabelShown, useEleOpacity) {
      return r.drawElement(context, ele, bb, false, false, useEleOpacity);
    };

    var drawLabel = function drawLabel(context, ele, bb, scaledLabelShown, useEleOpacity) {
      return r.drawElementText(context, ele, bb, scaledLabelShown, 'main', useEleOpacity);
    };

    var drawSourceLabel = function drawSourceLabel(context, ele, bb, scaledLabelShown, useEleOpacity) {
      return r.drawElementText(context, ele, bb, scaledLabelShown, 'source', useEleOpacity);
    };

    var drawTargetLabel = function drawTargetLabel(context, ele, bb, scaledLabelShown, useEleOpacity) {
      return r.drawElementText(context, ele, bb, scaledLabelShown, 'target', useEleOpacity);
    };

    var getElementBox = function getElementBox(ele) {
      ele.boundingBox();
      return ele[0]._private.bodyBounds;
    };

    var getLabelBox = function getLabelBox(ele) {
      ele.boundingBox();
      return ele[0]._private.labelBounds.main || emptyBb;
    };

    var getSourceLabelBox = function getSourceLabelBox(ele) {
      ele.boundingBox();
      return ele[0]._private.labelBounds.source || emptyBb;
    };

    var getTargetLabelBox = function getTargetLabelBox(ele) {
      ele.boundingBox();
      return ele[0]._private.labelBounds.target || emptyBb;
    };

    var isLabelVisibleAtScale = function isLabelVisibleAtScale(ele, scaledLabelShown) {
      return scaledLabelShown;
    };

    var getElementRotationPoint = function getElementRotationPoint(ele) {
      return getBoxCenter(getElementBox(ele));
    };

    var addTextMargin = function addTextMargin(prefix, pt, ele) {
      var pre = prefix ? prefix + '-' : '';
      return {
        x: pt.x + ele.pstyle(pre + 'text-margin-x').pfValue,
        y: pt.y + ele.pstyle(pre + 'text-margin-y').pfValue
      };
    };

    var getRsPt = function getRsPt(ele, x, y) {
      var rs = ele[0]._private.rscratch;
      return {
        x: rs[x],
        y: rs[y]
      };
    };

    var getLabelRotationPoint = function getLabelRotationPoint(ele) {
      return addTextMargin('', getRsPt(ele, 'labelX', 'labelY'), ele);
    };

    var getSourceLabelRotationPoint = function getSourceLabelRotationPoint(ele) {
      return addTextMargin('source', getRsPt(ele, 'sourceLabelX', 'sourceLabelY'), ele);
    };

    var getTargetLabelRotationPoint = function getTargetLabelRotationPoint(ele) {
      return addTextMargin('target', getRsPt(ele, 'targetLabelX', 'targetLabelY'), ele);
    };

    var getElementRotationOffset = function getElementRotationOffset(ele) {
      return getCenterOffset(getElementBox(ele));
    };

    var getSourceLabelRotationOffset = function getSourceLabelRotationOffset(ele) {
      return getCenterOffset(getSourceLabelBox(ele));
    };

    var getTargetLabelRotationOffset = function getTargetLabelRotationOffset(ele) {
      return getCenterOffset(getTargetLabelBox(ele));
    };

    var getLabelRotationOffset = function getLabelRotationOffset(ele) {
      var bb = getLabelBox(ele);
      var p = getCenterOffset(getLabelBox(ele));

      if (ele.isNode()) {
        switch (ele.pstyle('text-halign').value) {
          case 'left':
            p.x = -bb.w;
            break;

          case 'right':
            p.x = 0;
            break;
        }

        switch (ele.pstyle('text-valign').value) {
          case 'top':
            p.y = -bb.h;
            break;

          case 'bottom':
            p.y = 0;
            break;
        }
      }

      return p;
    };

    var eleTxrCache = r.data.eleTxrCache = new ElementTextureCache(r, {
      getKey: getStyleKey,
      doesEleInvalidateKey: backgroundTimestampHasChanged,
      drawElement: drawElement,
      getBoundingBox: getElementBox,
      getRotationPoint: getElementRotationPoint,
      getRotationOffset: getElementRotationOffset,
      allowEdgeTxrCaching: false,
      allowParentTxrCaching: false
    });
    var lblTxrCache = r.data.lblTxrCache = new ElementTextureCache(r, {
      getKey: getLabelKey,
      drawElement: drawLabel,
      getBoundingBox: getLabelBox,
      getRotationPoint: getLabelRotationPoint,
      getRotationOffset: getLabelRotationOffset,
      isVisible: isLabelVisibleAtScale
    });
    var slbTxrCache = r.data.slbTxrCache = new ElementTextureCache(r, {
      getKey: getSourceLabelKey,
      drawElement: drawSourceLabel,
      getBoundingBox: getSourceLabelBox,
      getRotationPoint: getSourceLabelRotationPoint,
      getRotationOffset: getSourceLabelRotationOffset,
      isVisible: isLabelVisibleAtScale
    });
    var tlbTxrCache = r.data.tlbTxrCache = new ElementTextureCache(r, {
      getKey: getTargetLabelKey,
      drawElement: drawTargetLabel,
      getBoundingBox: getTargetLabelBox,
      getRotationPoint: getTargetLabelRotationPoint,
      getRotationOffset: getTargetLabelRotationOffset,
      isVisible: isLabelVisibleAtScale
    });
    var lyrTxrCache = r.data.lyrTxrCache = new LayeredTextureCache(r);
    r.onUpdateEleCalcs(function invalidateTextureCaches(willDraw, eles) {
      // each cache should check for sub-key diff to see that the update affects that cache particularly
      eleTxrCache.invalidateElements(eles);
      lblTxrCache.invalidateElements(eles);
      slbTxrCache.invalidateElements(eles);
      tlbTxrCache.invalidateElements(eles); // any change invalidates the layers

      lyrTxrCache.invalidateElements(eles); // update the old bg timestamp so diffs can be done in the ele txr caches

      for (var _i = 0; _i < eles.length; _i++) {
        var _p = eles[_i]._private;
        _p.oldBackgroundTimestamp = _p.backgroundTimestamp;
      }
    });

    var refineInLayers = function refineInLayers(reqs) {
      for (var i = 0; i < reqs.length; i++) {
        lyrTxrCache.enqueueElementRefinement(reqs[i].ele);
      }
    };

    eleTxrCache.onDequeue(refineInLayers);
    lblTxrCache.onDequeue(refineInLayers);
    slbTxrCache.onDequeue(refineInLayers);
    tlbTxrCache.onDequeue(refineInLayers);
  }

  CRp$a.redrawHint = function (group, bool) {
    var r = this;

    switch (group) {
      case 'eles':
        r.data.canvasNeedsRedraw[CRp$a.NODE] = bool;
        break;

      case 'drag':
        r.data.canvasNeedsRedraw[CRp$a.DRAG] = bool;
        break;

      case 'select':
        r.data.canvasNeedsRedraw[CRp$a.SELECT_BOX] = bool;
        break;
    }
  }; // whether to use Path2D caching for drawing


  var pathsImpld = typeof Path2D !== 'undefined';

  CRp$a.path2dEnabled = function (on) {
    if (on === undefined) {
      return this.pathsEnabled;
    }

    this.pathsEnabled = on ? true : false;
  };

  CRp$a.usePaths = function () {
    return pathsImpld && this.pathsEnabled;
  };

  CRp$a.setImgSmoothing = function (context, bool) {
    if (context.imageSmoothingEnabled != null) {
      context.imageSmoothingEnabled = bool;
    } else {
      context.webkitImageSmoothingEnabled = bool;
      context.mozImageSmoothingEnabled = bool;
      context.msImageSmoothingEnabled = bool;
    }
  };

  CRp$a.getImgSmoothing = function (context) {
    if (context.imageSmoothingEnabled != null) {
      return context.imageSmoothingEnabled;
    } else {
      return context.webkitImageSmoothingEnabled || context.mozImageSmoothingEnabled || context.msImageSmoothingEnabled;
    }
  };

  CRp$a.makeOffscreenCanvas = function (width, height) {
    var canvas;

    if ((typeof OffscreenCanvas === "undefined" ? "undefined" : _typeof(OffscreenCanvas)) !== ( "undefined" )) {
      canvas = new OffscreenCanvas(width, height);
    } else {
      canvas = document.createElement('canvas'); // eslint-disable-line no-undef

      canvas.width = width;
      canvas.height = height;
    }

    return canvas;
  };

  [CRp, CRp$1, CRp$2, CRp$3, CRp$4, CRp$5, CRp$6, CRp$7, CRp$8, CRp$9].forEach(function (props) {
    extend(CRp$a, props);
  });

  var renderer = [{
    name: 'null',
    impl: NullRenderer
  }, {
    name: 'base',
    impl: BR
  }, {
    name: 'canvas',
    impl: CR
  }];

  var incExts = [{
    type: 'layout',
    extensions: layout
  }, {
    type: 'renderer',
    extensions: renderer
  }];

  var extensions = {}; // registered modules for extensions, indexed by name

  var modules = {};

  function setExtension(type, name, registrant) {
    var ext = registrant;

    var overrideErr = function overrideErr(field) {
      error('Can not register `' + name + '` for `' + type + '` since `' + field + '` already exists in the prototype and can not be overridden');
    };

    if (type === 'core') {
      if (Core.prototype[name]) {
        return overrideErr(name);
      } else {
        Core.prototype[name] = registrant;
      }
    } else if (type === 'collection') {
      if (Collection$1.prototype[name]) {
        return overrideErr(name);
      } else {
        Collection$1.prototype[name] = registrant;
      }
    } else if (type === 'layout') {
      // fill in missing layout functions in the prototype
      var Layout = function Layout(options) {
        this.options = options;
        registrant.call(this, options); // make sure layout has _private for use w/ std apis like .on()

        if (!plainObject(this._private)) {
          this._private = {};
        }

        this._private.cy = options.cy;
        this._private.listeners = [];
        this.createEmitter();
      };

      var layoutProto = Layout.prototype = Object.create(registrant.prototype);
      var optLayoutFns = [];

      for (var i = 0; i < optLayoutFns.length; i++) {
        var fnName = optLayoutFns[i];

        layoutProto[fnName] = layoutProto[fnName] || function () {
          return this;
        };
      } // either .start() or .run() is defined, so autogen the other


      if (layoutProto.start && !layoutProto.run) {
        layoutProto.run = function () {
          this.start();
          return this;
        };
      } else if (!layoutProto.start && layoutProto.run) {
        layoutProto.start = function () {
          this.run();
          return this;
        };
      }

      var regStop = registrant.prototype.stop;

      layoutProto.stop = function () {
        var opts = this.options;

        if (opts && opts.animate) {
          var anis = this.animations;

          if (anis) {
            for (var _i = 0; _i < anis.length; _i++) {
              anis[_i].stop();
            }
          }
        }

        if (regStop) {
          regStop.call(this);
        } else {
          this.emit('layoutstop');
        }

        return this;
      };

      if (!layoutProto.destroy) {
        layoutProto.destroy = function () {
          return this;
        };
      }

      layoutProto.cy = function () {
        return this._private.cy;
      };

      var getCy = function getCy(layout) {
        return layout._private.cy;
      };

      var emitterOpts = {
        addEventFields: function addEventFields(layout, evt) {
          evt.layout = layout;
          evt.cy = getCy(layout);
          evt.target = layout;
        },
        bubble: function bubble() {
          return true;
        },
        parent: function parent(layout) {
          return getCy(layout);
        }
      };
      extend(layoutProto, {
        createEmitter: function createEmitter() {
          this._private.emitter = new Emitter(emitterOpts, this);
          return this;
        },
        emitter: function emitter() {
          return this._private.emitter;
        },
        on: function on(evt, cb) {
          this.emitter().on(evt, cb);
          return this;
        },
        one: function one(evt, cb) {
          this.emitter().one(evt, cb);
          return this;
        },
        once: function once(evt, cb) {
          this.emitter().one(evt, cb);
          return this;
        },
        removeListener: function removeListener(evt, cb) {
          this.emitter().removeListener(evt, cb);
          return this;
        },
        removeAllListeners: function removeAllListeners() {
          this.emitter().removeAllListeners();
          return this;
        },
        emit: function emit(evt, params) {
          this.emitter().emit(evt, params);
          return this;
        }
      });
      define$3.eventAliasesOn(layoutProto);
      ext = Layout; // replace with our wrapped layout
    } else if (type === 'renderer' && name !== 'null' && name !== 'base') {
      // user registered renderers inherit from base
      var BaseRenderer = getExtension('renderer', 'base');
      var bProto = BaseRenderer.prototype;
      var RegistrantRenderer = registrant;
      var rProto = registrant.prototype;

      var Renderer = function Renderer() {
        BaseRenderer.apply(this, arguments);
        RegistrantRenderer.apply(this, arguments);
      };

      var proto = Renderer.prototype;

      for (var pName in bProto) {
        var pVal = bProto[pName];
        var existsInR = rProto[pName] != null;

        if (existsInR) {
          return overrideErr(pName);
        }

        proto[pName] = pVal; // take impl from base
      }

      for (var _pName in rProto) {
        proto[_pName] = rProto[_pName]; // take impl from registrant
      }

      bProto.clientFunctions.forEach(function (name) {
        proto[name] = proto[name] || function () {
          error('Renderer does not implement `renderer.' + name + '()` on its prototype');
        };
      });
      ext = Renderer;
    }

    return setMap({
      map: extensions,
      keys: [type, name],
      value: ext
    });
  }

  function getExtension(type, name) {
    return getMap({
      map: extensions,
      keys: [type, name]
    });
  }

  function setModule(type, name, moduleType, moduleName, registrant) {
    return setMap({
      map: modules,
      keys: [type, name, moduleType, moduleName],
      value: registrant
    });
  }

  function getModule(type, name, moduleType, moduleName) {
    return getMap({
      map: modules,
      keys: [type, name, moduleType, moduleName]
    });
  }

  var extension = function extension() {
    // e.g. extension('renderer', 'svg')
    if (arguments.length === 2) {
      return getExtension.apply(null, arguments);
    } // e.g. extension('renderer', 'svg', { ... })
    else if (arguments.length === 3) {
        return setExtension.apply(null, arguments);
      } // e.g. extension('renderer', 'svg', 'nodeShape', 'ellipse')
      else if (arguments.length === 4) {
          return getModule.apply(null, arguments);
        } // e.g. extension('renderer', 'svg', 'nodeShape', 'ellipse', { ... })
        else if (arguments.length === 5) {
            return setModule.apply(null, arguments);
          } else {
            error('Invalid extension access syntax');
          }
  }; // allows a core instance to access extensions internally


  Core.prototype.extension = extension; // included extensions

  incExts.forEach(function (group) {
    group.extensions.forEach(function (ext) {
      setExtension(group.type, ext.name, ext.impl);
    });
  });

  // (useful for init)

  var Stylesheet = function Stylesheet() {
    if (!(this instanceof Stylesheet)) {
      return new Stylesheet();
    }

    this.length = 0;
  };

  var sheetfn = Stylesheet.prototype;

  sheetfn.instanceString = function () {
    return 'stylesheet';
  }; // just store the selector to be parsed later


  sheetfn.selector = function (selector) {
    var i = this.length++;
    this[i] = {
      selector: selector,
      properties: []
    };
    return this; // chaining
  }; // just store the property to be parsed later


  sheetfn.css = function (name, value) {
    var i = this.length - 1;

    if (string(name)) {
      this[i].properties.push({
        name: name,
        value: value
      });
    } else if (plainObject(name)) {
      var map = name;
      var propNames = Object.keys(map);

      for (var j = 0; j < propNames.length; j++) {
        var key = propNames[j];
        var mapVal = map[key];

        if (mapVal == null) {
          continue;
        }

        var prop = Style.properties[key] || Style.properties[dash2camel(key)];

        if (prop == null) {
          continue;
        }

        var _name = prop.name;
        var _value = mapVal;
        this[i].properties.push({
          name: _name,
          value: _value
        });
      }
    }

    return this; // chaining
  };

  sheetfn.style = sheetfn.css; // generate a real style object from the dummy stylesheet

  sheetfn.generateStyle = function (cy) {
    var style = new Style(cy);
    return this.appendToStyle(style);
  }; // append a dummy stylesheet object on a real style object


  sheetfn.appendToStyle = function (style) {
    for (var i = 0; i < this.length; i++) {
      var context = this[i];
      var selector = context.selector;
      var props = context.properties;
      style.selector(selector); // apply selector

      for (var j = 0; j < props.length; j++) {
        var prop = props[j];
        style.css(prop.name, prop.value); // apply property
      }
    }

    return style;
  };

  var version = "3.15.0";

  var cytoscape = function cytoscape(options) {
    // if no options specified, use default
    if (options === undefined) {
      options = {};
    } // create instance


    if (plainObject(options)) {
      return new Core(options);
    } // allow for registration of extensions
    else if (string(options)) {
        return extension.apply(extension, arguments);
      }
  }; // e.g. cytoscape.use( require('cytoscape-foo'), bar )


  cytoscape.use = function (ext) {
    var args = Array.prototype.slice.call(arguments, 1); // args to pass to ext

    args.unshift(cytoscape); // cytoscape is first arg to ext

    ext.apply(null, args);
    return this;
  };

  cytoscape.warnings = function (bool) {
    return warnings(bool);
  }; // replaced by build system


  cytoscape.version = version; // expose public apis (mostly for extensions)

  cytoscape.stylesheet = cytoscape.Stylesheet = Stylesheet;

  var cytoscape_cjs = cytoscape;

  /**
   * layoutsAvailable
   *
   * settings for the currently-available cytoscape layouts
   *
   * @returns {object} layouts with key layout name and value {object} of layout configuration
   */
  function layoutsAvailable() {
    const layouts = {
      random: {
        name: 'random',

        fit: true, // whether to fit to viewport
        padding: 30, // fit padding
        boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
        animate: false, // whether to transition the node positions
        animationDuration: 500, // duration of animation in ms if enabled
        animationEasing: undefined, // easing of animation if enabled
        animateFilter: () => true, // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
        ready: undefined, // callback on layoutready
        stop: undefined, // callback on layoutstop
        transform: function (node, position) {
          return position;
        }, // transform a given node position. Useful for changing flow direction in discrete layouts
      },
      grid: {
        name: 'grid',

        fit: true, // whether to fit the viewport to the graph
        padding: 30, // padding used on fit
        boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
        avoidOverlap: true, // prevents node overlap, may overflow boundingBox if not enough space
        avoidOverlapPadding: 10, // extra spacing around nodes when avoidOverlap: true
        nodeDimensionsIncludeLabels: false, // Excludes the label when calculating node bounding boxes for the layout algorithm
        spacingFactor: undefined, // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up
        condense: false, // uses all available space on false, uses minimal space on true
        rows: undefined, // force num of rows in the grid
        cols: undefined, // force num of columns in the grid
        position: function (node) {}, // returns { row, col } for element
        sort: undefined, // a sorting function to order the nodes; e.g. function(a, b){ return a.data('weight') - b.data('weight') }
        animate: false, // whether to transition the node positions
        animationDuration: 500, // duration of animation in ms if enabled
        animationEasing: undefined, // easing of animation if enabled
        animateFilter: () => true, // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
        ready: undefined, // callback on layoutready
        stop: undefined, // callback on layoutstop
        transform: function (node, position) {
          return position;
        }, // transform a given node position. Useful for changing flow direction in discrete layouts
      },
      circle: {
        name: 'circle',

        fit: true, // whether to fit the viewport to the graph
        padding: 30, // the padding on fit
        boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
        avoidOverlap: true, // prevents node overlap, may overflow boundingBox and radius if not enough space
        nodeDimensionsIncludeLabels: false, // Excludes the label when calculating node bounding boxes for the layout algorithm
        spacingFactor: undefined, // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up
        radius: undefined, // the radius of the circle
        startAngle: (3 / 2) * Math.PI, // where nodes start in radians
        sweep: undefined, // how many radians should be between the first and last node (defaults to full circle)
        clockwise: true, // whether the layout should go clockwise (true) or counterclockwise/anticlockwise (false)
        sort: undefined, // a sorting function to order the nodes; e.g. function(a, b){ return a.data('weight') - b.data('weight') }
        animate: false, // whether to transition the node positions
        animationDuration: 500, // duration of animation in ms if enabled
        animationEasing: undefined, // easing of animation if enabled
        animateFilter: function (node, i) {
          return true;
        }, // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
        ready: undefined, // callback on layoutready
        stop: undefined, // callback on layoutstop
        transform: function (node, position) {
          return position;
        }, // transform a given node position. Useful for changing flow direction in discrete layouts
      },

      concentric: {
        name: 'concentric',

        fit: true, // whether to fit the viewport to the graph
        padding: 30, // the padding on fit
        startAngle: (3 / 2) * Math.PI, // where nodes start in radians
        sweep: undefined, // how many radians should be between the first and last node (defaults to full circle)
        clockwise: true, // whether the layout should go clockwise (true) or counterclockwise/anticlockwise (false)
        equidistant: false, // whether levels have an equal radial distance betwen them, may cause bounding box overflow
        minNodeSpacing: 10, // min spacing between outside of nodes (used for radius adjustment)
        boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
        avoidOverlap: true, // prevents node overlap, may overflow boundingBox if not enough space
        nodeDimensionsIncludeLabels: false, // Excludes the label when calculating node bounding boxes for the layout algorithm
        height: undefined, // height of layout area (overrides container height)
        width: undefined, // width of layout area (overrides container width)
        spacingFactor: undefined, // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up
        concentric: function (node) {
          // returns numeric value for each node, placing higher nodes in levels towards the centre
          return node.degree();
        },
        levelWidth: function (nodes) {
          // the letiation of concentric values in each level
          return nodes.maxDegree() / 4;
        },
        animate: false, // whether to transition the node positions
        animationDuration: 500, // duration of animation in ms if enabled
        animationEasing: undefined, // easing of animation if enabled
        animateFilter: function (node, i) {
          return true;
        }, // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
        ready: undefined, // callback on layoutready
        stop: undefined, // callback on layoutstop
        transform: function (node, position) {
          return position;
        }, // transform a given node position. Useful for changing flow direction in discrete layouts
      },
      cose: {
        name: 'cose',
        refresh: 20, // Number of iterations between consecutive screen positions update
        fit: true, // Whether to fit the network view after when done
        padding: 30, // Padding on fit
        boundingBox: undefined, // Constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
        nodeDimensionsIncludeLabels: false, // Excludes the label when calculating node bounding boxes for the layout algorithm

        ready: undefined, // callback on layoutready
        stop: undefined, // callback on layoutstop
        // Whether to animate while running the layout
        // true : Animate continuously as the layout is running
        // false : Just show the end result
        // 'end' : Animate with the end result, from the initial positions to the end positions
        animate: true,
        animationDuration: undefined, // duration of animation in ms if enabled
        animationEasing: undefined, // easing of animation if enabled
        // A function that determines whether the node should be animated
        // All nodes animated by default on animate enabled
        // Non-animated nodes are positioned immediately when the layout starts
        animateFilter: () => true,
        // The layout animates only after this many milliseconds for animate:true
        // (prevents flashing on fast runs)
        animationThreshold: 250,

        randomize: false, // Randomize the initial positions of the nodes (true) or use existing positions (false)
        componentSpacing: 40, // Extra spacing between components in non-compound graphs
        nodeRepulsion: function (node) {
          return 2048;
        }, // Node repulsion (non overlapping) multiplier
        nodeOverlap: 4, // Node repulsion (overlapping) multiplier
        idealEdgeLength: function (edge) {
          return 32;
        }, // Ideal edge (non nested) length
        edgeElasticity: function (edge) {
          return 32;
        }, // Divisor to compute edge forces
        nestingFactor: 1.2, // Nesting factor (multiplier) to compute ideal edge length for nested edges
        gravity: 1, // Gravity force (constant)
        numIter: 1000, // Maximum number of iterations to perform
        initialTemp: 1000, // Initial temperature (maximum node displacement)
        coolingFactor: 0.99, // Cooling factor (how the temperature is reduced between consecutive iterations
        minTemp: 1.0, // Lower temperature threshold (below this point the layout will end)
      },
    };
    return layouts;
  }

  /**
   * registers a set of kbase-specific shortcuts on cytoscape
   *
   * @param {cytoscape} cytoscape object
   */
  function registerExtensions(cytoscape) {
    // check whether or not cytoscape has already been modified
    if (typeof cytoscape('core', 'getSelectedNodes') === 'function') {
      return;
    }

    /**
     * get the currently-selected nodes from the graph
     *
     * @return {cytoscapeCollection} cytoscape collection containing selected nodes
     */

    cytoscape('core', 'getSelectedNodes', function () {
      return this.filter((n) => n.isNode() && n.selected());
    });

    /**
     * select all nodes in the graph
     *
     * @return {cytoscape} cytoscape object
     */
    cytoscape('core', 'selectAllNodes', function () {
      this.nodes().forEach((n) => n.select());
      return this;
    });

    /**
     * deselect all nodes in the graph
     *
     * @return {cytoscape} cytoscape object
     */
    cytoscape('core', 'deselectAllNodes', function () {
      this.nodes().forEach((n) => n.unselect());
      return this;
    });

    /**
     * invert the selected nodes in the graph
     *
     * @return {cytoscape} cytoscape object
     */
    cytoscape('core', 'invertNodeSelection', function () {
      this.nodes().forEach((n) => (n.selected() ? n.unselect() : n.select()));
      return this;
    });

    /**
     * gets the neighbourhood of each selected node
     * expand the current selection to include all nodes one edge away from a selected node
     *
     * @return {cytoscape} cytoscape object
     */
    cytoscape('core', 'getNeighbourhood', function () {
      this.getSelectedNodes().neighbourhood().select();
      return this;
    });

    /**
     * 'collect' the node, i.e. add the class "collected" to the node
     * @param {string} id - the ID of the node to be updated
     * @return {cytoscapeNode} cytoscape node that has been updated
     */
    cytoscape('core', 'collectNode', function (id) {
      const node = this.getElementById(id);
      if (node) {
        node.addClass('collected');
      }
      return node;
    });

    /**
     * 'collect' all selected nodes in the graph
     * see 'collectNode' for what "collecting" a node entails
     * @return {cytoscapeCollection} cytoscape nodes that have been updated
     */
    cytoscape('core', 'collectSelectedGraphNodes', function () {
      return this.getSelection().addClass('collected');
    });

    /**
     * discard the node by removing the class "collected" from it
     * @param {string} id - the ID of the node to be updated
     * @return {cytoscapeNode} cytoscape node that has been updated
     */
    cytoscape('core', 'discardNode', function (id) {
      const node = this.getElementById(id);
      if (node) {
        node.removeClass('collected');
      }
      return node;
    });

    /**
     * 'discard' all selected nodes in the graph
     * see 'discardNode' for what "discarding" a node entails
     * @return {cytoscapeCollection} cytoscape nodes that have been updated
     */
    cytoscape('core', 'discardSelectedGraphNodes', function () {
      return this.getSelection().removeClass('collected');
    });

    /**
     * run the layout algorithm on the graph, updating the current layout first if necessary
     *
     * @param {string} value - the name of the layout to run
     * @return {cytoscape} cytoscape object
     */
    cytoscape('core', 'setLayout', function (value) {
      const layouts = layoutsAvailable();
      if (layouts[value] || value === 'null') {
        this.layout(layouts[value]).run();
      }
      return this;
    });

    /**
     * add the supplied data to the chart, and run the layout if the container is defined
     *
     * @param {object} data
     * @return {cytoscape} cytoscape object
     */
    cytoscape('core', 'renderData', function (data) {
      if (this.nodes()) {
        this.nodes().remove();
      }
      if (data && data.nodeArr() && data.edgeArr()) {
        this.add({ nodes: data.nodeArr(), edges: data.edgeArr() });

        if (this.container !== null) {
          // get the current layout
          const layoutValue = $(this.layoutSelector)[0].value || 'null';
          this.setLayout(layoutValue);
        }
      }
      return this;
    });
  }

  let kbCytoscape = function (cytoscape) {
    // can't register if cytoscape unspecified
    if (!cytoscape) {
      return;
    }
    registerExtensions(cytoscape);
  };

  if (typeof cytoscape_cjs !== 'undefined') {
    // expose to global cytoscape (i.e. window.cytoscape)
    kbCytoscape(cytoscape_cjs);
  }

  // import popper from 'cytoscape-popper';

  /**
   * style data for a cytoscape instance
   *
   * @returns {object[]} styleData
   */
  function defaultStyle() {
    return [
      {
        selector: 'node',
        style: {
          width: 10,
          height: 10,
          shape: 'ellipse', // (ellipse/rectangle/round-diamond),
          'background-color': '#4682b4',
        },
      },
      {
        selector: 'node.collected',
        style: {
          'border-width': 4,
          width: 14,
          height: 14,
          'border-style': 'solid',
          'border-color': '#264662',
          'border-opacity': 1,
        },
      },
      {
        selector: 'node:selected',
        style: {
          'background-color': '#e77943',
          //         'label': 'data(id)'
        },
      },
      {
        selector: 'node.phenotype',
        style: {
          width: 50,
          height: 50,
          shape: 'round-diamond',
        },
      },
      {
        selector: 'edge',
        style: {
          width: 1,
          'line-color': '#ccc',
        },
      },
    ];
  }

  /**
   * generate the configuration for a cytoscape instance. If provided with a containerID, the config
   * will include style, layout, and container data; otherwise it will be assumed to be headless.
   *
   * @param {string} containerID (optional)
   * @returns {object} config - cytoscape configuration object
   */
  function cytoscapeConfig(containerID) {
    let config = {
      elements: {
        nodes: [],
        edges: [],
      },
    };

    if (containerID) {
      // container to render in
      config.container = document.getElementById(containerID + '--graph');
      config.style = defaultStyle();
      config.layout = 'null';

      // check the current state of the controls
      const layout_value = $(`#${containerID}--controls select[name=layout]`).length
          ? $(`#${containerID}--controls select[name=layout]`)[0].value || 'random'
          : 'random',
        layouts = layoutsAvailable(),
        radioControls = [
          'userZoomingEnabled',
          'userPanningEnabled',
          'boxSelectionEnabled',
          'selectionType',
        ];

      config.layout = layouts[layout_value];

      radioControls.forEach((r) => {
        let val = $('input[name=' + r + ']:checked').val();
        if (val === '0') {
          val = 0;
        }
        config[r] = val;
      });
    } else {
      config.headless = true;
    }

    return config;
  }

  /**
   * creates a cytoscape instance using cytoscapeConfig, with some extra functionality added
   *
   * @param {string} containerID (optional)
   * @returns {cytoscape} cytoscapeInstance - cytoscape instance
   */
  function initCytoscape(containerID) {
    cytoscape_cjs.use(kbCytoscape);
    const config = cytoscapeConfig(containerID),
      cytoscapeInstance = cytoscape_cjs(config);

    if (containerID) {
      cytoscapeInstance.layoutSelector = `#${containerID}--controls select[name=layout]`;
    }

    return cytoscapeInstance;
  }

  function responseBlob(response) {
    if (!response.ok) throw new Error(response.status + " " + response.statusText);
    return response.blob();
  }

  function blob(input, init) {
    return fetch(input, init).then(responseBlob);
  }

  function responseArrayBuffer(response) {
    if (!response.ok) throw new Error(response.status + " " + response.statusText);
    return response.arrayBuffer();
  }

  function buffer(input, init) {
    return fetch(input, init).then(responseArrayBuffer);
  }

  var EOL = {},
      EOF = {},
      QUOTE = 34,
      NEWLINE = 10,
      RETURN = 13;

  function objectConverter(columns) {
    return new Function("d", "return {" + columns.map(function(name, i) {
      return JSON.stringify(name) + ": d[" + i + "] || \"\"";
    }).join(",") + "}");
  }

  function customConverter(columns, f) {
    var object = objectConverter(columns);
    return function(row, i) {
      return f(object(row), i, columns);
    };
  }

  // Compute unique columns in order of discovery.
  function inferColumns(rows) {
    var columnSet = Object.create(null),
        columns = [];

    rows.forEach(function(row) {
      for (var column in row) {
        if (!(column in columnSet)) {
          columns.push(columnSet[column] = column);
        }
      }
    });

    return columns;
  }

  function pad(value, width) {
    var s = value + "", length = s.length;
    return length < width ? new Array(width - length + 1).join(0) + s : s;
  }

  function formatYear(year) {
    return year < 0 ? "-" + pad(-year, 6)
      : year > 9999 ? "+" + pad(year, 6)
      : pad(year, 4);
  }

  function formatDate(date) {
    var hours = date.getUTCHours(),
        minutes = date.getUTCMinutes(),
        seconds = date.getUTCSeconds(),
        milliseconds = date.getUTCMilliseconds();
    return isNaN(date) ? "Invalid Date"
        : formatYear(date.getUTCFullYear()) + "-" + pad(date.getUTCMonth() + 1, 2) + "-" + pad(date.getUTCDate(), 2)
        + (milliseconds ? "T" + pad(hours, 2) + ":" + pad(minutes, 2) + ":" + pad(seconds, 2) + "." + pad(milliseconds, 3) + "Z"
        : seconds ? "T" + pad(hours, 2) + ":" + pad(minutes, 2) + ":" + pad(seconds, 2) + "Z"
        : minutes || hours ? "T" + pad(hours, 2) + ":" + pad(minutes, 2) + "Z"
        : "");
  }

  function dsvFormat(delimiter) {
    var reFormat = new RegExp("[\"" + delimiter + "\n\r]"),
        DELIMITER = delimiter.charCodeAt(0);

    function parse(text, f) {
      var convert, columns, rows = parseRows(text, function(row, i) {
        if (convert) return convert(row, i - 1);
        columns = row, convert = f ? customConverter(row, f) : objectConverter(row);
      });
      rows.columns = columns || [];
      return rows;
    }

    function parseRows(text, f) {
      var rows = [], // output rows
          N = text.length,
          I = 0, // current character index
          n = 0, // current line number
          t, // current token
          eof = N <= 0, // current token followed by EOF?
          eol = false; // current token followed by EOL?

      // Strip the trailing newline.
      if (text.charCodeAt(N - 1) === NEWLINE) --N;
      if (text.charCodeAt(N - 1) === RETURN) --N;

      function token() {
        if (eof) return EOF;
        if (eol) return eol = false, EOL;

        // Unescape quotes.
        var i, j = I, c;
        if (text.charCodeAt(j) === QUOTE) {
          while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE);
          if ((i = I) >= N) eof = true;
          else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;
          else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }
          return text.slice(j + 1, i - 1).replace(/""/g, "\"");
        }

        // Find next delimiter or newline.
        while (I < N) {
          if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;
          else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }
          else if (c !== DELIMITER) continue;
          return text.slice(j, i);
        }

        // Return last token before EOF.
        return eof = true, text.slice(j, N);
      }

      while ((t = token()) !== EOF) {
        var row = [];
        while (t !== EOL && t !== EOF) row.push(t), t = token();
        if (f && (row = f(row, n++)) == null) continue;
        rows.push(row);
      }

      return rows;
    }

    function preformatBody(rows, columns) {
      return rows.map(function(row) {
        return columns.map(function(column) {
          return formatValue(row[column]);
        }).join(delimiter);
      });
    }

    function format(rows, columns) {
      if (columns == null) columns = inferColumns(rows);
      return [columns.map(formatValue).join(delimiter)].concat(preformatBody(rows, columns)).join("\n");
    }

    function formatBody(rows, columns) {
      if (columns == null) columns = inferColumns(rows);
      return preformatBody(rows, columns).join("\n");
    }

    function formatRows(rows) {
      return rows.map(formatRow).join("\n");
    }

    function formatRow(row) {
      return row.map(formatValue).join(delimiter);
    }

    function formatValue(value) {
      return value == null ? ""
          : value instanceof Date ? formatDate(value)
          : reFormat.test(value += "") ? "\"" + value.replace(/"/g, "\"\"") + "\""
          : value;
    }

    return {
      parse: parse,
      parseRows: parseRows,
      format: format,
      formatBody: formatBody,
      formatRows: formatRows,
      formatRow: formatRow,
      formatValue: formatValue
    };
  }

  var csv = dsvFormat(",");

  var csvParse = csv.parse;

  var tsv = dsvFormat("\t");

  var tsvParse = tsv.parse;

  function responseText(response) {
    if (!response.ok) throw new Error(response.status + " " + response.statusText);
    return response.text();
  }

  function text(input, init) {
    return fetch(input, init).then(responseText);
  }

  function dsvParse(parse) {
    return function(input, init, row) {
      if (arguments.length === 2 && typeof init === "function") row = init, init = undefined;
      return text(input, init).then(function(response) {
        return parse(response, row);
      });
    };
  }

  function dsv(delimiter, input, init, row) {
    if (arguments.length === 3 && typeof init === "function") row = init, init = undefined;
    var format = dsvFormat(delimiter);
    return text(input, init).then(function(response) {
      return format.parse(response, row);
    });
  }

  var csv$1 = dsvParse(csvParse);
  var tsv$1 = dsvParse(tsvParse);

  function image(input, init) {
    return new Promise(function(resolve, reject) {
      var image = new Image;
      for (var key in init) image[key] = init[key];
      image.onerror = reject;
      image.onload = function() { resolve(image); };
      image.src = input;
    });
  }

  function responseJson(response) {
    if (!response.ok) throw new Error(response.status + " " + response.statusText);
    if (response.status === 204 || response.status === 205) return;
    return response.json();
  }

  function json(input, init) {
    return fetch(input, init).then(responseJson);
  }

  function parser(type) {
    return function(input, init)  {
      return text(input, init).then(function(text) {
        return (new DOMParser).parseFromString(text, type);
      });
    };
  }

  var xml = parser("application/xml");

  var html = parser("text/html");

  var svg = parser("image/svg+xml");



  var d3 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    blob: blob,
    buffer: buffer,
    dsv: dsv,
    csv: csv$1,
    tsv: tsv$1,
    image: image,
    json: json,
    text: text,
    xml: xml,
    html: html,
    svg: svg
  });

  /**
   * object that stores node and edge data, with a couple of utility functions
   *
   * @returns {object} dataObject
   */
  function dataObject() {
    return {
      node: {},
      edge: {},
      nodeEdge: {},
      collection: {},
      nodeArr: function () {
        return Object.keys(this.nodeEdge).map((el) => {
          return { data: { id: el } };
        });
      },
      edgeArr: function () {
        return Object.values(this.edge).map((el) => {
          return { data: el };
        });
      },
    };
  }

  /**
   * parse a data dump and extract the useful data, separated into nodes and edges.
   * only edges from datasets
   *
   * @param {object} allData
   * @param {string[]} edgeTypes - array of edge types to filter on
   * @returns {object} data - parsed, organised data
   */
  function extractData(allData, edgeTypes = null) {
    const inputData = allData.pop();

    // keys are edges, nodes

    let data = dataObject();

    const nodeType = ['_from', '_to'];

    // add all edges
    inputData['edges'].forEach((d) => {
      if (!edgeTypes || (edgeTypes && edgeTypes.indexOf(d.type) !== -1)) {
        data.edge[d._id] = {
          id: d._id,
          source: d._from,
          target: d._to,
          type: d.type,
          score: d.score,
          data_type: 'edge',
        };

        nodeType.forEach((n) => {
          data.nodeEdge[d[n]] ? data.nodeEdge[d[n]].push(d._id) : (data.nodeEdge[d[n]] = [d._id]);
        });
      }
    });

    // add node (pheno and gene) data
    inputData['nodes'].forEach((d) => {
      // only add to node data if the node is used by an edge
      if (data.nodeEdge[d._id]) {
        d.data_type = 'node';
        d.edge = data.nodeEdge[d._id];
        data.node[d._id] = d;

        // make sure the GO terms are presented reasonably
        if (d.go_terms && d.go_terms.length > 0) {
          d.go_ids = d.go_terms;
          d.go_terms = d.go_ids.sort().join(', ');
        }
      }
    });

    // ensure that all nodes used in the edges are present in data.node
    Object.keys(data.nodeEdge).forEach((n) => {
      if (!data.node[n]) {
        console.error(`no node data for ${n}`);
      }
    });
    return data;
  }

  /**
   * Populate tables and window data store with data
   *
   * @param {object} data
   */
  function renderData(data) {
    refreshTable();

    console.log('Found ' + data.nodeArr().length + ' nodes and ' + data.edgeArr().length + ' edges');

    // set the collection data
    window.kbase.collection.data(data);
  }

  /**
   * load one or more datasets by AJAX from a JSON file, extract and process the data,
   * and use it to populate the display
   */
  function loadData() {
    // d3.json, d3.text
    let dataFiles = [
      [
        // Load up the data config here instead of having it hard-coded?
        // '/static/cytoscape/data/data_config.json',
        // 'json',
        'dataset.json',
        'json',
      ],
    ];
    Promise.all(dataFiles.map((v) => d3[v[1]](v[0]))).then((allFileData) => {
      const data = extractData(allFileData);
      window.kbase.data = data;
      renderData(data);
    });
  }

  /**
   * listen to click events on '#dataset--button' and load the data
   */
  function addDatasetSelector() {
    $('#dataset--button').on('click keypress', () => {
      loadData();
    });
  }

  /**
   * populate the options for the layout selector from the available layouts
   * @returns {object} layouts - the layouts available
   */
  function addLayoutSelector() {
    const layouts = layoutsAvailable(),
      // insert an options element with each of the layouts above
      layoutArray = Object.keys(layouts).map((layout, i) => {
        return `<option value="${layout}"` + (i ? '' : ' selected') + `>${layout}</option>`;
      }),
      layoutString = layoutArray.join('\n');
    $('#layout--select').html(layoutString);
    return layouts;
  }

  /**
   * add listeners to the UI elements in '#cy--controls' to enable graph interactivity
   * @function
   */
  function activateControls() {
    addLayoutSelector();
    addDatasetSelector();

    $('#cy--controls').on('click keypress', 'button', (e) => {
      console.log(e);
      const dataAttr = e.target.dataset,
        action = dataAttr['action'],
        target = dataAttr['target'];
      if (target === 'cy') {
        window.kbase[target][action]();
      }
    });

    // add an action listener to the whole control area
    $('#cy--controls').on('click keypress change', 'input', (e) => {
      console.log(e);
      const dataAttr = e.target.dataset,
        action = dataAttr['action'],
        target = dataAttr['target'],
        value = e.target.value;
      if (target === 'cy') {
        window.kbase[target][action](value);
      }
    });

    $('#cy--controls').on('change', 'select', (e) => {
      console.log(e);
      const dataAttr = e.target.dataset,
        action = dataAttr['action'],
        target = dataAttr['target'],
        value = e.target.value;
      if (target === 'cy') {
        window.kbase[target][action](value);
      }
    });

    // when the graph tab is going to be shown, render the graph
    $('#navigation a[data-toggle="tab"]').on('show.bs.tab', function (e) {
      if (e.target.id === 'graph-tab') {
        window.kbase.cy.renderData(window.kbase.data);
        // remove event listener
        $('#navigation a[data-toggle="tab"]').off('show.bs.tab');
      }
    });

    // when the graph tab has been shown, (try to) fit the graph to the display
    $('#navigation a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
      if (e.target.id === 'graph-tab') {
        // make sure that the graph is visible
        window.kbase.cy.fit();
        // remove event listener
        $('#navigation a[data-toggle="tab"]').off('shown.bs.tab');
      }
    });

    console.log('Controls activated');
  }

  /**
   * initialise the KBase Cytoscape set up
   *
   * @export
   */
  function initKbCytoscape() {
    window.kbase = {
      xf: crossfilter(),
      xfDim: {},
    };

    activateControls();
    initTables();

    window.kbase.cy = initCytoscape('cy');
    window.kbase.headlessCy = initCytoscape();
    window.kbase.collection = new Collection(window.kbase.cy);
  }

  return initKbCytoscape;

})));
