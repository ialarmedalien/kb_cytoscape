name: djornl_fetch_clusters
description: Fetch all nodes that are members of the specified cluster(s), and the edges and nodes within the specified distance (number of hops) of those nodes.
params:
  type: object
  additionalProperties: false
  required: [cluster_ids]
  properties:
    cluster_ids:
      type: array
      title: Cluster IDs
      description: Fetch nodes by cluster ID, in the form "clustering_system_name:cluster_id"
      items:
        $ref: ../../datasets/djornl/definitions.yaml#/definitions/cluster_id
      minItems: 1
      uniqueItems: true
      examples:
        - ['markov_i2:5', 'markov_i6:2']
        - ['markov_i6:1']
    distance:
      type: integer
      title: Traversal Distance
      description: Number of hops to find neighbors and neighbors-of-neighbors
      default: 1
      minimum: 0
      maximum: 100
    edge_types:
      title: Edge Types
      description: Edge types to filter on
      type: array
      items:
        $ref: ../../datasets/djornl/edge_type.yaml
      default: []
      uniqueItems: true
      examples:
        - ['protein-protein-interaction_high-throughput_AraNet_v2', 'protein-protein-interaction_literature-curation_AraNet_v2']
        - ['phenotype-association_AraGWAS']
        - []
query: |
  LET node_ids = (
    FOR n IN djornl_node
      FILTER n.clusters ANY IN @cluster_ids
      FOR v, e, p IN 0..@distance ANY n djornl_edge
        OPTIONS {bfs: true, uniqueVertices: "global"}
        FILTER length(@edge_types) == 0 || p.edges[*].edge_type ALL IN @edge_types
        RETURN DISTINCT v._id
  )
  LET edges = (
    FOR edge IN djornl_edge
      FILTER edge._from IN node_ids AND edge._to IN node_ids
        AND (length(@edge_types) == 0 || edge.edge_type IN @edge_types)
      RETURN edge
  )
  LET nodes = (
    FOR node IN djornl_node
        FILTER node._id IN node_ids
        RETURN node
  )
  RETURN {nodes, edges}
