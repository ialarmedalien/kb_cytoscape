name: djornl_search_nodes
description: Search for nodes using a simple fuzzy search on node metadata; return the matching nodes, and the edges and nodes within the specified distance (number of hops) of those nodes.
params:
  type: object
  additionalProperties: false
  required: [search_text]
  properties:
    search_text:
      type: string
      title: Search text
      description: Search nodes and their metadata for the search string
      examples:
        - 'GO:0005515'
        - 'organelle machinery'
    distance:
      type: integer
      title: Traversal Distance
      description: Number of hops to find neighbors and neighbors-of-neighbors
      default: 1
      minimum: 0
      maximum: 100
    edge_types:
      title: Edge Types
      description: Edge types to filter on
      type: array
      items:
        $ref: ../../datasets/djornl/edge_type.yaml
      default: []
      uniqueItems: true
      examples:
        - ['protein-protein-interaction_high-throughput_AraNet_v2', 'protein-protein-interaction_literature-curation_AraNet_v2']
        - ['phenotype-association_AraGWAS']
        - []
query: |
  LET node_ids = (
    FOR g IN djornl_node_view
        SEARCH ANALYZER(
            PHRASE(g.tair_computational_description, @search_text) OR
            PHRASE(g.tair_short_description, @search_text) OR
            PHRASE(g.mapman_description, @search_text) OR
            PHRASE(g.go_description, @search_text) OR
            PHRASE(g.mapman_name, @search_text) OR
            PHRASE(g.mapman_description, @search_text) OR
            PHRASE(g.pheno_description, @search_text) OR
            PHRASE(g.pheno_pto_name, @search_text) OR
            PHRASE(g.pheno_pto_description, @search_text) OR
            PHRASE(g.user_notes, @search_text),
            'text_en'
        )
        OR PHRASE(g.go_terms, @search_text)
        OR PHRASE(g.transcript, @search_text)
      FOR v, e, p IN 0..@distance ANY g djornl_edge
        OPTIONS {bfs: true, uniqueVertices: "global"}
        FILTER length(@edge_types) == 0 || p.edges[*].edge_type ALL IN @edge_types
        RETURN DISTINCT v._id
  )
  LET edges = (
    FOR edge IN djornl_edge
      FILTER edge._from IN node_ids AND edge._to IN node_ids
        AND (length(@edge_types) == 0 || edge.edge_type IN @edge_types)
      RETURN edge
  )
  LET nodes = (
    FOR node IN djornl_node
        FILTER node._id IN node_ids
        RETURN node
  )
  RETURN {nodes, edges}
